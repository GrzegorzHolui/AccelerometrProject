
Akcelerometr.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000188  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         0000b7b0  08000190  08000190  00010190  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000564  0800b940  0800b940  0001b940  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  0800bea4  0800bea4  000201e0  2**0
                  CONTENTS
  4 .ARM          00000008  0800bea4  0800bea4  0001bea4  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  0800beac  0800beac  000201e0  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  0800beac  0800beac  0001beac  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  0800beb0  0800beb0  0001beb0  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         000001e0  20000000  0800beb4  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          0000025c  200001e0  0800c094  000201e0  2**2
                  ALLOC
 10 ._user_heap_stack 00000604  2000043c  0800c094  0002043c  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  000201e0  2**0
                  CONTENTS, READONLY
 12 .debug_info   00015b8a  00000000  00000000  00020210  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 000028a0  00000000  00000000  00035d9a  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00001318  00000000  00000000  00038640  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_ranges 00001210  00000000  00000000  00039958  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  00028471  00000000  00000000  0003ab68  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   000166f0  00000000  00000000  00062fd9  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    000f7b30  00000000  00000000  000796c9  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000050  00000000  00000000  001711f9  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00006740  00000000  00000000  0017124c  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000190 <__do_global_dtors_aux>:
 8000190:	b510      	push	{r4, lr}
 8000192:	4c05      	ldr	r4, [pc, #20]	; (80001a8 <__do_global_dtors_aux+0x18>)
 8000194:	7823      	ldrb	r3, [r4, #0]
 8000196:	b933      	cbnz	r3, 80001a6 <__do_global_dtors_aux+0x16>
 8000198:	4b04      	ldr	r3, [pc, #16]	; (80001ac <__do_global_dtors_aux+0x1c>)
 800019a:	b113      	cbz	r3, 80001a2 <__do_global_dtors_aux+0x12>
 800019c:	4804      	ldr	r0, [pc, #16]	; (80001b0 <__do_global_dtors_aux+0x20>)
 800019e:	f3af 8000 	nop.w
 80001a2:	2301      	movs	r3, #1
 80001a4:	7023      	strb	r3, [r4, #0]
 80001a6:	bd10      	pop	{r4, pc}
 80001a8:	200001e0 	.word	0x200001e0
 80001ac:	00000000 	.word	0x00000000
 80001b0:	0800b928 	.word	0x0800b928

080001b4 <frame_dummy>:
 80001b4:	b508      	push	{r3, lr}
 80001b6:	4b03      	ldr	r3, [pc, #12]	; (80001c4 <frame_dummy+0x10>)
 80001b8:	b11b      	cbz	r3, 80001c2 <frame_dummy+0xe>
 80001ba:	4903      	ldr	r1, [pc, #12]	; (80001c8 <frame_dummy+0x14>)
 80001bc:	4803      	ldr	r0, [pc, #12]	; (80001cc <frame_dummy+0x18>)
 80001be:	f3af 8000 	nop.w
 80001c2:	bd08      	pop	{r3, pc}
 80001c4:	00000000 	.word	0x00000000
 80001c8:	200001e4 	.word	0x200001e4
 80001cc:	0800b928 	.word	0x0800b928

080001d0 <strlen>:
 80001d0:	4603      	mov	r3, r0
 80001d2:	f813 2b01 	ldrb.w	r2, [r3], #1
 80001d6:	2a00      	cmp	r2, #0
 80001d8:	d1fb      	bne.n	80001d2 <strlen+0x2>
 80001da:	1a18      	subs	r0, r3, r0
 80001dc:	3801      	subs	r0, #1
 80001de:	4770      	bx	lr

080001e0 <memchr>:
 80001e0:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 80001e4:	2a10      	cmp	r2, #16
 80001e6:	db2b      	blt.n	8000240 <memchr+0x60>
 80001e8:	f010 0f07 	tst.w	r0, #7
 80001ec:	d008      	beq.n	8000200 <memchr+0x20>
 80001ee:	f810 3b01 	ldrb.w	r3, [r0], #1
 80001f2:	3a01      	subs	r2, #1
 80001f4:	428b      	cmp	r3, r1
 80001f6:	d02d      	beq.n	8000254 <memchr+0x74>
 80001f8:	f010 0f07 	tst.w	r0, #7
 80001fc:	b342      	cbz	r2, 8000250 <memchr+0x70>
 80001fe:	d1f6      	bne.n	80001ee <memchr+0xe>
 8000200:	b4f0      	push	{r4, r5, r6, r7}
 8000202:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8000206:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800020a:	f022 0407 	bic.w	r4, r2, #7
 800020e:	f07f 0700 	mvns.w	r7, #0
 8000212:	2300      	movs	r3, #0
 8000214:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000218:	3c08      	subs	r4, #8
 800021a:	ea85 0501 	eor.w	r5, r5, r1
 800021e:	ea86 0601 	eor.w	r6, r6, r1
 8000222:	fa85 f547 	uadd8	r5, r5, r7
 8000226:	faa3 f587 	sel	r5, r3, r7
 800022a:	fa86 f647 	uadd8	r6, r6, r7
 800022e:	faa5 f687 	sel	r6, r5, r7
 8000232:	b98e      	cbnz	r6, 8000258 <memchr+0x78>
 8000234:	d1ee      	bne.n	8000214 <memchr+0x34>
 8000236:	bcf0      	pop	{r4, r5, r6, r7}
 8000238:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 800023c:	f002 0207 	and.w	r2, r2, #7
 8000240:	b132      	cbz	r2, 8000250 <memchr+0x70>
 8000242:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000246:	3a01      	subs	r2, #1
 8000248:	ea83 0301 	eor.w	r3, r3, r1
 800024c:	b113      	cbz	r3, 8000254 <memchr+0x74>
 800024e:	d1f8      	bne.n	8000242 <memchr+0x62>
 8000250:	2000      	movs	r0, #0
 8000252:	4770      	bx	lr
 8000254:	3801      	subs	r0, #1
 8000256:	4770      	bx	lr
 8000258:	2d00      	cmp	r5, #0
 800025a:	bf06      	itte	eq
 800025c:	4635      	moveq	r5, r6
 800025e:	3803      	subeq	r0, #3
 8000260:	3807      	subne	r0, #7
 8000262:	f015 0f01 	tst.w	r5, #1
 8000266:	d107      	bne.n	8000278 <memchr+0x98>
 8000268:	3001      	adds	r0, #1
 800026a:	f415 7f80 	tst.w	r5, #256	; 0x100
 800026e:	bf02      	ittt	eq
 8000270:	3001      	addeq	r0, #1
 8000272:	f415 3fc0 	tsteq.w	r5, #98304	; 0x18000
 8000276:	3001      	addeq	r0, #1
 8000278:	bcf0      	pop	{r4, r5, r6, r7}
 800027a:	3801      	subs	r0, #1
 800027c:	4770      	bx	lr
 800027e:	bf00      	nop

08000280 <__aeabi_drsub>:
 8000280:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000
 8000284:	e002      	b.n	800028c <__adddf3>
 8000286:	bf00      	nop

08000288 <__aeabi_dsub>:
 8000288:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000

0800028c <__adddf3>:
 800028c:	b530      	push	{r4, r5, lr}
 800028e:	ea4f 0441 	mov.w	r4, r1, lsl #1
 8000292:	ea4f 0543 	mov.w	r5, r3, lsl #1
 8000296:	ea94 0f05 	teq	r4, r5
 800029a:	bf08      	it	eq
 800029c:	ea90 0f02 	teqeq	r0, r2
 80002a0:	bf1f      	itttt	ne
 80002a2:	ea54 0c00 	orrsne.w	ip, r4, r0
 80002a6:	ea55 0c02 	orrsne.w	ip, r5, r2
 80002aa:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 80002ae:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80002b2:	f000 80e2 	beq.w	800047a <__adddf3+0x1ee>
 80002b6:	ea4f 5454 	mov.w	r4, r4, lsr #21
 80002ba:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 80002be:	bfb8      	it	lt
 80002c0:	426d      	neglt	r5, r5
 80002c2:	dd0c      	ble.n	80002de <__adddf3+0x52>
 80002c4:	442c      	add	r4, r5
 80002c6:	ea80 0202 	eor.w	r2, r0, r2
 80002ca:	ea81 0303 	eor.w	r3, r1, r3
 80002ce:	ea82 0000 	eor.w	r0, r2, r0
 80002d2:	ea83 0101 	eor.w	r1, r3, r1
 80002d6:	ea80 0202 	eor.w	r2, r0, r2
 80002da:	ea81 0303 	eor.w	r3, r1, r3
 80002de:	2d36      	cmp	r5, #54	; 0x36
 80002e0:	bf88      	it	hi
 80002e2:	bd30      	pophi	{r4, r5, pc}
 80002e4:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 80002e8:	ea4f 3101 	mov.w	r1, r1, lsl #12
 80002ec:	f44f 1c80 	mov.w	ip, #1048576	; 0x100000
 80002f0:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 80002f4:	d002      	beq.n	80002fc <__adddf3+0x70>
 80002f6:	4240      	negs	r0, r0
 80002f8:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80002fc:	f013 4f00 	tst.w	r3, #2147483648	; 0x80000000
 8000300:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000304:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 8000308:	d002      	beq.n	8000310 <__adddf3+0x84>
 800030a:	4252      	negs	r2, r2
 800030c:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 8000310:	ea94 0f05 	teq	r4, r5
 8000314:	f000 80a7 	beq.w	8000466 <__adddf3+0x1da>
 8000318:	f1a4 0401 	sub.w	r4, r4, #1
 800031c:	f1d5 0e20 	rsbs	lr, r5, #32
 8000320:	db0d      	blt.n	800033e <__adddf3+0xb2>
 8000322:	fa02 fc0e 	lsl.w	ip, r2, lr
 8000326:	fa22 f205 	lsr.w	r2, r2, r5
 800032a:	1880      	adds	r0, r0, r2
 800032c:	f141 0100 	adc.w	r1, r1, #0
 8000330:	fa03 f20e 	lsl.w	r2, r3, lr
 8000334:	1880      	adds	r0, r0, r2
 8000336:	fa43 f305 	asr.w	r3, r3, r5
 800033a:	4159      	adcs	r1, r3
 800033c:	e00e      	b.n	800035c <__adddf3+0xd0>
 800033e:	f1a5 0520 	sub.w	r5, r5, #32
 8000342:	f10e 0e20 	add.w	lr, lr, #32
 8000346:	2a01      	cmp	r2, #1
 8000348:	fa03 fc0e 	lsl.w	ip, r3, lr
 800034c:	bf28      	it	cs
 800034e:	f04c 0c02 	orrcs.w	ip, ip, #2
 8000352:	fa43 f305 	asr.w	r3, r3, r5
 8000356:	18c0      	adds	r0, r0, r3
 8000358:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 800035c:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8000360:	d507      	bpl.n	8000372 <__adddf3+0xe6>
 8000362:	f04f 0e00 	mov.w	lr, #0
 8000366:	f1dc 0c00 	rsbs	ip, ip, #0
 800036a:	eb7e 0000 	sbcs.w	r0, lr, r0
 800036e:	eb6e 0101 	sbc.w	r1, lr, r1
 8000372:	f5b1 1f80 	cmp.w	r1, #1048576	; 0x100000
 8000376:	d31b      	bcc.n	80003b0 <__adddf3+0x124>
 8000378:	f5b1 1f00 	cmp.w	r1, #2097152	; 0x200000
 800037c:	d30c      	bcc.n	8000398 <__adddf3+0x10c>
 800037e:	0849      	lsrs	r1, r1, #1
 8000380:	ea5f 0030 	movs.w	r0, r0, rrx
 8000384:	ea4f 0c3c 	mov.w	ip, ip, rrx
 8000388:	f104 0401 	add.w	r4, r4, #1
 800038c:	ea4f 5244 	mov.w	r2, r4, lsl #21
 8000390:	f512 0f80 	cmn.w	r2, #4194304	; 0x400000
 8000394:	f080 809a 	bcs.w	80004cc <__adddf3+0x240>
 8000398:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
 800039c:	bf08      	it	eq
 800039e:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 80003a2:	f150 0000 	adcs.w	r0, r0, #0
 80003a6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80003aa:	ea41 0105 	orr.w	r1, r1, r5
 80003ae:	bd30      	pop	{r4, r5, pc}
 80003b0:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 80003b4:	4140      	adcs	r0, r0
 80003b6:	eb41 0101 	adc.w	r1, r1, r1
 80003ba:	3c01      	subs	r4, #1
 80003bc:	bf28      	it	cs
 80003be:	f5b1 1f80 	cmpcs.w	r1, #1048576	; 0x100000
 80003c2:	d2e9      	bcs.n	8000398 <__adddf3+0x10c>
 80003c4:	f091 0f00 	teq	r1, #0
 80003c8:	bf04      	itt	eq
 80003ca:	4601      	moveq	r1, r0
 80003cc:	2000      	moveq	r0, #0
 80003ce:	fab1 f381 	clz	r3, r1
 80003d2:	bf08      	it	eq
 80003d4:	3320      	addeq	r3, #32
 80003d6:	f1a3 030b 	sub.w	r3, r3, #11
 80003da:	f1b3 0220 	subs.w	r2, r3, #32
 80003de:	da0c      	bge.n	80003fa <__adddf3+0x16e>
 80003e0:	320c      	adds	r2, #12
 80003e2:	dd08      	ble.n	80003f6 <__adddf3+0x16a>
 80003e4:	f102 0c14 	add.w	ip, r2, #20
 80003e8:	f1c2 020c 	rsb	r2, r2, #12
 80003ec:	fa01 f00c 	lsl.w	r0, r1, ip
 80003f0:	fa21 f102 	lsr.w	r1, r1, r2
 80003f4:	e00c      	b.n	8000410 <__adddf3+0x184>
 80003f6:	f102 0214 	add.w	r2, r2, #20
 80003fa:	bfd8      	it	le
 80003fc:	f1c2 0c20 	rsble	ip, r2, #32
 8000400:	fa01 f102 	lsl.w	r1, r1, r2
 8000404:	fa20 fc0c 	lsr.w	ip, r0, ip
 8000408:	bfdc      	itt	le
 800040a:	ea41 010c 	orrle.w	r1, r1, ip
 800040e:	4090      	lslle	r0, r2
 8000410:	1ae4      	subs	r4, r4, r3
 8000412:	bfa2      	ittt	ge
 8000414:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 8000418:	4329      	orrge	r1, r5
 800041a:	bd30      	popge	{r4, r5, pc}
 800041c:	ea6f 0404 	mvn.w	r4, r4
 8000420:	3c1f      	subs	r4, #31
 8000422:	da1c      	bge.n	800045e <__adddf3+0x1d2>
 8000424:	340c      	adds	r4, #12
 8000426:	dc0e      	bgt.n	8000446 <__adddf3+0x1ba>
 8000428:	f104 0414 	add.w	r4, r4, #20
 800042c:	f1c4 0220 	rsb	r2, r4, #32
 8000430:	fa20 f004 	lsr.w	r0, r0, r4
 8000434:	fa01 f302 	lsl.w	r3, r1, r2
 8000438:	ea40 0003 	orr.w	r0, r0, r3
 800043c:	fa21 f304 	lsr.w	r3, r1, r4
 8000440:	ea45 0103 	orr.w	r1, r5, r3
 8000444:	bd30      	pop	{r4, r5, pc}
 8000446:	f1c4 040c 	rsb	r4, r4, #12
 800044a:	f1c4 0220 	rsb	r2, r4, #32
 800044e:	fa20 f002 	lsr.w	r0, r0, r2
 8000452:	fa01 f304 	lsl.w	r3, r1, r4
 8000456:	ea40 0003 	orr.w	r0, r0, r3
 800045a:	4629      	mov	r1, r5
 800045c:	bd30      	pop	{r4, r5, pc}
 800045e:	fa21 f004 	lsr.w	r0, r1, r4
 8000462:	4629      	mov	r1, r5
 8000464:	bd30      	pop	{r4, r5, pc}
 8000466:	f094 0f00 	teq	r4, #0
 800046a:	f483 1380 	eor.w	r3, r3, #1048576	; 0x100000
 800046e:	bf06      	itte	eq
 8000470:	f481 1180 	eoreq.w	r1, r1, #1048576	; 0x100000
 8000474:	3401      	addeq	r4, #1
 8000476:	3d01      	subne	r5, #1
 8000478:	e74e      	b.n	8000318 <__adddf3+0x8c>
 800047a:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 800047e:	bf18      	it	ne
 8000480:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 8000484:	d029      	beq.n	80004da <__adddf3+0x24e>
 8000486:	ea94 0f05 	teq	r4, r5
 800048a:	bf08      	it	eq
 800048c:	ea90 0f02 	teqeq	r0, r2
 8000490:	d005      	beq.n	800049e <__adddf3+0x212>
 8000492:	ea54 0c00 	orrs.w	ip, r4, r0
 8000496:	bf04      	itt	eq
 8000498:	4619      	moveq	r1, r3
 800049a:	4610      	moveq	r0, r2
 800049c:	bd30      	pop	{r4, r5, pc}
 800049e:	ea91 0f03 	teq	r1, r3
 80004a2:	bf1e      	ittt	ne
 80004a4:	2100      	movne	r1, #0
 80004a6:	2000      	movne	r0, #0
 80004a8:	bd30      	popne	{r4, r5, pc}
 80004aa:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 80004ae:	d105      	bne.n	80004bc <__adddf3+0x230>
 80004b0:	0040      	lsls	r0, r0, #1
 80004b2:	4149      	adcs	r1, r1
 80004b4:	bf28      	it	cs
 80004b6:	f041 4100 	orrcs.w	r1, r1, #2147483648	; 0x80000000
 80004ba:	bd30      	pop	{r4, r5, pc}
 80004bc:	f514 0480 	adds.w	r4, r4, #4194304	; 0x400000
 80004c0:	bf3c      	itt	cc
 80004c2:	f501 1180 	addcc.w	r1, r1, #1048576	; 0x100000
 80004c6:	bd30      	popcc	{r4, r5, pc}
 80004c8:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 80004cc:	f045 41fe 	orr.w	r1, r5, #2130706432	; 0x7f000000
 80004d0:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 80004d4:	f04f 0000 	mov.w	r0, #0
 80004d8:	bd30      	pop	{r4, r5, pc}
 80004da:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 80004de:	bf1a      	itte	ne
 80004e0:	4619      	movne	r1, r3
 80004e2:	4610      	movne	r0, r2
 80004e4:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 80004e8:	bf1c      	itt	ne
 80004ea:	460b      	movne	r3, r1
 80004ec:	4602      	movne	r2, r0
 80004ee:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 80004f2:	bf06      	itte	eq
 80004f4:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 80004f8:	ea91 0f03 	teqeq	r1, r3
 80004fc:	f441 2100 	orrne.w	r1, r1, #524288	; 0x80000
 8000500:	bd30      	pop	{r4, r5, pc}
 8000502:	bf00      	nop

08000504 <__aeabi_ui2d>:
 8000504:	f090 0f00 	teq	r0, #0
 8000508:	bf04      	itt	eq
 800050a:	2100      	moveq	r1, #0
 800050c:	4770      	bxeq	lr
 800050e:	b530      	push	{r4, r5, lr}
 8000510:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000514:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000518:	f04f 0500 	mov.w	r5, #0
 800051c:	f04f 0100 	mov.w	r1, #0
 8000520:	e750      	b.n	80003c4 <__adddf3+0x138>
 8000522:	bf00      	nop

08000524 <__aeabi_i2d>:
 8000524:	f090 0f00 	teq	r0, #0
 8000528:	bf04      	itt	eq
 800052a:	2100      	moveq	r1, #0
 800052c:	4770      	bxeq	lr
 800052e:	b530      	push	{r4, r5, lr}
 8000530:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000534:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000538:	f010 4500 	ands.w	r5, r0, #2147483648	; 0x80000000
 800053c:	bf48      	it	mi
 800053e:	4240      	negmi	r0, r0
 8000540:	f04f 0100 	mov.w	r1, #0
 8000544:	e73e      	b.n	80003c4 <__adddf3+0x138>
 8000546:	bf00      	nop

08000548 <__aeabi_f2d>:
 8000548:	0042      	lsls	r2, r0, #1
 800054a:	ea4f 01e2 	mov.w	r1, r2, asr #3
 800054e:	ea4f 0131 	mov.w	r1, r1, rrx
 8000552:	ea4f 7002 	mov.w	r0, r2, lsl #28
 8000556:	bf1f      	itttt	ne
 8000558:	f012 437f 	andsne.w	r3, r2, #4278190080	; 0xff000000
 800055c:	f093 4f7f 	teqne	r3, #4278190080	; 0xff000000
 8000560:	f081 5160 	eorne.w	r1, r1, #939524096	; 0x38000000
 8000564:	4770      	bxne	lr
 8000566:	f032 427f 	bics.w	r2, r2, #4278190080	; 0xff000000
 800056a:	bf08      	it	eq
 800056c:	4770      	bxeq	lr
 800056e:	f093 4f7f 	teq	r3, #4278190080	; 0xff000000
 8000572:	bf04      	itt	eq
 8000574:	f441 2100 	orreq.w	r1, r1, #524288	; 0x80000
 8000578:	4770      	bxeq	lr
 800057a:	b530      	push	{r4, r5, lr}
 800057c:	f44f 7460 	mov.w	r4, #896	; 0x380
 8000580:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8000584:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 8000588:	e71c      	b.n	80003c4 <__adddf3+0x138>
 800058a:	bf00      	nop

0800058c <__aeabi_ul2d>:
 800058c:	ea50 0201 	orrs.w	r2, r0, r1
 8000590:	bf08      	it	eq
 8000592:	4770      	bxeq	lr
 8000594:	b530      	push	{r4, r5, lr}
 8000596:	f04f 0500 	mov.w	r5, #0
 800059a:	e00a      	b.n	80005b2 <__aeabi_l2d+0x16>

0800059c <__aeabi_l2d>:
 800059c:	ea50 0201 	orrs.w	r2, r0, r1
 80005a0:	bf08      	it	eq
 80005a2:	4770      	bxeq	lr
 80005a4:	b530      	push	{r4, r5, lr}
 80005a6:	f011 4500 	ands.w	r5, r1, #2147483648	; 0x80000000
 80005aa:	d502      	bpl.n	80005b2 <__aeabi_l2d+0x16>
 80005ac:	4240      	negs	r0, r0
 80005ae:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80005b2:	f44f 6480 	mov.w	r4, #1024	; 0x400
 80005b6:	f104 0432 	add.w	r4, r4, #50	; 0x32
 80005ba:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 80005be:	f43f aed8 	beq.w	8000372 <__adddf3+0xe6>
 80005c2:	f04f 0203 	mov.w	r2, #3
 80005c6:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80005ca:	bf18      	it	ne
 80005cc:	3203      	addne	r2, #3
 80005ce:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80005d2:	bf18      	it	ne
 80005d4:	3203      	addne	r2, #3
 80005d6:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 80005da:	f1c2 0320 	rsb	r3, r2, #32
 80005de:	fa00 fc03 	lsl.w	ip, r0, r3
 80005e2:	fa20 f002 	lsr.w	r0, r0, r2
 80005e6:	fa01 fe03 	lsl.w	lr, r1, r3
 80005ea:	ea40 000e 	orr.w	r0, r0, lr
 80005ee:	fa21 f102 	lsr.w	r1, r1, r2
 80005f2:	4414      	add	r4, r2
 80005f4:	e6bd      	b.n	8000372 <__adddf3+0xe6>
 80005f6:	bf00      	nop

080005f8 <__aeabi_dmul>:
 80005f8:	b570      	push	{r4, r5, r6, lr}
 80005fa:	f04f 0cff 	mov.w	ip, #255	; 0xff
 80005fe:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 8000602:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 8000606:	bf1d      	ittte	ne
 8000608:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 800060c:	ea94 0f0c 	teqne	r4, ip
 8000610:	ea95 0f0c 	teqne	r5, ip
 8000614:	f000 f8de 	bleq	80007d4 <__aeabi_dmul+0x1dc>
 8000618:	442c      	add	r4, r5
 800061a:	ea81 0603 	eor.w	r6, r1, r3
 800061e:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
 8000622:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
 8000626:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
 800062a:	bf18      	it	ne
 800062c:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
 8000630:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000634:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8000638:	d038      	beq.n	80006ac <__aeabi_dmul+0xb4>
 800063a:	fba0 ce02 	umull	ip, lr, r0, r2
 800063e:	f04f 0500 	mov.w	r5, #0
 8000642:	fbe1 e502 	umlal	lr, r5, r1, r2
 8000646:	f006 4200 	and.w	r2, r6, #2147483648	; 0x80000000
 800064a:	fbe0 e503 	umlal	lr, r5, r0, r3
 800064e:	f04f 0600 	mov.w	r6, #0
 8000652:	fbe1 5603 	umlal	r5, r6, r1, r3
 8000656:	f09c 0f00 	teq	ip, #0
 800065a:	bf18      	it	ne
 800065c:	f04e 0e01 	orrne.w	lr, lr, #1
 8000660:	f1a4 04ff 	sub.w	r4, r4, #255	; 0xff
 8000664:	f5b6 7f00 	cmp.w	r6, #512	; 0x200
 8000668:	f564 7440 	sbc.w	r4, r4, #768	; 0x300
 800066c:	d204      	bcs.n	8000678 <__aeabi_dmul+0x80>
 800066e:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
 8000672:	416d      	adcs	r5, r5
 8000674:	eb46 0606 	adc.w	r6, r6, r6
 8000678:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
 800067c:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
 8000680:	ea4f 20c5 	mov.w	r0, r5, lsl #11
 8000684:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
 8000688:	ea4f 2ece 	mov.w	lr, lr, lsl #11
 800068c:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 8000690:	bf88      	it	hi
 8000692:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 8000696:	d81e      	bhi.n	80006d6 <__aeabi_dmul+0xde>
 8000698:	f1be 4f00 	cmp.w	lr, #2147483648	; 0x80000000
 800069c:	bf08      	it	eq
 800069e:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
 80006a2:	f150 0000 	adcs.w	r0, r0, #0
 80006a6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80006aa:	bd70      	pop	{r4, r5, r6, pc}
 80006ac:	f006 4600 	and.w	r6, r6, #2147483648	; 0x80000000
 80006b0:	ea46 0101 	orr.w	r1, r6, r1
 80006b4:	ea40 0002 	orr.w	r0, r0, r2
 80006b8:	ea81 0103 	eor.w	r1, r1, r3
 80006bc:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
 80006c0:	bfc2      	ittt	gt
 80006c2:	ebd4 050c 	rsbsgt	r5, r4, ip
 80006c6:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80006ca:	bd70      	popgt	{r4, r5, r6, pc}
 80006cc:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 80006d0:	f04f 0e00 	mov.w	lr, #0
 80006d4:	3c01      	subs	r4, #1
 80006d6:	f300 80ab 	bgt.w	8000830 <__aeabi_dmul+0x238>
 80006da:	f114 0f36 	cmn.w	r4, #54	; 0x36
 80006de:	bfde      	ittt	le
 80006e0:	2000      	movle	r0, #0
 80006e2:	f001 4100 	andle.w	r1, r1, #2147483648	; 0x80000000
 80006e6:	bd70      	pople	{r4, r5, r6, pc}
 80006e8:	f1c4 0400 	rsb	r4, r4, #0
 80006ec:	3c20      	subs	r4, #32
 80006ee:	da35      	bge.n	800075c <__aeabi_dmul+0x164>
 80006f0:	340c      	adds	r4, #12
 80006f2:	dc1b      	bgt.n	800072c <__aeabi_dmul+0x134>
 80006f4:	f104 0414 	add.w	r4, r4, #20
 80006f8:	f1c4 0520 	rsb	r5, r4, #32
 80006fc:	fa00 f305 	lsl.w	r3, r0, r5
 8000700:	fa20 f004 	lsr.w	r0, r0, r4
 8000704:	fa01 f205 	lsl.w	r2, r1, r5
 8000708:	ea40 0002 	orr.w	r0, r0, r2
 800070c:	f001 4200 	and.w	r2, r1, #2147483648	; 0x80000000
 8000710:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 8000714:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 8000718:	fa21 f604 	lsr.w	r6, r1, r4
 800071c:	eb42 0106 	adc.w	r1, r2, r6
 8000720:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000724:	bf08      	it	eq
 8000726:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800072a:	bd70      	pop	{r4, r5, r6, pc}
 800072c:	f1c4 040c 	rsb	r4, r4, #12
 8000730:	f1c4 0520 	rsb	r5, r4, #32
 8000734:	fa00 f304 	lsl.w	r3, r0, r4
 8000738:	fa20 f005 	lsr.w	r0, r0, r5
 800073c:	fa01 f204 	lsl.w	r2, r1, r4
 8000740:	ea40 0002 	orr.w	r0, r0, r2
 8000744:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000748:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 800074c:	f141 0100 	adc.w	r1, r1, #0
 8000750:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000754:	bf08      	it	eq
 8000756:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800075a:	bd70      	pop	{r4, r5, r6, pc}
 800075c:	f1c4 0520 	rsb	r5, r4, #32
 8000760:	fa00 f205 	lsl.w	r2, r0, r5
 8000764:	ea4e 0e02 	orr.w	lr, lr, r2
 8000768:	fa20 f304 	lsr.w	r3, r0, r4
 800076c:	fa01 f205 	lsl.w	r2, r1, r5
 8000770:	ea43 0302 	orr.w	r3, r3, r2
 8000774:	fa21 f004 	lsr.w	r0, r1, r4
 8000778:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 800077c:	fa21 f204 	lsr.w	r2, r1, r4
 8000780:	ea20 0002 	bic.w	r0, r0, r2
 8000784:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
 8000788:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 800078c:	bf08      	it	eq
 800078e:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 8000792:	bd70      	pop	{r4, r5, r6, pc}
 8000794:	f094 0f00 	teq	r4, #0
 8000798:	d10f      	bne.n	80007ba <__aeabi_dmul+0x1c2>
 800079a:	f001 4600 	and.w	r6, r1, #2147483648	; 0x80000000
 800079e:	0040      	lsls	r0, r0, #1
 80007a0:	eb41 0101 	adc.w	r1, r1, r1
 80007a4:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 80007a8:	bf08      	it	eq
 80007aa:	3c01      	subeq	r4, #1
 80007ac:	d0f7      	beq.n	800079e <__aeabi_dmul+0x1a6>
 80007ae:	ea41 0106 	orr.w	r1, r1, r6
 80007b2:	f095 0f00 	teq	r5, #0
 80007b6:	bf18      	it	ne
 80007b8:	4770      	bxne	lr
 80007ba:	f003 4600 	and.w	r6, r3, #2147483648	; 0x80000000
 80007be:	0052      	lsls	r2, r2, #1
 80007c0:	eb43 0303 	adc.w	r3, r3, r3
 80007c4:	f413 1f80 	tst.w	r3, #1048576	; 0x100000
 80007c8:	bf08      	it	eq
 80007ca:	3d01      	subeq	r5, #1
 80007cc:	d0f7      	beq.n	80007be <__aeabi_dmul+0x1c6>
 80007ce:	ea43 0306 	orr.w	r3, r3, r6
 80007d2:	4770      	bx	lr
 80007d4:	ea94 0f0c 	teq	r4, ip
 80007d8:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80007dc:	bf18      	it	ne
 80007de:	ea95 0f0c 	teqne	r5, ip
 80007e2:	d00c      	beq.n	80007fe <__aeabi_dmul+0x206>
 80007e4:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 80007e8:	bf18      	it	ne
 80007ea:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 80007ee:	d1d1      	bne.n	8000794 <__aeabi_dmul+0x19c>
 80007f0:	ea81 0103 	eor.w	r1, r1, r3
 80007f4:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 80007f8:	f04f 0000 	mov.w	r0, #0
 80007fc:	bd70      	pop	{r4, r5, r6, pc}
 80007fe:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000802:	bf06      	itte	eq
 8000804:	4610      	moveq	r0, r2
 8000806:	4619      	moveq	r1, r3
 8000808:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 800080c:	d019      	beq.n	8000842 <__aeabi_dmul+0x24a>
 800080e:	ea94 0f0c 	teq	r4, ip
 8000812:	d102      	bne.n	800081a <__aeabi_dmul+0x222>
 8000814:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
 8000818:	d113      	bne.n	8000842 <__aeabi_dmul+0x24a>
 800081a:	ea95 0f0c 	teq	r5, ip
 800081e:	d105      	bne.n	800082c <__aeabi_dmul+0x234>
 8000820:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
 8000824:	bf1c      	itt	ne
 8000826:	4610      	movne	r0, r2
 8000828:	4619      	movne	r1, r3
 800082a:	d10a      	bne.n	8000842 <__aeabi_dmul+0x24a>
 800082c:	ea81 0103 	eor.w	r1, r1, r3
 8000830:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000834:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8000838:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 800083c:	f04f 0000 	mov.w	r0, #0
 8000840:	bd70      	pop	{r4, r5, r6, pc}
 8000842:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8000846:	f441 0178 	orr.w	r1, r1, #16252928	; 0xf80000
 800084a:	bd70      	pop	{r4, r5, r6, pc}

0800084c <__aeabi_ddiv>:
 800084c:	b570      	push	{r4, r5, r6, lr}
 800084e:	f04f 0cff 	mov.w	ip, #255	; 0xff
 8000852:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 8000856:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 800085a:	bf1d      	ittte	ne
 800085c:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 8000860:	ea94 0f0c 	teqne	r4, ip
 8000864:	ea95 0f0c 	teqne	r5, ip
 8000868:	f000 f8a7 	bleq	80009ba <__aeabi_ddiv+0x16e>
 800086c:	eba4 0405 	sub.w	r4, r4, r5
 8000870:	ea81 0e03 	eor.w	lr, r1, r3
 8000874:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 8000878:	ea4f 3101 	mov.w	r1, r1, lsl #12
 800087c:	f000 8088 	beq.w	8000990 <__aeabi_ddiv+0x144>
 8000880:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000884:	f04f 5580 	mov.w	r5, #268435456	; 0x10000000
 8000888:	ea45 1313 	orr.w	r3, r5, r3, lsr #4
 800088c:	ea43 6312 	orr.w	r3, r3, r2, lsr #24
 8000890:	ea4f 2202 	mov.w	r2, r2, lsl #8
 8000894:	ea45 1511 	orr.w	r5, r5, r1, lsr #4
 8000898:	ea45 6510 	orr.w	r5, r5, r0, lsr #24
 800089c:	ea4f 2600 	mov.w	r6, r0, lsl #8
 80008a0:	f00e 4100 	and.w	r1, lr, #2147483648	; 0x80000000
 80008a4:	429d      	cmp	r5, r3
 80008a6:	bf08      	it	eq
 80008a8:	4296      	cmpeq	r6, r2
 80008aa:	f144 04fd 	adc.w	r4, r4, #253	; 0xfd
 80008ae:	f504 7440 	add.w	r4, r4, #768	; 0x300
 80008b2:	d202      	bcs.n	80008ba <__aeabi_ddiv+0x6e>
 80008b4:	085b      	lsrs	r3, r3, #1
 80008b6:	ea4f 0232 	mov.w	r2, r2, rrx
 80008ba:	1ab6      	subs	r6, r6, r2
 80008bc:	eb65 0503 	sbc.w	r5, r5, r3
 80008c0:	085b      	lsrs	r3, r3, #1
 80008c2:	ea4f 0232 	mov.w	r2, r2, rrx
 80008c6:	f44f 1080 	mov.w	r0, #1048576	; 0x100000
 80008ca:	f44f 2c00 	mov.w	ip, #524288	; 0x80000
 80008ce:	ebb6 0e02 	subs.w	lr, r6, r2
 80008d2:	eb75 0e03 	sbcs.w	lr, r5, r3
 80008d6:	bf22      	ittt	cs
 80008d8:	1ab6      	subcs	r6, r6, r2
 80008da:	4675      	movcs	r5, lr
 80008dc:	ea40 000c 	orrcs.w	r0, r0, ip
 80008e0:	085b      	lsrs	r3, r3, #1
 80008e2:	ea4f 0232 	mov.w	r2, r2, rrx
 80008e6:	ebb6 0e02 	subs.w	lr, r6, r2
 80008ea:	eb75 0e03 	sbcs.w	lr, r5, r3
 80008ee:	bf22      	ittt	cs
 80008f0:	1ab6      	subcs	r6, r6, r2
 80008f2:	4675      	movcs	r5, lr
 80008f4:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 80008f8:	085b      	lsrs	r3, r3, #1
 80008fa:	ea4f 0232 	mov.w	r2, r2, rrx
 80008fe:	ebb6 0e02 	subs.w	lr, r6, r2
 8000902:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000906:	bf22      	ittt	cs
 8000908:	1ab6      	subcs	r6, r6, r2
 800090a:	4675      	movcs	r5, lr
 800090c:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 8000910:	085b      	lsrs	r3, r3, #1
 8000912:	ea4f 0232 	mov.w	r2, r2, rrx
 8000916:	ebb6 0e02 	subs.w	lr, r6, r2
 800091a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800091e:	bf22      	ittt	cs
 8000920:	1ab6      	subcs	r6, r6, r2
 8000922:	4675      	movcs	r5, lr
 8000924:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 8000928:	ea55 0e06 	orrs.w	lr, r5, r6
 800092c:	d018      	beq.n	8000960 <__aeabi_ddiv+0x114>
 800092e:	ea4f 1505 	mov.w	r5, r5, lsl #4
 8000932:	ea45 7516 	orr.w	r5, r5, r6, lsr #28
 8000936:	ea4f 1606 	mov.w	r6, r6, lsl #4
 800093a:	ea4f 03c3 	mov.w	r3, r3, lsl #3
 800093e:	ea43 7352 	orr.w	r3, r3, r2, lsr #29
 8000942:	ea4f 02c2 	mov.w	r2, r2, lsl #3
 8000946:	ea5f 1c1c 	movs.w	ip, ip, lsr #4
 800094a:	d1c0      	bne.n	80008ce <__aeabi_ddiv+0x82>
 800094c:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000950:	d10b      	bne.n	800096a <__aeabi_ddiv+0x11e>
 8000952:	ea41 0100 	orr.w	r1, r1, r0
 8000956:	f04f 0000 	mov.w	r0, #0
 800095a:	f04f 4c00 	mov.w	ip, #2147483648	; 0x80000000
 800095e:	e7b6      	b.n	80008ce <__aeabi_ddiv+0x82>
 8000960:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000964:	bf04      	itt	eq
 8000966:	4301      	orreq	r1, r0
 8000968:	2000      	moveq	r0, #0
 800096a:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 800096e:	bf88      	it	hi
 8000970:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 8000974:	f63f aeaf 	bhi.w	80006d6 <__aeabi_dmul+0xde>
 8000978:	ebb5 0c03 	subs.w	ip, r5, r3
 800097c:	bf04      	itt	eq
 800097e:	ebb6 0c02 	subseq.w	ip, r6, r2
 8000982:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 8000986:	f150 0000 	adcs.w	r0, r0, #0
 800098a:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 800098e:	bd70      	pop	{r4, r5, r6, pc}
 8000990:	f00e 4e00 	and.w	lr, lr, #2147483648	; 0x80000000
 8000994:	ea4e 3111 	orr.w	r1, lr, r1, lsr #12
 8000998:	eb14 045c 	adds.w	r4, r4, ip, lsr #1
 800099c:	bfc2      	ittt	gt
 800099e:	ebd4 050c 	rsbsgt	r5, r4, ip
 80009a2:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80009a6:	bd70      	popgt	{r4, r5, r6, pc}
 80009a8:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 80009ac:	f04f 0e00 	mov.w	lr, #0
 80009b0:	3c01      	subs	r4, #1
 80009b2:	e690      	b.n	80006d6 <__aeabi_dmul+0xde>
 80009b4:	ea45 0e06 	orr.w	lr, r5, r6
 80009b8:	e68d      	b.n	80006d6 <__aeabi_dmul+0xde>
 80009ba:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80009be:	ea94 0f0c 	teq	r4, ip
 80009c2:	bf08      	it	eq
 80009c4:	ea95 0f0c 	teqeq	r5, ip
 80009c8:	f43f af3b 	beq.w	8000842 <__aeabi_dmul+0x24a>
 80009cc:	ea94 0f0c 	teq	r4, ip
 80009d0:	d10a      	bne.n	80009e8 <__aeabi_ddiv+0x19c>
 80009d2:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 80009d6:	f47f af34 	bne.w	8000842 <__aeabi_dmul+0x24a>
 80009da:	ea95 0f0c 	teq	r5, ip
 80009de:	f47f af25 	bne.w	800082c <__aeabi_dmul+0x234>
 80009e2:	4610      	mov	r0, r2
 80009e4:	4619      	mov	r1, r3
 80009e6:	e72c      	b.n	8000842 <__aeabi_dmul+0x24a>
 80009e8:	ea95 0f0c 	teq	r5, ip
 80009ec:	d106      	bne.n	80009fc <__aeabi_ddiv+0x1b0>
 80009ee:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 80009f2:	f43f aefd 	beq.w	80007f0 <__aeabi_dmul+0x1f8>
 80009f6:	4610      	mov	r0, r2
 80009f8:	4619      	mov	r1, r3
 80009fa:	e722      	b.n	8000842 <__aeabi_dmul+0x24a>
 80009fc:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000a00:	bf18      	it	ne
 8000a02:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 8000a06:	f47f aec5 	bne.w	8000794 <__aeabi_dmul+0x19c>
 8000a0a:	ea50 0441 	orrs.w	r4, r0, r1, lsl #1
 8000a0e:	f47f af0d 	bne.w	800082c <__aeabi_dmul+0x234>
 8000a12:	ea52 0543 	orrs.w	r5, r2, r3, lsl #1
 8000a16:	f47f aeeb 	bne.w	80007f0 <__aeabi_dmul+0x1f8>
 8000a1a:	e712      	b.n	8000842 <__aeabi_dmul+0x24a>

08000a1c <__gedf2>:
 8000a1c:	f04f 3cff 	mov.w	ip, #4294967295
 8000a20:	e006      	b.n	8000a30 <__cmpdf2+0x4>
 8000a22:	bf00      	nop

08000a24 <__ledf2>:
 8000a24:	f04f 0c01 	mov.w	ip, #1
 8000a28:	e002      	b.n	8000a30 <__cmpdf2+0x4>
 8000a2a:	bf00      	nop

08000a2c <__cmpdf2>:
 8000a2c:	f04f 0c01 	mov.w	ip, #1
 8000a30:	f84d cd04 	str.w	ip, [sp, #-4]!
 8000a34:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000a38:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a3c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000a40:	bf18      	it	ne
 8000a42:	ea7f 5c6c 	mvnsne.w	ip, ip, asr #21
 8000a46:	d01b      	beq.n	8000a80 <__cmpdf2+0x54>
 8000a48:	b001      	add	sp, #4
 8000a4a:	ea50 0c41 	orrs.w	ip, r0, r1, lsl #1
 8000a4e:	bf0c      	ite	eq
 8000a50:	ea52 0c43 	orrseq.w	ip, r2, r3, lsl #1
 8000a54:	ea91 0f03 	teqne	r1, r3
 8000a58:	bf02      	ittt	eq
 8000a5a:	ea90 0f02 	teqeq	r0, r2
 8000a5e:	2000      	moveq	r0, #0
 8000a60:	4770      	bxeq	lr
 8000a62:	f110 0f00 	cmn.w	r0, #0
 8000a66:	ea91 0f03 	teq	r1, r3
 8000a6a:	bf58      	it	pl
 8000a6c:	4299      	cmppl	r1, r3
 8000a6e:	bf08      	it	eq
 8000a70:	4290      	cmpeq	r0, r2
 8000a72:	bf2c      	ite	cs
 8000a74:	17d8      	asrcs	r0, r3, #31
 8000a76:	ea6f 70e3 	mvncc.w	r0, r3, asr #31
 8000a7a:	f040 0001 	orr.w	r0, r0, #1
 8000a7e:	4770      	bx	lr
 8000a80:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000a84:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a88:	d102      	bne.n	8000a90 <__cmpdf2+0x64>
 8000a8a:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000a8e:	d107      	bne.n	8000aa0 <__cmpdf2+0x74>
 8000a90:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000a94:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a98:	d1d6      	bne.n	8000a48 <__cmpdf2+0x1c>
 8000a9a:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000a9e:	d0d3      	beq.n	8000a48 <__cmpdf2+0x1c>
 8000aa0:	f85d 0b04 	ldr.w	r0, [sp], #4
 8000aa4:	4770      	bx	lr
 8000aa6:	bf00      	nop

08000aa8 <__aeabi_cdrcmple>:
 8000aa8:	4684      	mov	ip, r0
 8000aaa:	4610      	mov	r0, r2
 8000aac:	4662      	mov	r2, ip
 8000aae:	468c      	mov	ip, r1
 8000ab0:	4619      	mov	r1, r3
 8000ab2:	4663      	mov	r3, ip
 8000ab4:	e000      	b.n	8000ab8 <__aeabi_cdcmpeq>
 8000ab6:	bf00      	nop

08000ab8 <__aeabi_cdcmpeq>:
 8000ab8:	b501      	push	{r0, lr}
 8000aba:	f7ff ffb7 	bl	8000a2c <__cmpdf2>
 8000abe:	2800      	cmp	r0, #0
 8000ac0:	bf48      	it	mi
 8000ac2:	f110 0f00 	cmnmi.w	r0, #0
 8000ac6:	bd01      	pop	{r0, pc}

08000ac8 <__aeabi_dcmpeq>:
 8000ac8:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000acc:	f7ff fff4 	bl	8000ab8 <__aeabi_cdcmpeq>
 8000ad0:	bf0c      	ite	eq
 8000ad2:	2001      	moveq	r0, #1
 8000ad4:	2000      	movne	r0, #0
 8000ad6:	f85d fb08 	ldr.w	pc, [sp], #8
 8000ada:	bf00      	nop

08000adc <__aeabi_dcmplt>:
 8000adc:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000ae0:	f7ff ffea 	bl	8000ab8 <__aeabi_cdcmpeq>
 8000ae4:	bf34      	ite	cc
 8000ae6:	2001      	movcc	r0, #1
 8000ae8:	2000      	movcs	r0, #0
 8000aea:	f85d fb08 	ldr.w	pc, [sp], #8
 8000aee:	bf00      	nop

08000af0 <__aeabi_dcmple>:
 8000af0:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000af4:	f7ff ffe0 	bl	8000ab8 <__aeabi_cdcmpeq>
 8000af8:	bf94      	ite	ls
 8000afa:	2001      	movls	r0, #1
 8000afc:	2000      	movhi	r0, #0
 8000afe:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b02:	bf00      	nop

08000b04 <__aeabi_dcmpge>:
 8000b04:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b08:	f7ff ffce 	bl	8000aa8 <__aeabi_cdrcmple>
 8000b0c:	bf94      	ite	ls
 8000b0e:	2001      	movls	r0, #1
 8000b10:	2000      	movhi	r0, #0
 8000b12:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b16:	bf00      	nop

08000b18 <__aeabi_dcmpgt>:
 8000b18:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b1c:	f7ff ffc4 	bl	8000aa8 <__aeabi_cdrcmple>
 8000b20:	bf34      	ite	cc
 8000b22:	2001      	movcc	r0, #1
 8000b24:	2000      	movcs	r0, #0
 8000b26:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b2a:	bf00      	nop

08000b2c <__aeabi_dcmpun>:
 8000b2c:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000b30:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000b34:	d102      	bne.n	8000b3c <__aeabi_dcmpun+0x10>
 8000b36:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000b3a:	d10a      	bne.n	8000b52 <__aeabi_dcmpun+0x26>
 8000b3c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000b40:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000b44:	d102      	bne.n	8000b4c <__aeabi_dcmpun+0x20>
 8000b46:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000b4a:	d102      	bne.n	8000b52 <__aeabi_dcmpun+0x26>
 8000b4c:	f04f 0000 	mov.w	r0, #0
 8000b50:	4770      	bx	lr
 8000b52:	f04f 0001 	mov.w	r0, #1
 8000b56:	4770      	bx	lr

08000b58 <__aeabi_d2iz>:
 8000b58:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000b5c:	f512 1200 	adds.w	r2, r2, #2097152	; 0x200000
 8000b60:	d215      	bcs.n	8000b8e <__aeabi_d2iz+0x36>
 8000b62:	d511      	bpl.n	8000b88 <__aeabi_d2iz+0x30>
 8000b64:	f46f 7378 	mvn.w	r3, #992	; 0x3e0
 8000b68:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000b6c:	d912      	bls.n	8000b94 <__aeabi_d2iz+0x3c>
 8000b6e:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000b72:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8000b76:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000b7a:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 8000b7e:	fa23 f002 	lsr.w	r0, r3, r2
 8000b82:	bf18      	it	ne
 8000b84:	4240      	negne	r0, r0
 8000b86:	4770      	bx	lr
 8000b88:	f04f 0000 	mov.w	r0, #0
 8000b8c:	4770      	bx	lr
 8000b8e:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000b92:	d105      	bne.n	8000ba0 <__aeabi_d2iz+0x48>
 8000b94:	f011 4000 	ands.w	r0, r1, #2147483648	; 0x80000000
 8000b98:	bf08      	it	eq
 8000b9a:	f06f 4000 	mvneq.w	r0, #2147483648	; 0x80000000
 8000b9e:	4770      	bx	lr
 8000ba0:	f04f 0000 	mov.w	r0, #0
 8000ba4:	4770      	bx	lr
 8000ba6:	bf00      	nop

08000ba8 <__aeabi_d2uiz>:
 8000ba8:	004a      	lsls	r2, r1, #1
 8000baa:	d211      	bcs.n	8000bd0 <__aeabi_d2uiz+0x28>
 8000bac:	f512 1200 	adds.w	r2, r2, #2097152	; 0x200000
 8000bb0:	d211      	bcs.n	8000bd6 <__aeabi_d2uiz+0x2e>
 8000bb2:	d50d      	bpl.n	8000bd0 <__aeabi_d2uiz+0x28>
 8000bb4:	f46f 7378 	mvn.w	r3, #992	; 0x3e0
 8000bb8:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000bbc:	d40e      	bmi.n	8000bdc <__aeabi_d2uiz+0x34>
 8000bbe:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000bc2:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8000bc6:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000bca:	fa23 f002 	lsr.w	r0, r3, r2
 8000bce:	4770      	bx	lr
 8000bd0:	f04f 0000 	mov.w	r0, #0
 8000bd4:	4770      	bx	lr
 8000bd6:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000bda:	d102      	bne.n	8000be2 <__aeabi_d2uiz+0x3a>
 8000bdc:	f04f 30ff 	mov.w	r0, #4294967295
 8000be0:	4770      	bx	lr
 8000be2:	f04f 0000 	mov.w	r0, #0
 8000be6:	4770      	bx	lr

08000be8 <__aeabi_d2f>:
 8000be8:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000bec:	f1b2 43e0 	subs.w	r3, r2, #1879048192	; 0x70000000
 8000bf0:	bf24      	itt	cs
 8000bf2:	f5b3 1c00 	subscs.w	ip, r3, #2097152	; 0x200000
 8000bf6:	f1dc 5cfe 	rsbscs	ip, ip, #532676608	; 0x1fc00000
 8000bfa:	d90d      	bls.n	8000c18 <__aeabi_d2f+0x30>
 8000bfc:	f001 4c00 	and.w	ip, r1, #2147483648	; 0x80000000
 8000c00:	ea4f 02c0 	mov.w	r2, r0, lsl #3
 8000c04:	ea4c 7050 	orr.w	r0, ip, r0, lsr #29
 8000c08:	f1b2 4f00 	cmp.w	r2, #2147483648	; 0x80000000
 8000c0c:	eb40 0083 	adc.w	r0, r0, r3, lsl #2
 8000c10:	bf08      	it	eq
 8000c12:	f020 0001 	biceq.w	r0, r0, #1
 8000c16:	4770      	bx	lr
 8000c18:	f011 4f80 	tst.w	r1, #1073741824	; 0x40000000
 8000c1c:	d121      	bne.n	8000c62 <__aeabi_d2f+0x7a>
 8000c1e:	f113 7238 	adds.w	r2, r3, #48234496	; 0x2e00000
 8000c22:	bfbc      	itt	lt
 8000c24:	f001 4000 	andlt.w	r0, r1, #2147483648	; 0x80000000
 8000c28:	4770      	bxlt	lr
 8000c2a:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000c2e:	ea4f 5252 	mov.w	r2, r2, lsr #21
 8000c32:	f1c2 0218 	rsb	r2, r2, #24
 8000c36:	f1c2 0c20 	rsb	ip, r2, #32
 8000c3a:	fa10 f30c 	lsls.w	r3, r0, ip
 8000c3e:	fa20 f002 	lsr.w	r0, r0, r2
 8000c42:	bf18      	it	ne
 8000c44:	f040 0001 	orrne.w	r0, r0, #1
 8000c48:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000c4c:	ea4f 23d3 	mov.w	r3, r3, lsr #11
 8000c50:	fa03 fc0c 	lsl.w	ip, r3, ip
 8000c54:	ea40 000c 	orr.w	r0, r0, ip
 8000c58:	fa23 f302 	lsr.w	r3, r3, r2
 8000c5c:	ea4f 0343 	mov.w	r3, r3, lsl #1
 8000c60:	e7cc      	b.n	8000bfc <__aeabi_d2f+0x14>
 8000c62:	ea7f 5362 	mvns.w	r3, r2, asr #21
 8000c66:	d107      	bne.n	8000c78 <__aeabi_d2f+0x90>
 8000c68:	ea50 3301 	orrs.w	r3, r0, r1, lsl #12
 8000c6c:	bf1e      	ittt	ne
 8000c6e:	f04f 40fe 	movne.w	r0, #2130706432	; 0x7f000000
 8000c72:	f440 0040 	orrne.w	r0, r0, #12582912	; 0xc00000
 8000c76:	4770      	bxne	lr
 8000c78:	f001 4000 	and.w	r0, r1, #2147483648	; 0x80000000
 8000c7c:	f040 40fe 	orr.w	r0, r0, #2130706432	; 0x7f000000
 8000c80:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 8000c84:	4770      	bx	lr
 8000c86:	bf00      	nop

08000c88 <__aeabi_uldivmod>:
 8000c88:	b953      	cbnz	r3, 8000ca0 <__aeabi_uldivmod+0x18>
 8000c8a:	b94a      	cbnz	r2, 8000ca0 <__aeabi_uldivmod+0x18>
 8000c8c:	2900      	cmp	r1, #0
 8000c8e:	bf08      	it	eq
 8000c90:	2800      	cmpeq	r0, #0
 8000c92:	bf1c      	itt	ne
 8000c94:	f04f 31ff 	movne.w	r1, #4294967295
 8000c98:	f04f 30ff 	movne.w	r0, #4294967295
 8000c9c:	f000 b9aa 	b.w	8000ff4 <__aeabi_idiv0>
 8000ca0:	f1ad 0c08 	sub.w	ip, sp, #8
 8000ca4:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000ca8:	f000 f83c 	bl	8000d24 <__udivmoddi4>
 8000cac:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000cb0:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000cb4:	b004      	add	sp, #16
 8000cb6:	4770      	bx	lr

08000cb8 <__aeabi_d2lz>:
 8000cb8:	b538      	push	{r3, r4, r5, lr}
 8000cba:	2200      	movs	r2, #0
 8000cbc:	2300      	movs	r3, #0
 8000cbe:	4604      	mov	r4, r0
 8000cc0:	460d      	mov	r5, r1
 8000cc2:	f7ff ff0b 	bl	8000adc <__aeabi_dcmplt>
 8000cc6:	b928      	cbnz	r0, 8000cd4 <__aeabi_d2lz+0x1c>
 8000cc8:	4620      	mov	r0, r4
 8000cca:	4629      	mov	r1, r5
 8000ccc:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8000cd0:	f000 b80a 	b.w	8000ce8 <__aeabi_d2ulz>
 8000cd4:	4620      	mov	r0, r4
 8000cd6:	f105 4100 	add.w	r1, r5, #2147483648	; 0x80000000
 8000cda:	f000 f805 	bl	8000ce8 <__aeabi_d2ulz>
 8000cde:	4240      	negs	r0, r0
 8000ce0:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000ce4:	bd38      	pop	{r3, r4, r5, pc}
 8000ce6:	bf00      	nop

08000ce8 <__aeabi_d2ulz>:
 8000ce8:	b5d0      	push	{r4, r6, r7, lr}
 8000cea:	4b0c      	ldr	r3, [pc, #48]	; (8000d1c <__aeabi_d2ulz+0x34>)
 8000cec:	2200      	movs	r2, #0
 8000cee:	4606      	mov	r6, r0
 8000cf0:	460f      	mov	r7, r1
 8000cf2:	f7ff fc81 	bl	80005f8 <__aeabi_dmul>
 8000cf6:	f7ff ff57 	bl	8000ba8 <__aeabi_d2uiz>
 8000cfa:	4604      	mov	r4, r0
 8000cfc:	f7ff fc02 	bl	8000504 <__aeabi_ui2d>
 8000d00:	4b07      	ldr	r3, [pc, #28]	; (8000d20 <__aeabi_d2ulz+0x38>)
 8000d02:	2200      	movs	r2, #0
 8000d04:	f7ff fc78 	bl	80005f8 <__aeabi_dmul>
 8000d08:	4602      	mov	r2, r0
 8000d0a:	460b      	mov	r3, r1
 8000d0c:	4630      	mov	r0, r6
 8000d0e:	4639      	mov	r1, r7
 8000d10:	f7ff faba 	bl	8000288 <__aeabi_dsub>
 8000d14:	f7ff ff48 	bl	8000ba8 <__aeabi_d2uiz>
 8000d18:	4621      	mov	r1, r4
 8000d1a:	bdd0      	pop	{r4, r6, r7, pc}
 8000d1c:	3df00000 	.word	0x3df00000
 8000d20:	41f00000 	.word	0x41f00000

08000d24 <__udivmoddi4>:
 8000d24:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000d28:	9d08      	ldr	r5, [sp, #32]
 8000d2a:	4604      	mov	r4, r0
 8000d2c:	468e      	mov	lr, r1
 8000d2e:	2b00      	cmp	r3, #0
 8000d30:	d14d      	bne.n	8000dce <__udivmoddi4+0xaa>
 8000d32:	428a      	cmp	r2, r1
 8000d34:	4694      	mov	ip, r2
 8000d36:	d969      	bls.n	8000e0c <__udivmoddi4+0xe8>
 8000d38:	fab2 f282 	clz	r2, r2
 8000d3c:	b152      	cbz	r2, 8000d54 <__udivmoddi4+0x30>
 8000d3e:	fa01 f302 	lsl.w	r3, r1, r2
 8000d42:	f1c2 0120 	rsb	r1, r2, #32
 8000d46:	fa20 f101 	lsr.w	r1, r0, r1
 8000d4a:	fa0c fc02 	lsl.w	ip, ip, r2
 8000d4e:	ea41 0e03 	orr.w	lr, r1, r3
 8000d52:	4094      	lsls	r4, r2
 8000d54:	ea4f 481c 	mov.w	r8, ip, lsr #16
 8000d58:	0c21      	lsrs	r1, r4, #16
 8000d5a:	fbbe f6f8 	udiv	r6, lr, r8
 8000d5e:	fa1f f78c 	uxth.w	r7, ip
 8000d62:	fb08 e316 	mls	r3, r8, r6, lr
 8000d66:	ea41 4303 	orr.w	r3, r1, r3, lsl #16
 8000d6a:	fb06 f107 	mul.w	r1, r6, r7
 8000d6e:	4299      	cmp	r1, r3
 8000d70:	d90a      	bls.n	8000d88 <__udivmoddi4+0x64>
 8000d72:	eb1c 0303 	adds.w	r3, ip, r3
 8000d76:	f106 30ff 	add.w	r0, r6, #4294967295
 8000d7a:	f080 811f 	bcs.w	8000fbc <__udivmoddi4+0x298>
 8000d7e:	4299      	cmp	r1, r3
 8000d80:	f240 811c 	bls.w	8000fbc <__udivmoddi4+0x298>
 8000d84:	3e02      	subs	r6, #2
 8000d86:	4463      	add	r3, ip
 8000d88:	1a5b      	subs	r3, r3, r1
 8000d8a:	b2a4      	uxth	r4, r4
 8000d8c:	fbb3 f0f8 	udiv	r0, r3, r8
 8000d90:	fb08 3310 	mls	r3, r8, r0, r3
 8000d94:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 8000d98:	fb00 f707 	mul.w	r7, r0, r7
 8000d9c:	42a7      	cmp	r7, r4
 8000d9e:	d90a      	bls.n	8000db6 <__udivmoddi4+0x92>
 8000da0:	eb1c 0404 	adds.w	r4, ip, r4
 8000da4:	f100 33ff 	add.w	r3, r0, #4294967295
 8000da8:	f080 810a 	bcs.w	8000fc0 <__udivmoddi4+0x29c>
 8000dac:	42a7      	cmp	r7, r4
 8000dae:	f240 8107 	bls.w	8000fc0 <__udivmoddi4+0x29c>
 8000db2:	4464      	add	r4, ip
 8000db4:	3802      	subs	r0, #2
 8000db6:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 8000dba:	1be4      	subs	r4, r4, r7
 8000dbc:	2600      	movs	r6, #0
 8000dbe:	b11d      	cbz	r5, 8000dc8 <__udivmoddi4+0xa4>
 8000dc0:	40d4      	lsrs	r4, r2
 8000dc2:	2300      	movs	r3, #0
 8000dc4:	e9c5 4300 	strd	r4, r3, [r5]
 8000dc8:	4631      	mov	r1, r6
 8000dca:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000dce:	428b      	cmp	r3, r1
 8000dd0:	d909      	bls.n	8000de6 <__udivmoddi4+0xc2>
 8000dd2:	2d00      	cmp	r5, #0
 8000dd4:	f000 80ef 	beq.w	8000fb6 <__udivmoddi4+0x292>
 8000dd8:	2600      	movs	r6, #0
 8000dda:	e9c5 0100 	strd	r0, r1, [r5]
 8000dde:	4630      	mov	r0, r6
 8000de0:	4631      	mov	r1, r6
 8000de2:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000de6:	fab3 f683 	clz	r6, r3
 8000dea:	2e00      	cmp	r6, #0
 8000dec:	d14a      	bne.n	8000e84 <__udivmoddi4+0x160>
 8000dee:	428b      	cmp	r3, r1
 8000df0:	d302      	bcc.n	8000df8 <__udivmoddi4+0xd4>
 8000df2:	4282      	cmp	r2, r0
 8000df4:	f200 80f9 	bhi.w	8000fea <__udivmoddi4+0x2c6>
 8000df8:	1a84      	subs	r4, r0, r2
 8000dfa:	eb61 0303 	sbc.w	r3, r1, r3
 8000dfe:	2001      	movs	r0, #1
 8000e00:	469e      	mov	lr, r3
 8000e02:	2d00      	cmp	r5, #0
 8000e04:	d0e0      	beq.n	8000dc8 <__udivmoddi4+0xa4>
 8000e06:	e9c5 4e00 	strd	r4, lr, [r5]
 8000e0a:	e7dd      	b.n	8000dc8 <__udivmoddi4+0xa4>
 8000e0c:	b902      	cbnz	r2, 8000e10 <__udivmoddi4+0xec>
 8000e0e:	deff      	udf	#255	; 0xff
 8000e10:	fab2 f282 	clz	r2, r2
 8000e14:	2a00      	cmp	r2, #0
 8000e16:	f040 8092 	bne.w	8000f3e <__udivmoddi4+0x21a>
 8000e1a:	eba1 010c 	sub.w	r1, r1, ip
 8000e1e:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000e22:	fa1f fe8c 	uxth.w	lr, ip
 8000e26:	2601      	movs	r6, #1
 8000e28:	0c20      	lsrs	r0, r4, #16
 8000e2a:	fbb1 f3f7 	udiv	r3, r1, r7
 8000e2e:	fb07 1113 	mls	r1, r7, r3, r1
 8000e32:	ea40 4101 	orr.w	r1, r0, r1, lsl #16
 8000e36:	fb0e f003 	mul.w	r0, lr, r3
 8000e3a:	4288      	cmp	r0, r1
 8000e3c:	d908      	bls.n	8000e50 <__udivmoddi4+0x12c>
 8000e3e:	eb1c 0101 	adds.w	r1, ip, r1
 8000e42:	f103 38ff 	add.w	r8, r3, #4294967295
 8000e46:	d202      	bcs.n	8000e4e <__udivmoddi4+0x12a>
 8000e48:	4288      	cmp	r0, r1
 8000e4a:	f200 80cb 	bhi.w	8000fe4 <__udivmoddi4+0x2c0>
 8000e4e:	4643      	mov	r3, r8
 8000e50:	1a09      	subs	r1, r1, r0
 8000e52:	b2a4      	uxth	r4, r4
 8000e54:	fbb1 f0f7 	udiv	r0, r1, r7
 8000e58:	fb07 1110 	mls	r1, r7, r0, r1
 8000e5c:	ea44 4401 	orr.w	r4, r4, r1, lsl #16
 8000e60:	fb0e fe00 	mul.w	lr, lr, r0
 8000e64:	45a6      	cmp	lr, r4
 8000e66:	d908      	bls.n	8000e7a <__udivmoddi4+0x156>
 8000e68:	eb1c 0404 	adds.w	r4, ip, r4
 8000e6c:	f100 31ff 	add.w	r1, r0, #4294967295
 8000e70:	d202      	bcs.n	8000e78 <__udivmoddi4+0x154>
 8000e72:	45a6      	cmp	lr, r4
 8000e74:	f200 80bb 	bhi.w	8000fee <__udivmoddi4+0x2ca>
 8000e78:	4608      	mov	r0, r1
 8000e7a:	eba4 040e 	sub.w	r4, r4, lr
 8000e7e:	ea40 4003 	orr.w	r0, r0, r3, lsl #16
 8000e82:	e79c      	b.n	8000dbe <__udivmoddi4+0x9a>
 8000e84:	f1c6 0720 	rsb	r7, r6, #32
 8000e88:	40b3      	lsls	r3, r6
 8000e8a:	fa22 fc07 	lsr.w	ip, r2, r7
 8000e8e:	ea4c 0c03 	orr.w	ip, ip, r3
 8000e92:	fa20 f407 	lsr.w	r4, r0, r7
 8000e96:	fa01 f306 	lsl.w	r3, r1, r6
 8000e9a:	431c      	orrs	r4, r3
 8000e9c:	40f9      	lsrs	r1, r7
 8000e9e:	ea4f 491c 	mov.w	r9, ip, lsr #16
 8000ea2:	fa00 f306 	lsl.w	r3, r0, r6
 8000ea6:	fbb1 f8f9 	udiv	r8, r1, r9
 8000eaa:	0c20      	lsrs	r0, r4, #16
 8000eac:	fa1f fe8c 	uxth.w	lr, ip
 8000eb0:	fb09 1118 	mls	r1, r9, r8, r1
 8000eb4:	ea40 4101 	orr.w	r1, r0, r1, lsl #16
 8000eb8:	fb08 f00e 	mul.w	r0, r8, lr
 8000ebc:	4288      	cmp	r0, r1
 8000ebe:	fa02 f206 	lsl.w	r2, r2, r6
 8000ec2:	d90b      	bls.n	8000edc <__udivmoddi4+0x1b8>
 8000ec4:	eb1c 0101 	adds.w	r1, ip, r1
 8000ec8:	f108 3aff 	add.w	sl, r8, #4294967295
 8000ecc:	f080 8088 	bcs.w	8000fe0 <__udivmoddi4+0x2bc>
 8000ed0:	4288      	cmp	r0, r1
 8000ed2:	f240 8085 	bls.w	8000fe0 <__udivmoddi4+0x2bc>
 8000ed6:	f1a8 0802 	sub.w	r8, r8, #2
 8000eda:	4461      	add	r1, ip
 8000edc:	1a09      	subs	r1, r1, r0
 8000ede:	b2a4      	uxth	r4, r4
 8000ee0:	fbb1 f0f9 	udiv	r0, r1, r9
 8000ee4:	fb09 1110 	mls	r1, r9, r0, r1
 8000ee8:	ea44 4101 	orr.w	r1, r4, r1, lsl #16
 8000eec:	fb00 fe0e 	mul.w	lr, r0, lr
 8000ef0:	458e      	cmp	lr, r1
 8000ef2:	d908      	bls.n	8000f06 <__udivmoddi4+0x1e2>
 8000ef4:	eb1c 0101 	adds.w	r1, ip, r1
 8000ef8:	f100 34ff 	add.w	r4, r0, #4294967295
 8000efc:	d26c      	bcs.n	8000fd8 <__udivmoddi4+0x2b4>
 8000efe:	458e      	cmp	lr, r1
 8000f00:	d96a      	bls.n	8000fd8 <__udivmoddi4+0x2b4>
 8000f02:	3802      	subs	r0, #2
 8000f04:	4461      	add	r1, ip
 8000f06:	ea40 4008 	orr.w	r0, r0, r8, lsl #16
 8000f0a:	fba0 9402 	umull	r9, r4, r0, r2
 8000f0e:	eba1 010e 	sub.w	r1, r1, lr
 8000f12:	42a1      	cmp	r1, r4
 8000f14:	46c8      	mov	r8, r9
 8000f16:	46a6      	mov	lr, r4
 8000f18:	d356      	bcc.n	8000fc8 <__udivmoddi4+0x2a4>
 8000f1a:	d053      	beq.n	8000fc4 <__udivmoddi4+0x2a0>
 8000f1c:	b15d      	cbz	r5, 8000f36 <__udivmoddi4+0x212>
 8000f1e:	ebb3 0208 	subs.w	r2, r3, r8
 8000f22:	eb61 010e 	sbc.w	r1, r1, lr
 8000f26:	fa01 f707 	lsl.w	r7, r1, r7
 8000f2a:	fa22 f306 	lsr.w	r3, r2, r6
 8000f2e:	40f1      	lsrs	r1, r6
 8000f30:	431f      	orrs	r7, r3
 8000f32:	e9c5 7100 	strd	r7, r1, [r5]
 8000f36:	2600      	movs	r6, #0
 8000f38:	4631      	mov	r1, r6
 8000f3a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000f3e:	f1c2 0320 	rsb	r3, r2, #32
 8000f42:	40d8      	lsrs	r0, r3
 8000f44:	fa0c fc02 	lsl.w	ip, ip, r2
 8000f48:	fa21 f303 	lsr.w	r3, r1, r3
 8000f4c:	4091      	lsls	r1, r2
 8000f4e:	4301      	orrs	r1, r0
 8000f50:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000f54:	fa1f fe8c 	uxth.w	lr, ip
 8000f58:	fbb3 f0f7 	udiv	r0, r3, r7
 8000f5c:	fb07 3610 	mls	r6, r7, r0, r3
 8000f60:	0c0b      	lsrs	r3, r1, #16
 8000f62:	ea43 4306 	orr.w	r3, r3, r6, lsl #16
 8000f66:	fb00 f60e 	mul.w	r6, r0, lr
 8000f6a:	429e      	cmp	r6, r3
 8000f6c:	fa04 f402 	lsl.w	r4, r4, r2
 8000f70:	d908      	bls.n	8000f84 <__udivmoddi4+0x260>
 8000f72:	eb1c 0303 	adds.w	r3, ip, r3
 8000f76:	f100 38ff 	add.w	r8, r0, #4294967295
 8000f7a:	d22f      	bcs.n	8000fdc <__udivmoddi4+0x2b8>
 8000f7c:	429e      	cmp	r6, r3
 8000f7e:	d92d      	bls.n	8000fdc <__udivmoddi4+0x2b8>
 8000f80:	3802      	subs	r0, #2
 8000f82:	4463      	add	r3, ip
 8000f84:	1b9b      	subs	r3, r3, r6
 8000f86:	b289      	uxth	r1, r1
 8000f88:	fbb3 f6f7 	udiv	r6, r3, r7
 8000f8c:	fb07 3316 	mls	r3, r7, r6, r3
 8000f90:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 8000f94:	fb06 f30e 	mul.w	r3, r6, lr
 8000f98:	428b      	cmp	r3, r1
 8000f9a:	d908      	bls.n	8000fae <__udivmoddi4+0x28a>
 8000f9c:	eb1c 0101 	adds.w	r1, ip, r1
 8000fa0:	f106 38ff 	add.w	r8, r6, #4294967295
 8000fa4:	d216      	bcs.n	8000fd4 <__udivmoddi4+0x2b0>
 8000fa6:	428b      	cmp	r3, r1
 8000fa8:	d914      	bls.n	8000fd4 <__udivmoddi4+0x2b0>
 8000faa:	3e02      	subs	r6, #2
 8000fac:	4461      	add	r1, ip
 8000fae:	1ac9      	subs	r1, r1, r3
 8000fb0:	ea46 4600 	orr.w	r6, r6, r0, lsl #16
 8000fb4:	e738      	b.n	8000e28 <__udivmoddi4+0x104>
 8000fb6:	462e      	mov	r6, r5
 8000fb8:	4628      	mov	r0, r5
 8000fba:	e705      	b.n	8000dc8 <__udivmoddi4+0xa4>
 8000fbc:	4606      	mov	r6, r0
 8000fbe:	e6e3      	b.n	8000d88 <__udivmoddi4+0x64>
 8000fc0:	4618      	mov	r0, r3
 8000fc2:	e6f8      	b.n	8000db6 <__udivmoddi4+0x92>
 8000fc4:	454b      	cmp	r3, r9
 8000fc6:	d2a9      	bcs.n	8000f1c <__udivmoddi4+0x1f8>
 8000fc8:	ebb9 0802 	subs.w	r8, r9, r2
 8000fcc:	eb64 0e0c 	sbc.w	lr, r4, ip
 8000fd0:	3801      	subs	r0, #1
 8000fd2:	e7a3      	b.n	8000f1c <__udivmoddi4+0x1f8>
 8000fd4:	4646      	mov	r6, r8
 8000fd6:	e7ea      	b.n	8000fae <__udivmoddi4+0x28a>
 8000fd8:	4620      	mov	r0, r4
 8000fda:	e794      	b.n	8000f06 <__udivmoddi4+0x1e2>
 8000fdc:	4640      	mov	r0, r8
 8000fde:	e7d1      	b.n	8000f84 <__udivmoddi4+0x260>
 8000fe0:	46d0      	mov	r8, sl
 8000fe2:	e77b      	b.n	8000edc <__udivmoddi4+0x1b8>
 8000fe4:	3b02      	subs	r3, #2
 8000fe6:	4461      	add	r1, ip
 8000fe8:	e732      	b.n	8000e50 <__udivmoddi4+0x12c>
 8000fea:	4630      	mov	r0, r6
 8000fec:	e709      	b.n	8000e02 <__udivmoddi4+0xde>
 8000fee:	4464      	add	r4, ip
 8000ff0:	3802      	subs	r0, #2
 8000ff2:	e742      	b.n	8000e7a <__udivmoddi4+0x156>

08000ff4 <__aeabi_idiv0>:
 8000ff4:	4770      	bx	lr
 8000ff6:	bf00      	nop

08000ff8 <HAL_TIM_PeriodElapsedCallback>:
//numbers in [m/s^2]
float accelerationXf;
float accelerationYf;
float accelerationZf;

void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim) {
 8000ff8:	b580      	push	{r7, lr}
 8000ffa:	b084      	sub	sp, #16
 8000ffc:	af02      	add	r7, sp, #8
 8000ffe:	6078      	str	r0, [r7, #4]
	//13 hz
	if (htim->Instance == TIM16) {
 8001000:	687b      	ldr	r3, [r7, #4]
 8001002:	681b      	ldr	r3, [r3, #0]
 8001004:	4a0f      	ldr	r2, [pc, #60]	; (8001044 <HAL_TIM_PeriodElapsedCallback+0x4c>)
 8001006:	4293      	cmp	r3, r2
 8001008:	d104      	bne.n	8001014 <HAL_TIM_PeriodElapsedCallback+0x1c>
		HAL_GPIO_TogglePin(LD2_GPIO_Port, LD2_Pin);
 800100a:	2120      	movs	r1, #32
 800100c:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8001010:	f001 f9ec 	bl	80023ec <HAL_GPIO_TogglePin>
	}

	// 11hz
	if (htim->Instance == TIM17) {
 8001014:	687b      	ldr	r3, [r7, #4]
 8001016:	681b      	ldr	r3, [r3, #0]
 8001018:	4a0b      	ldr	r2, [pc, #44]	; (8001048 <HAL_TIM_PeriodElapsedCallback+0x50>)
 800101a:	4293      	cmp	r3, r2
 800101c:	d10e      	bne.n	800103c <HAL_TIM_PeriodElapsedCallback+0x44>
		if (flag) {
 800101e:	4b0b      	ldr	r3, [pc, #44]	; (800104c <HAL_TIM_PeriodElapsedCallback+0x54>)
 8001020:	781b      	ldrb	r3, [r3, #0]
 8001022:	b2db      	uxtb	r3, r3
 8001024:	2b00      	cmp	r3, #0
 8001026:	d009      	beq.n	800103c <HAL_TIM_PeriodElapsedCallback+0x44>
			HAL_I2C_Mem_Read_IT(&hi2c1, ADDRESS, LSM6DSL_OUTX_L_XL, 1, buffer,
 8001028:	2306      	movs	r3, #6
 800102a:	9301      	str	r3, [sp, #4]
 800102c:	4b08      	ldr	r3, [pc, #32]	; (8001050 <HAL_TIM_PeriodElapsedCallback+0x58>)
 800102e:	9300      	str	r3, [sp, #0]
 8001030:	2301      	movs	r3, #1
 8001032:	2228      	movs	r2, #40	; 0x28
 8001034:	21d6      	movs	r1, #214	; 0xd6
 8001036:	4807      	ldr	r0, [pc, #28]	; (8001054 <HAL_TIM_PeriodElapsedCallback+0x5c>)
 8001038:	f001 fbae 	bl	8002798 <HAL_I2C_Mem_Read_IT>
					sizeof(buffer));

		}
	}
}
 800103c:	bf00      	nop
 800103e:	3708      	adds	r7, #8
 8001040:	46bd      	mov	sp, r7
 8001042:	bd80      	pop	{r7, pc}
 8001044:	40014400 	.word	0x40014400
 8001048:	40014800 	.word	0x40014800
 800104c:	20000408 	.word	0x20000408
 8001050:	2000040c 	.word	0x2000040c
 8001054:	200001fc 	.word	0x200001fc

08001058 <HAL_GPIO_EXTI_Callback>:

void HAL_GPIO_EXTI_Callback(uint16_t GPIO_Pin) {
 8001058:	b580      	push	{r7, lr}
 800105a:	b084      	sub	sp, #16
 800105c:	af02      	add	r7, sp, #8
 800105e:	4603      	mov	r3, r0
 8001060:	80fb      	strh	r3, [r7, #6]
	if (GPIO_Pin == SENSOR_INT_Pin) {
 8001062:	88fb      	ldrh	r3, [r7, #6]
 8001064:	2b20      	cmp	r3, #32
 8001066:	d10c      	bne.n	8001082 <HAL_GPIO_EXTI_Callback+0x2a>
		HAL_I2C_Mem_Read_IT(&hi2c1, ADDRESS, LSM6DSL_OUTX_L_XL, 1, buffer, 6);
 8001068:	2306      	movs	r3, #6
 800106a:	9301      	str	r3, [sp, #4]
 800106c:	4b07      	ldr	r3, [pc, #28]	; (800108c <HAL_GPIO_EXTI_Callback+0x34>)
 800106e:	9300      	str	r3, [sp, #0]
 8001070:	2301      	movs	r3, #1
 8001072:	2228      	movs	r2, #40	; 0x28
 8001074:	21d6      	movs	r1, #214	; 0xd6
 8001076:	4806      	ldr	r0, [pc, #24]	; (8001090 <HAL_GPIO_EXTI_Callback+0x38>)
 8001078:	f001 fb8e 	bl	8002798 <HAL_I2C_Mem_Read_IT>
		flag = 1;
 800107c:	4b05      	ldr	r3, [pc, #20]	; (8001094 <HAL_GPIO_EXTI_Callback+0x3c>)
 800107e:	2201      	movs	r2, #1
 8001080:	701a      	strb	r2, [r3, #0]
	}
}
 8001082:	bf00      	nop
 8001084:	3708      	adds	r7, #8
 8001086:	46bd      	mov	sp, r7
 8001088:	bd80      	pop	{r7, pc}
 800108a:	bf00      	nop
 800108c:	2000040c 	.word	0x2000040c
 8001090:	200001fc 	.word	0x200001fc
 8001094:	20000408 	.word	0x20000408

08001098 <HAL_I2C_MemRxCpltCallback>:

void HAL_I2C_MemRxCpltCallback(I2C_HandleTypeDef *hi2c) {
 8001098:	b580      	push	{r7, lr}
 800109a:	b084      	sub	sp, #16
 800109c:	af02      	add	r7, sp, #8
 800109e:	6078      	str	r0, [r7, #4]
	if (hi2c->Instance == I2C1) {
 80010a0:	687b      	ldr	r3, [r7, #4]
 80010a2:	681b      	ldr	r3, [r3, #0]
 80010a4:	4a76      	ldr	r2, [pc, #472]	; (8001280 <HAL_I2C_MemRxCpltCallback+0x1e8>)
 80010a6:	4293      	cmp	r3, r2
 80010a8:	f040 80de 	bne.w	8001268 <HAL_I2C_MemRxCpltCallback+0x1d0>
		accelerationX = (((int16_t) buffer[1]) << 8 | buffer[0]);
 80010ac:	4b75      	ldr	r3, [pc, #468]	; (8001284 <HAL_I2C_MemRxCpltCallback+0x1ec>)
 80010ae:	785b      	ldrb	r3, [r3, #1]
 80010b0:	021b      	lsls	r3, r3, #8
 80010b2:	b21a      	sxth	r2, r3
 80010b4:	4b73      	ldr	r3, [pc, #460]	; (8001284 <HAL_I2C_MemRxCpltCallback+0x1ec>)
 80010b6:	781b      	ldrb	r3, [r3, #0]
 80010b8:	b21b      	sxth	r3, r3
 80010ba:	4313      	orrs	r3, r2
 80010bc:	b21a      	sxth	r2, r3
 80010be:	4b72      	ldr	r3, [pc, #456]	; (8001288 <HAL_I2C_MemRxCpltCallback+0x1f0>)
 80010c0:	801a      	strh	r2, [r3, #0]
		accelerationY = (((int16_t) buffer[3]) << 8 | buffer[2]);
 80010c2:	4b70      	ldr	r3, [pc, #448]	; (8001284 <HAL_I2C_MemRxCpltCallback+0x1ec>)
 80010c4:	78db      	ldrb	r3, [r3, #3]
 80010c6:	021b      	lsls	r3, r3, #8
 80010c8:	b21a      	sxth	r2, r3
 80010ca:	4b6e      	ldr	r3, [pc, #440]	; (8001284 <HAL_I2C_MemRxCpltCallback+0x1ec>)
 80010cc:	789b      	ldrb	r3, [r3, #2]
 80010ce:	b21b      	sxth	r3, r3
 80010d0:	4313      	orrs	r3, r2
 80010d2:	b21a      	sxth	r2, r3
 80010d4:	4b6d      	ldr	r3, [pc, #436]	; (800128c <HAL_I2C_MemRxCpltCallback+0x1f4>)
 80010d6:	801a      	strh	r2, [r3, #0]
		accelerationZ = (((int16_t) buffer[5]) << 8 | buffer[4]);
 80010d8:	4b6a      	ldr	r3, [pc, #424]	; (8001284 <HAL_I2C_MemRxCpltCallback+0x1ec>)
 80010da:	795b      	ldrb	r3, [r3, #5]
 80010dc:	021b      	lsls	r3, r3, #8
 80010de:	b21a      	sxth	r2, r3
 80010e0:	4b68      	ldr	r3, [pc, #416]	; (8001284 <HAL_I2C_MemRxCpltCallback+0x1ec>)
 80010e2:	791b      	ldrb	r3, [r3, #4]
 80010e4:	b21b      	sxth	r3, r3
 80010e6:	4313      	orrs	r3, r2
 80010e8:	b21a      	sxth	r2, r3
 80010ea:	4b69      	ldr	r3, [pc, #420]	; (8001290 <HAL_I2C_MemRxCpltCallback+0x1f8>)
 80010ec:	801a      	strh	r2, [r3, #0]

		accelerationXf = 0.061 * accelerationX / 1000 * 9.81;
 80010ee:	4b66      	ldr	r3, [pc, #408]	; (8001288 <HAL_I2C_MemRxCpltCallback+0x1f0>)
 80010f0:	f9b3 3000 	ldrsh.w	r3, [r3]
 80010f4:	4618      	mov	r0, r3
 80010f6:	f7ff fa15 	bl	8000524 <__aeabi_i2d>
 80010fa:	a35d      	add	r3, pc, #372	; (adr r3, 8001270 <HAL_I2C_MemRxCpltCallback+0x1d8>)
 80010fc:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001100:	f7ff fa7a 	bl	80005f8 <__aeabi_dmul>
 8001104:	4602      	mov	r2, r0
 8001106:	460b      	mov	r3, r1
 8001108:	4610      	mov	r0, r2
 800110a:	4619      	mov	r1, r3
 800110c:	f04f 0200 	mov.w	r2, #0
 8001110:	4b60      	ldr	r3, [pc, #384]	; (8001294 <HAL_I2C_MemRxCpltCallback+0x1fc>)
 8001112:	f7ff fb9b 	bl	800084c <__aeabi_ddiv>
 8001116:	4602      	mov	r2, r0
 8001118:	460b      	mov	r3, r1
 800111a:	4610      	mov	r0, r2
 800111c:	4619      	mov	r1, r3
 800111e:	a356      	add	r3, pc, #344	; (adr r3, 8001278 <HAL_I2C_MemRxCpltCallback+0x1e0>)
 8001120:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001124:	f7ff fa68 	bl	80005f8 <__aeabi_dmul>
 8001128:	4602      	mov	r2, r0
 800112a:	460b      	mov	r3, r1
 800112c:	4610      	mov	r0, r2
 800112e:	4619      	mov	r1, r3
 8001130:	f7ff fd5a 	bl	8000be8 <__aeabi_d2f>
 8001134:	4603      	mov	r3, r0
 8001136:	4a58      	ldr	r2, [pc, #352]	; (8001298 <HAL_I2C_MemRxCpltCallback+0x200>)
 8001138:	6013      	str	r3, [r2, #0]
		accelerationYf = 0.061 * accelerationY / 1000 * 9.81;
 800113a:	4b54      	ldr	r3, [pc, #336]	; (800128c <HAL_I2C_MemRxCpltCallback+0x1f4>)
 800113c:	f9b3 3000 	ldrsh.w	r3, [r3]
 8001140:	4618      	mov	r0, r3
 8001142:	f7ff f9ef 	bl	8000524 <__aeabi_i2d>
 8001146:	a34a      	add	r3, pc, #296	; (adr r3, 8001270 <HAL_I2C_MemRxCpltCallback+0x1d8>)
 8001148:	e9d3 2300 	ldrd	r2, r3, [r3]
 800114c:	f7ff fa54 	bl	80005f8 <__aeabi_dmul>
 8001150:	4602      	mov	r2, r0
 8001152:	460b      	mov	r3, r1
 8001154:	4610      	mov	r0, r2
 8001156:	4619      	mov	r1, r3
 8001158:	f04f 0200 	mov.w	r2, #0
 800115c:	4b4d      	ldr	r3, [pc, #308]	; (8001294 <HAL_I2C_MemRxCpltCallback+0x1fc>)
 800115e:	f7ff fb75 	bl	800084c <__aeabi_ddiv>
 8001162:	4602      	mov	r2, r0
 8001164:	460b      	mov	r3, r1
 8001166:	4610      	mov	r0, r2
 8001168:	4619      	mov	r1, r3
 800116a:	a343      	add	r3, pc, #268	; (adr r3, 8001278 <HAL_I2C_MemRxCpltCallback+0x1e0>)
 800116c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001170:	f7ff fa42 	bl	80005f8 <__aeabi_dmul>
 8001174:	4602      	mov	r2, r0
 8001176:	460b      	mov	r3, r1
 8001178:	4610      	mov	r0, r2
 800117a:	4619      	mov	r1, r3
 800117c:	f7ff fd34 	bl	8000be8 <__aeabi_d2f>
 8001180:	4603      	mov	r3, r0
 8001182:	4a46      	ldr	r2, [pc, #280]	; (800129c <HAL_I2C_MemRxCpltCallback+0x204>)
 8001184:	6013      	str	r3, [r2, #0]
		accelerationZf = 0.061 * accelerationZ / 1000 * 9.81;
 8001186:	4b42      	ldr	r3, [pc, #264]	; (8001290 <HAL_I2C_MemRxCpltCallback+0x1f8>)
 8001188:	f9b3 3000 	ldrsh.w	r3, [r3]
 800118c:	4618      	mov	r0, r3
 800118e:	f7ff f9c9 	bl	8000524 <__aeabi_i2d>
 8001192:	a337      	add	r3, pc, #220	; (adr r3, 8001270 <HAL_I2C_MemRxCpltCallback+0x1d8>)
 8001194:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001198:	f7ff fa2e 	bl	80005f8 <__aeabi_dmul>
 800119c:	4602      	mov	r2, r0
 800119e:	460b      	mov	r3, r1
 80011a0:	4610      	mov	r0, r2
 80011a2:	4619      	mov	r1, r3
 80011a4:	f04f 0200 	mov.w	r2, #0
 80011a8:	4b3a      	ldr	r3, [pc, #232]	; (8001294 <HAL_I2C_MemRxCpltCallback+0x1fc>)
 80011aa:	f7ff fb4f 	bl	800084c <__aeabi_ddiv>
 80011ae:	4602      	mov	r2, r0
 80011b0:	460b      	mov	r3, r1
 80011b2:	4610      	mov	r0, r2
 80011b4:	4619      	mov	r1, r3
 80011b6:	a330      	add	r3, pc, #192	; (adr r3, 8001278 <HAL_I2C_MemRxCpltCallback+0x1e0>)
 80011b8:	e9d3 2300 	ldrd	r2, r3, [r3]
 80011bc:	f7ff fa1c 	bl	80005f8 <__aeabi_dmul>
 80011c0:	4602      	mov	r2, r0
 80011c2:	460b      	mov	r3, r1
 80011c4:	4610      	mov	r0, r2
 80011c6:	4619      	mov	r1, r3
 80011c8:	f7ff fd0e 	bl	8000be8 <__aeabi_d2f>
 80011cc:	4603      	mov	r3, r0
 80011ce:	4a34      	ldr	r2, [pc, #208]	; (80012a0 <HAL_I2C_MemRxCpltCallback+0x208>)
 80011d0:	6013      	str	r3, [r2, #0]

		snprintf(comunicateAccleration, sizeof(comunicateAccleration),
 80011d2:	4b31      	ldr	r3, [pc, #196]	; (8001298 <HAL_I2C_MemRxCpltCallback+0x200>)
 80011d4:	681b      	ldr	r3, [r3, #0]
 80011d6:	4618      	mov	r0, r3
 80011d8:	f7ff f9b6 	bl	8000548 <__aeabi_f2d>
 80011dc:	4602      	mov	r2, r0
 80011de:	460b      	mov	r3, r1
 80011e0:	e9cd 2300 	strd	r2, r3, [sp]
 80011e4:	4a2f      	ldr	r2, [pc, #188]	; (80012a4 <HAL_I2C_MemRxCpltCallback+0x20c>)
 80011e6:	2180      	movs	r1, #128	; 0x80
 80011e8:	482f      	ldr	r0, [pc, #188]	; (80012a8 <HAL_I2C_MemRxCpltCallback+0x210>)
 80011ea:	f006 fd77 	bl	8007cdc <sniprintf>
				" Predkosc X wynosi %e m/s^2", accelerationXf);
		HAL_UART_Transmit(&huart2, comunicateAccleration,
				strlen(comunicateAccleration),
 80011ee:	482e      	ldr	r0, [pc, #184]	; (80012a8 <HAL_I2C_MemRxCpltCallback+0x210>)
 80011f0:	f7fe ffee 	bl	80001d0 <strlen>
 80011f4:	4603      	mov	r3, r0
		HAL_UART_Transmit(&huart2, comunicateAccleration,
 80011f6:	b29a      	uxth	r2, r3
 80011f8:	f04f 33ff 	mov.w	r3, #4294967295
 80011fc:	492a      	ldr	r1, [pc, #168]	; (80012a8 <HAL_I2C_MemRxCpltCallback+0x210>)
 80011fe:	482b      	ldr	r0, [pc, #172]	; (80012ac <HAL_I2C_MemRxCpltCallback+0x214>)
 8001200:	f004 fe10 	bl	8005e24 <HAL_UART_Transmit>
				HAL_MAX_DELAY);

		snprintf(comunicateAccleration, sizeof(comunicateAccleration),
 8001204:	4b25      	ldr	r3, [pc, #148]	; (800129c <HAL_I2C_MemRxCpltCallback+0x204>)
 8001206:	681b      	ldr	r3, [r3, #0]
 8001208:	4618      	mov	r0, r3
 800120a:	f7ff f99d 	bl	8000548 <__aeabi_f2d>
 800120e:	4602      	mov	r2, r0
 8001210:	460b      	mov	r3, r1
 8001212:	e9cd 2300 	strd	r2, r3, [sp]
 8001216:	4a26      	ldr	r2, [pc, #152]	; (80012b0 <HAL_I2C_MemRxCpltCallback+0x218>)
 8001218:	2180      	movs	r1, #128	; 0x80
 800121a:	4823      	ldr	r0, [pc, #140]	; (80012a8 <HAL_I2C_MemRxCpltCallback+0x210>)
 800121c:	f006 fd5e 	bl	8007cdc <sniprintf>
				" Predkosc Y wynosi %e m/s^2", accelerationYf);
		HAL_UART_Transmit(&huart2, comunicateAccleration,
				strlen(comunicateAccleration),
 8001220:	4821      	ldr	r0, [pc, #132]	; (80012a8 <HAL_I2C_MemRxCpltCallback+0x210>)
 8001222:	f7fe ffd5 	bl	80001d0 <strlen>
 8001226:	4603      	mov	r3, r0
		HAL_UART_Transmit(&huart2, comunicateAccleration,
 8001228:	b29a      	uxth	r2, r3
 800122a:	f04f 33ff 	mov.w	r3, #4294967295
 800122e:	491e      	ldr	r1, [pc, #120]	; (80012a8 <HAL_I2C_MemRxCpltCallback+0x210>)
 8001230:	481e      	ldr	r0, [pc, #120]	; (80012ac <HAL_I2C_MemRxCpltCallback+0x214>)
 8001232:	f004 fdf7 	bl	8005e24 <HAL_UART_Transmit>
				HAL_MAX_DELAY);

		snprintf(comunicateAccleration, sizeof(comunicateAccleration),
 8001236:	4b1a      	ldr	r3, [pc, #104]	; (80012a0 <HAL_I2C_MemRxCpltCallback+0x208>)
 8001238:	681b      	ldr	r3, [r3, #0]
 800123a:	4618      	mov	r0, r3
 800123c:	f7ff f984 	bl	8000548 <__aeabi_f2d>
 8001240:	4602      	mov	r2, r0
 8001242:	460b      	mov	r3, r1
 8001244:	e9cd 2300 	strd	r2, r3, [sp]
 8001248:	4a1a      	ldr	r2, [pc, #104]	; (80012b4 <HAL_I2C_MemRxCpltCallback+0x21c>)
 800124a:	2180      	movs	r1, #128	; 0x80
 800124c:	4816      	ldr	r0, [pc, #88]	; (80012a8 <HAL_I2C_MemRxCpltCallback+0x210>)
 800124e:	f006 fd45 	bl	8007cdc <sniprintf>
				" Predkosc Z wynosi %e m/s^2 \n\r", accelerationZf);
		HAL_UART_Transmit(&huart2, comunicateAccleration,
				strlen(comunicateAccleration),
 8001252:	4815      	ldr	r0, [pc, #84]	; (80012a8 <HAL_I2C_MemRxCpltCallback+0x210>)
 8001254:	f7fe ffbc 	bl	80001d0 <strlen>
 8001258:	4603      	mov	r3, r0
		HAL_UART_Transmit(&huart2, comunicateAccleration,
 800125a:	b29a      	uxth	r2, r3
 800125c:	f04f 33ff 	mov.w	r3, #4294967295
 8001260:	4911      	ldr	r1, [pc, #68]	; (80012a8 <HAL_I2C_MemRxCpltCallback+0x210>)
 8001262:	4812      	ldr	r0, [pc, #72]	; (80012ac <HAL_I2C_MemRxCpltCallback+0x214>)
 8001264:	f004 fdde 	bl	8005e24 <HAL_UART_Transmit>
				HAL_MAX_DELAY);

	}
}
 8001268:	bf00      	nop
 800126a:	3708      	adds	r7, #8
 800126c:	46bd      	mov	sp, r7
 800126e:	bd80      	pop	{r7, pc}
 8001270:	5a1cac08 	.word	0x5a1cac08
 8001274:	3faf3b64 	.word	0x3faf3b64
 8001278:	51eb851f 	.word	0x51eb851f
 800127c:	40239eb8 	.word	0x40239eb8
 8001280:	40005400 	.word	0x40005400
 8001284:	2000040c 	.word	0x2000040c
 8001288:	20000412 	.word	0x20000412
 800128c:	20000414 	.word	0x20000414
 8001290:	20000416 	.word	0x20000416
 8001294:	408f4000 	.word	0x408f4000
 8001298:	20000418 	.word	0x20000418
 800129c:	2000041c 	.word	0x2000041c
 80012a0:	20000420 	.word	0x20000420
 80012a4:	0800b940 	.word	0x0800b940
 80012a8:	20000388 	.word	0x20000388
 80012ac:	200002e8 	.word	0x200002e8
 80012b0:	0800b95c 	.word	0x0800b95c
 80012b4:	0800b978 	.word	0x0800b978

080012b8 <main>:

/**
 * @brief  The application entry point.
 * @retval int
 */
int main(void) {
 80012b8:	b580      	push	{r7, lr}
 80012ba:	b086      	sub	sp, #24
 80012bc:	af04      	add	r7, sp, #16
	/* USER CODE END 1 */

	/* MCU Configuration--------------------------------------------------------*/

	/* Reset of all peripherals, Initializes the Flash interface and the Systick. */
	HAL_Init();
 80012be:	f000 fca1 	bl	8001c04 <HAL_Init>
	/* USER CODE BEGIN Init */

	/* USER CODE END Init */

	/* Configure the system clock */
	SystemClock_Config();
 80012c2:	f000 f87d 	bl	80013c0 <SystemClock_Config>
	/* USER CODE BEGIN SysInit */

	/* USER CODE END SysInit */

	/* Initialize all configured peripherals */
	MX_GPIO_Init();
 80012c6:	f000 f98d 	bl	80015e4 <MX_GPIO_Init>
	MX_USART2_UART_Init();
 80012ca:	f000 f95b 	bl	8001584 <MX_USART2_UART_Init>
	MX_I2C1_Init();
 80012ce:	f000 f8c9 	bl	8001464 <MX_I2C1_Init>
	MX_TIM16_Init();
 80012d2:	f000 f907 	bl	80014e4 <MX_TIM16_Init>
	MX_TIM17_Init();
 80012d6:	f000 f92d 	bl	8001534 <MX_TIM17_Init>
	/* USER CODE BEGIN 2 */
	HAL_TIM_Base_Start_IT(&htim16);
 80012da:	4832      	ldr	r0, [pc, #200]	; (80013a4 <main+0xec>)
 80012dc:	f004 fae4 	bl	80058a8 <HAL_TIM_Base_Start_IT>
	HAL_TIM_Base_Start_IT(&htim17);
 80012e0:	4831      	ldr	r0, [pc, #196]	; (80013a8 <main+0xf0>)
 80012e2:	f004 fae1 	bl	80058a8 <HAL_TIM_Base_Start_IT>
	/* USER CODE BEGIN WHILE */

	{
		// BOOT
		// Software Reset and register automatically incremented
		uint8_t reg = ((00000001 << 0) | (00000001 << 3));
 80012e6:	2309      	movs	r3, #9
 80012e8:	71fb      	strb	r3, [r7, #7]
		HAL_I2C_Mem_Write(&hi2c1, ADDRESS, LSM6DSL_CTRL3_C, 1, &reg, 1,
 80012ea:	f04f 33ff 	mov.w	r3, #4294967295
 80012ee:	9302      	str	r3, [sp, #8]
 80012f0:	2301      	movs	r3, #1
 80012f2:	9301      	str	r3, [sp, #4]
 80012f4:	1dfb      	adds	r3, r7, #7
 80012f6:	9300      	str	r3, [sp, #0]
 80012f8:	2301      	movs	r3, #1
 80012fa:	2212      	movs	r2, #18
 80012fc:	21d6      	movs	r1, #214	; 0xd6
 80012fe:	482b      	ldr	r0, [pc, #172]	; (80013ac <main+0xf4>)
 8001300:	f001 f936 	bl	8002570 <HAL_I2C_Mem_Write>
		HAL_MAX_DELAY);
	}

//	Set LOW mode to have 1Hz on reading data
	{
		uint8_t reg = ((00000001 << 4));
 8001304:	2310      	movs	r3, #16
 8001306:	71bb      	strb	r3, [r7, #6]
		HAL_I2C_Mem_Write(&hi2c1, ADDRESS, LSM6DSL_CTRL6_C, 1, &reg, 1,
 8001308:	f04f 33ff 	mov.w	r3, #4294967295
 800130c:	9302      	str	r3, [sp, #8]
 800130e:	2301      	movs	r3, #1
 8001310:	9301      	str	r3, [sp, #4]
 8001312:	1dbb      	adds	r3, r7, #6
 8001314:	9300      	str	r3, [sp, #0]
 8001316:	2301      	movs	r3, #1
 8001318:	2215      	movs	r2, #21
 800131a:	21d6      	movs	r1, #214	; 0xd6
 800131c:	4823      	ldr	r0, [pc, #140]	; (80013ac <main+0xf4>)
 800131e:	f001 f927 	bl	8002570 <HAL_I2C_Mem_Write>
		HAL_MAX_DELAY);
	}

	{
		// Output Data Rate Acelerometr 12.5Hz
		uint8_t reg = (1 << 4);
 8001322:	2310      	movs	r3, #16
 8001324:	717b      	strb	r3, [r7, #5]
//		uint8_t reg = ((1 << 7) | (1 << 5) | (1 << 4)); // to działa dla 1.6hz
//		uint8_t reg = (0b10110000); // to działa dla 1.6hz
//		uint8_t reg = (10110000);  to nie !!! działa dla 1.6hz
		HAL_I2C_Mem_Write(&hi2c1, ADDRESS, LSM6DSL_CTRL1_XL, 1, &reg, 1,
 8001326:	f04f 33ff 	mov.w	r3, #4294967295
 800132a:	9302      	str	r3, [sp, #8]
 800132c:	2301      	movs	r3, #1
 800132e:	9301      	str	r3, [sp, #4]
 8001330:	1d7b      	adds	r3, r7, #5
 8001332:	9300      	str	r3, [sp, #0]
 8001334:	2301      	movs	r3, #1
 8001336:	2210      	movs	r2, #16
 8001338:	21d6      	movs	r1, #214	; 0xd6
 800133a:	481c      	ldr	r0, [pc, #112]	; (80013ac <main+0xf4>)
 800133c:	f001 f918 	bl	8002570 <HAL_I2C_Mem_Write>
		HAL_MAX_DELAY);
	}

//Data ready signal on int_1_CTRL Acelerometr
	{
		uint8_t reg = (00000001 << 0);
 8001340:	2301      	movs	r3, #1
 8001342:	713b      	strb	r3, [r7, #4]
		HAL_I2C_Mem_Write(&hi2c1, ADDRESS, LSM6DSL_INT1_CTRL, 1, &reg, 1,
 8001344:	f04f 33ff 	mov.w	r3, #4294967295
 8001348:	9302      	str	r3, [sp, #8]
 800134a:	2301      	movs	r3, #1
 800134c:	9301      	str	r3, [sp, #4]
 800134e:	1d3b      	adds	r3, r7, #4
 8001350:	9300      	str	r3, [sp, #0]
 8001352:	2301      	movs	r3, #1
 8001354:	220d      	movs	r2, #13
 8001356:	21d6      	movs	r1, #214	; 0xd6
 8001358:	4814      	ldr	r0, [pc, #80]	; (80013ac <main+0xf4>)
 800135a:	f001 f909 	bl	8002570 <HAL_I2C_Mem_Write>
	while (1) {
		/* USER CODE END WHILE */

		/* USER CODE BEGIN 3 */

		if (HAL_GPIO_ReadPin(B1_GPIO_Port, B1_Pin) == 0) {
 800135e:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 8001362:	4813      	ldr	r0, [pc, #76]	; (80013b0 <main+0xf8>)
 8001364:	f001 f812 	bl	800238c <HAL_GPIO_ReadPin>
 8001368:	4603      	mov	r3, r0
 800136a:	2b00      	cmp	r3, #0
 800136c:	d1f7      	bne.n	800135e <main+0xa6>
			snprintf(comunicate, sizeof(comunicate),
 800136e:	4a11      	ldr	r2, [pc, #68]	; (80013b4 <main+0xfc>)
 8001370:	211a      	movs	r1, #26
 8001372:	4811      	ldr	r0, [pc, #68]	; (80013b8 <main+0x100>)
 8001374:	f006 fcb2 	bl	8007cdc <sniprintf>
					"Przycisk zostal wcisniety \n");
			HAL_UART_Transmit(&huart2, comunicate, strlen(comunicate),
 8001378:	480f      	ldr	r0, [pc, #60]	; (80013b8 <main+0x100>)
 800137a:	f7fe ff29 	bl	80001d0 <strlen>
 800137e:	4603      	mov	r3, r0
 8001380:	b29a      	uxth	r2, r3
 8001382:	f04f 33ff 	mov.w	r3, #4294967295
 8001386:	490c      	ldr	r1, [pc, #48]	; (80013b8 <main+0x100>)
 8001388:	480c      	ldr	r0, [pc, #48]	; (80013bc <main+0x104>)
 800138a:	f004 fd4b 	bl	8005e24 <HAL_UART_Transmit>
			HAL_MAX_DELAY);
			while (HAL_GPIO_ReadPin(B1_GPIO_Port, B1_Pin) == 0)
 800138e:	bf00      	nop
 8001390:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 8001394:	4806      	ldr	r0, [pc, #24]	; (80013b0 <main+0xf8>)
 8001396:	f000 fff9 	bl	800238c <HAL_GPIO_ReadPin>
 800139a:	4603      	mov	r3, r0
 800139c:	2b00      	cmp	r3, #0
 800139e:	d0f7      	beq.n	8001390 <main+0xd8>
		if (HAL_GPIO_ReadPin(B1_GPIO_Port, B1_Pin) == 0) {
 80013a0:	e7dd      	b.n	800135e <main+0xa6>
 80013a2:	bf00      	nop
 80013a4:	20000250 	.word	0x20000250
 80013a8:	2000029c 	.word	0x2000029c
 80013ac:	200001fc 	.word	0x200001fc
 80013b0:	48000800 	.word	0x48000800
 80013b4:	0800b998 	.word	0x0800b998
 80013b8:	2000036c 	.word	0x2000036c
 80013bc:	200002e8 	.word	0x200002e8

080013c0 <SystemClock_Config>:

/**
 * @brief System Clock Configuration
 * @retval None
 */
void SystemClock_Config(void) {
 80013c0:	b580      	push	{r7, lr}
 80013c2:	b096      	sub	sp, #88	; 0x58
 80013c4:	af00      	add	r7, sp, #0
	RCC_OscInitTypeDef RCC_OscInitStruct = { 0 };
 80013c6:	f107 0314 	add.w	r3, r7, #20
 80013ca:	2244      	movs	r2, #68	; 0x44
 80013cc:	2100      	movs	r1, #0
 80013ce:	4618      	mov	r0, r3
 80013d0:	f005 fdfc 	bl	8006fcc <memset>
	RCC_ClkInitTypeDef RCC_ClkInitStruct = { 0 };
 80013d4:	463b      	mov	r3, r7
 80013d6:	2200      	movs	r2, #0
 80013d8:	601a      	str	r2, [r3, #0]
 80013da:	605a      	str	r2, [r3, #4]
 80013dc:	609a      	str	r2, [r3, #8]
 80013de:	60da      	str	r2, [r3, #12]
 80013e0:	611a      	str	r2, [r3, #16]

	/** Configure the main internal regulator output voltage
	 */
	if (HAL_PWREx_ControlVoltageScaling(PWR_REGULATOR_VOLTAGE_SCALE1)
 80013e2:	f44f 7000 	mov.w	r0, #512	; 0x200
 80013e6:	f002 fef5 	bl	80041d4 <HAL_PWREx_ControlVoltageScaling>
 80013ea:	4603      	mov	r3, r0
 80013ec:	2b00      	cmp	r3, #0
 80013ee:	d001      	beq.n	80013f4 <SystemClock_Config+0x34>
			!= HAL_OK) {
		Error_Handler();
 80013f0:	f000 f976 	bl	80016e0 <Error_Handler>
	}

	/** Initializes the RCC Oscillators according to the specified parameters
	 * in the RCC_OscInitTypeDef structure.
	 */
	RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 80013f4:	2302      	movs	r3, #2
 80013f6:	617b      	str	r3, [r7, #20]
	RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 80013f8:	f44f 7380 	mov.w	r3, #256	; 0x100
 80013fc:	623b      	str	r3, [r7, #32]
	RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 80013fe:	2310      	movs	r3, #16
 8001400:	627b      	str	r3, [r7, #36]	; 0x24
	RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8001402:	2302      	movs	r3, #2
 8001404:	63fb      	str	r3, [r7, #60]	; 0x3c
	RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSI;
 8001406:	2302      	movs	r3, #2
 8001408:	643b      	str	r3, [r7, #64]	; 0x40
	RCC_OscInitStruct.PLL.PLLM = 1;
 800140a:	2301      	movs	r3, #1
 800140c:	647b      	str	r3, [r7, #68]	; 0x44
	RCC_OscInitStruct.PLL.PLLN = 10;
 800140e:	230a      	movs	r3, #10
 8001410:	64bb      	str	r3, [r7, #72]	; 0x48
	RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV7;
 8001412:	2307      	movs	r3, #7
 8001414:	64fb      	str	r3, [r7, #76]	; 0x4c
	RCC_OscInitStruct.PLL.PLLQ = RCC_PLLQ_DIV2;
 8001416:	2302      	movs	r3, #2
 8001418:	653b      	str	r3, [r7, #80]	; 0x50
	RCC_OscInitStruct.PLL.PLLR = RCC_PLLR_DIV2;
 800141a:	2302      	movs	r3, #2
 800141c:	657b      	str	r3, [r7, #84]	; 0x54
	if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK) {
 800141e:	f107 0314 	add.w	r3, r7, #20
 8001422:	4618      	mov	r0, r3
 8001424:	f002 ff2c 	bl	8004280 <HAL_RCC_OscConfig>
 8001428:	4603      	mov	r3, r0
 800142a:	2b00      	cmp	r3, #0
 800142c:	d001      	beq.n	8001432 <SystemClock_Config+0x72>
		Error_Handler();
 800142e:	f000 f957 	bl	80016e0 <Error_Handler>
	}

	/** Initializes the CPU, AHB and APB buses clocks
	 */
	RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK | RCC_CLOCKTYPE_SYSCLK
 8001432:	230f      	movs	r3, #15
 8001434:	603b      	str	r3, [r7, #0]
			| RCC_CLOCKTYPE_PCLK1 | RCC_CLOCKTYPE_PCLK2;
	RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8001436:	2303      	movs	r3, #3
 8001438:	607b      	str	r3, [r7, #4]
	RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 800143a:	2300      	movs	r3, #0
 800143c:	60bb      	str	r3, [r7, #8]
	RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 800143e:	2300      	movs	r3, #0
 8001440:	60fb      	str	r3, [r7, #12]
	RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 8001442:	2300      	movs	r3, #0
 8001444:	613b      	str	r3, [r7, #16]

	if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_4) != HAL_OK) {
 8001446:	463b      	mov	r3, r7
 8001448:	2104      	movs	r1, #4
 800144a:	4618      	mov	r0, r3
 800144c:	f003 faf4 	bl	8004a38 <HAL_RCC_ClockConfig>
 8001450:	4603      	mov	r3, r0
 8001452:	2b00      	cmp	r3, #0
 8001454:	d001      	beq.n	800145a <SystemClock_Config+0x9a>
		Error_Handler();
 8001456:	f000 f943 	bl	80016e0 <Error_Handler>
	}
}
 800145a:	bf00      	nop
 800145c:	3758      	adds	r7, #88	; 0x58
 800145e:	46bd      	mov	sp, r7
 8001460:	bd80      	pop	{r7, pc}
	...

08001464 <MX_I2C1_Init>:
/**
 * @brief I2C1 Initialization Function
 * @param None
 * @retval None
 */
static void MX_I2C1_Init(void) {
 8001464:	b580      	push	{r7, lr}
 8001466:	af00      	add	r7, sp, #0
	/* USER CODE END I2C1_Init 0 */

	/* USER CODE BEGIN I2C1_Init 1 */

	/* USER CODE END I2C1_Init 1 */
	hi2c1.Instance = I2C1;
 8001468:	4b1b      	ldr	r3, [pc, #108]	; (80014d8 <MX_I2C1_Init+0x74>)
 800146a:	4a1c      	ldr	r2, [pc, #112]	; (80014dc <MX_I2C1_Init+0x78>)
 800146c:	601a      	str	r2, [r3, #0]
	hi2c1.Init.Timing = 0x10909CEC;
 800146e:	4b1a      	ldr	r3, [pc, #104]	; (80014d8 <MX_I2C1_Init+0x74>)
 8001470:	4a1b      	ldr	r2, [pc, #108]	; (80014e0 <MX_I2C1_Init+0x7c>)
 8001472:	605a      	str	r2, [r3, #4]
	hi2c1.Init.OwnAddress1 = 0;
 8001474:	4b18      	ldr	r3, [pc, #96]	; (80014d8 <MX_I2C1_Init+0x74>)
 8001476:	2200      	movs	r2, #0
 8001478:	609a      	str	r2, [r3, #8]
	hi2c1.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 800147a:	4b17      	ldr	r3, [pc, #92]	; (80014d8 <MX_I2C1_Init+0x74>)
 800147c:	2201      	movs	r2, #1
 800147e:	60da      	str	r2, [r3, #12]
	hi2c1.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 8001480:	4b15      	ldr	r3, [pc, #84]	; (80014d8 <MX_I2C1_Init+0x74>)
 8001482:	2200      	movs	r2, #0
 8001484:	611a      	str	r2, [r3, #16]
	hi2c1.Init.OwnAddress2 = 0;
 8001486:	4b14      	ldr	r3, [pc, #80]	; (80014d8 <MX_I2C1_Init+0x74>)
 8001488:	2200      	movs	r2, #0
 800148a:	615a      	str	r2, [r3, #20]
	hi2c1.Init.OwnAddress2Masks = I2C_OA2_NOMASK;
 800148c:	4b12      	ldr	r3, [pc, #72]	; (80014d8 <MX_I2C1_Init+0x74>)
 800148e:	2200      	movs	r2, #0
 8001490:	619a      	str	r2, [r3, #24]
	hi2c1.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 8001492:	4b11      	ldr	r3, [pc, #68]	; (80014d8 <MX_I2C1_Init+0x74>)
 8001494:	2200      	movs	r2, #0
 8001496:	61da      	str	r2, [r3, #28]
	hi2c1.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 8001498:	4b0f      	ldr	r3, [pc, #60]	; (80014d8 <MX_I2C1_Init+0x74>)
 800149a:	2200      	movs	r2, #0
 800149c:	621a      	str	r2, [r3, #32]
	if (HAL_I2C_Init(&hi2c1) != HAL_OK) {
 800149e:	480e      	ldr	r0, [pc, #56]	; (80014d8 <MX_I2C1_Init+0x74>)
 80014a0:	f000 ffd6 	bl	8002450 <HAL_I2C_Init>
 80014a4:	4603      	mov	r3, r0
 80014a6:	2b00      	cmp	r3, #0
 80014a8:	d001      	beq.n	80014ae <MX_I2C1_Init+0x4a>
		Error_Handler();
 80014aa:	f000 f919 	bl	80016e0 <Error_Handler>
	}

	/** Configure Analogue filter
	 */
	if (HAL_I2CEx_ConfigAnalogFilter(&hi2c1, I2C_ANALOGFILTER_ENABLE)
 80014ae:	2100      	movs	r1, #0
 80014b0:	4809      	ldr	r0, [pc, #36]	; (80014d8 <MX_I2C1_Init+0x74>)
 80014b2:	f002 fde9 	bl	8004088 <HAL_I2CEx_ConfigAnalogFilter>
 80014b6:	4603      	mov	r3, r0
 80014b8:	2b00      	cmp	r3, #0
 80014ba:	d001      	beq.n	80014c0 <MX_I2C1_Init+0x5c>
			!= HAL_OK) {
		Error_Handler();
 80014bc:	f000 f910 	bl	80016e0 <Error_Handler>
	}

	/** Configure Digital filter
	 */
	if (HAL_I2CEx_ConfigDigitalFilter(&hi2c1, 0) != HAL_OK) {
 80014c0:	2100      	movs	r1, #0
 80014c2:	4805      	ldr	r0, [pc, #20]	; (80014d8 <MX_I2C1_Init+0x74>)
 80014c4:	f002 fe2b 	bl	800411e <HAL_I2CEx_ConfigDigitalFilter>
 80014c8:	4603      	mov	r3, r0
 80014ca:	2b00      	cmp	r3, #0
 80014cc:	d001      	beq.n	80014d2 <MX_I2C1_Init+0x6e>
		Error_Handler();
 80014ce:	f000 f907 	bl	80016e0 <Error_Handler>
	}
	/* USER CODE BEGIN I2C1_Init 2 */

	/* USER CODE END I2C1_Init 2 */

}
 80014d2:	bf00      	nop
 80014d4:	bd80      	pop	{r7, pc}
 80014d6:	bf00      	nop
 80014d8:	200001fc 	.word	0x200001fc
 80014dc:	40005400 	.word	0x40005400
 80014e0:	10909cec 	.word	0x10909cec

080014e4 <MX_TIM16_Init>:
/**
 * @brief TIM16 Initialization Function
 * @param None
 * @retval None
 */
static void MX_TIM16_Init(void) {
 80014e4:	b580      	push	{r7, lr}
 80014e6:	af00      	add	r7, sp, #0
	/* USER CODE END TIM16_Init 0 */

	/* USER CODE BEGIN TIM16_Init 1 */

	/* USER CODE END TIM16_Init 1 */
	htim16.Instance = TIM16;
 80014e8:	4b10      	ldr	r3, [pc, #64]	; (800152c <MX_TIM16_Init+0x48>)
 80014ea:	4a11      	ldr	r2, [pc, #68]	; (8001530 <MX_TIM16_Init+0x4c>)
 80014ec:	601a      	str	r2, [r3, #0]
	htim16.Init.Prescaler = 6153;
 80014ee:	4b0f      	ldr	r3, [pc, #60]	; (800152c <MX_TIM16_Init+0x48>)
 80014f0:	f641 0209 	movw	r2, #6153	; 0x1809
 80014f4:	605a      	str	r2, [r3, #4]
	htim16.Init.CounterMode = TIM_COUNTERMODE_UP;
 80014f6:	4b0d      	ldr	r3, [pc, #52]	; (800152c <MX_TIM16_Init+0x48>)
 80014f8:	2200      	movs	r2, #0
 80014fa:	609a      	str	r2, [r3, #8]
	htim16.Init.Period = 999;
 80014fc:	4b0b      	ldr	r3, [pc, #44]	; (800152c <MX_TIM16_Init+0x48>)
 80014fe:	f240 32e7 	movw	r2, #999	; 0x3e7
 8001502:	60da      	str	r2, [r3, #12]
	htim16.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8001504:	4b09      	ldr	r3, [pc, #36]	; (800152c <MX_TIM16_Init+0x48>)
 8001506:	2200      	movs	r2, #0
 8001508:	611a      	str	r2, [r3, #16]
	htim16.Init.RepetitionCounter = 0;
 800150a:	4b08      	ldr	r3, [pc, #32]	; (800152c <MX_TIM16_Init+0x48>)
 800150c:	2200      	movs	r2, #0
 800150e:	615a      	str	r2, [r3, #20]
	htim16.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8001510:	4b06      	ldr	r3, [pc, #24]	; (800152c <MX_TIM16_Init+0x48>)
 8001512:	2200      	movs	r2, #0
 8001514:	619a      	str	r2, [r3, #24]
	if (HAL_TIM_Base_Init(&htim16) != HAL_OK) {
 8001516:	4805      	ldr	r0, [pc, #20]	; (800152c <MX_TIM16_Init+0x48>)
 8001518:	f004 f96e 	bl	80057f8 <HAL_TIM_Base_Init>
 800151c:	4603      	mov	r3, r0
 800151e:	2b00      	cmp	r3, #0
 8001520:	d001      	beq.n	8001526 <MX_TIM16_Init+0x42>
		Error_Handler();
 8001522:	f000 f8dd 	bl	80016e0 <Error_Handler>
	}
	/* USER CODE BEGIN TIM16_Init 2 */

	/* USER CODE END TIM16_Init 2 */

}
 8001526:	bf00      	nop
 8001528:	bd80      	pop	{r7, pc}
 800152a:	bf00      	nop
 800152c:	20000250 	.word	0x20000250
 8001530:	40014400 	.word	0x40014400

08001534 <MX_TIM17_Init>:
/**
 * @brief TIM17 Initialization Function
 * @param None
 * @retval None
 */
static void MX_TIM17_Init(void) {
 8001534:	b580      	push	{r7, lr}
 8001536:	af00      	add	r7, sp, #0
	/* USER CODE END TIM17_Init 0 */

	/* USER CODE BEGIN TIM17_Init 1 */

	/* USER CODE END TIM17_Init 1 */
	htim17.Instance = TIM17;
 8001538:	4b10      	ldr	r3, [pc, #64]	; (800157c <MX_TIM17_Init+0x48>)
 800153a:	4a11      	ldr	r2, [pc, #68]	; (8001580 <MX_TIM17_Init+0x4c>)
 800153c:	601a      	str	r2, [r3, #0]
	htim17.Init.Prescaler = 7271;
 800153e:	4b0f      	ldr	r3, [pc, #60]	; (800157c <MX_TIM17_Init+0x48>)
 8001540:	f641 4267 	movw	r2, #7271	; 0x1c67
 8001544:	605a      	str	r2, [r3, #4]
	htim17.Init.CounterMode = TIM_COUNTERMODE_UP;
 8001546:	4b0d      	ldr	r3, [pc, #52]	; (800157c <MX_TIM17_Init+0x48>)
 8001548:	2200      	movs	r2, #0
 800154a:	609a      	str	r2, [r3, #8]
	htim17.Init.Period = 995;
 800154c:	4b0b      	ldr	r3, [pc, #44]	; (800157c <MX_TIM17_Init+0x48>)
 800154e:	f240 32e3 	movw	r2, #995	; 0x3e3
 8001552:	60da      	str	r2, [r3, #12]
	htim17.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8001554:	4b09      	ldr	r3, [pc, #36]	; (800157c <MX_TIM17_Init+0x48>)
 8001556:	2200      	movs	r2, #0
 8001558:	611a      	str	r2, [r3, #16]
	htim17.Init.RepetitionCounter = 0;
 800155a:	4b08      	ldr	r3, [pc, #32]	; (800157c <MX_TIM17_Init+0x48>)
 800155c:	2200      	movs	r2, #0
 800155e:	615a      	str	r2, [r3, #20]
	htim17.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8001560:	4b06      	ldr	r3, [pc, #24]	; (800157c <MX_TIM17_Init+0x48>)
 8001562:	2200      	movs	r2, #0
 8001564:	619a      	str	r2, [r3, #24]
	if (HAL_TIM_Base_Init(&htim17) != HAL_OK) {
 8001566:	4805      	ldr	r0, [pc, #20]	; (800157c <MX_TIM17_Init+0x48>)
 8001568:	f004 f946 	bl	80057f8 <HAL_TIM_Base_Init>
 800156c:	4603      	mov	r3, r0
 800156e:	2b00      	cmp	r3, #0
 8001570:	d001      	beq.n	8001576 <MX_TIM17_Init+0x42>
		Error_Handler();
 8001572:	f000 f8b5 	bl	80016e0 <Error_Handler>
	}
	/* USER CODE BEGIN TIM17_Init 2 */

	/* USER CODE END TIM17_Init 2 */

}
 8001576:	bf00      	nop
 8001578:	bd80      	pop	{r7, pc}
 800157a:	bf00      	nop
 800157c:	2000029c 	.word	0x2000029c
 8001580:	40014800 	.word	0x40014800

08001584 <MX_USART2_UART_Init>:
/**
 * @brief USART2 Initialization Function
 * @param None
 * @retval None
 */
static void MX_USART2_UART_Init(void) {
 8001584:	b580      	push	{r7, lr}
 8001586:	af00      	add	r7, sp, #0
	/* USER CODE END USART2_Init 0 */

	/* USER CODE BEGIN USART2_Init 1 */

	/* USER CODE END USART2_Init 1 */
	huart2.Instance = USART2;
 8001588:	4b14      	ldr	r3, [pc, #80]	; (80015dc <MX_USART2_UART_Init+0x58>)
 800158a:	4a15      	ldr	r2, [pc, #84]	; (80015e0 <MX_USART2_UART_Init+0x5c>)
 800158c:	601a      	str	r2, [r3, #0]
	huart2.Init.BaudRate = 115200;
 800158e:	4b13      	ldr	r3, [pc, #76]	; (80015dc <MX_USART2_UART_Init+0x58>)
 8001590:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 8001594:	605a      	str	r2, [r3, #4]
	huart2.Init.WordLength = UART_WORDLENGTH_8B;
 8001596:	4b11      	ldr	r3, [pc, #68]	; (80015dc <MX_USART2_UART_Init+0x58>)
 8001598:	2200      	movs	r2, #0
 800159a:	609a      	str	r2, [r3, #8]
	huart2.Init.StopBits = UART_STOPBITS_1;
 800159c:	4b0f      	ldr	r3, [pc, #60]	; (80015dc <MX_USART2_UART_Init+0x58>)
 800159e:	2200      	movs	r2, #0
 80015a0:	60da      	str	r2, [r3, #12]
	huart2.Init.Parity = UART_PARITY_NONE;
 80015a2:	4b0e      	ldr	r3, [pc, #56]	; (80015dc <MX_USART2_UART_Init+0x58>)
 80015a4:	2200      	movs	r2, #0
 80015a6:	611a      	str	r2, [r3, #16]
	huart2.Init.Mode = UART_MODE_TX_RX;
 80015a8:	4b0c      	ldr	r3, [pc, #48]	; (80015dc <MX_USART2_UART_Init+0x58>)
 80015aa:	220c      	movs	r2, #12
 80015ac:	615a      	str	r2, [r3, #20]
	huart2.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 80015ae:	4b0b      	ldr	r3, [pc, #44]	; (80015dc <MX_USART2_UART_Init+0x58>)
 80015b0:	2200      	movs	r2, #0
 80015b2:	619a      	str	r2, [r3, #24]
	huart2.Init.OverSampling = UART_OVERSAMPLING_16;
 80015b4:	4b09      	ldr	r3, [pc, #36]	; (80015dc <MX_USART2_UART_Init+0x58>)
 80015b6:	2200      	movs	r2, #0
 80015b8:	61da      	str	r2, [r3, #28]
	huart2.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 80015ba:	4b08      	ldr	r3, [pc, #32]	; (80015dc <MX_USART2_UART_Init+0x58>)
 80015bc:	2200      	movs	r2, #0
 80015be:	621a      	str	r2, [r3, #32]
	huart2.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 80015c0:	4b06      	ldr	r3, [pc, #24]	; (80015dc <MX_USART2_UART_Init+0x58>)
 80015c2:	2200      	movs	r2, #0
 80015c4:	625a      	str	r2, [r3, #36]	; 0x24
	if (HAL_UART_Init(&huart2) != HAL_OK) {
 80015c6:	4805      	ldr	r0, [pc, #20]	; (80015dc <MX_USART2_UART_Init+0x58>)
 80015c8:	f004 fbde 	bl	8005d88 <HAL_UART_Init>
 80015cc:	4603      	mov	r3, r0
 80015ce:	2b00      	cmp	r3, #0
 80015d0:	d001      	beq.n	80015d6 <MX_USART2_UART_Init+0x52>
		Error_Handler();
 80015d2:	f000 f885 	bl	80016e0 <Error_Handler>
	}
	/* USER CODE BEGIN USART2_Init 2 */

	/* USER CODE END USART2_Init 2 */

}
 80015d6:	bf00      	nop
 80015d8:	bd80      	pop	{r7, pc}
 80015da:	bf00      	nop
 80015dc:	200002e8 	.word	0x200002e8
 80015e0:	40004400 	.word	0x40004400

080015e4 <MX_GPIO_Init>:
/**
 * @brief GPIO Initialization Function
 * @param None
 * @retval None
 */
static void MX_GPIO_Init(void) {
 80015e4:	b580      	push	{r7, lr}
 80015e6:	b08a      	sub	sp, #40	; 0x28
 80015e8:	af00      	add	r7, sp, #0
	GPIO_InitTypeDef GPIO_InitStruct = { 0 };
 80015ea:	f107 0314 	add.w	r3, r7, #20
 80015ee:	2200      	movs	r2, #0
 80015f0:	601a      	str	r2, [r3, #0]
 80015f2:	605a      	str	r2, [r3, #4]
 80015f4:	609a      	str	r2, [r3, #8]
 80015f6:	60da      	str	r2, [r3, #12]
 80015f8:	611a      	str	r2, [r3, #16]
	/* USER CODE BEGIN MX_GPIO_Init_1 */
	/* USER CODE END MX_GPIO_Init_1 */

	/* GPIO Ports Clock Enable */
	__HAL_RCC_GPIOC_CLK_ENABLE();
 80015fa:	4b36      	ldr	r3, [pc, #216]	; (80016d4 <MX_GPIO_Init+0xf0>)
 80015fc:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80015fe:	4a35      	ldr	r2, [pc, #212]	; (80016d4 <MX_GPIO_Init+0xf0>)
 8001600:	f043 0304 	orr.w	r3, r3, #4
 8001604:	64d3      	str	r3, [r2, #76]	; 0x4c
 8001606:	4b33      	ldr	r3, [pc, #204]	; (80016d4 <MX_GPIO_Init+0xf0>)
 8001608:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800160a:	f003 0304 	and.w	r3, r3, #4
 800160e:	613b      	str	r3, [r7, #16]
 8001610:	693b      	ldr	r3, [r7, #16]
	__HAL_RCC_GPIOH_CLK_ENABLE();
 8001612:	4b30      	ldr	r3, [pc, #192]	; (80016d4 <MX_GPIO_Init+0xf0>)
 8001614:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001616:	4a2f      	ldr	r2, [pc, #188]	; (80016d4 <MX_GPIO_Init+0xf0>)
 8001618:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800161c:	64d3      	str	r3, [r2, #76]	; 0x4c
 800161e:	4b2d      	ldr	r3, [pc, #180]	; (80016d4 <MX_GPIO_Init+0xf0>)
 8001620:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001622:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8001626:	60fb      	str	r3, [r7, #12]
 8001628:	68fb      	ldr	r3, [r7, #12]
	__HAL_RCC_GPIOA_CLK_ENABLE();
 800162a:	4b2a      	ldr	r3, [pc, #168]	; (80016d4 <MX_GPIO_Init+0xf0>)
 800162c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800162e:	4a29      	ldr	r2, [pc, #164]	; (80016d4 <MX_GPIO_Init+0xf0>)
 8001630:	f043 0301 	orr.w	r3, r3, #1
 8001634:	64d3      	str	r3, [r2, #76]	; 0x4c
 8001636:	4b27      	ldr	r3, [pc, #156]	; (80016d4 <MX_GPIO_Init+0xf0>)
 8001638:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800163a:	f003 0301 	and.w	r3, r3, #1
 800163e:	60bb      	str	r3, [r7, #8]
 8001640:	68bb      	ldr	r3, [r7, #8]
	__HAL_RCC_GPIOB_CLK_ENABLE();
 8001642:	4b24      	ldr	r3, [pc, #144]	; (80016d4 <MX_GPIO_Init+0xf0>)
 8001644:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001646:	4a23      	ldr	r2, [pc, #140]	; (80016d4 <MX_GPIO_Init+0xf0>)
 8001648:	f043 0302 	orr.w	r3, r3, #2
 800164c:	64d3      	str	r3, [r2, #76]	; 0x4c
 800164e:	4b21      	ldr	r3, [pc, #132]	; (80016d4 <MX_GPIO_Init+0xf0>)
 8001650:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001652:	f003 0302 	and.w	r3, r3, #2
 8001656:	607b      	str	r3, [r7, #4]
 8001658:	687b      	ldr	r3, [r7, #4]

	/*Configure GPIO pin Output Level */
	HAL_GPIO_WritePin(LD2_GPIO_Port, LD2_Pin, GPIO_PIN_RESET);
 800165a:	2200      	movs	r2, #0
 800165c:	2120      	movs	r1, #32
 800165e:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8001662:	f000 feab 	bl	80023bc <HAL_GPIO_WritePin>

	/*Configure GPIO pin : B1_Pin */
	GPIO_InitStruct.Pin = B1_Pin;
 8001666:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 800166a:	617b      	str	r3, [r7, #20]
	GPIO_InitStruct.Mode = GPIO_MODE_IT_FALLING;
 800166c:	f44f 1304 	mov.w	r3, #2162688	; 0x210000
 8001670:	61bb      	str	r3, [r7, #24]
	GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001672:	2300      	movs	r3, #0
 8001674:	61fb      	str	r3, [r7, #28]
	HAL_GPIO_Init(B1_GPIO_Port, &GPIO_InitStruct);
 8001676:	f107 0314 	add.w	r3, r7, #20
 800167a:	4619      	mov	r1, r3
 800167c:	4816      	ldr	r0, [pc, #88]	; (80016d8 <MX_GPIO_Init+0xf4>)
 800167e:	f000 fcdb 	bl	8002038 <HAL_GPIO_Init>

	/*Configure GPIO pin : LD2_Pin */
	GPIO_InitStruct.Pin = LD2_Pin;
 8001682:	2320      	movs	r3, #32
 8001684:	617b      	str	r3, [r7, #20]
	GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001686:	2301      	movs	r3, #1
 8001688:	61bb      	str	r3, [r7, #24]
	GPIO_InitStruct.Pull = GPIO_NOPULL;
 800168a:	2300      	movs	r3, #0
 800168c:	61fb      	str	r3, [r7, #28]
	GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800168e:	2300      	movs	r3, #0
 8001690:	623b      	str	r3, [r7, #32]
	HAL_GPIO_Init(LD2_GPIO_Port, &GPIO_InitStruct);
 8001692:	f107 0314 	add.w	r3, r7, #20
 8001696:	4619      	mov	r1, r3
 8001698:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 800169c:	f000 fccc 	bl	8002038 <HAL_GPIO_Init>

	/*Configure GPIO pin : SENSOR_INT_Pin */
	GPIO_InitStruct.Pin = SENSOR_INT_Pin;
 80016a0:	2320      	movs	r3, #32
 80016a2:	617b      	str	r3, [r7, #20]
	GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 80016a4:	f44f 1388 	mov.w	r3, #1114112	; 0x110000
 80016a8:	61bb      	str	r3, [r7, #24]
	GPIO_InitStruct.Pull = GPIO_NOPULL;
 80016aa:	2300      	movs	r3, #0
 80016ac:	61fb      	str	r3, [r7, #28]
	HAL_GPIO_Init(SENSOR_INT_GPIO_Port, &GPIO_InitStruct);
 80016ae:	f107 0314 	add.w	r3, r7, #20
 80016b2:	4619      	mov	r1, r3
 80016b4:	4809      	ldr	r0, [pc, #36]	; (80016dc <MX_GPIO_Init+0xf8>)
 80016b6:	f000 fcbf 	bl	8002038 <HAL_GPIO_Init>

	/* EXTI interrupt init*/
	HAL_NVIC_SetPriority(EXTI9_5_IRQn, 0, 0);
 80016ba:	2200      	movs	r2, #0
 80016bc:	2100      	movs	r1, #0
 80016be:	2017      	movs	r0, #23
 80016c0:	f000 fbf7 	bl	8001eb2 <HAL_NVIC_SetPriority>
	HAL_NVIC_EnableIRQ(EXTI9_5_IRQn);
 80016c4:	2017      	movs	r0, #23
 80016c6:	f000 fc10 	bl	8001eea <HAL_NVIC_EnableIRQ>

	/* USER CODE BEGIN MX_GPIO_Init_2 */
	/* USER CODE END MX_GPIO_Init_2 */
}
 80016ca:	bf00      	nop
 80016cc:	3728      	adds	r7, #40	; 0x28
 80016ce:	46bd      	mov	sp, r7
 80016d0:	bd80      	pop	{r7, pc}
 80016d2:	bf00      	nop
 80016d4:	40021000 	.word	0x40021000
 80016d8:	48000800 	.word	0x48000800
 80016dc:	48000400 	.word	0x48000400

080016e0 <Error_Handler>:

/**
 * @brief  This function is executed in case of error occurrence.
 * @retval None
 */
void Error_Handler(void) {
 80016e0:	b480      	push	{r7}
 80016e2:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 80016e4:	b672      	cpsid	i
}
 80016e6:	bf00      	nop
	/* USER CODE BEGIN Error_Handler_Debug */
	/* User can add his own implementation to report the HAL error return state */
	__disable_irq();
	while (1) {
 80016e8:	e7fe      	b.n	80016e8 <Error_Handler+0x8>
	...

080016ec <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 80016ec:	b480      	push	{r7}
 80016ee:	b083      	sub	sp, #12
 80016f0:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 80016f2:	4b0f      	ldr	r3, [pc, #60]	; (8001730 <HAL_MspInit+0x44>)
 80016f4:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80016f6:	4a0e      	ldr	r2, [pc, #56]	; (8001730 <HAL_MspInit+0x44>)
 80016f8:	f043 0301 	orr.w	r3, r3, #1
 80016fc:	6613      	str	r3, [r2, #96]	; 0x60
 80016fe:	4b0c      	ldr	r3, [pc, #48]	; (8001730 <HAL_MspInit+0x44>)
 8001700:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8001702:	f003 0301 	and.w	r3, r3, #1
 8001706:	607b      	str	r3, [r7, #4]
 8001708:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 800170a:	4b09      	ldr	r3, [pc, #36]	; (8001730 <HAL_MspInit+0x44>)
 800170c:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800170e:	4a08      	ldr	r2, [pc, #32]	; (8001730 <HAL_MspInit+0x44>)
 8001710:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8001714:	6593      	str	r3, [r2, #88]	; 0x58
 8001716:	4b06      	ldr	r3, [pc, #24]	; (8001730 <HAL_MspInit+0x44>)
 8001718:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800171a:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800171e:	603b      	str	r3, [r7, #0]
 8001720:	683b      	ldr	r3, [r7, #0]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8001722:	bf00      	nop
 8001724:	370c      	adds	r7, #12
 8001726:	46bd      	mov	sp, r7
 8001728:	f85d 7b04 	ldr.w	r7, [sp], #4
 800172c:	4770      	bx	lr
 800172e:	bf00      	nop
 8001730:	40021000 	.word	0x40021000

08001734 <HAL_I2C_MspInit>:
* This function configures the hardware resources used in this example
* @param hi2c: I2C handle pointer
* @retval None
*/
void HAL_I2C_MspInit(I2C_HandleTypeDef* hi2c)
{
 8001734:	b580      	push	{r7, lr}
 8001736:	b0ac      	sub	sp, #176	; 0xb0
 8001738:	af00      	add	r7, sp, #0
 800173a:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800173c:	f107 039c 	add.w	r3, r7, #156	; 0x9c
 8001740:	2200      	movs	r2, #0
 8001742:	601a      	str	r2, [r3, #0]
 8001744:	605a      	str	r2, [r3, #4]
 8001746:	609a      	str	r2, [r3, #8]
 8001748:	60da      	str	r2, [r3, #12]
 800174a:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 800174c:	f107 0314 	add.w	r3, r7, #20
 8001750:	2288      	movs	r2, #136	; 0x88
 8001752:	2100      	movs	r1, #0
 8001754:	4618      	mov	r0, r3
 8001756:	f005 fc39 	bl	8006fcc <memset>
  if(hi2c->Instance==I2C1)
 800175a:	687b      	ldr	r3, [r7, #4]
 800175c:	681b      	ldr	r3, [r3, #0]
 800175e:	4a25      	ldr	r2, [pc, #148]	; (80017f4 <HAL_I2C_MspInit+0xc0>)
 8001760:	4293      	cmp	r3, r2
 8001762:	d143      	bne.n	80017ec <HAL_I2C_MspInit+0xb8>

  /* USER CODE END I2C1_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_I2C1;
 8001764:	2340      	movs	r3, #64	; 0x40
 8001766:	617b      	str	r3, [r7, #20]
    PeriphClkInit.I2c1ClockSelection = RCC_I2C1CLKSOURCE_PCLK1;
 8001768:	2300      	movs	r3, #0
 800176a:	667b      	str	r3, [r7, #100]	; 0x64
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 800176c:	f107 0314 	add.w	r3, r7, #20
 8001770:	4618      	mov	r0, r3
 8001772:	f003 fb85 	bl	8004e80 <HAL_RCCEx_PeriphCLKConfig>
 8001776:	4603      	mov	r3, r0
 8001778:	2b00      	cmp	r3, #0
 800177a:	d001      	beq.n	8001780 <HAL_I2C_MspInit+0x4c>
    {
      Error_Handler();
 800177c:	f7ff ffb0 	bl	80016e0 <Error_Handler>
    }

    __HAL_RCC_GPIOB_CLK_ENABLE();
 8001780:	4b1d      	ldr	r3, [pc, #116]	; (80017f8 <HAL_I2C_MspInit+0xc4>)
 8001782:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001784:	4a1c      	ldr	r2, [pc, #112]	; (80017f8 <HAL_I2C_MspInit+0xc4>)
 8001786:	f043 0302 	orr.w	r3, r3, #2
 800178a:	64d3      	str	r3, [r2, #76]	; 0x4c
 800178c:	4b1a      	ldr	r3, [pc, #104]	; (80017f8 <HAL_I2C_MspInit+0xc4>)
 800178e:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001790:	f003 0302 	and.w	r3, r3, #2
 8001794:	613b      	str	r3, [r7, #16]
 8001796:	693b      	ldr	r3, [r7, #16]
    /**I2C1 GPIO Configuration
    PB8     ------> I2C1_SCL
    PB9     ------> I2C1_SDA
    */
    GPIO_InitStruct.Pin = GPIO_PIN_8|GPIO_PIN_9;
 8001798:	f44f 7340 	mov.w	r3, #768	; 0x300
 800179c:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 80017a0:	2312      	movs	r3, #18
 80017a2:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80017a6:	2300      	movs	r3, #0
 80017a8:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80017ac:	2303      	movs	r3, #3
 80017ae:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C1;
 80017b2:	2304      	movs	r3, #4
 80017b4:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80017b8:	f107 039c 	add.w	r3, r7, #156	; 0x9c
 80017bc:	4619      	mov	r1, r3
 80017be:	480f      	ldr	r0, [pc, #60]	; (80017fc <HAL_I2C_MspInit+0xc8>)
 80017c0:	f000 fc3a 	bl	8002038 <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_I2C1_CLK_ENABLE();
 80017c4:	4b0c      	ldr	r3, [pc, #48]	; (80017f8 <HAL_I2C_MspInit+0xc4>)
 80017c6:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80017c8:	4a0b      	ldr	r2, [pc, #44]	; (80017f8 <HAL_I2C_MspInit+0xc4>)
 80017ca:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 80017ce:	6593      	str	r3, [r2, #88]	; 0x58
 80017d0:	4b09      	ldr	r3, [pc, #36]	; (80017f8 <HAL_I2C_MspInit+0xc4>)
 80017d2:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80017d4:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 80017d8:	60fb      	str	r3, [r7, #12]
 80017da:	68fb      	ldr	r3, [r7, #12]
    /* I2C1 interrupt Init */
    HAL_NVIC_SetPriority(I2C1_EV_IRQn, 0, 0);
 80017dc:	2200      	movs	r2, #0
 80017de:	2100      	movs	r1, #0
 80017e0:	201f      	movs	r0, #31
 80017e2:	f000 fb66 	bl	8001eb2 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(I2C1_EV_IRQn);
 80017e6:	201f      	movs	r0, #31
 80017e8:	f000 fb7f 	bl	8001eea <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN I2C1_MspInit 1 */

  /* USER CODE END I2C1_MspInit 1 */
  }

}
 80017ec:	bf00      	nop
 80017ee:	37b0      	adds	r7, #176	; 0xb0
 80017f0:	46bd      	mov	sp, r7
 80017f2:	bd80      	pop	{r7, pc}
 80017f4:	40005400 	.word	0x40005400
 80017f8:	40021000 	.word	0x40021000
 80017fc:	48000400 	.word	0x48000400

08001800 <HAL_TIM_Base_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_base: TIM_Base handle pointer
* @retval None
*/
void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* htim_base)
{
 8001800:	b580      	push	{r7, lr}
 8001802:	b084      	sub	sp, #16
 8001804:	af00      	add	r7, sp, #0
 8001806:	6078      	str	r0, [r7, #4]
  if(htim_base->Instance==TIM16)
 8001808:	687b      	ldr	r3, [r7, #4]
 800180a:	681b      	ldr	r3, [r3, #0]
 800180c:	4a1a      	ldr	r2, [pc, #104]	; (8001878 <HAL_TIM_Base_MspInit+0x78>)
 800180e:	4293      	cmp	r3, r2
 8001810:	d114      	bne.n	800183c <HAL_TIM_Base_MspInit+0x3c>
  {
  /* USER CODE BEGIN TIM16_MspInit 0 */

  /* USER CODE END TIM16_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM16_CLK_ENABLE();
 8001812:	4b1a      	ldr	r3, [pc, #104]	; (800187c <HAL_TIM_Base_MspInit+0x7c>)
 8001814:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8001816:	4a19      	ldr	r2, [pc, #100]	; (800187c <HAL_TIM_Base_MspInit+0x7c>)
 8001818:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 800181c:	6613      	str	r3, [r2, #96]	; 0x60
 800181e:	4b17      	ldr	r3, [pc, #92]	; (800187c <HAL_TIM_Base_MspInit+0x7c>)
 8001820:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8001822:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001826:	60fb      	str	r3, [r7, #12]
 8001828:	68fb      	ldr	r3, [r7, #12]
    /* TIM16 interrupt Init */
    HAL_NVIC_SetPriority(TIM1_UP_TIM16_IRQn, 0, 0);
 800182a:	2200      	movs	r2, #0
 800182c:	2100      	movs	r1, #0
 800182e:	2019      	movs	r0, #25
 8001830:	f000 fb3f 	bl	8001eb2 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM1_UP_TIM16_IRQn);
 8001834:	2019      	movs	r0, #25
 8001836:	f000 fb58 	bl	8001eea <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN TIM17_MspInit 1 */

  /* USER CODE END TIM17_MspInit 1 */
  }

}
 800183a:	e018      	b.n	800186e <HAL_TIM_Base_MspInit+0x6e>
  else if(htim_base->Instance==TIM17)
 800183c:	687b      	ldr	r3, [r7, #4]
 800183e:	681b      	ldr	r3, [r3, #0]
 8001840:	4a0f      	ldr	r2, [pc, #60]	; (8001880 <HAL_TIM_Base_MspInit+0x80>)
 8001842:	4293      	cmp	r3, r2
 8001844:	d113      	bne.n	800186e <HAL_TIM_Base_MspInit+0x6e>
    __HAL_RCC_TIM17_CLK_ENABLE();
 8001846:	4b0d      	ldr	r3, [pc, #52]	; (800187c <HAL_TIM_Base_MspInit+0x7c>)
 8001848:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800184a:	4a0c      	ldr	r2, [pc, #48]	; (800187c <HAL_TIM_Base_MspInit+0x7c>)
 800184c:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8001850:	6613      	str	r3, [r2, #96]	; 0x60
 8001852:	4b0a      	ldr	r3, [pc, #40]	; (800187c <HAL_TIM_Base_MspInit+0x7c>)
 8001854:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8001856:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 800185a:	60bb      	str	r3, [r7, #8]
 800185c:	68bb      	ldr	r3, [r7, #8]
    HAL_NVIC_SetPriority(TIM1_TRG_COM_TIM17_IRQn, 0, 0);
 800185e:	2200      	movs	r2, #0
 8001860:	2100      	movs	r1, #0
 8001862:	201a      	movs	r0, #26
 8001864:	f000 fb25 	bl	8001eb2 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM1_TRG_COM_TIM17_IRQn);
 8001868:	201a      	movs	r0, #26
 800186a:	f000 fb3e 	bl	8001eea <HAL_NVIC_EnableIRQ>
}
 800186e:	bf00      	nop
 8001870:	3710      	adds	r7, #16
 8001872:	46bd      	mov	sp, r7
 8001874:	bd80      	pop	{r7, pc}
 8001876:	bf00      	nop
 8001878:	40014400 	.word	0x40014400
 800187c:	40021000 	.word	0x40021000
 8001880:	40014800 	.word	0x40014800

08001884 <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 8001884:	b580      	push	{r7, lr}
 8001886:	b0ac      	sub	sp, #176	; 0xb0
 8001888:	af00      	add	r7, sp, #0
 800188a:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800188c:	f107 039c 	add.w	r3, r7, #156	; 0x9c
 8001890:	2200      	movs	r2, #0
 8001892:	601a      	str	r2, [r3, #0]
 8001894:	605a      	str	r2, [r3, #4]
 8001896:	609a      	str	r2, [r3, #8]
 8001898:	60da      	str	r2, [r3, #12]
 800189a:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 800189c:	f107 0314 	add.w	r3, r7, #20
 80018a0:	2288      	movs	r2, #136	; 0x88
 80018a2:	2100      	movs	r1, #0
 80018a4:	4618      	mov	r0, r3
 80018a6:	f005 fb91 	bl	8006fcc <memset>
  if(huart->Instance==USART2)
 80018aa:	687b      	ldr	r3, [r7, #4]
 80018ac:	681b      	ldr	r3, [r3, #0]
 80018ae:	4a25      	ldr	r2, [pc, #148]	; (8001944 <HAL_UART_MspInit+0xc0>)
 80018b0:	4293      	cmp	r3, r2
 80018b2:	d143      	bne.n	800193c <HAL_UART_MspInit+0xb8>

  /* USER CODE END USART2_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_USART2;
 80018b4:	2302      	movs	r3, #2
 80018b6:	617b      	str	r3, [r7, #20]
    PeriphClkInit.Usart2ClockSelection = RCC_USART2CLKSOURCE_PCLK1;
 80018b8:	2300      	movs	r3, #0
 80018ba:	653b      	str	r3, [r7, #80]	; 0x50
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 80018bc:	f107 0314 	add.w	r3, r7, #20
 80018c0:	4618      	mov	r0, r3
 80018c2:	f003 fadd 	bl	8004e80 <HAL_RCCEx_PeriphCLKConfig>
 80018c6:	4603      	mov	r3, r0
 80018c8:	2b00      	cmp	r3, #0
 80018ca:	d001      	beq.n	80018d0 <HAL_UART_MspInit+0x4c>
    {
      Error_Handler();
 80018cc:	f7ff ff08 	bl	80016e0 <Error_Handler>
    }

    /* Peripheral clock enable */
    __HAL_RCC_USART2_CLK_ENABLE();
 80018d0:	4b1d      	ldr	r3, [pc, #116]	; (8001948 <HAL_UART_MspInit+0xc4>)
 80018d2:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80018d4:	4a1c      	ldr	r2, [pc, #112]	; (8001948 <HAL_UART_MspInit+0xc4>)
 80018d6:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80018da:	6593      	str	r3, [r2, #88]	; 0x58
 80018dc:	4b1a      	ldr	r3, [pc, #104]	; (8001948 <HAL_UART_MspInit+0xc4>)
 80018de:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80018e0:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80018e4:	613b      	str	r3, [r7, #16]
 80018e6:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 80018e8:	4b17      	ldr	r3, [pc, #92]	; (8001948 <HAL_UART_MspInit+0xc4>)
 80018ea:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80018ec:	4a16      	ldr	r2, [pc, #88]	; (8001948 <HAL_UART_MspInit+0xc4>)
 80018ee:	f043 0301 	orr.w	r3, r3, #1
 80018f2:	64d3      	str	r3, [r2, #76]	; 0x4c
 80018f4:	4b14      	ldr	r3, [pc, #80]	; (8001948 <HAL_UART_MspInit+0xc4>)
 80018f6:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80018f8:	f003 0301 	and.w	r3, r3, #1
 80018fc:	60fb      	str	r3, [r7, #12]
 80018fe:	68fb      	ldr	r3, [r7, #12]
    /**USART2 GPIO Configuration
    PA2     ------> USART2_TX
    PA3     ------> USART2_RX
    */
    GPIO_InitStruct.Pin = USART_TX_Pin|USART_RX_Pin;
 8001900:	230c      	movs	r3, #12
 8001902:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001906:	2302      	movs	r3, #2
 8001908:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800190c:	2300      	movs	r3, #0
 800190e:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001912:	2303      	movs	r3, #3
 8001914:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
    GPIO_InitStruct.Alternate = GPIO_AF7_USART2;
 8001918:	2307      	movs	r3, #7
 800191a:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800191e:	f107 039c 	add.w	r3, r7, #156	; 0x9c
 8001922:	4619      	mov	r1, r3
 8001924:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8001928:	f000 fb86 	bl	8002038 <HAL_GPIO_Init>

    /* USART2 interrupt Init */
    HAL_NVIC_SetPriority(USART2_IRQn, 0, 0);
 800192c:	2200      	movs	r2, #0
 800192e:	2100      	movs	r1, #0
 8001930:	2026      	movs	r0, #38	; 0x26
 8001932:	f000 fabe 	bl	8001eb2 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART2_IRQn);
 8001936:	2026      	movs	r0, #38	; 0x26
 8001938:	f000 fad7 	bl	8001eea <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN USART2_MspInit 1 */

  /* USER CODE END USART2_MspInit 1 */
  }

}
 800193c:	bf00      	nop
 800193e:	37b0      	adds	r7, #176	; 0xb0
 8001940:	46bd      	mov	sp, r7
 8001942:	bd80      	pop	{r7, pc}
 8001944:	40004400 	.word	0x40004400
 8001948:	40021000 	.word	0x40021000

0800194c <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 800194c:	b480      	push	{r7}
 800194e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 8001950:	e7fe      	b.n	8001950 <NMI_Handler+0x4>

08001952 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8001952:	b480      	push	{r7}
 8001954:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8001956:	e7fe      	b.n	8001956 <HardFault_Handler+0x4>

08001958 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8001958:	b480      	push	{r7}
 800195a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 800195c:	e7fe      	b.n	800195c <MemManage_Handler+0x4>

0800195e <BusFault_Handler>:

/**
  * @brief This function handles Prefetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 800195e:	b480      	push	{r7}
 8001960:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8001962:	e7fe      	b.n	8001962 <BusFault_Handler+0x4>

08001964 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8001964:	b480      	push	{r7}
 8001966:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8001968:	e7fe      	b.n	8001968 <UsageFault_Handler+0x4>

0800196a <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 800196a:	b480      	push	{r7}
 800196c:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 800196e:	bf00      	nop
 8001970:	46bd      	mov	sp, r7
 8001972:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001976:	4770      	bx	lr

08001978 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8001978:	b480      	push	{r7}
 800197a:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 800197c:	bf00      	nop
 800197e:	46bd      	mov	sp, r7
 8001980:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001984:	4770      	bx	lr

08001986 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8001986:	b480      	push	{r7}
 8001988:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 800198a:	bf00      	nop
 800198c:	46bd      	mov	sp, r7
 800198e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001992:	4770      	bx	lr

08001994 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8001994:	b580      	push	{r7, lr}
 8001996:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8001998:	f000 f990 	bl	8001cbc <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 800199c:	bf00      	nop
 800199e:	bd80      	pop	{r7, pc}

080019a0 <EXTI9_5_IRQHandler>:

/**
  * @brief This function handles EXTI line[9:5] interrupts.
  */
void EXTI9_5_IRQHandler(void)
{
 80019a0:	b580      	push	{r7, lr}
 80019a2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI9_5_IRQn 0 */

  /* USER CODE END EXTI9_5_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(SENSOR_INT_Pin);
 80019a4:	2020      	movs	r0, #32
 80019a6:	f000 fd3b 	bl	8002420 <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI9_5_IRQn 1 */

  /* USER CODE END EXTI9_5_IRQn 1 */
}
 80019aa:	bf00      	nop
 80019ac:	bd80      	pop	{r7, pc}
	...

080019b0 <TIM1_UP_TIM16_IRQHandler>:

/**
  * @brief This function handles TIM1 update interrupt and TIM16 global interrupt.
  */
void TIM1_UP_TIM16_IRQHandler(void)
{
 80019b0:	b580      	push	{r7, lr}
 80019b2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM1_UP_TIM16_IRQn 0 */

  /* USER CODE END TIM1_UP_TIM16_IRQn 0 */
  HAL_TIM_IRQHandler(&htim16);
 80019b4:	4802      	ldr	r0, [pc, #8]	; (80019c0 <TIM1_UP_TIM16_IRQHandler+0x10>)
 80019b6:	f003 ffe7 	bl	8005988 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM1_UP_TIM16_IRQn 1 */

  /* USER CODE END TIM1_UP_TIM16_IRQn 1 */
}
 80019ba:	bf00      	nop
 80019bc:	bd80      	pop	{r7, pc}
 80019be:	bf00      	nop
 80019c0:	20000250 	.word	0x20000250

080019c4 <TIM1_TRG_COM_TIM17_IRQHandler>:

/**
  * @brief This function handles TIM1 trigger and commutation interrupts and TIM17 global interrupt.
  */
void TIM1_TRG_COM_TIM17_IRQHandler(void)
{
 80019c4:	b580      	push	{r7, lr}
 80019c6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM1_TRG_COM_TIM17_IRQn 0 */

  /* USER CODE END TIM1_TRG_COM_TIM17_IRQn 0 */
  HAL_TIM_IRQHandler(&htim17);
 80019c8:	4802      	ldr	r0, [pc, #8]	; (80019d4 <TIM1_TRG_COM_TIM17_IRQHandler+0x10>)
 80019ca:	f003 ffdd 	bl	8005988 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM1_TRG_COM_TIM17_IRQn 1 */

  /* USER CODE END TIM1_TRG_COM_TIM17_IRQn 1 */
}
 80019ce:	bf00      	nop
 80019d0:	bd80      	pop	{r7, pc}
 80019d2:	bf00      	nop
 80019d4:	2000029c 	.word	0x2000029c

080019d8 <I2C1_EV_IRQHandler>:

/**
  * @brief This function handles I2C1 event interrupt.
  */
void I2C1_EV_IRQHandler(void)
{
 80019d8:	b580      	push	{r7, lr}
 80019da:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN I2C1_EV_IRQn 0 */

  /* USER CODE END I2C1_EV_IRQn 0 */
  HAL_I2C_EV_IRQHandler(&hi2c1);
 80019dc:	4802      	ldr	r0, [pc, #8]	; (80019e8 <I2C1_EV_IRQHandler+0x10>)
 80019de:	f000 ff61 	bl	80028a4 <HAL_I2C_EV_IRQHandler>
  /* USER CODE BEGIN I2C1_EV_IRQn 1 */

  /* USER CODE END I2C1_EV_IRQn 1 */
}
 80019e2:	bf00      	nop
 80019e4:	bd80      	pop	{r7, pc}
 80019e6:	bf00      	nop
 80019e8:	200001fc 	.word	0x200001fc

080019ec <USART2_IRQHandler>:

/**
  * @brief This function handles USART2 global interrupt.
  */
void USART2_IRQHandler(void)
{
 80019ec:	b580      	push	{r7, lr}
 80019ee:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USART2_IRQn 0 */

  /* USER CODE END USART2_IRQn 0 */
  HAL_UART_IRQHandler(&huart2);
 80019f0:	4802      	ldr	r0, [pc, #8]	; (80019fc <USART2_IRQHandler+0x10>)
 80019f2:	f004 faab 	bl	8005f4c <HAL_UART_IRQHandler>
  /* USER CODE BEGIN USART2_IRQn 1 */

  /* USER CODE END USART2_IRQn 1 */
}
 80019f6:	bf00      	nop
 80019f8:	bd80      	pop	{r7, pc}
 80019fa:	bf00      	nop
 80019fc:	200002e8 	.word	0x200002e8

08001a00 <_getpid>:
void initialise_monitor_handles()
{
}

int _getpid(void)
{
 8001a00:	b480      	push	{r7}
 8001a02:	af00      	add	r7, sp, #0
  return 1;
 8001a04:	2301      	movs	r3, #1
}
 8001a06:	4618      	mov	r0, r3
 8001a08:	46bd      	mov	sp, r7
 8001a0a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001a0e:	4770      	bx	lr

08001a10 <_kill>:

int _kill(int pid, int sig)
{
 8001a10:	b580      	push	{r7, lr}
 8001a12:	b082      	sub	sp, #8
 8001a14:	af00      	add	r7, sp, #0
 8001a16:	6078      	str	r0, [r7, #4]
 8001a18:	6039      	str	r1, [r7, #0]
  (void)pid;
  (void)sig;
  errno = EINVAL;
 8001a1a:	f005 faad 	bl	8006f78 <__errno>
 8001a1e:	4603      	mov	r3, r0
 8001a20:	2216      	movs	r2, #22
 8001a22:	601a      	str	r2, [r3, #0]
  return -1;
 8001a24:	f04f 33ff 	mov.w	r3, #4294967295
}
 8001a28:	4618      	mov	r0, r3
 8001a2a:	3708      	adds	r7, #8
 8001a2c:	46bd      	mov	sp, r7
 8001a2e:	bd80      	pop	{r7, pc}

08001a30 <_exit>:

void _exit (int status)
{
 8001a30:	b580      	push	{r7, lr}
 8001a32:	b082      	sub	sp, #8
 8001a34:	af00      	add	r7, sp, #0
 8001a36:	6078      	str	r0, [r7, #4]
  _kill(status, -1);
 8001a38:	f04f 31ff 	mov.w	r1, #4294967295
 8001a3c:	6878      	ldr	r0, [r7, #4]
 8001a3e:	f7ff ffe7 	bl	8001a10 <_kill>
  while (1) {}    /* Make sure we hang here */
 8001a42:	e7fe      	b.n	8001a42 <_exit+0x12>

08001a44 <_read>:
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 8001a44:	b580      	push	{r7, lr}
 8001a46:	b086      	sub	sp, #24
 8001a48:	af00      	add	r7, sp, #0
 8001a4a:	60f8      	str	r0, [r7, #12]
 8001a4c:	60b9      	str	r1, [r7, #8]
 8001a4e:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8001a50:	2300      	movs	r3, #0
 8001a52:	617b      	str	r3, [r7, #20]
 8001a54:	e00a      	b.n	8001a6c <_read+0x28>
  {
    *ptr++ = __io_getchar();
 8001a56:	f3af 8000 	nop.w
 8001a5a:	4601      	mov	r1, r0
 8001a5c:	68bb      	ldr	r3, [r7, #8]
 8001a5e:	1c5a      	adds	r2, r3, #1
 8001a60:	60ba      	str	r2, [r7, #8]
 8001a62:	b2ca      	uxtb	r2, r1
 8001a64:	701a      	strb	r2, [r3, #0]
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8001a66:	697b      	ldr	r3, [r7, #20]
 8001a68:	3301      	adds	r3, #1
 8001a6a:	617b      	str	r3, [r7, #20]
 8001a6c:	697a      	ldr	r2, [r7, #20]
 8001a6e:	687b      	ldr	r3, [r7, #4]
 8001a70:	429a      	cmp	r2, r3
 8001a72:	dbf0      	blt.n	8001a56 <_read+0x12>
  }

  return len;
 8001a74:	687b      	ldr	r3, [r7, #4]
}
 8001a76:	4618      	mov	r0, r3
 8001a78:	3718      	adds	r7, #24
 8001a7a:	46bd      	mov	sp, r7
 8001a7c:	bd80      	pop	{r7, pc}

08001a7e <_write>:

__attribute__((weak)) int _write(int file, char *ptr, int len)
{
 8001a7e:	b580      	push	{r7, lr}
 8001a80:	b086      	sub	sp, #24
 8001a82:	af00      	add	r7, sp, #0
 8001a84:	60f8      	str	r0, [r7, #12]
 8001a86:	60b9      	str	r1, [r7, #8]
 8001a88:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8001a8a:	2300      	movs	r3, #0
 8001a8c:	617b      	str	r3, [r7, #20]
 8001a8e:	e009      	b.n	8001aa4 <_write+0x26>
  {
    __io_putchar(*ptr++);
 8001a90:	68bb      	ldr	r3, [r7, #8]
 8001a92:	1c5a      	adds	r2, r3, #1
 8001a94:	60ba      	str	r2, [r7, #8]
 8001a96:	781b      	ldrb	r3, [r3, #0]
 8001a98:	4618      	mov	r0, r3
 8001a9a:	f3af 8000 	nop.w
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8001a9e:	697b      	ldr	r3, [r7, #20]
 8001aa0:	3301      	adds	r3, #1
 8001aa2:	617b      	str	r3, [r7, #20]
 8001aa4:	697a      	ldr	r2, [r7, #20]
 8001aa6:	687b      	ldr	r3, [r7, #4]
 8001aa8:	429a      	cmp	r2, r3
 8001aaa:	dbf1      	blt.n	8001a90 <_write+0x12>
  }
  return len;
 8001aac:	687b      	ldr	r3, [r7, #4]
}
 8001aae:	4618      	mov	r0, r3
 8001ab0:	3718      	adds	r7, #24
 8001ab2:	46bd      	mov	sp, r7
 8001ab4:	bd80      	pop	{r7, pc}

08001ab6 <_close>:

int _close(int file)
{
 8001ab6:	b480      	push	{r7}
 8001ab8:	b083      	sub	sp, #12
 8001aba:	af00      	add	r7, sp, #0
 8001abc:	6078      	str	r0, [r7, #4]
  (void)file;
  return -1;
 8001abe:	f04f 33ff 	mov.w	r3, #4294967295
}
 8001ac2:	4618      	mov	r0, r3
 8001ac4:	370c      	adds	r7, #12
 8001ac6:	46bd      	mov	sp, r7
 8001ac8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001acc:	4770      	bx	lr

08001ace <_fstat>:


int _fstat(int file, struct stat *st)
{
 8001ace:	b480      	push	{r7}
 8001ad0:	b083      	sub	sp, #12
 8001ad2:	af00      	add	r7, sp, #0
 8001ad4:	6078      	str	r0, [r7, #4]
 8001ad6:	6039      	str	r1, [r7, #0]
  (void)file;
  st->st_mode = S_IFCHR;
 8001ad8:	683b      	ldr	r3, [r7, #0]
 8001ada:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 8001ade:	605a      	str	r2, [r3, #4]
  return 0;
 8001ae0:	2300      	movs	r3, #0
}
 8001ae2:	4618      	mov	r0, r3
 8001ae4:	370c      	adds	r7, #12
 8001ae6:	46bd      	mov	sp, r7
 8001ae8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001aec:	4770      	bx	lr

08001aee <_isatty>:

int _isatty(int file)
{
 8001aee:	b480      	push	{r7}
 8001af0:	b083      	sub	sp, #12
 8001af2:	af00      	add	r7, sp, #0
 8001af4:	6078      	str	r0, [r7, #4]
  (void)file;
  return 1;
 8001af6:	2301      	movs	r3, #1
}
 8001af8:	4618      	mov	r0, r3
 8001afa:	370c      	adds	r7, #12
 8001afc:	46bd      	mov	sp, r7
 8001afe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001b02:	4770      	bx	lr

08001b04 <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 8001b04:	b480      	push	{r7}
 8001b06:	b085      	sub	sp, #20
 8001b08:	af00      	add	r7, sp, #0
 8001b0a:	60f8      	str	r0, [r7, #12]
 8001b0c:	60b9      	str	r1, [r7, #8]
 8001b0e:	607a      	str	r2, [r7, #4]
  (void)file;
  (void)ptr;
  (void)dir;
  return 0;
 8001b10:	2300      	movs	r3, #0
}
 8001b12:	4618      	mov	r0, r3
 8001b14:	3714      	adds	r7, #20
 8001b16:	46bd      	mov	sp, r7
 8001b18:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001b1c:	4770      	bx	lr
	...

08001b20 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8001b20:	b580      	push	{r7, lr}
 8001b22:	b086      	sub	sp, #24
 8001b24:	af00      	add	r7, sp, #0
 8001b26:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8001b28:	4a14      	ldr	r2, [pc, #80]	; (8001b7c <_sbrk+0x5c>)
 8001b2a:	4b15      	ldr	r3, [pc, #84]	; (8001b80 <_sbrk+0x60>)
 8001b2c:	1ad3      	subs	r3, r2, r3
 8001b2e:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8001b30:	697b      	ldr	r3, [r7, #20]
 8001b32:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8001b34:	4b13      	ldr	r3, [pc, #76]	; (8001b84 <_sbrk+0x64>)
 8001b36:	681b      	ldr	r3, [r3, #0]
 8001b38:	2b00      	cmp	r3, #0
 8001b3a:	d102      	bne.n	8001b42 <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8001b3c:	4b11      	ldr	r3, [pc, #68]	; (8001b84 <_sbrk+0x64>)
 8001b3e:	4a12      	ldr	r2, [pc, #72]	; (8001b88 <_sbrk+0x68>)
 8001b40:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 8001b42:	4b10      	ldr	r3, [pc, #64]	; (8001b84 <_sbrk+0x64>)
 8001b44:	681a      	ldr	r2, [r3, #0]
 8001b46:	687b      	ldr	r3, [r7, #4]
 8001b48:	4413      	add	r3, r2
 8001b4a:	693a      	ldr	r2, [r7, #16]
 8001b4c:	429a      	cmp	r2, r3
 8001b4e:	d207      	bcs.n	8001b60 <_sbrk+0x40>
  {
    errno = ENOMEM;
 8001b50:	f005 fa12 	bl	8006f78 <__errno>
 8001b54:	4603      	mov	r3, r0
 8001b56:	220c      	movs	r2, #12
 8001b58:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 8001b5a:	f04f 33ff 	mov.w	r3, #4294967295
 8001b5e:	e009      	b.n	8001b74 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8001b60:	4b08      	ldr	r3, [pc, #32]	; (8001b84 <_sbrk+0x64>)
 8001b62:	681b      	ldr	r3, [r3, #0]
 8001b64:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 8001b66:	4b07      	ldr	r3, [pc, #28]	; (8001b84 <_sbrk+0x64>)
 8001b68:	681a      	ldr	r2, [r3, #0]
 8001b6a:	687b      	ldr	r3, [r7, #4]
 8001b6c:	4413      	add	r3, r2
 8001b6e:	4a05      	ldr	r2, [pc, #20]	; (8001b84 <_sbrk+0x64>)
 8001b70:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 8001b72:	68fb      	ldr	r3, [r7, #12]
}
 8001b74:	4618      	mov	r0, r3
 8001b76:	3718      	adds	r7, #24
 8001b78:	46bd      	mov	sp, r7
 8001b7a:	bd80      	pop	{r7, pc}
 8001b7c:	20018000 	.word	0x20018000
 8001b80:	00000400 	.word	0x00000400
 8001b84:	20000424 	.word	0x20000424
 8001b88:	20000440 	.word	0x20000440

08001b8c <SystemInit>:
  * @brief  Setup the microcontroller system.
  * @retval None
  */

void SystemInit(void)
{
 8001b8c:	b480      	push	{r7}
 8001b8e:	af00      	add	r7, sp, #0
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET;
#endif

  /* FPU settings ------------------------------------------------------------*/
#if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
  SCB->CPACR |= ((3UL << 20U)|(3UL << 22U));  /* set CP10 and CP11 Full Access */
 8001b90:	4b06      	ldr	r3, [pc, #24]	; (8001bac <SystemInit+0x20>)
 8001b92:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8001b96:	4a05      	ldr	r2, [pc, #20]	; (8001bac <SystemInit+0x20>)
 8001b98:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8001b9c:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88
#endif
}
 8001ba0:	bf00      	nop
 8001ba2:	46bd      	mov	sp, r7
 8001ba4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001ba8:	4770      	bx	lr
 8001baa:	bf00      	nop
 8001bac:	e000ed00 	.word	0xe000ed00

08001bb0 <Reset_Handler>:

    .section	.text.Reset_Handler
	.weak	Reset_Handler
	.type	Reset_Handler, %function
Reset_Handler:
  ldr   sp, =_estack    /* Set stack pointer */
 8001bb0:	f8df d034 	ldr.w	sp, [pc, #52]	; 8001be8 <LoopForever+0x2>

/* Call the clock system initialization function.*/
    bl  SystemInit
 8001bb4:	f7ff ffea 	bl	8001b8c <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 8001bb8:	480c      	ldr	r0, [pc, #48]	; (8001bec <LoopForever+0x6>)
  ldr r1, =_edata
 8001bba:	490d      	ldr	r1, [pc, #52]	; (8001bf0 <LoopForever+0xa>)
  ldr r2, =_sidata
 8001bbc:	4a0d      	ldr	r2, [pc, #52]	; (8001bf4 <LoopForever+0xe>)
  movs r3, #0
 8001bbe:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8001bc0:	e002      	b.n	8001bc8 <LoopCopyDataInit>

08001bc2 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8001bc2:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8001bc4:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8001bc6:	3304      	adds	r3, #4

08001bc8 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8001bc8:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8001bca:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8001bcc:	d3f9      	bcc.n	8001bc2 <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8001bce:	4a0a      	ldr	r2, [pc, #40]	; (8001bf8 <LoopForever+0x12>)
  ldr r4, =_ebss
 8001bd0:	4c0a      	ldr	r4, [pc, #40]	; (8001bfc <LoopForever+0x16>)
  movs r3, #0
 8001bd2:	2300      	movs	r3, #0
  b LoopFillZerobss
 8001bd4:	e001      	b.n	8001bda <LoopFillZerobss>

08001bd6 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8001bd6:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8001bd8:	3204      	adds	r2, #4

08001bda <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8001bda:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8001bdc:	d3fb      	bcc.n	8001bd6 <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 8001bde:	f005 f9d1 	bl	8006f84 <__libc_init_array>
/* Call the application's entry point.*/
	bl	main
 8001be2:	f7ff fb69 	bl	80012b8 <main>

08001be6 <LoopForever>:

LoopForever:
    b LoopForever
 8001be6:	e7fe      	b.n	8001be6 <LoopForever>
  ldr   sp, =_estack    /* Set stack pointer */
 8001be8:	20018000 	.word	0x20018000
  ldr r0, =_sdata
 8001bec:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8001bf0:	200001e0 	.word	0x200001e0
  ldr r2, =_sidata
 8001bf4:	0800beb4 	.word	0x0800beb4
  ldr r2, =_sbss
 8001bf8:	200001e0 	.word	0x200001e0
  ldr r4, =_ebss
 8001bfc:	2000043c 	.word	0x2000043c

08001c00 <ADC1_2_IRQHandler>:
 * @retval : None
*/
    .section	.text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
	b	Infinite_Loop
 8001c00:	e7fe      	b.n	8001c00 <ADC1_2_IRQHandler>
	...

08001c04 <HAL_Init>:
  *         each 1ms in the SysTick_Handler() interrupt handler.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8001c04:	b580      	push	{r7, lr}
 8001c06:	b082      	sub	sp, #8
 8001c08:	af00      	add	r7, sp, #0
  HAL_StatusTypeDef  status = HAL_OK;
 8001c0a:	2300      	movs	r3, #0
 8001c0c:	71fb      	strb	r3, [r7, #7]
#if (DATA_CACHE_ENABLE == 0)
   __HAL_FLASH_DATA_CACHE_DISABLE();
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8001c0e:	4b0c      	ldr	r3, [pc, #48]	; (8001c40 <HAL_Init+0x3c>)
 8001c10:	681b      	ldr	r3, [r3, #0]
 8001c12:	4a0b      	ldr	r2, [pc, #44]	; (8001c40 <HAL_Init+0x3c>)
 8001c14:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8001c18:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8001c1a:	2003      	movs	r0, #3
 8001c1c:	f000 f93e 	bl	8001e9c <HAL_NVIC_SetPriorityGrouping>

  /* Use SysTick as time base source and configure 1ms tick (default clock after Reset is MSI) */
  if (HAL_InitTick(TICK_INT_PRIORITY) != HAL_OK)
 8001c20:	2000      	movs	r0, #0
 8001c22:	f000 f80f 	bl	8001c44 <HAL_InitTick>
 8001c26:	4603      	mov	r3, r0
 8001c28:	2b00      	cmp	r3, #0
 8001c2a:	d002      	beq.n	8001c32 <HAL_Init+0x2e>
  {
    status = HAL_ERROR;
 8001c2c:	2301      	movs	r3, #1
 8001c2e:	71fb      	strb	r3, [r7, #7]
 8001c30:	e001      	b.n	8001c36 <HAL_Init+0x32>
  }
  else
  {
    /* Init the low level hardware */
    HAL_MspInit();
 8001c32:	f7ff fd5b 	bl	80016ec <HAL_MspInit>
  }

  /* Return function status */
  return status;
 8001c36:	79fb      	ldrb	r3, [r7, #7]
}
 8001c38:	4618      	mov	r0, r3
 8001c3a:	3708      	adds	r7, #8
 8001c3c:	46bd      	mov	sp, r7
 8001c3e:	bd80      	pop	{r7, pc}
 8001c40:	40022000 	.word	0x40022000

08001c44 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority  Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8001c44:	b580      	push	{r7, lr}
 8001c46:	b084      	sub	sp, #16
 8001c48:	af00      	add	r7, sp, #0
 8001c4a:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef  status = HAL_OK;
 8001c4c:	2300      	movs	r3, #0
 8001c4e:	73fb      	strb	r3, [r7, #15]

  /* Check uwTickFreq for MisraC 2012 (even if uwTickFreq is a enum type that doesn't take the value zero)*/
  if ((uint32_t)uwTickFreq != 0U)
 8001c50:	4b17      	ldr	r3, [pc, #92]	; (8001cb0 <HAL_InitTick+0x6c>)
 8001c52:	781b      	ldrb	r3, [r3, #0]
 8001c54:	2b00      	cmp	r3, #0
 8001c56:	d023      	beq.n	8001ca0 <HAL_InitTick+0x5c>
  {
    /*Configure the SysTick to have interrupt in 1ms time basis*/
    if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / (uint32_t)uwTickFreq)) == 0U)
 8001c58:	4b16      	ldr	r3, [pc, #88]	; (8001cb4 <HAL_InitTick+0x70>)
 8001c5a:	681a      	ldr	r2, [r3, #0]
 8001c5c:	4b14      	ldr	r3, [pc, #80]	; (8001cb0 <HAL_InitTick+0x6c>)
 8001c5e:	781b      	ldrb	r3, [r3, #0]
 8001c60:	4619      	mov	r1, r3
 8001c62:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8001c66:	fbb3 f3f1 	udiv	r3, r3, r1
 8001c6a:	fbb2 f3f3 	udiv	r3, r2, r3
 8001c6e:	4618      	mov	r0, r3
 8001c70:	f000 f949 	bl	8001f06 <HAL_SYSTICK_Config>
 8001c74:	4603      	mov	r3, r0
 8001c76:	2b00      	cmp	r3, #0
 8001c78:	d10f      	bne.n	8001c9a <HAL_InitTick+0x56>
    {
      /* Configure the SysTick IRQ priority */
      if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8001c7a:	687b      	ldr	r3, [r7, #4]
 8001c7c:	2b0f      	cmp	r3, #15
 8001c7e:	d809      	bhi.n	8001c94 <HAL_InitTick+0x50>
      {
        HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8001c80:	2200      	movs	r2, #0
 8001c82:	6879      	ldr	r1, [r7, #4]
 8001c84:	f04f 30ff 	mov.w	r0, #4294967295
 8001c88:	f000 f913 	bl	8001eb2 <HAL_NVIC_SetPriority>
        uwTickPrio = TickPriority;
 8001c8c:	4a0a      	ldr	r2, [pc, #40]	; (8001cb8 <HAL_InitTick+0x74>)
 8001c8e:	687b      	ldr	r3, [r7, #4]
 8001c90:	6013      	str	r3, [r2, #0]
 8001c92:	e007      	b.n	8001ca4 <HAL_InitTick+0x60>
      }
      else
      {
        status = HAL_ERROR;
 8001c94:	2301      	movs	r3, #1
 8001c96:	73fb      	strb	r3, [r7, #15]
 8001c98:	e004      	b.n	8001ca4 <HAL_InitTick+0x60>
      }
    }
    else
    {
      status = HAL_ERROR;
 8001c9a:	2301      	movs	r3, #1
 8001c9c:	73fb      	strb	r3, [r7, #15]
 8001c9e:	e001      	b.n	8001ca4 <HAL_InitTick+0x60>
    }
  }
  else
  {
    status = HAL_ERROR;
 8001ca0:	2301      	movs	r3, #1
 8001ca2:	73fb      	strb	r3, [r7, #15]
  }

  /* Return function status */
  return status;
 8001ca4:	7bfb      	ldrb	r3, [r7, #15]
}
 8001ca6:	4618      	mov	r0, r3
 8001ca8:	3710      	adds	r7, #16
 8001caa:	46bd      	mov	sp, r7
 8001cac:	bd80      	pop	{r7, pc}
 8001cae:	bf00      	nop
 8001cb0:	20000008 	.word	0x20000008
 8001cb4:	20000000 	.word	0x20000000
 8001cb8:	20000004 	.word	0x20000004

08001cbc <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8001cbc:	b480      	push	{r7}
 8001cbe:	af00      	add	r7, sp, #0
  uwTick += (uint32_t)uwTickFreq;
 8001cc0:	4b06      	ldr	r3, [pc, #24]	; (8001cdc <HAL_IncTick+0x20>)
 8001cc2:	781b      	ldrb	r3, [r3, #0]
 8001cc4:	461a      	mov	r2, r3
 8001cc6:	4b06      	ldr	r3, [pc, #24]	; (8001ce0 <HAL_IncTick+0x24>)
 8001cc8:	681b      	ldr	r3, [r3, #0]
 8001cca:	4413      	add	r3, r2
 8001ccc:	4a04      	ldr	r2, [pc, #16]	; (8001ce0 <HAL_IncTick+0x24>)
 8001cce:	6013      	str	r3, [r2, #0]
}
 8001cd0:	bf00      	nop
 8001cd2:	46bd      	mov	sp, r7
 8001cd4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001cd8:	4770      	bx	lr
 8001cda:	bf00      	nop
 8001cdc:	20000008 	.word	0x20000008
 8001ce0:	20000428 	.word	0x20000428

08001ce4 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8001ce4:	b480      	push	{r7}
 8001ce6:	af00      	add	r7, sp, #0
  return uwTick;
 8001ce8:	4b03      	ldr	r3, [pc, #12]	; (8001cf8 <HAL_GetTick+0x14>)
 8001cea:	681b      	ldr	r3, [r3, #0]
}
 8001cec:	4618      	mov	r0, r3
 8001cee:	46bd      	mov	sp, r7
 8001cf0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001cf4:	4770      	bx	lr
 8001cf6:	bf00      	nop
 8001cf8:	20000428 	.word	0x20000428

08001cfc <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8001cfc:	b480      	push	{r7}
 8001cfe:	b085      	sub	sp, #20
 8001d00:	af00      	add	r7, sp, #0
 8001d02:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8001d04:	687b      	ldr	r3, [r7, #4]
 8001d06:	f003 0307 	and.w	r3, r3, #7
 8001d0a:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8001d0c:	4b0c      	ldr	r3, [pc, #48]	; (8001d40 <__NVIC_SetPriorityGrouping+0x44>)
 8001d0e:	68db      	ldr	r3, [r3, #12]
 8001d10:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8001d12:	68ba      	ldr	r2, [r7, #8]
 8001d14:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8001d18:	4013      	ands	r3, r2
 8001d1a:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8001d1c:	68fb      	ldr	r3, [r7, #12]
 8001d1e:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8001d20:	68bb      	ldr	r3, [r7, #8]
 8001d22:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8001d24:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8001d28:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8001d2c:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8001d2e:	4a04      	ldr	r2, [pc, #16]	; (8001d40 <__NVIC_SetPriorityGrouping+0x44>)
 8001d30:	68bb      	ldr	r3, [r7, #8]
 8001d32:	60d3      	str	r3, [r2, #12]
}
 8001d34:	bf00      	nop
 8001d36:	3714      	adds	r7, #20
 8001d38:	46bd      	mov	sp, r7
 8001d3a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001d3e:	4770      	bx	lr
 8001d40:	e000ed00 	.word	0xe000ed00

08001d44 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8001d44:	b480      	push	{r7}
 8001d46:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8001d48:	4b04      	ldr	r3, [pc, #16]	; (8001d5c <__NVIC_GetPriorityGrouping+0x18>)
 8001d4a:	68db      	ldr	r3, [r3, #12]
 8001d4c:	0a1b      	lsrs	r3, r3, #8
 8001d4e:	f003 0307 	and.w	r3, r3, #7
}
 8001d52:	4618      	mov	r0, r3
 8001d54:	46bd      	mov	sp, r7
 8001d56:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001d5a:	4770      	bx	lr
 8001d5c:	e000ed00 	.word	0xe000ed00

08001d60 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8001d60:	b480      	push	{r7}
 8001d62:	b083      	sub	sp, #12
 8001d64:	af00      	add	r7, sp, #0
 8001d66:	4603      	mov	r3, r0
 8001d68:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8001d6a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001d6e:	2b00      	cmp	r3, #0
 8001d70:	db0b      	blt.n	8001d8a <__NVIC_EnableIRQ+0x2a>
  {
    __COMPILER_BARRIER();
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8001d72:	79fb      	ldrb	r3, [r7, #7]
 8001d74:	f003 021f 	and.w	r2, r3, #31
 8001d78:	4907      	ldr	r1, [pc, #28]	; (8001d98 <__NVIC_EnableIRQ+0x38>)
 8001d7a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001d7e:	095b      	lsrs	r3, r3, #5
 8001d80:	2001      	movs	r0, #1
 8001d82:	fa00 f202 	lsl.w	r2, r0, r2
 8001d86:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    __COMPILER_BARRIER();
  }
}
 8001d8a:	bf00      	nop
 8001d8c:	370c      	adds	r7, #12
 8001d8e:	46bd      	mov	sp, r7
 8001d90:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001d94:	4770      	bx	lr
 8001d96:	bf00      	nop
 8001d98:	e000e100 	.word	0xe000e100

08001d9c <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8001d9c:	b480      	push	{r7}
 8001d9e:	b083      	sub	sp, #12
 8001da0:	af00      	add	r7, sp, #0
 8001da2:	4603      	mov	r3, r0
 8001da4:	6039      	str	r1, [r7, #0]
 8001da6:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8001da8:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001dac:	2b00      	cmp	r3, #0
 8001dae:	db0a      	blt.n	8001dc6 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001db0:	683b      	ldr	r3, [r7, #0]
 8001db2:	b2da      	uxtb	r2, r3
 8001db4:	490c      	ldr	r1, [pc, #48]	; (8001de8 <__NVIC_SetPriority+0x4c>)
 8001db6:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001dba:	0112      	lsls	r2, r2, #4
 8001dbc:	b2d2      	uxtb	r2, r2
 8001dbe:	440b      	add	r3, r1
 8001dc0:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8001dc4:	e00a      	b.n	8001ddc <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001dc6:	683b      	ldr	r3, [r7, #0]
 8001dc8:	b2da      	uxtb	r2, r3
 8001dca:	4908      	ldr	r1, [pc, #32]	; (8001dec <__NVIC_SetPriority+0x50>)
 8001dcc:	79fb      	ldrb	r3, [r7, #7]
 8001dce:	f003 030f 	and.w	r3, r3, #15
 8001dd2:	3b04      	subs	r3, #4
 8001dd4:	0112      	lsls	r2, r2, #4
 8001dd6:	b2d2      	uxtb	r2, r2
 8001dd8:	440b      	add	r3, r1
 8001dda:	761a      	strb	r2, [r3, #24]
}
 8001ddc:	bf00      	nop
 8001dde:	370c      	adds	r7, #12
 8001de0:	46bd      	mov	sp, r7
 8001de2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001de6:	4770      	bx	lr
 8001de8:	e000e100 	.word	0xe000e100
 8001dec:	e000ed00 	.word	0xe000ed00

08001df0 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8001df0:	b480      	push	{r7}
 8001df2:	b089      	sub	sp, #36	; 0x24
 8001df4:	af00      	add	r7, sp, #0
 8001df6:	60f8      	str	r0, [r7, #12]
 8001df8:	60b9      	str	r1, [r7, #8]
 8001dfa:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8001dfc:	68fb      	ldr	r3, [r7, #12]
 8001dfe:	f003 0307 	and.w	r3, r3, #7
 8001e02:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8001e04:	69fb      	ldr	r3, [r7, #28]
 8001e06:	f1c3 0307 	rsb	r3, r3, #7
 8001e0a:	2b04      	cmp	r3, #4
 8001e0c:	bf28      	it	cs
 8001e0e:	2304      	movcs	r3, #4
 8001e10:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8001e12:	69fb      	ldr	r3, [r7, #28]
 8001e14:	3304      	adds	r3, #4
 8001e16:	2b06      	cmp	r3, #6
 8001e18:	d902      	bls.n	8001e20 <NVIC_EncodePriority+0x30>
 8001e1a:	69fb      	ldr	r3, [r7, #28]
 8001e1c:	3b03      	subs	r3, #3
 8001e1e:	e000      	b.n	8001e22 <NVIC_EncodePriority+0x32>
 8001e20:	2300      	movs	r3, #0
 8001e22:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001e24:	f04f 32ff 	mov.w	r2, #4294967295
 8001e28:	69bb      	ldr	r3, [r7, #24]
 8001e2a:	fa02 f303 	lsl.w	r3, r2, r3
 8001e2e:	43da      	mvns	r2, r3
 8001e30:	68bb      	ldr	r3, [r7, #8]
 8001e32:	401a      	ands	r2, r3
 8001e34:	697b      	ldr	r3, [r7, #20]
 8001e36:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8001e38:	f04f 31ff 	mov.w	r1, #4294967295
 8001e3c:	697b      	ldr	r3, [r7, #20]
 8001e3e:	fa01 f303 	lsl.w	r3, r1, r3
 8001e42:	43d9      	mvns	r1, r3
 8001e44:	687b      	ldr	r3, [r7, #4]
 8001e46:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001e48:	4313      	orrs	r3, r2
         );
}
 8001e4a:	4618      	mov	r0, r3
 8001e4c:	3724      	adds	r7, #36	; 0x24
 8001e4e:	46bd      	mov	sp, r7
 8001e50:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001e54:	4770      	bx	lr
	...

08001e58 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8001e58:	b580      	push	{r7, lr}
 8001e5a:	b082      	sub	sp, #8
 8001e5c:	af00      	add	r7, sp, #0
 8001e5e:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8001e60:	687b      	ldr	r3, [r7, #4]
 8001e62:	3b01      	subs	r3, #1
 8001e64:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8001e68:	d301      	bcc.n	8001e6e <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8001e6a:	2301      	movs	r3, #1
 8001e6c:	e00f      	b.n	8001e8e <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8001e6e:	4a0a      	ldr	r2, [pc, #40]	; (8001e98 <SysTick_Config+0x40>)
 8001e70:	687b      	ldr	r3, [r7, #4]
 8001e72:	3b01      	subs	r3, #1
 8001e74:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8001e76:	210f      	movs	r1, #15
 8001e78:	f04f 30ff 	mov.w	r0, #4294967295
 8001e7c:	f7ff ff8e 	bl	8001d9c <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8001e80:	4b05      	ldr	r3, [pc, #20]	; (8001e98 <SysTick_Config+0x40>)
 8001e82:	2200      	movs	r2, #0
 8001e84:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8001e86:	4b04      	ldr	r3, [pc, #16]	; (8001e98 <SysTick_Config+0x40>)
 8001e88:	2207      	movs	r2, #7
 8001e8a:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8001e8c:	2300      	movs	r3, #0
}
 8001e8e:	4618      	mov	r0, r3
 8001e90:	3708      	adds	r7, #8
 8001e92:	46bd      	mov	sp, r7
 8001e94:	bd80      	pop	{r7, pc}
 8001e96:	bf00      	nop
 8001e98:	e000e010 	.word	0xe000e010

08001e9c <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ pre-emption is no more possible.
  *         The pending IRQ priority will be managed only by the subpriority.
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8001e9c:	b580      	push	{r7, lr}
 8001e9e:	b082      	sub	sp, #8
 8001ea0:	af00      	add	r7, sp, #0
 8001ea2:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));

  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8001ea4:	6878      	ldr	r0, [r7, #4]
 8001ea6:	f7ff ff29 	bl	8001cfc <__NVIC_SetPriorityGrouping>
}
 8001eaa:	bf00      	nop
 8001eac:	3708      	adds	r7, #8
 8001eae:	46bd      	mov	sp, r7
 8001eb0:	bd80      	pop	{r7, pc}

08001eb2 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8001eb2:	b580      	push	{r7, lr}
 8001eb4:	b086      	sub	sp, #24
 8001eb6:	af00      	add	r7, sp, #0
 8001eb8:	4603      	mov	r3, r0
 8001eba:	60b9      	str	r1, [r7, #8]
 8001ebc:	607a      	str	r2, [r7, #4]
 8001ebe:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00;
 8001ec0:	2300      	movs	r3, #0
 8001ec2:	617b      	str	r3, [r7, #20]

  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));

  prioritygroup = NVIC_GetPriorityGrouping();
 8001ec4:	f7ff ff3e 	bl	8001d44 <__NVIC_GetPriorityGrouping>
 8001ec8:	6178      	str	r0, [r7, #20]

  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8001eca:	687a      	ldr	r2, [r7, #4]
 8001ecc:	68b9      	ldr	r1, [r7, #8]
 8001ece:	6978      	ldr	r0, [r7, #20]
 8001ed0:	f7ff ff8e 	bl	8001df0 <NVIC_EncodePriority>
 8001ed4:	4602      	mov	r2, r0
 8001ed6:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8001eda:	4611      	mov	r1, r2
 8001edc:	4618      	mov	r0, r3
 8001ede:	f7ff ff5d 	bl	8001d9c <__NVIC_SetPriority>
}
 8001ee2:	bf00      	nop
 8001ee4:	3718      	adds	r7, #24
 8001ee6:	46bd      	mov	sp, r7
 8001ee8:	bd80      	pop	{r7, pc}

08001eea <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32l4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8001eea:	b580      	push	{r7, lr}
 8001eec:	b082      	sub	sp, #8
 8001eee:	af00      	add	r7, sp, #0
 8001ef0:	4603      	mov	r3, r0
 8001ef2:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8001ef4:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001ef8:	4618      	mov	r0, r3
 8001efa:	f7ff ff31 	bl	8001d60 <__NVIC_EnableIRQ>
}
 8001efe:	bf00      	nop
 8001f00:	3708      	adds	r7, #8
 8001f02:	46bd      	mov	sp, r7
 8001f04:	bd80      	pop	{r7, pc}

08001f06 <HAL_SYSTICK_Config>:
  * @param  TicksNumb: Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8001f06:	b580      	push	{r7, lr}
 8001f08:	b082      	sub	sp, #8
 8001f0a:	af00      	add	r7, sp, #0
 8001f0c:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8001f0e:	6878      	ldr	r0, [r7, #4]
 8001f10:	f7ff ffa2 	bl	8001e58 <SysTick_Config>
 8001f14:	4603      	mov	r3, r0
}
 8001f16:	4618      	mov	r0, r3
 8001f18:	3708      	adds	r7, #8
 8001f1a:	46bd      	mov	sp, r7
 8001f1c:	bd80      	pop	{r7, pc}

08001f1e <HAL_DMA_Abort>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Channel.
    * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort(DMA_HandleTypeDef *hdma)
{
 8001f1e:	b480      	push	{r7}
 8001f20:	b085      	sub	sp, #20
 8001f22:	af00      	add	r7, sp, #0
 8001f24:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8001f26:	2300      	movs	r3, #0
 8001f28:	73fb      	strb	r3, [r7, #15]

  /* Check the DMA peripheral state */
  if(hdma->State != HAL_DMA_STATE_BUSY)
 8001f2a:	687b      	ldr	r3, [r7, #4]
 8001f2c:	f893 3025 	ldrb.w	r3, [r3, #37]	; 0x25
 8001f30:	b2db      	uxtb	r3, r3
 8001f32:	2b02      	cmp	r3, #2
 8001f34:	d008      	beq.n	8001f48 <HAL_DMA_Abort+0x2a>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8001f36:	687b      	ldr	r3, [r7, #4]
 8001f38:	2204      	movs	r2, #4
 8001f3a:	63da      	str	r2, [r3, #60]	; 0x3c

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8001f3c:	687b      	ldr	r3, [r7, #4]
 8001f3e:	2200      	movs	r2, #0
 8001f40:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

    return HAL_ERROR;
 8001f44:	2301      	movs	r3, #1
 8001f46:	e022      	b.n	8001f8e <HAL_DMA_Abort+0x70>
  }
  else
  {
    /* Disable DMA IT */
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 8001f48:	687b      	ldr	r3, [r7, #4]
 8001f4a:	681b      	ldr	r3, [r3, #0]
 8001f4c:	681a      	ldr	r2, [r3, #0]
 8001f4e:	687b      	ldr	r3, [r7, #4]
 8001f50:	681b      	ldr	r3, [r3, #0]
 8001f52:	f022 020e 	bic.w	r2, r2, #14
 8001f56:	601a      	str	r2, [r3, #0]
    /* disable the DMAMUX sync overrun IT*/
    hdma->DMAmuxChannel->CCR &= ~DMAMUX_CxCR_SOIE;
#endif /* DMAMUX1 */

    /* Disable the channel */
    __HAL_DMA_DISABLE(hdma);
 8001f58:	687b      	ldr	r3, [r7, #4]
 8001f5a:	681b      	ldr	r3, [r3, #0]
 8001f5c:	681a      	ldr	r2, [r3, #0]
 8001f5e:	687b      	ldr	r3, [r7, #4]
 8001f60:	681b      	ldr	r3, [r3, #0]
 8001f62:	f022 0201 	bic.w	r2, r2, #1
 8001f66:	601a      	str	r2, [r3, #0]

    /* Clear all flags */
    hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << (hdma->ChannelIndex & 0x1CU));
 8001f68:	687b      	ldr	r3, [r7, #4]
 8001f6a:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001f6c:	f003 021c 	and.w	r2, r3, #28
 8001f70:	687b      	ldr	r3, [r7, #4]
 8001f72:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001f74:	2101      	movs	r1, #1
 8001f76:	fa01 f202 	lsl.w	r2, r1, r2
 8001f7a:	605a      	str	r2, [r3, #4]
    }

#endif /* DMAMUX1 */

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 8001f7c:	687b      	ldr	r3, [r7, #4]
 8001f7e:	2201      	movs	r2, #1
 8001f80:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8001f84:	687b      	ldr	r3, [r7, #4]
 8001f86:	2200      	movs	r2, #0
 8001f88:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

    return status;
 8001f8c:	7bfb      	ldrb	r3, [r7, #15]
  }
}
 8001f8e:	4618      	mov	r0, r3
 8001f90:	3714      	adds	r7, #20
 8001f92:	46bd      	mov	sp, r7
 8001f94:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001f98:	4770      	bx	lr

08001f9a <HAL_DMA_Abort_IT>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *                 the configuration information for the specified DMA Channel.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{
 8001f9a:	b580      	push	{r7, lr}
 8001f9c:	b084      	sub	sp, #16
 8001f9e:	af00      	add	r7, sp, #0
 8001fa0:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8001fa2:	2300      	movs	r3, #0
 8001fa4:	73fb      	strb	r3, [r7, #15]

  if(HAL_DMA_STATE_BUSY != hdma->State)
 8001fa6:	687b      	ldr	r3, [r7, #4]
 8001fa8:	f893 3025 	ldrb.w	r3, [r3, #37]	; 0x25
 8001fac:	b2db      	uxtb	r3, r3
 8001fae:	2b02      	cmp	r3, #2
 8001fb0:	d005      	beq.n	8001fbe <HAL_DMA_Abort_IT+0x24>
  {
    /* no transfer ongoing */
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8001fb2:	687b      	ldr	r3, [r7, #4]
 8001fb4:	2204      	movs	r2, #4
 8001fb6:	63da      	str	r2, [r3, #60]	; 0x3c

    status = HAL_ERROR;
 8001fb8:	2301      	movs	r3, #1
 8001fba:	73fb      	strb	r3, [r7, #15]
 8001fbc:	e029      	b.n	8002012 <HAL_DMA_Abort_IT+0x78>
  }
  else
  {
    /* Disable DMA IT */
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 8001fbe:	687b      	ldr	r3, [r7, #4]
 8001fc0:	681b      	ldr	r3, [r3, #0]
 8001fc2:	681a      	ldr	r2, [r3, #0]
 8001fc4:	687b      	ldr	r3, [r7, #4]
 8001fc6:	681b      	ldr	r3, [r3, #0]
 8001fc8:	f022 020e 	bic.w	r2, r2, #14
 8001fcc:	601a      	str	r2, [r3, #0]

    /* Disable the channel */
    __HAL_DMA_DISABLE(hdma);
 8001fce:	687b      	ldr	r3, [r7, #4]
 8001fd0:	681b      	ldr	r3, [r3, #0]
 8001fd2:	681a      	ldr	r2, [r3, #0]
 8001fd4:	687b      	ldr	r3, [r7, #4]
 8001fd6:	681b      	ldr	r3, [r3, #0]
 8001fd8:	f022 0201 	bic.w	r2, r2, #1
 8001fdc:	601a      	str	r2, [r3, #0]
      hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
    }

#else
    /* Clear all flags */
    hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << (hdma->ChannelIndex & 0x1CU));
 8001fde:	687b      	ldr	r3, [r7, #4]
 8001fe0:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001fe2:	f003 021c 	and.w	r2, r3, #28
 8001fe6:	687b      	ldr	r3, [r7, #4]
 8001fe8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001fea:	2101      	movs	r1, #1
 8001fec:	fa01 f202 	lsl.w	r2, r1, r2
 8001ff0:	605a      	str	r2, [r3, #4]
#endif /* DMAMUX1 */

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 8001ff2:	687b      	ldr	r3, [r7, #4]
 8001ff4:	2201      	movs	r2, #1
 8001ff6:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8001ffa:	687b      	ldr	r3, [r7, #4]
 8001ffc:	2200      	movs	r2, #0
 8001ffe:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

    /* Call User Abort callback */
    if(hdma->XferAbortCallback != NULL)
 8002002:	687b      	ldr	r3, [r7, #4]
 8002004:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002006:	2b00      	cmp	r3, #0
 8002008:	d003      	beq.n	8002012 <HAL_DMA_Abort_IT+0x78>
    {
      hdma->XferAbortCallback(hdma);
 800200a:	687b      	ldr	r3, [r7, #4]
 800200c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800200e:	6878      	ldr	r0, [r7, #4]
 8002010:	4798      	blx	r3
    }
  }
  return status;
 8002012:	7bfb      	ldrb	r3, [r7, #15]
}
 8002014:	4618      	mov	r0, r3
 8002016:	3710      	adds	r7, #16
 8002018:	46bd      	mov	sp, r7
 800201a:	bd80      	pop	{r7, pc}

0800201c <HAL_DMA_GetState>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Channel.
  * @retval HAL state
  */
HAL_DMA_StateTypeDef HAL_DMA_GetState(DMA_HandleTypeDef *hdma)
{
 800201c:	b480      	push	{r7}
 800201e:	b083      	sub	sp, #12
 8002020:	af00      	add	r7, sp, #0
 8002022:	6078      	str	r0, [r7, #4]
  /* Return DMA handle state */
  return hdma->State;
 8002024:	687b      	ldr	r3, [r7, #4]
 8002026:	f893 3025 	ldrb.w	r3, [r3, #37]	; 0x25
 800202a:	b2db      	uxtb	r3, r3
}
 800202c:	4618      	mov	r0, r3
 800202e:	370c      	adds	r7, #12
 8002030:	46bd      	mov	sp, r7
 8002032:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002036:	4770      	bx	lr

08002038 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8002038:	b480      	push	{r7}
 800203a:	b087      	sub	sp, #28
 800203c:	af00      	add	r7, sp, #0
 800203e:	6078      	str	r0, [r7, #4]
 8002040:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 8002042:	2300      	movs	r3, #0
 8002044:	617b      	str	r3, [r7, #20]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8002046:	e17f      	b.n	8002348 <HAL_GPIO_Init+0x310>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1uL << position);
 8002048:	683b      	ldr	r3, [r7, #0]
 800204a:	681a      	ldr	r2, [r3, #0]
 800204c:	2101      	movs	r1, #1
 800204e:	697b      	ldr	r3, [r7, #20]
 8002050:	fa01 f303 	lsl.w	r3, r1, r3
 8002054:	4013      	ands	r3, r2
 8002056:	60fb      	str	r3, [r7, #12]

    if (iocurrent != 0x00u)
 8002058:	68fb      	ldr	r3, [r7, #12]
 800205a:	2b00      	cmp	r3, #0
 800205c:	f000 8171 	beq.w	8002342 <HAL_GPIO_Init+0x30a>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if (((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 8002060:	683b      	ldr	r3, [r7, #0]
 8002062:	685b      	ldr	r3, [r3, #4]
 8002064:	f003 0303 	and.w	r3, r3, #3
 8002068:	2b01      	cmp	r3, #1
 800206a:	d005      	beq.n	8002078 <HAL_GPIO_Init+0x40>
 800206c:	683b      	ldr	r3, [r7, #0]
 800206e:	685b      	ldr	r3, [r3, #4]
 8002070:	f003 0303 	and.w	r3, r3, #3
 8002074:	2b02      	cmp	r3, #2
 8002076:	d130      	bne.n	80020da <HAL_GPIO_Init+0xa2>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));

        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 8002078:	687b      	ldr	r3, [r7, #4]
 800207a:	689b      	ldr	r3, [r3, #8]
 800207c:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OSPEEDR_OSPEED0 << (position * 2u));
 800207e:	697b      	ldr	r3, [r7, #20]
 8002080:	005b      	lsls	r3, r3, #1
 8002082:	2203      	movs	r2, #3
 8002084:	fa02 f303 	lsl.w	r3, r2, r3
 8002088:	43db      	mvns	r3, r3
 800208a:	693a      	ldr	r2, [r7, #16]
 800208c:	4013      	ands	r3, r2
 800208e:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_Init->Speed << (position * 2u));
 8002090:	683b      	ldr	r3, [r7, #0]
 8002092:	68da      	ldr	r2, [r3, #12]
 8002094:	697b      	ldr	r3, [r7, #20]
 8002096:	005b      	lsls	r3, r3, #1
 8002098:	fa02 f303 	lsl.w	r3, r2, r3
 800209c:	693a      	ldr	r2, [r7, #16]
 800209e:	4313      	orrs	r3, r2
 80020a0:	613b      	str	r3, [r7, #16]
        GPIOx->OSPEEDR = temp;
 80020a2:	687b      	ldr	r3, [r7, #4]
 80020a4:	693a      	ldr	r2, [r7, #16]
 80020a6:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 80020a8:	687b      	ldr	r3, [r7, #4]
 80020aa:	685b      	ldr	r3, [r3, #4]
 80020ac:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OTYPER_OT0 << position) ;
 80020ae:	2201      	movs	r2, #1
 80020b0:	697b      	ldr	r3, [r7, #20]
 80020b2:	fa02 f303 	lsl.w	r3, r2, r3
 80020b6:	43db      	mvns	r3, r3
 80020b8:	693a      	ldr	r2, [r7, #16]
 80020ba:	4013      	ands	r3, r2
 80020bc:	613b      	str	r3, [r7, #16]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 80020be:	683b      	ldr	r3, [r7, #0]
 80020c0:	685b      	ldr	r3, [r3, #4]
 80020c2:	091b      	lsrs	r3, r3, #4
 80020c4:	f003 0201 	and.w	r2, r3, #1
 80020c8:	697b      	ldr	r3, [r7, #20]
 80020ca:	fa02 f303 	lsl.w	r3, r2, r3
 80020ce:	693a      	ldr	r2, [r7, #16]
 80020d0:	4313      	orrs	r3, r2
 80020d2:	613b      	str	r3, [r7, #16]
        GPIOx->OTYPER = temp;
 80020d4:	687b      	ldr	r3, [r7, #4]
 80020d6:	693a      	ldr	r2, [r7, #16]
 80020d8:	605a      	str	r2, [r3, #4]
      }

#if defined(STM32L471xx) || defined(STM32L475xx) || defined(STM32L476xx) || defined(STM32L485xx) || defined(STM32L486xx)

      /* In case of Analog mode, check if ADC control mode is selected */
      if((GPIO_Init->Mode & GPIO_MODE_ANALOG) == GPIO_MODE_ANALOG)
 80020da:	683b      	ldr	r3, [r7, #0]
 80020dc:	685b      	ldr	r3, [r3, #4]
 80020de:	f003 0303 	and.w	r3, r3, #3
 80020e2:	2b03      	cmp	r3, #3
 80020e4:	d118      	bne.n	8002118 <HAL_GPIO_Init+0xe0>
      {
        /* Configure the IO Output Type */
        temp = GPIOx->ASCR;
 80020e6:	687b      	ldr	r3, [r7, #4]
 80020e8:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80020ea:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_ASCR_ASC0 << position) ;
 80020ec:	2201      	movs	r2, #1
 80020ee:	697b      	ldr	r3, [r7, #20]
 80020f0:	fa02 f303 	lsl.w	r3, r2, r3
 80020f4:	43db      	mvns	r3, r3
 80020f6:	693a      	ldr	r2, [r7, #16]
 80020f8:	4013      	ands	r3, r2
 80020fa:	613b      	str	r3, [r7, #16]
        temp |= (((GPIO_Init->Mode & GPIO_MODE_ANALOG_ADC_CONTROL) >> 3) << position);
 80020fc:	683b      	ldr	r3, [r7, #0]
 80020fe:	685b      	ldr	r3, [r3, #4]
 8002100:	08db      	lsrs	r3, r3, #3
 8002102:	f003 0201 	and.w	r2, r3, #1
 8002106:	697b      	ldr	r3, [r7, #20]
 8002108:	fa02 f303 	lsl.w	r3, r2, r3
 800210c:	693a      	ldr	r2, [r7, #16]
 800210e:	4313      	orrs	r3, r2
 8002110:	613b      	str	r3, [r7, #16]
        GPIOx->ASCR = temp;
 8002112:	687b      	ldr	r3, [r7, #4]
 8002114:	693a      	ldr	r2, [r7, #16]
 8002116:	62da      	str	r2, [r3, #44]	; 0x2c
      }

#endif /* STM32L471xx || STM32L475xx || STM32L476xx || STM32L485xx || STM32L486xx */

      /* Activate the Pull-up or Pull down resistor for the current IO */
      if ((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8002118:	683b      	ldr	r3, [r7, #0]
 800211a:	685b      	ldr	r3, [r3, #4]
 800211c:	f003 0303 	and.w	r3, r3, #3
 8002120:	2b03      	cmp	r3, #3
 8002122:	d017      	beq.n	8002154 <HAL_GPIO_Init+0x11c>
      {
        /* Check the Pull parameter */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

        temp = GPIOx->PUPDR;
 8002124:	687b      	ldr	r3, [r7, #4]
 8002126:	68db      	ldr	r3, [r3, #12]
 8002128:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_PUPDR_PUPD0 << (position * 2U));
 800212a:	697b      	ldr	r3, [r7, #20]
 800212c:	005b      	lsls	r3, r3, #1
 800212e:	2203      	movs	r2, #3
 8002130:	fa02 f303 	lsl.w	r3, r2, r3
 8002134:	43db      	mvns	r3, r3
 8002136:	693a      	ldr	r2, [r7, #16]
 8002138:	4013      	ands	r3, r2
 800213a:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 800213c:	683b      	ldr	r3, [r7, #0]
 800213e:	689a      	ldr	r2, [r3, #8]
 8002140:	697b      	ldr	r3, [r7, #20]
 8002142:	005b      	lsls	r3, r3, #1
 8002144:	fa02 f303 	lsl.w	r3, r2, r3
 8002148:	693a      	ldr	r2, [r7, #16]
 800214a:	4313      	orrs	r3, r2
 800214c:	613b      	str	r3, [r7, #16]
        GPIOx->PUPDR = temp;
 800214e:	687b      	ldr	r3, [r7, #4]
 8002150:	693a      	ldr	r2, [r7, #16]
 8002152:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8002154:	683b      	ldr	r3, [r7, #0]
 8002156:	685b      	ldr	r3, [r3, #4]
 8002158:	f003 0303 	and.w	r3, r3, #3
 800215c:	2b02      	cmp	r3, #2
 800215e:	d123      	bne.n	80021a8 <HAL_GPIO_Init+0x170>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3u];
 8002160:	697b      	ldr	r3, [r7, #20]
 8002162:	08da      	lsrs	r2, r3, #3
 8002164:	687b      	ldr	r3, [r7, #4]
 8002166:	3208      	adds	r2, #8
 8002168:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800216c:	613b      	str	r3, [r7, #16]
        temp &= ~(0xFu << ((position & 0x07u) * 4u));
 800216e:	697b      	ldr	r3, [r7, #20]
 8002170:	f003 0307 	and.w	r3, r3, #7
 8002174:	009b      	lsls	r3, r3, #2
 8002176:	220f      	movs	r2, #15
 8002178:	fa02 f303 	lsl.w	r3, r2, r3
 800217c:	43db      	mvns	r3, r3
 800217e:	693a      	ldr	r2, [r7, #16]
 8002180:	4013      	ands	r3, r2
 8002182:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07u) * 4u));
 8002184:	683b      	ldr	r3, [r7, #0]
 8002186:	691a      	ldr	r2, [r3, #16]
 8002188:	697b      	ldr	r3, [r7, #20]
 800218a:	f003 0307 	and.w	r3, r3, #7
 800218e:	009b      	lsls	r3, r3, #2
 8002190:	fa02 f303 	lsl.w	r3, r2, r3
 8002194:	693a      	ldr	r2, [r7, #16]
 8002196:	4313      	orrs	r3, r2
 8002198:	613b      	str	r3, [r7, #16]
        GPIOx->AFR[position >> 3u] = temp;
 800219a:	697b      	ldr	r3, [r7, #20]
 800219c:	08da      	lsrs	r2, r3, #3
 800219e:	687b      	ldr	r3, [r7, #4]
 80021a0:	3208      	adds	r2, #8
 80021a2:	6939      	ldr	r1, [r7, #16]
 80021a4:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 80021a8:	687b      	ldr	r3, [r7, #4]
 80021aa:	681b      	ldr	r3, [r3, #0]
 80021ac:	613b      	str	r3, [r7, #16]
      temp &= ~(GPIO_MODER_MODE0 << (position * 2u));
 80021ae:	697b      	ldr	r3, [r7, #20]
 80021b0:	005b      	lsls	r3, r3, #1
 80021b2:	2203      	movs	r2, #3
 80021b4:	fa02 f303 	lsl.w	r3, r2, r3
 80021b8:	43db      	mvns	r3, r3
 80021ba:	693a      	ldr	r2, [r7, #16]
 80021bc:	4013      	ands	r3, r2
 80021be:	613b      	str	r3, [r7, #16]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2u));
 80021c0:	683b      	ldr	r3, [r7, #0]
 80021c2:	685b      	ldr	r3, [r3, #4]
 80021c4:	f003 0203 	and.w	r2, r3, #3
 80021c8:	697b      	ldr	r3, [r7, #20]
 80021ca:	005b      	lsls	r3, r3, #1
 80021cc:	fa02 f303 	lsl.w	r3, r2, r3
 80021d0:	693a      	ldr	r2, [r7, #16]
 80021d2:	4313      	orrs	r3, r2
 80021d4:	613b      	str	r3, [r7, #16]
      GPIOx->MODER = temp;
 80021d6:	687b      	ldr	r3, [r7, #4]
 80021d8:	693a      	ldr	r2, [r7, #16]
 80021da:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) != 0x00u)
 80021dc:	683b      	ldr	r3, [r7, #0]
 80021de:	685b      	ldr	r3, [r3, #4]
 80021e0:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 80021e4:	2b00      	cmp	r3, #0
 80021e6:	f000 80ac 	beq.w	8002342 <HAL_GPIO_Init+0x30a>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 80021ea:	4b5f      	ldr	r3, [pc, #380]	; (8002368 <HAL_GPIO_Init+0x330>)
 80021ec:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80021ee:	4a5e      	ldr	r2, [pc, #376]	; (8002368 <HAL_GPIO_Init+0x330>)
 80021f0:	f043 0301 	orr.w	r3, r3, #1
 80021f4:	6613      	str	r3, [r2, #96]	; 0x60
 80021f6:	4b5c      	ldr	r3, [pc, #368]	; (8002368 <HAL_GPIO_Init+0x330>)
 80021f8:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80021fa:	f003 0301 	and.w	r3, r3, #1
 80021fe:	60bb      	str	r3, [r7, #8]
 8002200:	68bb      	ldr	r3, [r7, #8]

        temp = SYSCFG->EXTICR[position >> 2u];
 8002202:	4a5a      	ldr	r2, [pc, #360]	; (800236c <HAL_GPIO_Init+0x334>)
 8002204:	697b      	ldr	r3, [r7, #20]
 8002206:	089b      	lsrs	r3, r3, #2
 8002208:	3302      	adds	r3, #2
 800220a:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800220e:	613b      	str	r3, [r7, #16]
        temp &= ~(0x0FuL << (4u * (position & 0x03u)));
 8002210:	697b      	ldr	r3, [r7, #20]
 8002212:	f003 0303 	and.w	r3, r3, #3
 8002216:	009b      	lsls	r3, r3, #2
 8002218:	220f      	movs	r2, #15
 800221a:	fa02 f303 	lsl.w	r3, r2, r3
 800221e:	43db      	mvns	r3, r3
 8002220:	693a      	ldr	r2, [r7, #16]
 8002222:	4013      	ands	r3, r2
 8002224:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_GET_INDEX(GPIOx) << (4u * (position & 0x03u)));
 8002226:	687b      	ldr	r3, [r7, #4]
 8002228:	f1b3 4f90 	cmp.w	r3, #1207959552	; 0x48000000
 800222c:	d025      	beq.n	800227a <HAL_GPIO_Init+0x242>
 800222e:	687b      	ldr	r3, [r7, #4]
 8002230:	4a4f      	ldr	r2, [pc, #316]	; (8002370 <HAL_GPIO_Init+0x338>)
 8002232:	4293      	cmp	r3, r2
 8002234:	d01f      	beq.n	8002276 <HAL_GPIO_Init+0x23e>
 8002236:	687b      	ldr	r3, [r7, #4]
 8002238:	4a4e      	ldr	r2, [pc, #312]	; (8002374 <HAL_GPIO_Init+0x33c>)
 800223a:	4293      	cmp	r3, r2
 800223c:	d019      	beq.n	8002272 <HAL_GPIO_Init+0x23a>
 800223e:	687b      	ldr	r3, [r7, #4]
 8002240:	4a4d      	ldr	r2, [pc, #308]	; (8002378 <HAL_GPIO_Init+0x340>)
 8002242:	4293      	cmp	r3, r2
 8002244:	d013      	beq.n	800226e <HAL_GPIO_Init+0x236>
 8002246:	687b      	ldr	r3, [r7, #4]
 8002248:	4a4c      	ldr	r2, [pc, #304]	; (800237c <HAL_GPIO_Init+0x344>)
 800224a:	4293      	cmp	r3, r2
 800224c:	d00d      	beq.n	800226a <HAL_GPIO_Init+0x232>
 800224e:	687b      	ldr	r3, [r7, #4]
 8002250:	4a4b      	ldr	r2, [pc, #300]	; (8002380 <HAL_GPIO_Init+0x348>)
 8002252:	4293      	cmp	r3, r2
 8002254:	d007      	beq.n	8002266 <HAL_GPIO_Init+0x22e>
 8002256:	687b      	ldr	r3, [r7, #4]
 8002258:	4a4a      	ldr	r2, [pc, #296]	; (8002384 <HAL_GPIO_Init+0x34c>)
 800225a:	4293      	cmp	r3, r2
 800225c:	d101      	bne.n	8002262 <HAL_GPIO_Init+0x22a>
 800225e:	2306      	movs	r3, #6
 8002260:	e00c      	b.n	800227c <HAL_GPIO_Init+0x244>
 8002262:	2307      	movs	r3, #7
 8002264:	e00a      	b.n	800227c <HAL_GPIO_Init+0x244>
 8002266:	2305      	movs	r3, #5
 8002268:	e008      	b.n	800227c <HAL_GPIO_Init+0x244>
 800226a:	2304      	movs	r3, #4
 800226c:	e006      	b.n	800227c <HAL_GPIO_Init+0x244>
 800226e:	2303      	movs	r3, #3
 8002270:	e004      	b.n	800227c <HAL_GPIO_Init+0x244>
 8002272:	2302      	movs	r3, #2
 8002274:	e002      	b.n	800227c <HAL_GPIO_Init+0x244>
 8002276:	2301      	movs	r3, #1
 8002278:	e000      	b.n	800227c <HAL_GPIO_Init+0x244>
 800227a:	2300      	movs	r3, #0
 800227c:	697a      	ldr	r2, [r7, #20]
 800227e:	f002 0203 	and.w	r2, r2, #3
 8002282:	0092      	lsls	r2, r2, #2
 8002284:	4093      	lsls	r3, r2
 8002286:	693a      	ldr	r2, [r7, #16]
 8002288:	4313      	orrs	r3, r2
 800228a:	613b      	str	r3, [r7, #16]
        SYSCFG->EXTICR[position >> 2u] = temp;
 800228c:	4937      	ldr	r1, [pc, #220]	; (800236c <HAL_GPIO_Init+0x334>)
 800228e:	697b      	ldr	r3, [r7, #20]
 8002290:	089b      	lsrs	r3, r3, #2
 8002292:	3302      	adds	r3, #2
 8002294:	693a      	ldr	r2, [r7, #16]
 8002296:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR1;
 800229a:	4b3b      	ldr	r3, [pc, #236]	; (8002388 <HAL_GPIO_Init+0x350>)
 800229c:	689b      	ldr	r3, [r3, #8]
 800229e:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 80022a0:	68fb      	ldr	r3, [r7, #12]
 80022a2:	43db      	mvns	r3, r3
 80022a4:	693a      	ldr	r2, [r7, #16]
 80022a6:	4013      	ands	r3, r2
 80022a8:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_RISING) != 0x00u)
 80022aa:	683b      	ldr	r3, [r7, #0]
 80022ac:	685b      	ldr	r3, [r3, #4]
 80022ae:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 80022b2:	2b00      	cmp	r3, #0
 80022b4:	d003      	beq.n	80022be <HAL_GPIO_Init+0x286>
        {
          temp |= iocurrent;
 80022b6:	693a      	ldr	r2, [r7, #16]
 80022b8:	68fb      	ldr	r3, [r7, #12]
 80022ba:	4313      	orrs	r3, r2
 80022bc:	613b      	str	r3, [r7, #16]
        }
        EXTI->RTSR1 = temp;
 80022be:	4a32      	ldr	r2, [pc, #200]	; (8002388 <HAL_GPIO_Init+0x350>)
 80022c0:	693b      	ldr	r3, [r7, #16]
 80022c2:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR1;
 80022c4:	4b30      	ldr	r3, [pc, #192]	; (8002388 <HAL_GPIO_Init+0x350>)
 80022c6:	68db      	ldr	r3, [r3, #12]
 80022c8:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 80022ca:	68fb      	ldr	r3, [r7, #12]
 80022cc:	43db      	mvns	r3, r3
 80022ce:	693a      	ldr	r2, [r7, #16]
 80022d0:	4013      	ands	r3, r2
 80022d2:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00u)
 80022d4:	683b      	ldr	r3, [r7, #0]
 80022d6:	685b      	ldr	r3, [r3, #4]
 80022d8:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 80022dc:	2b00      	cmp	r3, #0
 80022de:	d003      	beq.n	80022e8 <HAL_GPIO_Init+0x2b0>
        {
          temp |= iocurrent;
 80022e0:	693a      	ldr	r2, [r7, #16]
 80022e2:	68fb      	ldr	r3, [r7, #12]
 80022e4:	4313      	orrs	r3, r2
 80022e6:	613b      	str	r3, [r7, #16]
        }
        EXTI->FTSR1 = temp;
 80022e8:	4a27      	ldr	r2, [pc, #156]	; (8002388 <HAL_GPIO_Init+0x350>)
 80022ea:	693b      	ldr	r3, [r7, #16]
 80022ec:	60d3      	str	r3, [r2, #12]

        /* Clear EXTI line configuration */
        temp = EXTI->EMR1;
 80022ee:	4b26      	ldr	r3, [pc, #152]	; (8002388 <HAL_GPIO_Init+0x350>)
 80022f0:	685b      	ldr	r3, [r3, #4]
 80022f2:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 80022f4:	68fb      	ldr	r3, [r7, #12]
 80022f6:	43db      	mvns	r3, r3
 80022f8:	693a      	ldr	r2, [r7, #16]
 80022fa:	4013      	ands	r3, r2
 80022fc:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_EVT) != 0x00u)
 80022fe:	683b      	ldr	r3, [r7, #0]
 8002300:	685b      	ldr	r3, [r3, #4]
 8002302:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002306:	2b00      	cmp	r3, #0
 8002308:	d003      	beq.n	8002312 <HAL_GPIO_Init+0x2da>
        {
          temp |= iocurrent;
 800230a:	693a      	ldr	r2, [r7, #16]
 800230c:	68fb      	ldr	r3, [r7, #12]
 800230e:	4313      	orrs	r3, r2
 8002310:	613b      	str	r3, [r7, #16]
        }
        EXTI->EMR1 = temp;
 8002312:	4a1d      	ldr	r2, [pc, #116]	; (8002388 <HAL_GPIO_Init+0x350>)
 8002314:	693b      	ldr	r3, [r7, #16]
 8002316:	6053      	str	r3, [r2, #4]

        temp = EXTI->IMR1;
 8002318:	4b1b      	ldr	r3, [pc, #108]	; (8002388 <HAL_GPIO_Init+0x350>)
 800231a:	681b      	ldr	r3, [r3, #0]
 800231c:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 800231e:	68fb      	ldr	r3, [r7, #12]
 8002320:	43db      	mvns	r3, r3
 8002322:	693a      	ldr	r2, [r7, #16]
 8002324:	4013      	ands	r3, r2
 8002326:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_IT) != 0x00u)
 8002328:	683b      	ldr	r3, [r7, #0]
 800232a:	685b      	ldr	r3, [r3, #4]
 800232c:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8002330:	2b00      	cmp	r3, #0
 8002332:	d003      	beq.n	800233c <HAL_GPIO_Init+0x304>
        {
          temp |= iocurrent;
 8002334:	693a      	ldr	r2, [r7, #16]
 8002336:	68fb      	ldr	r3, [r7, #12]
 8002338:	4313      	orrs	r3, r2
 800233a:	613b      	str	r3, [r7, #16]
        }
        EXTI->IMR1 = temp;
 800233c:	4a12      	ldr	r2, [pc, #72]	; (8002388 <HAL_GPIO_Init+0x350>)
 800233e:	693b      	ldr	r3, [r7, #16]
 8002340:	6013      	str	r3, [r2, #0]
      }
    }

    position++;
 8002342:	697b      	ldr	r3, [r7, #20]
 8002344:	3301      	adds	r3, #1
 8002346:	617b      	str	r3, [r7, #20]
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8002348:	683b      	ldr	r3, [r7, #0]
 800234a:	681a      	ldr	r2, [r3, #0]
 800234c:	697b      	ldr	r3, [r7, #20]
 800234e:	fa22 f303 	lsr.w	r3, r2, r3
 8002352:	2b00      	cmp	r3, #0
 8002354:	f47f ae78 	bne.w	8002048 <HAL_GPIO_Init+0x10>
  }
}
 8002358:	bf00      	nop
 800235a:	bf00      	nop
 800235c:	371c      	adds	r7, #28
 800235e:	46bd      	mov	sp, r7
 8002360:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002364:	4770      	bx	lr
 8002366:	bf00      	nop
 8002368:	40021000 	.word	0x40021000
 800236c:	40010000 	.word	0x40010000
 8002370:	48000400 	.word	0x48000400
 8002374:	48000800 	.word	0x48000800
 8002378:	48000c00 	.word	0x48000c00
 800237c:	48001000 	.word	0x48001000
 8002380:	48001400 	.word	0x48001400
 8002384:	48001800 	.word	0x48001800
 8002388:	40010400 	.word	0x40010400

0800238c <HAL_GPIO_ReadPin>:
  * @param  GPIO_Pin specifies the port bit to read.
  *         This parameter can be any combination of GPIO_Pin_x where x can be (0..15).
  * @retval The input port pin value.
  */
GPIO_PinState HAL_GPIO_ReadPin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
 800238c:	b480      	push	{r7}
 800238e:	b085      	sub	sp, #20
 8002390:	af00      	add	r7, sp, #0
 8002392:	6078      	str	r0, [r7, #4]
 8002394:	460b      	mov	r3, r1
 8002396:	807b      	strh	r3, [r7, #2]
  GPIO_PinState bitstatus;

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  if ((GPIOx->IDR & GPIO_Pin) != 0x00u)
 8002398:	687b      	ldr	r3, [r7, #4]
 800239a:	691a      	ldr	r2, [r3, #16]
 800239c:	887b      	ldrh	r3, [r7, #2]
 800239e:	4013      	ands	r3, r2
 80023a0:	2b00      	cmp	r3, #0
 80023a2:	d002      	beq.n	80023aa <HAL_GPIO_ReadPin+0x1e>
  {
    bitstatus = GPIO_PIN_SET;
 80023a4:	2301      	movs	r3, #1
 80023a6:	73fb      	strb	r3, [r7, #15]
 80023a8:	e001      	b.n	80023ae <HAL_GPIO_ReadPin+0x22>
  }
  else
  {
    bitstatus = GPIO_PIN_RESET;
 80023aa:	2300      	movs	r3, #0
 80023ac:	73fb      	strb	r3, [r7, #15]
  }
  return bitstatus;
 80023ae:	7bfb      	ldrb	r3, [r7, #15]
}
 80023b0:	4618      	mov	r0, r3
 80023b2:	3714      	adds	r7, #20
 80023b4:	46bd      	mov	sp, r7
 80023b6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80023ba:	4770      	bx	lr

080023bc <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 80023bc:	b480      	push	{r7}
 80023be:	b083      	sub	sp, #12
 80023c0:	af00      	add	r7, sp, #0
 80023c2:	6078      	str	r0, [r7, #4]
 80023c4:	460b      	mov	r3, r1
 80023c6:	807b      	strh	r3, [r7, #2]
 80023c8:	4613      	mov	r3, r2
 80023ca:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 80023cc:	787b      	ldrb	r3, [r7, #1]
 80023ce:	2b00      	cmp	r3, #0
 80023d0:	d003      	beq.n	80023da <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin;
 80023d2:	887a      	ldrh	r2, [r7, #2]
 80023d4:	687b      	ldr	r3, [r7, #4]
 80023d6:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BRR = (uint32_t)GPIO_Pin;
  }
}
 80023d8:	e002      	b.n	80023e0 <HAL_GPIO_WritePin+0x24>
    GPIOx->BRR = (uint32_t)GPIO_Pin;
 80023da:	887a      	ldrh	r2, [r7, #2]
 80023dc:	687b      	ldr	r3, [r7, #4]
 80023de:	629a      	str	r2, [r3, #40]	; 0x28
}
 80023e0:	bf00      	nop
 80023e2:	370c      	adds	r7, #12
 80023e4:	46bd      	mov	sp, r7
 80023e6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80023ea:	4770      	bx	lr

080023ec <HAL_GPIO_TogglePin>:
  * @param  GPIOx where x can be (A..H) to select the GPIO peripheral for STM32L4 family
  * @param  GPIO_Pin specifies the pin to be toggled.
  * @retval None
  */
void HAL_GPIO_TogglePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
 80023ec:	b480      	push	{r7}
 80023ee:	b085      	sub	sp, #20
 80023f0:	af00      	add	r7, sp, #0
 80023f2:	6078      	str	r0, [r7, #4]
 80023f4:	460b      	mov	r3, r1
 80023f6:	807b      	strh	r3, [r7, #2]

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  /* get current Output Data Register value */
  odr = GPIOx->ODR;
 80023f8:	687b      	ldr	r3, [r7, #4]
 80023fa:	695b      	ldr	r3, [r3, #20]
 80023fc:	60fb      	str	r3, [r7, #12]

  /* Set selected pins that were at low level, and reset ones that were high */
  GPIOx->BSRR = ((odr & GPIO_Pin) << GPIO_NUMBER) | (~odr & GPIO_Pin);
 80023fe:	887a      	ldrh	r2, [r7, #2]
 8002400:	68fb      	ldr	r3, [r7, #12]
 8002402:	4013      	ands	r3, r2
 8002404:	041a      	lsls	r2, r3, #16
 8002406:	68fb      	ldr	r3, [r7, #12]
 8002408:	43d9      	mvns	r1, r3
 800240a:	887b      	ldrh	r3, [r7, #2]
 800240c:	400b      	ands	r3, r1
 800240e:	431a      	orrs	r2, r3
 8002410:	687b      	ldr	r3, [r7, #4]
 8002412:	619a      	str	r2, [r3, #24]
}
 8002414:	bf00      	nop
 8002416:	3714      	adds	r7, #20
 8002418:	46bd      	mov	sp, r7
 800241a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800241e:	4770      	bx	lr

08002420 <HAL_GPIO_EXTI_IRQHandler>:
  * @brief  Handle EXTI interrupt request.
  * @param  GPIO_Pin Specifies the port pin connected to corresponding EXTI line.
  * @retval None
  */
void HAL_GPIO_EXTI_IRQHandler(uint16_t GPIO_Pin)
{
 8002420:	b580      	push	{r7, lr}
 8002422:	b082      	sub	sp, #8
 8002424:	af00      	add	r7, sp, #0
 8002426:	4603      	mov	r3, r0
 8002428:	80fb      	strh	r3, [r7, #6]
  /* EXTI line interrupt detected */
  if(__HAL_GPIO_EXTI_GET_IT(GPIO_Pin) != 0x00u)
 800242a:	4b08      	ldr	r3, [pc, #32]	; (800244c <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 800242c:	695a      	ldr	r2, [r3, #20]
 800242e:	88fb      	ldrh	r3, [r7, #6]
 8002430:	4013      	ands	r3, r2
 8002432:	2b00      	cmp	r3, #0
 8002434:	d006      	beq.n	8002444 <HAL_GPIO_EXTI_IRQHandler+0x24>
  {
    __HAL_GPIO_EXTI_CLEAR_IT(GPIO_Pin);
 8002436:	4a05      	ldr	r2, [pc, #20]	; (800244c <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 8002438:	88fb      	ldrh	r3, [r7, #6]
 800243a:	6153      	str	r3, [r2, #20]
    HAL_GPIO_EXTI_Callback(GPIO_Pin);
 800243c:	88fb      	ldrh	r3, [r7, #6]
 800243e:	4618      	mov	r0, r3
 8002440:	f7fe fe0a 	bl	8001058 <HAL_GPIO_EXTI_Callback>
  }
}
 8002444:	bf00      	nop
 8002446:	3708      	adds	r7, #8
 8002448:	46bd      	mov	sp, r7
 800244a:	bd80      	pop	{r7, pc}
 800244c:	40010400 	.word	0x40010400

08002450 <HAL_I2C_Init>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
 8002450:	b580      	push	{r7, lr}
 8002452:	b082      	sub	sp, #8
 8002454:	af00      	add	r7, sp, #0
 8002456:	6078      	str	r0, [r7, #4]
  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 8002458:	687b      	ldr	r3, [r7, #4]
 800245a:	2b00      	cmp	r3, #0
 800245c:	d101      	bne.n	8002462 <HAL_I2C_Init+0x12>
  {
    return HAL_ERROR;
 800245e:	2301      	movs	r3, #1
 8002460:	e081      	b.n	8002566 <HAL_I2C_Init+0x116>
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
  assert_param(IS_I2C_OWN_ADDRESS2_MASK(hi2c->Init.OwnAddress2Masks));
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));

  if (hi2c->State == HAL_I2C_STATE_RESET)
 8002462:	687b      	ldr	r3, [r7, #4]
 8002464:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8002468:	b2db      	uxtb	r3, r3
 800246a:	2b00      	cmp	r3, #0
 800246c:	d106      	bne.n	800247c <HAL_I2C_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hi2c->Lock = HAL_UNLOCKED;
 800246e:	687b      	ldr	r3, [r7, #4]
 8002470:	2200      	movs	r2, #0
 8002472:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    hi2c->MspInitCallback(hi2c);
#else
    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    HAL_I2C_MspInit(hi2c);
 8002476:	6878      	ldr	r0, [r7, #4]
 8002478:	f7ff f95c 	bl	8001734 <HAL_I2C_MspInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
 800247c:	687b      	ldr	r3, [r7, #4]
 800247e:	2224      	movs	r2, #36	; 0x24
 8002480:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 8002484:	687b      	ldr	r3, [r7, #4]
 8002486:	681b      	ldr	r3, [r3, #0]
 8002488:	681a      	ldr	r2, [r3, #0]
 800248a:	687b      	ldr	r3, [r7, #4]
 800248c:	681b      	ldr	r3, [r3, #0]
 800248e:	f022 0201 	bic.w	r2, r2, #1
 8002492:	601a      	str	r2, [r3, #0]

  /*---------------------------- I2Cx TIMINGR Configuration ------------------*/
  /* Configure I2Cx: Frequency range */
  hi2c->Instance->TIMINGR = hi2c->Init.Timing & TIMING_CLEAR_MASK;
 8002494:	687b      	ldr	r3, [r7, #4]
 8002496:	685a      	ldr	r2, [r3, #4]
 8002498:	687b      	ldr	r3, [r7, #4]
 800249a:	681b      	ldr	r3, [r3, #0]
 800249c:	f022 6270 	bic.w	r2, r2, #251658240	; 0xf000000
 80024a0:	611a      	str	r2, [r3, #16]

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Disable Own Address1 before set the Own Address1 configuration */
  hi2c->Instance->OAR1 &= ~I2C_OAR1_OA1EN;
 80024a2:	687b      	ldr	r3, [r7, #4]
 80024a4:	681b      	ldr	r3, [r3, #0]
 80024a6:	689a      	ldr	r2, [r3, #8]
 80024a8:	687b      	ldr	r3, [r7, #4]
 80024aa:	681b      	ldr	r3, [r3, #0]
 80024ac:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 80024b0:	609a      	str	r2, [r3, #8]

  /* Configure I2Cx: Own Address1 and ack own address1 mode */
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_7BIT)
 80024b2:	687b      	ldr	r3, [r7, #4]
 80024b4:	68db      	ldr	r3, [r3, #12]
 80024b6:	2b01      	cmp	r3, #1
 80024b8:	d107      	bne.n	80024ca <HAL_I2C_Init+0x7a>
  {
    hi2c->Instance->OAR1 = (I2C_OAR1_OA1EN | hi2c->Init.OwnAddress1);
 80024ba:	687b      	ldr	r3, [r7, #4]
 80024bc:	689a      	ldr	r2, [r3, #8]
 80024be:	687b      	ldr	r3, [r7, #4]
 80024c0:	681b      	ldr	r3, [r3, #0]
 80024c2:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 80024c6:	609a      	str	r2, [r3, #8]
 80024c8:	e006      	b.n	80024d8 <HAL_I2C_Init+0x88>
  }
  else /* I2C_ADDRESSINGMODE_10BIT */
  {
    hi2c->Instance->OAR1 = (I2C_OAR1_OA1EN | I2C_OAR1_OA1MODE | hi2c->Init.OwnAddress1);
 80024ca:	687b      	ldr	r3, [r7, #4]
 80024cc:	689a      	ldr	r2, [r3, #8]
 80024ce:	687b      	ldr	r3, [r7, #4]
 80024d0:	681b      	ldr	r3, [r3, #0]
 80024d2:	f442 4204 	orr.w	r2, r2, #33792	; 0x8400
 80024d6:	609a      	str	r2, [r3, #8]
  }

  /*---------------------------- I2Cx CR2 Configuration ----------------------*/
  /* Configure I2Cx: Addressing Master mode */
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_10BIT)
 80024d8:	687b      	ldr	r3, [r7, #4]
 80024da:	68db      	ldr	r3, [r3, #12]
 80024dc:	2b02      	cmp	r3, #2
 80024de:	d104      	bne.n	80024ea <HAL_I2C_Init+0x9a>
  {
    hi2c->Instance->CR2 = (I2C_CR2_ADD10);
 80024e0:	687b      	ldr	r3, [r7, #4]
 80024e2:	681b      	ldr	r3, [r3, #0]
 80024e4:	f44f 6200 	mov.w	r2, #2048	; 0x800
 80024e8:	605a      	str	r2, [r3, #4]
  }
  /* Enable the AUTOEND by default, and enable NACK (should be disable only during Slave process */
  hi2c->Instance->CR2 |= (I2C_CR2_AUTOEND | I2C_CR2_NACK);
 80024ea:	687b      	ldr	r3, [r7, #4]
 80024ec:	681b      	ldr	r3, [r3, #0]
 80024ee:	685b      	ldr	r3, [r3, #4]
 80024f0:	687a      	ldr	r2, [r7, #4]
 80024f2:	6812      	ldr	r2, [r2, #0]
 80024f4:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
 80024f8:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 80024fc:	6053      	str	r3, [r2, #4]

  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Disable Own Address2 before set the Own Address2 configuration */
  hi2c->Instance->OAR2 &= ~I2C_DUALADDRESS_ENABLE;
 80024fe:	687b      	ldr	r3, [r7, #4]
 8002500:	681b      	ldr	r3, [r3, #0]
 8002502:	68da      	ldr	r2, [r3, #12]
 8002504:	687b      	ldr	r3, [r7, #4]
 8002506:	681b      	ldr	r3, [r3, #0]
 8002508:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 800250c:	60da      	str	r2, [r3, #12]

  /* Configure I2Cx: Dual mode and Own Address2 */
  hi2c->Instance->OAR2 = (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2 | \
 800250e:	687b      	ldr	r3, [r7, #4]
 8002510:	691a      	ldr	r2, [r3, #16]
 8002512:	687b      	ldr	r3, [r7, #4]
 8002514:	695b      	ldr	r3, [r3, #20]
 8002516:	ea42 0103 	orr.w	r1, r2, r3
                          (hi2c->Init.OwnAddress2Masks << 8));
 800251a:	687b      	ldr	r3, [r7, #4]
 800251c:	699b      	ldr	r3, [r3, #24]
 800251e:	021a      	lsls	r2, r3, #8
  hi2c->Instance->OAR2 = (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2 | \
 8002520:	687b      	ldr	r3, [r7, #4]
 8002522:	681b      	ldr	r3, [r3, #0]
 8002524:	430a      	orrs	r2, r1
 8002526:	60da      	str	r2, [r3, #12]

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  hi2c->Instance->CR1 = (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode);
 8002528:	687b      	ldr	r3, [r7, #4]
 800252a:	69d9      	ldr	r1, [r3, #28]
 800252c:	687b      	ldr	r3, [r7, #4]
 800252e:	6a1a      	ldr	r2, [r3, #32]
 8002530:	687b      	ldr	r3, [r7, #4]
 8002532:	681b      	ldr	r3, [r3, #0]
 8002534:	430a      	orrs	r2, r1
 8002536:	601a      	str	r2, [r3, #0]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
 8002538:	687b      	ldr	r3, [r7, #4]
 800253a:	681b      	ldr	r3, [r3, #0]
 800253c:	681a      	ldr	r2, [r3, #0]
 800253e:	687b      	ldr	r3, [r7, #4]
 8002540:	681b      	ldr	r3, [r3, #0]
 8002542:	f042 0201 	orr.w	r2, r2, #1
 8002546:	601a      	str	r2, [r3, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8002548:	687b      	ldr	r3, [r7, #4]
 800254a:	2200      	movs	r2, #0
 800254c:	645a      	str	r2, [r3, #68]	; 0x44
  hi2c->State = HAL_I2C_STATE_READY;
 800254e:	687b      	ldr	r3, [r7, #4]
 8002550:	2220      	movs	r2, #32
 8002552:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  hi2c->PreviousState = I2C_STATE_NONE;
 8002556:	687b      	ldr	r3, [r7, #4]
 8002558:	2200      	movs	r2, #0
 800255a:	631a      	str	r2, [r3, #48]	; 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 800255c:	687b      	ldr	r3, [r7, #4]
 800255e:	2200      	movs	r2, #0
 8002560:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

  return HAL_OK;
 8002564:	2300      	movs	r3, #0
}
 8002566:	4618      	mov	r0, r3
 8002568:	3708      	adds	r7, #8
 800256a:	46bd      	mov	sp, r7
 800256c:	bd80      	pop	{r7, pc}
	...

08002570 <HAL_I2C_Mem_Write>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Mem_Write(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress,
                                    uint16_t MemAddSize, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8002570:	b580      	push	{r7, lr}
 8002572:	b088      	sub	sp, #32
 8002574:	af02      	add	r7, sp, #8
 8002576:	60f8      	str	r0, [r7, #12]
 8002578:	4608      	mov	r0, r1
 800257a:	4611      	mov	r1, r2
 800257c:	461a      	mov	r2, r3
 800257e:	4603      	mov	r3, r0
 8002580:	817b      	strh	r3, [r7, #10]
 8002582:	460b      	mov	r3, r1
 8002584:	813b      	strh	r3, [r7, #8]
 8002586:	4613      	mov	r3, r2
 8002588:	80fb      	strh	r3, [r7, #6]
  uint32_t tickstart;

  /* Check the parameters */
  assert_param(IS_I2C_MEMADD_SIZE(MemAddSize));

  if (hi2c->State == HAL_I2C_STATE_READY)
 800258a:	68fb      	ldr	r3, [r7, #12]
 800258c:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8002590:	b2db      	uxtb	r3, r3
 8002592:	2b20      	cmp	r3, #32
 8002594:	f040 80f9 	bne.w	800278a <HAL_I2C_Mem_Write+0x21a>
  {
    if ((pData == NULL) || (Size == 0U))
 8002598:	6a3b      	ldr	r3, [r7, #32]
 800259a:	2b00      	cmp	r3, #0
 800259c:	d002      	beq.n	80025a4 <HAL_I2C_Mem_Write+0x34>
 800259e:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 80025a0:	2b00      	cmp	r3, #0
 80025a2:	d105      	bne.n	80025b0 <HAL_I2C_Mem_Write+0x40>
    {
      hi2c->ErrorCode = HAL_I2C_ERROR_INVALID_PARAM;
 80025a4:	68fb      	ldr	r3, [r7, #12]
 80025a6:	f44f 7200 	mov.w	r2, #512	; 0x200
 80025aa:	645a      	str	r2, [r3, #68]	; 0x44
      return  HAL_ERROR;
 80025ac:	2301      	movs	r3, #1
 80025ae:	e0ed      	b.n	800278c <HAL_I2C_Mem_Write+0x21c>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 80025b0:	68fb      	ldr	r3, [r7, #12]
 80025b2:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 80025b6:	2b01      	cmp	r3, #1
 80025b8:	d101      	bne.n	80025be <HAL_I2C_Mem_Write+0x4e>
 80025ba:	2302      	movs	r3, #2
 80025bc:	e0e6      	b.n	800278c <HAL_I2C_Mem_Write+0x21c>
 80025be:	68fb      	ldr	r3, [r7, #12]
 80025c0:	2201      	movs	r2, #1
 80025c2:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    /* Init tickstart for timeout management*/
    tickstart = HAL_GetTick();
 80025c6:	f7ff fb8d 	bl	8001ce4 <HAL_GetTick>
 80025ca:	6178      	str	r0, [r7, #20]

    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY, tickstart) != HAL_OK)
 80025cc:	697b      	ldr	r3, [r7, #20]
 80025ce:	9300      	str	r3, [sp, #0]
 80025d0:	2319      	movs	r3, #25
 80025d2:	2201      	movs	r2, #1
 80025d4:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 80025d8:	68f8      	ldr	r0, [r7, #12]
 80025da:	f001 fab2 	bl	8003b42 <I2C_WaitOnFlagUntilTimeout>
 80025de:	4603      	mov	r3, r0
 80025e0:	2b00      	cmp	r3, #0
 80025e2:	d001      	beq.n	80025e8 <HAL_I2C_Mem_Write+0x78>
    {
      return HAL_ERROR;
 80025e4:	2301      	movs	r3, #1
 80025e6:	e0d1      	b.n	800278c <HAL_I2C_Mem_Write+0x21c>
    }

    hi2c->State     = HAL_I2C_STATE_BUSY_TX;
 80025e8:	68fb      	ldr	r3, [r7, #12]
 80025ea:	2221      	movs	r2, #33	; 0x21
 80025ec:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->Mode      = HAL_I2C_MODE_MEM;
 80025f0:	68fb      	ldr	r3, [r7, #12]
 80025f2:	2240      	movs	r2, #64	; 0x40
 80025f4:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 80025f8:	68fb      	ldr	r3, [r7, #12]
 80025fa:	2200      	movs	r2, #0
 80025fc:	645a      	str	r2, [r3, #68]	; 0x44

    /* Prepare transfer parameters */
    hi2c->pBuffPtr  = pData;
 80025fe:	68fb      	ldr	r3, [r7, #12]
 8002600:	6a3a      	ldr	r2, [r7, #32]
 8002602:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount = Size;
 8002604:	68fb      	ldr	r3, [r7, #12]
 8002606:	8cba      	ldrh	r2, [r7, #36]	; 0x24
 8002608:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->XferISR   = NULL;
 800260a:	68fb      	ldr	r3, [r7, #12]
 800260c:	2200      	movs	r2, #0
 800260e:	635a      	str	r2, [r3, #52]	; 0x34

    /* Send Slave Address and Memory Address */
    if (I2C_RequestMemoryWrite(hi2c, DevAddress, MemAddress, MemAddSize, Timeout, tickstart) != HAL_OK)
 8002610:	88f8      	ldrh	r0, [r7, #6]
 8002612:	893a      	ldrh	r2, [r7, #8]
 8002614:	8979      	ldrh	r1, [r7, #10]
 8002616:	697b      	ldr	r3, [r7, #20]
 8002618:	9301      	str	r3, [sp, #4]
 800261a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800261c:	9300      	str	r3, [sp, #0]
 800261e:	4603      	mov	r3, r0
 8002620:	68f8      	ldr	r0, [r7, #12]
 8002622:	f000 fdb7 	bl	8003194 <I2C_RequestMemoryWrite>
 8002626:	4603      	mov	r3, r0
 8002628:	2b00      	cmp	r3, #0
 800262a:	d005      	beq.n	8002638 <HAL_I2C_Mem_Write+0xc8>
    {
      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 800262c:	68fb      	ldr	r3, [r7, #12]
 800262e:	2200      	movs	r2, #0
 8002630:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
      return HAL_ERROR;
 8002634:	2301      	movs	r3, #1
 8002636:	e0a9      	b.n	800278c <HAL_I2C_Mem_Write+0x21c>
    }

    /* Set NBYTES to write and reload if hi2c->XferCount > MAX_NBYTE_SIZE */
    if (hi2c->XferCount > MAX_NBYTE_SIZE)
 8002638:	68fb      	ldr	r3, [r7, #12]
 800263a:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800263c:	b29b      	uxth	r3, r3
 800263e:	2bff      	cmp	r3, #255	; 0xff
 8002640:	d90e      	bls.n	8002660 <HAL_I2C_Mem_Write+0xf0>
    {
      hi2c->XferSize = MAX_NBYTE_SIZE;
 8002642:	68fb      	ldr	r3, [r7, #12]
 8002644:	22ff      	movs	r2, #255	; 0xff
 8002646:	851a      	strh	r2, [r3, #40]	; 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_RELOAD_MODE, I2C_NO_STARTSTOP);
 8002648:	68fb      	ldr	r3, [r7, #12]
 800264a:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800264c:	b2da      	uxtb	r2, r3
 800264e:	8979      	ldrh	r1, [r7, #10]
 8002650:	2300      	movs	r3, #0
 8002652:	9300      	str	r3, [sp, #0]
 8002654:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 8002658:	68f8      	ldr	r0, [r7, #12]
 800265a:	f001 fc1b 	bl	8003e94 <I2C_TransferConfig>
 800265e:	e00f      	b.n	8002680 <HAL_I2C_Mem_Write+0x110>
    }
    else
    {
      hi2c->XferSize = hi2c->XferCount;
 8002660:	68fb      	ldr	r3, [r7, #12]
 8002662:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8002664:	b29a      	uxth	r2, r3
 8002666:	68fb      	ldr	r3, [r7, #12]
 8002668:	851a      	strh	r2, [r3, #40]	; 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE, I2C_NO_STARTSTOP);
 800266a:	68fb      	ldr	r3, [r7, #12]
 800266c:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800266e:	b2da      	uxtb	r2, r3
 8002670:	8979      	ldrh	r1, [r7, #10]
 8002672:	2300      	movs	r3, #0
 8002674:	9300      	str	r3, [sp, #0]
 8002676:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 800267a:	68f8      	ldr	r0, [r7, #12]
 800267c:	f001 fc0a 	bl	8003e94 <I2C_TransferConfig>
    }

    do
    {
      /* Wait until TXIS flag is set */
      if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8002680:	697a      	ldr	r2, [r7, #20]
 8002682:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 8002684:	68f8      	ldr	r0, [r7, #12]
 8002686:	f001 fa9c 	bl	8003bc2 <I2C_WaitOnTXISFlagUntilTimeout>
 800268a:	4603      	mov	r3, r0
 800268c:	2b00      	cmp	r3, #0
 800268e:	d001      	beq.n	8002694 <HAL_I2C_Mem_Write+0x124>
      {
        return HAL_ERROR;
 8002690:	2301      	movs	r3, #1
 8002692:	e07b      	b.n	800278c <HAL_I2C_Mem_Write+0x21c>
      }

      /* Write data to TXDR */
      hi2c->Instance->TXDR = *hi2c->pBuffPtr;
 8002694:	68fb      	ldr	r3, [r7, #12]
 8002696:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002698:	781a      	ldrb	r2, [r3, #0]
 800269a:	68fb      	ldr	r3, [r7, #12]
 800269c:	681b      	ldr	r3, [r3, #0]
 800269e:	629a      	str	r2, [r3, #40]	; 0x28

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 80026a0:	68fb      	ldr	r3, [r7, #12]
 80026a2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80026a4:	1c5a      	adds	r2, r3, #1
 80026a6:	68fb      	ldr	r3, [r7, #12]
 80026a8:	625a      	str	r2, [r3, #36]	; 0x24

      hi2c->XferCount--;
 80026aa:	68fb      	ldr	r3, [r7, #12]
 80026ac:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80026ae:	b29b      	uxth	r3, r3
 80026b0:	3b01      	subs	r3, #1
 80026b2:	b29a      	uxth	r2, r3
 80026b4:	68fb      	ldr	r3, [r7, #12]
 80026b6:	855a      	strh	r2, [r3, #42]	; 0x2a
      hi2c->XferSize--;
 80026b8:	68fb      	ldr	r3, [r7, #12]
 80026ba:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80026bc:	3b01      	subs	r3, #1
 80026be:	b29a      	uxth	r2, r3
 80026c0:	68fb      	ldr	r3, [r7, #12]
 80026c2:	851a      	strh	r2, [r3, #40]	; 0x28

      if ((hi2c->XferCount != 0U) && (hi2c->XferSize == 0U))
 80026c4:	68fb      	ldr	r3, [r7, #12]
 80026c6:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80026c8:	b29b      	uxth	r3, r3
 80026ca:	2b00      	cmp	r3, #0
 80026cc:	d034      	beq.n	8002738 <HAL_I2C_Mem_Write+0x1c8>
 80026ce:	68fb      	ldr	r3, [r7, #12]
 80026d0:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80026d2:	2b00      	cmp	r3, #0
 80026d4:	d130      	bne.n	8002738 <HAL_I2C_Mem_Write+0x1c8>
      {
        /* Wait until TCR flag is set */
        if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_TCR, RESET, Timeout, tickstart) != HAL_OK)
 80026d6:	697b      	ldr	r3, [r7, #20]
 80026d8:	9300      	str	r3, [sp, #0]
 80026da:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80026dc:	2200      	movs	r2, #0
 80026de:	2180      	movs	r1, #128	; 0x80
 80026e0:	68f8      	ldr	r0, [r7, #12]
 80026e2:	f001 fa2e 	bl	8003b42 <I2C_WaitOnFlagUntilTimeout>
 80026e6:	4603      	mov	r3, r0
 80026e8:	2b00      	cmp	r3, #0
 80026ea:	d001      	beq.n	80026f0 <HAL_I2C_Mem_Write+0x180>
        {
          return HAL_ERROR;
 80026ec:	2301      	movs	r3, #1
 80026ee:	e04d      	b.n	800278c <HAL_I2C_Mem_Write+0x21c>
        }

        if (hi2c->XferCount > MAX_NBYTE_SIZE)
 80026f0:	68fb      	ldr	r3, [r7, #12]
 80026f2:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80026f4:	b29b      	uxth	r3, r3
 80026f6:	2bff      	cmp	r3, #255	; 0xff
 80026f8:	d90e      	bls.n	8002718 <HAL_I2C_Mem_Write+0x1a8>
        {
          hi2c->XferSize = MAX_NBYTE_SIZE;
 80026fa:	68fb      	ldr	r3, [r7, #12]
 80026fc:	22ff      	movs	r2, #255	; 0xff
 80026fe:	851a      	strh	r2, [r3, #40]	; 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_RELOAD_MODE,
 8002700:	68fb      	ldr	r3, [r7, #12]
 8002702:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8002704:	b2da      	uxtb	r2, r3
 8002706:	8979      	ldrh	r1, [r7, #10]
 8002708:	2300      	movs	r3, #0
 800270a:	9300      	str	r3, [sp, #0]
 800270c:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 8002710:	68f8      	ldr	r0, [r7, #12]
 8002712:	f001 fbbf 	bl	8003e94 <I2C_TransferConfig>
 8002716:	e00f      	b.n	8002738 <HAL_I2C_Mem_Write+0x1c8>
                             I2C_NO_STARTSTOP);
        }
        else
        {
          hi2c->XferSize = hi2c->XferCount;
 8002718:	68fb      	ldr	r3, [r7, #12]
 800271a:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800271c:	b29a      	uxth	r2, r3
 800271e:	68fb      	ldr	r3, [r7, #12]
 8002720:	851a      	strh	r2, [r3, #40]	; 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE,
 8002722:	68fb      	ldr	r3, [r7, #12]
 8002724:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8002726:	b2da      	uxtb	r2, r3
 8002728:	8979      	ldrh	r1, [r7, #10]
 800272a:	2300      	movs	r3, #0
 800272c:	9300      	str	r3, [sp, #0]
 800272e:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 8002732:	68f8      	ldr	r0, [r7, #12]
 8002734:	f001 fbae 	bl	8003e94 <I2C_TransferConfig>
                             I2C_NO_STARTSTOP);
        }
      }

    } while (hi2c->XferCount > 0U);
 8002738:	68fb      	ldr	r3, [r7, #12]
 800273a:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800273c:	b29b      	uxth	r3, r3
 800273e:	2b00      	cmp	r3, #0
 8002740:	d19e      	bne.n	8002680 <HAL_I2C_Mem_Write+0x110>

    /* No need to Check TC flag, with AUTOEND mode the stop is automatically generated */
    /* Wait until STOPF flag is reset */
    if (I2C_WaitOnSTOPFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8002742:	697a      	ldr	r2, [r7, #20]
 8002744:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 8002746:	68f8      	ldr	r0, [r7, #12]
 8002748:	f001 fa7b 	bl	8003c42 <I2C_WaitOnSTOPFlagUntilTimeout>
 800274c:	4603      	mov	r3, r0
 800274e:	2b00      	cmp	r3, #0
 8002750:	d001      	beq.n	8002756 <HAL_I2C_Mem_Write+0x1e6>
    {
      return HAL_ERROR;
 8002752:	2301      	movs	r3, #1
 8002754:	e01a      	b.n	800278c <HAL_I2C_Mem_Write+0x21c>
    }

    /* Clear STOP Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 8002756:	68fb      	ldr	r3, [r7, #12]
 8002758:	681b      	ldr	r3, [r3, #0]
 800275a:	2220      	movs	r2, #32
 800275c:	61da      	str	r2, [r3, #28]

    /* Clear Configuration Register 2 */
    I2C_RESET_CR2(hi2c);
 800275e:	68fb      	ldr	r3, [r7, #12]
 8002760:	681b      	ldr	r3, [r3, #0]
 8002762:	6859      	ldr	r1, [r3, #4]
 8002764:	68fb      	ldr	r3, [r7, #12]
 8002766:	681a      	ldr	r2, [r3, #0]
 8002768:	4b0a      	ldr	r3, [pc, #40]	; (8002794 <HAL_I2C_Mem_Write+0x224>)
 800276a:	400b      	ands	r3, r1
 800276c:	6053      	str	r3, [r2, #4]

    hi2c->State = HAL_I2C_STATE_READY;
 800276e:	68fb      	ldr	r3, [r7, #12]
 8002770:	2220      	movs	r2, #32
 8002772:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->Mode  = HAL_I2C_MODE_NONE;
 8002776:	68fb      	ldr	r3, [r7, #12]
 8002778:	2200      	movs	r2, #0
 800277a:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 800277e:	68fb      	ldr	r3, [r7, #12]
 8002780:	2200      	movs	r2, #0
 8002782:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    return HAL_OK;
 8002786:	2300      	movs	r3, #0
 8002788:	e000      	b.n	800278c <HAL_I2C_Mem_Write+0x21c>
  }
  else
  {
    return HAL_BUSY;
 800278a:	2302      	movs	r3, #2
  }
}
 800278c:	4618      	mov	r0, r3
 800278e:	3718      	adds	r7, #24
 8002790:	46bd      	mov	sp, r7
 8002792:	bd80      	pop	{r7, pc}
 8002794:	fe00e800 	.word	0xfe00e800

08002798 <HAL_I2C_Mem_Read_IT>:
  * @param  Size Amount of data to be sent
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Mem_Read_IT(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress,
                                      uint16_t MemAddSize, uint8_t *pData, uint16_t Size)
{
 8002798:	b580      	push	{r7, lr}
 800279a:	b086      	sub	sp, #24
 800279c:	af02      	add	r7, sp, #8
 800279e:	60f8      	str	r0, [r7, #12]
 80027a0:	4608      	mov	r0, r1
 80027a2:	4611      	mov	r1, r2
 80027a4:	461a      	mov	r2, r3
 80027a6:	4603      	mov	r3, r0
 80027a8:	817b      	strh	r3, [r7, #10]
 80027aa:	460b      	mov	r3, r1
 80027ac:	813b      	strh	r3, [r7, #8]
 80027ae:	4613      	mov	r3, r2
 80027b0:	80fb      	strh	r3, [r7, #6]
  /* Check the parameters */
  assert_param(IS_I2C_MEMADD_SIZE(MemAddSize));

  if (hi2c->State == HAL_I2C_STATE_READY)
 80027b2:	68fb      	ldr	r3, [r7, #12]
 80027b4:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 80027b8:	b2db      	uxtb	r3, r3
 80027ba:	2b20      	cmp	r3, #32
 80027bc:	d166      	bne.n	800288c <HAL_I2C_Mem_Read_IT+0xf4>
  {
    if ((pData == NULL) || (Size == 0U))
 80027be:	69bb      	ldr	r3, [r7, #24]
 80027c0:	2b00      	cmp	r3, #0
 80027c2:	d002      	beq.n	80027ca <HAL_I2C_Mem_Read_IT+0x32>
 80027c4:	8bbb      	ldrh	r3, [r7, #28]
 80027c6:	2b00      	cmp	r3, #0
 80027c8:	d105      	bne.n	80027d6 <HAL_I2C_Mem_Read_IT+0x3e>
    {
      hi2c->ErrorCode = HAL_I2C_ERROR_INVALID_PARAM;
 80027ca:	68fb      	ldr	r3, [r7, #12]
 80027cc:	f44f 7200 	mov.w	r2, #512	; 0x200
 80027d0:	645a      	str	r2, [r3, #68]	; 0x44
      return  HAL_ERROR;
 80027d2:	2301      	movs	r3, #1
 80027d4:	e05b      	b.n	800288e <HAL_I2C_Mem_Read_IT+0xf6>
    }

    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BUSY) == SET)
 80027d6:	68fb      	ldr	r3, [r7, #12]
 80027d8:	681b      	ldr	r3, [r3, #0]
 80027da:	699b      	ldr	r3, [r3, #24]
 80027dc:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 80027e0:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 80027e4:	d101      	bne.n	80027ea <HAL_I2C_Mem_Read_IT+0x52>
    {
      return HAL_BUSY;
 80027e6:	2302      	movs	r3, #2
 80027e8:	e051      	b.n	800288e <HAL_I2C_Mem_Read_IT+0xf6>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 80027ea:	68fb      	ldr	r3, [r7, #12]
 80027ec:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 80027f0:	2b01      	cmp	r3, #1
 80027f2:	d101      	bne.n	80027f8 <HAL_I2C_Mem_Read_IT+0x60>
 80027f4:	2302      	movs	r3, #2
 80027f6:	e04a      	b.n	800288e <HAL_I2C_Mem_Read_IT+0xf6>
 80027f8:	68fb      	ldr	r3, [r7, #12]
 80027fa:	2201      	movs	r2, #1
 80027fc:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    hi2c->State       = HAL_I2C_STATE_BUSY_RX;
 8002800:	68fb      	ldr	r3, [r7, #12]
 8002802:	2222      	movs	r2, #34	; 0x22
 8002804:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->Mode        = HAL_I2C_MODE_MEM;
 8002808:	68fb      	ldr	r3, [r7, #12]
 800280a:	2240      	movs	r2, #64	; 0x40
 800280c:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
    hi2c->ErrorCode   = HAL_I2C_ERROR_NONE;
 8002810:	68fb      	ldr	r3, [r7, #12]
 8002812:	2200      	movs	r2, #0
 8002814:	645a      	str	r2, [r3, #68]	; 0x44

    /* Prepare transfer parameters */
    hi2c->pBuffPtr    = pData;
 8002816:	68fb      	ldr	r3, [r7, #12]
 8002818:	69ba      	ldr	r2, [r7, #24]
 800281a:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount   = Size;
 800281c:	68fb      	ldr	r3, [r7, #12]
 800281e:	8bba      	ldrh	r2, [r7, #28]
 8002820:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 8002822:	68fb      	ldr	r3, [r7, #12]
 8002824:	4a1c      	ldr	r2, [pc, #112]	; (8002898 <HAL_I2C_Mem_Read_IT+0x100>)
 8002826:	62da      	str	r2, [r3, #44]	; 0x2c
    hi2c->XferISR     = I2C_Mem_ISR_IT;
 8002828:	68fb      	ldr	r3, [r7, #12]
 800282a:	4a1c      	ldr	r2, [pc, #112]	; (800289c <HAL_I2C_Mem_Read_IT+0x104>)
 800282c:	635a      	str	r2, [r3, #52]	; 0x34
    hi2c->Devaddress  = DevAddress;
 800282e:	897a      	ldrh	r2, [r7, #10]
 8002830:	68fb      	ldr	r3, [r7, #12]
 8002832:	64da      	str	r2, [r3, #76]	; 0x4c

    /* If Memory address size is 8Bit */
    if (MemAddSize == I2C_MEMADD_SIZE_8BIT)
 8002834:	88fb      	ldrh	r3, [r7, #6]
 8002836:	2b01      	cmp	r3, #1
 8002838:	d109      	bne.n	800284e <HAL_I2C_Mem_Read_IT+0xb6>
    {
      /* Prefetch Memory Address */
      hi2c->Instance->TXDR = I2C_MEM_ADD_LSB(MemAddress);
 800283a:	893b      	ldrh	r3, [r7, #8]
 800283c:	b2da      	uxtb	r2, r3
 800283e:	68fb      	ldr	r3, [r7, #12]
 8002840:	681b      	ldr	r3, [r3, #0]
 8002842:	629a      	str	r2, [r3, #40]	; 0x28

      /* Reset Memaddress content */
      hi2c->Memaddress = 0xFFFFFFFFU;
 8002844:	68fb      	ldr	r3, [r7, #12]
 8002846:	f04f 32ff 	mov.w	r2, #4294967295
 800284a:	651a      	str	r2, [r3, #80]	; 0x50
 800284c:	e00b      	b.n	8002866 <HAL_I2C_Mem_Read_IT+0xce>
    }
    /* If Memory address size is 16Bit */
    else
    {
      /* Prefetch Memory Address (MSB part, LSB will be manage through interrupt) */
      hi2c->Instance->TXDR = I2C_MEM_ADD_MSB(MemAddress);
 800284e:	893b      	ldrh	r3, [r7, #8]
 8002850:	0a1b      	lsrs	r3, r3, #8
 8002852:	b29b      	uxth	r3, r3
 8002854:	b2da      	uxtb	r2, r3
 8002856:	68fb      	ldr	r3, [r7, #12]
 8002858:	681b      	ldr	r3, [r3, #0]
 800285a:	629a      	str	r2, [r3, #40]	; 0x28

      /* Prepare Memaddress buffer for LSB part */
      hi2c->Memaddress = I2C_MEM_ADD_LSB(MemAddress);
 800285c:	893b      	ldrh	r3, [r7, #8]
 800285e:	b2db      	uxtb	r3, r3
 8002860:	461a      	mov	r2, r3
 8002862:	68fb      	ldr	r3, [r7, #12]
 8002864:	651a      	str	r2, [r3, #80]	; 0x50
    }
    /* Send Slave Address and Memory Address */
    I2C_TransferConfig(hi2c, DevAddress, (uint8_t)MemAddSize, I2C_SOFTEND_MODE, I2C_GENERATE_START_WRITE);
 8002866:	88fb      	ldrh	r3, [r7, #6]
 8002868:	b2da      	uxtb	r2, r3
 800286a:	8979      	ldrh	r1, [r7, #10]
 800286c:	4b0c      	ldr	r3, [pc, #48]	; (80028a0 <HAL_I2C_Mem_Read_IT+0x108>)
 800286e:	9300      	str	r3, [sp, #0]
 8002870:	2300      	movs	r3, #0
 8002872:	68f8      	ldr	r0, [r7, #12]
 8002874:	f001 fb0e 	bl	8003e94 <I2C_TransferConfig>

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8002878:	68fb      	ldr	r3, [r7, #12]
 800287a:	2200      	movs	r2, #0
 800287c:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    /* Enable ERR, TC, STOP, NACK, RXI interrupt */
    /* possible to enable all of these */
    /* I2C_IT_ERRI | I2C_IT_TCI | I2C_IT_STOPI | I2C_IT_NACKI |
      I2C_IT_ADDRI | I2C_IT_RXI | I2C_IT_TXI */
    I2C_Enable_IRQ(hi2c, (I2C_XFER_TX_IT | I2C_XFER_RX_IT));
 8002880:	2103      	movs	r1, #3
 8002882:	68f8      	ldr	r0, [r7, #12]
 8002884:	f001 fb38 	bl	8003ef8 <I2C_Enable_IRQ>

    return HAL_OK;
 8002888:	2300      	movs	r3, #0
 800288a:	e000      	b.n	800288e <HAL_I2C_Mem_Read_IT+0xf6>
  }
  else
  {
    return HAL_BUSY;
 800288c:	2302      	movs	r3, #2
  }
}
 800288e:	4618      	mov	r0, r3
 8002890:	3710      	adds	r7, #16
 8002892:	46bd      	mov	sp, r7
 8002894:	bd80      	pop	{r7, pc}
 8002896:	bf00      	nop
 8002898:	ffff0000 	.word	0xffff0000
 800289c:	08002995 	.word	0x08002995
 80028a0:	80002000 	.word	0x80002000

080028a4 <HAL_I2C_EV_IRQHandler>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
void HAL_I2C_EV_IRQHandler(I2C_HandleTypeDef *hi2c)
{
 80028a4:	b580      	push	{r7, lr}
 80028a6:	b084      	sub	sp, #16
 80028a8:	af00      	add	r7, sp, #0
 80028aa:	6078      	str	r0, [r7, #4]
  /* Get current IT Flags and IT sources value */
  uint32_t itflags   = READ_REG(hi2c->Instance->ISR);
 80028ac:	687b      	ldr	r3, [r7, #4]
 80028ae:	681b      	ldr	r3, [r3, #0]
 80028b0:	699b      	ldr	r3, [r3, #24]
 80028b2:	60fb      	str	r3, [r7, #12]
  uint32_t itsources = READ_REG(hi2c->Instance->CR1);
 80028b4:	687b      	ldr	r3, [r7, #4]
 80028b6:	681b      	ldr	r3, [r3, #0]
 80028b8:	681b      	ldr	r3, [r3, #0]
 80028ba:	60bb      	str	r3, [r7, #8]

  /* I2C events treatment -------------------------------------*/
  if (hi2c->XferISR != NULL)
 80028bc:	687b      	ldr	r3, [r7, #4]
 80028be:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80028c0:	2b00      	cmp	r3, #0
 80028c2:	d005      	beq.n	80028d0 <HAL_I2C_EV_IRQHandler+0x2c>
  {
    hi2c->XferISR(hi2c, itflags, itsources);
 80028c4:	687b      	ldr	r3, [r7, #4]
 80028c6:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80028c8:	68ba      	ldr	r2, [r7, #8]
 80028ca:	68f9      	ldr	r1, [r7, #12]
 80028cc:	6878      	ldr	r0, [r7, #4]
 80028ce:	4798      	blx	r3
  }
}
 80028d0:	bf00      	nop
 80028d2:	3710      	adds	r7, #16
 80028d4:	46bd      	mov	sp, r7
 80028d6:	bd80      	pop	{r7, pc}

080028d8 <HAL_I2C_MasterTxCpltCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_MasterTxCpltCallback(I2C_HandleTypeDef *hi2c)
{
 80028d8:	b480      	push	{r7}
 80028da:	b083      	sub	sp, #12
 80028dc:	af00      	add	r7, sp, #0
 80028de:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_MasterTxCpltCallback could be implemented in the user file
   */
}
 80028e0:	bf00      	nop
 80028e2:	370c      	adds	r7, #12
 80028e4:	46bd      	mov	sp, r7
 80028e6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80028ea:	4770      	bx	lr

080028ec <HAL_I2C_MasterRxCpltCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_MasterRxCpltCallback(I2C_HandleTypeDef *hi2c)
{
 80028ec:	b480      	push	{r7}
 80028ee:	b083      	sub	sp, #12
 80028f0:	af00      	add	r7, sp, #0
 80028f2:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_MasterRxCpltCallback could be implemented in the user file
   */
}
 80028f4:	bf00      	nop
 80028f6:	370c      	adds	r7, #12
 80028f8:	46bd      	mov	sp, r7
 80028fa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80028fe:	4770      	bx	lr

08002900 <HAL_I2C_SlaveTxCpltCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_SlaveTxCpltCallback(I2C_HandleTypeDef *hi2c)
{
 8002900:	b480      	push	{r7}
 8002902:	b083      	sub	sp, #12
 8002904:	af00      	add	r7, sp, #0
 8002906:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_SlaveTxCpltCallback could be implemented in the user file
   */
}
 8002908:	bf00      	nop
 800290a:	370c      	adds	r7, #12
 800290c:	46bd      	mov	sp, r7
 800290e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002912:	4770      	bx	lr

08002914 <HAL_I2C_SlaveRxCpltCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_SlaveRxCpltCallback(I2C_HandleTypeDef *hi2c)
{
 8002914:	b480      	push	{r7}
 8002916:	b083      	sub	sp, #12
 8002918:	af00      	add	r7, sp, #0
 800291a:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_SlaveRxCpltCallback could be implemented in the user file
   */
}
 800291c:	bf00      	nop
 800291e:	370c      	adds	r7, #12
 8002920:	46bd      	mov	sp, r7
 8002922:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002926:	4770      	bx	lr

08002928 <HAL_I2C_AddrCallback>:
  * @param  TransferDirection Master request Transfer Direction (Write/Read), value of @ref I2C_XFERDIRECTION
  * @param  AddrMatchCode Address Match Code
  * @retval None
  */
__weak void HAL_I2C_AddrCallback(I2C_HandleTypeDef *hi2c, uint8_t TransferDirection, uint16_t AddrMatchCode)
{
 8002928:	b480      	push	{r7}
 800292a:	b083      	sub	sp, #12
 800292c:	af00      	add	r7, sp, #0
 800292e:	6078      	str	r0, [r7, #4]
 8002930:	460b      	mov	r3, r1
 8002932:	70fb      	strb	r3, [r7, #3]
 8002934:	4613      	mov	r3, r2
 8002936:	803b      	strh	r3, [r7, #0]
  UNUSED(AddrMatchCode);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_AddrCallback() could be implemented in the user file
   */
}
 8002938:	bf00      	nop
 800293a:	370c      	adds	r7, #12
 800293c:	46bd      	mov	sp, r7
 800293e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002942:	4770      	bx	lr

08002944 <HAL_I2C_ListenCpltCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_ListenCpltCallback(I2C_HandleTypeDef *hi2c)
{
 8002944:	b480      	push	{r7}
 8002946:	b083      	sub	sp, #12
 8002948:	af00      	add	r7, sp, #0
 800294a:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_ListenCpltCallback() could be implemented in the user file
   */
}
 800294c:	bf00      	nop
 800294e:	370c      	adds	r7, #12
 8002950:	46bd      	mov	sp, r7
 8002952:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002956:	4770      	bx	lr

08002958 <HAL_I2C_MemTxCpltCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_MemTxCpltCallback(I2C_HandleTypeDef *hi2c)
{
 8002958:	b480      	push	{r7}
 800295a:	b083      	sub	sp, #12
 800295c:	af00      	add	r7, sp, #0
 800295e:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_MemTxCpltCallback could be implemented in the user file
   */
}
 8002960:	bf00      	nop
 8002962:	370c      	adds	r7, #12
 8002964:	46bd      	mov	sp, r7
 8002966:	f85d 7b04 	ldr.w	r7, [sp], #4
 800296a:	4770      	bx	lr

0800296c <HAL_I2C_ErrorCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_ErrorCallback(I2C_HandleTypeDef *hi2c)
{
 800296c:	b480      	push	{r7}
 800296e:	b083      	sub	sp, #12
 8002970:	af00      	add	r7, sp, #0
 8002972:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_ErrorCallback could be implemented in the user file
   */
}
 8002974:	bf00      	nop
 8002976:	370c      	adds	r7, #12
 8002978:	46bd      	mov	sp, r7
 800297a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800297e:	4770      	bx	lr

08002980 <HAL_I2C_AbortCpltCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_AbortCpltCallback(I2C_HandleTypeDef *hi2c)
{
 8002980:	b480      	push	{r7}
 8002982:	b083      	sub	sp, #12
 8002984:	af00      	add	r7, sp, #0
 8002986:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_AbortCpltCallback could be implemented in the user file
   */
}
 8002988:	bf00      	nop
 800298a:	370c      	adds	r7, #12
 800298c:	46bd      	mov	sp, r7
 800298e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002992:	4770      	bx	lr

08002994 <I2C_Mem_ISR_IT>:
  * @param  ITSources Interrupt sources enabled.
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_Mem_ISR_IT(struct __I2C_HandleTypeDef *hi2c, uint32_t ITFlags,
                                           uint32_t ITSources)
{
 8002994:	b580      	push	{r7, lr}
 8002996:	b088      	sub	sp, #32
 8002998:	af02      	add	r7, sp, #8
 800299a:	60f8      	str	r0, [r7, #12]
 800299c:	60b9      	str	r1, [r7, #8]
 800299e:	607a      	str	r2, [r7, #4]
  uint32_t direction = I2C_GENERATE_START_WRITE;
 80029a0:	4b8f      	ldr	r3, [pc, #572]	; (8002be0 <I2C_Mem_ISR_IT+0x24c>)
 80029a2:	617b      	str	r3, [r7, #20]
  uint32_t tmpITFlags = ITFlags;
 80029a4:	68bb      	ldr	r3, [r7, #8]
 80029a6:	613b      	str	r3, [r7, #16]

  /* Process Locked */
  __HAL_LOCK(hi2c);
 80029a8:	68fb      	ldr	r3, [r7, #12]
 80029aa:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 80029ae:	2b01      	cmp	r3, #1
 80029b0:	d101      	bne.n	80029b6 <I2C_Mem_ISR_IT+0x22>
 80029b2:	2302      	movs	r3, #2
 80029b4:	e110      	b.n	8002bd8 <I2C_Mem_ISR_IT+0x244>
 80029b6:	68fb      	ldr	r3, [r7, #12]
 80029b8:	2201      	movs	r2, #1
 80029ba:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

  if ((I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_AF) != RESET) && \
 80029be:	693b      	ldr	r3, [r7, #16]
 80029c0:	091b      	lsrs	r3, r3, #4
 80029c2:	f003 0301 	and.w	r3, r3, #1
 80029c6:	2b00      	cmp	r3, #0
 80029c8:	d013      	beq.n	80029f2 <I2C_Mem_ISR_IT+0x5e>
      (I2C_CHECK_IT_SOURCE(ITSources, I2C_IT_NACKI) != RESET))
 80029ca:	687b      	ldr	r3, [r7, #4]
 80029cc:	091b      	lsrs	r3, r3, #4
 80029ce:	f003 0301 	and.w	r3, r3, #1
  if ((I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_AF) != RESET) && \
 80029d2:	2b00      	cmp	r3, #0
 80029d4:	d00d      	beq.n	80029f2 <I2C_Mem_ISR_IT+0x5e>
  {
    /* Clear NACK Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 80029d6:	68fb      	ldr	r3, [r7, #12]
 80029d8:	681b      	ldr	r3, [r3, #0]
 80029da:	2210      	movs	r2, #16
 80029dc:	61da      	str	r2, [r3, #28]

    /* Set corresponding Error Code */
    /* No need to generate STOP, it is automatically done */
    /* Error callback will be send during stop flag treatment */
    hi2c->ErrorCode |= HAL_I2C_ERROR_AF;
 80029de:	68fb      	ldr	r3, [r7, #12]
 80029e0:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80029e2:	f043 0204 	orr.w	r2, r3, #4
 80029e6:	68fb      	ldr	r3, [r7, #12]
 80029e8:	645a      	str	r2, [r3, #68]	; 0x44

    /* Flush TX register */
    I2C_Flush_TXDR(hi2c);
 80029ea:	68f8      	ldr	r0, [r7, #12]
 80029ec:	f001 f867 	bl	8003abe <I2C_Flush_TXDR>
 80029f0:	e0dd      	b.n	8002bae <I2C_Mem_ISR_IT+0x21a>
  }
  else if ((I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_RXNE) != RESET) && \
 80029f2:	693b      	ldr	r3, [r7, #16]
 80029f4:	089b      	lsrs	r3, r3, #2
 80029f6:	f003 0301 	and.w	r3, r3, #1
 80029fa:	2b00      	cmp	r3, #0
 80029fc:	d023      	beq.n	8002a46 <I2C_Mem_ISR_IT+0xb2>
           (I2C_CHECK_IT_SOURCE(ITSources, I2C_IT_RXI) != RESET))
 80029fe:	687b      	ldr	r3, [r7, #4]
 8002a00:	089b      	lsrs	r3, r3, #2
 8002a02:	f003 0301 	and.w	r3, r3, #1
  else if ((I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_RXNE) != RESET) && \
 8002a06:	2b00      	cmp	r3, #0
 8002a08:	d01d      	beq.n	8002a46 <I2C_Mem_ISR_IT+0xb2>
  {
    /* Remove RXNE flag on temporary variable as read done */
    tmpITFlags &= ~I2C_FLAG_RXNE;
 8002a0a:	693b      	ldr	r3, [r7, #16]
 8002a0c:	f023 0304 	bic.w	r3, r3, #4
 8002a10:	613b      	str	r3, [r7, #16]

    /* Read data from RXDR */
    *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->RXDR;
 8002a12:	68fb      	ldr	r3, [r7, #12]
 8002a14:	681b      	ldr	r3, [r3, #0]
 8002a16:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8002a18:	68fb      	ldr	r3, [r7, #12]
 8002a1a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002a1c:	b2d2      	uxtb	r2, r2
 8002a1e:	701a      	strb	r2, [r3, #0]

    /* Increment Buffer pointer */
    hi2c->pBuffPtr++;
 8002a20:	68fb      	ldr	r3, [r7, #12]
 8002a22:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002a24:	1c5a      	adds	r2, r3, #1
 8002a26:	68fb      	ldr	r3, [r7, #12]
 8002a28:	625a      	str	r2, [r3, #36]	; 0x24

    hi2c->XferSize--;
 8002a2a:	68fb      	ldr	r3, [r7, #12]
 8002a2c:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8002a2e:	3b01      	subs	r3, #1
 8002a30:	b29a      	uxth	r2, r3
 8002a32:	68fb      	ldr	r3, [r7, #12]
 8002a34:	851a      	strh	r2, [r3, #40]	; 0x28
    hi2c->XferCount--;
 8002a36:	68fb      	ldr	r3, [r7, #12]
 8002a38:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8002a3a:	b29b      	uxth	r3, r3
 8002a3c:	3b01      	subs	r3, #1
 8002a3e:	b29a      	uxth	r2, r3
 8002a40:	68fb      	ldr	r3, [r7, #12]
 8002a42:	855a      	strh	r2, [r3, #42]	; 0x2a
 8002a44:	e0b3      	b.n	8002bae <I2C_Mem_ISR_IT+0x21a>
  }
  else if ((I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_TXIS) != RESET) && \
 8002a46:	693b      	ldr	r3, [r7, #16]
 8002a48:	085b      	lsrs	r3, r3, #1
 8002a4a:	f003 0301 	and.w	r3, r3, #1
 8002a4e:	2b00      	cmp	r3, #0
 8002a50:	d02d      	beq.n	8002aae <I2C_Mem_ISR_IT+0x11a>
           (I2C_CHECK_IT_SOURCE(ITSources, I2C_IT_TXI) != RESET))
 8002a52:	687b      	ldr	r3, [r7, #4]
 8002a54:	085b      	lsrs	r3, r3, #1
 8002a56:	f003 0301 	and.w	r3, r3, #1
  else if ((I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_TXIS) != RESET) && \
 8002a5a:	2b00      	cmp	r3, #0
 8002a5c:	d027      	beq.n	8002aae <I2C_Mem_ISR_IT+0x11a>
  {
    if (hi2c->Memaddress == 0xFFFFFFFFU)
 8002a5e:	68fb      	ldr	r3, [r7, #12]
 8002a60:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8002a62:	f1b3 3fff 	cmp.w	r3, #4294967295
 8002a66:	d118      	bne.n	8002a9a <I2C_Mem_ISR_IT+0x106>
    {
      /* Write data to TXDR */
      hi2c->Instance->TXDR = *hi2c->pBuffPtr;
 8002a68:	68fb      	ldr	r3, [r7, #12]
 8002a6a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002a6c:	781a      	ldrb	r2, [r3, #0]
 8002a6e:	68fb      	ldr	r3, [r7, #12]
 8002a70:	681b      	ldr	r3, [r3, #0]
 8002a72:	629a      	str	r2, [r3, #40]	; 0x28

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 8002a74:	68fb      	ldr	r3, [r7, #12]
 8002a76:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002a78:	1c5a      	adds	r2, r3, #1
 8002a7a:	68fb      	ldr	r3, [r7, #12]
 8002a7c:	625a      	str	r2, [r3, #36]	; 0x24

      hi2c->XferSize--;
 8002a7e:	68fb      	ldr	r3, [r7, #12]
 8002a80:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8002a82:	3b01      	subs	r3, #1
 8002a84:	b29a      	uxth	r2, r3
 8002a86:	68fb      	ldr	r3, [r7, #12]
 8002a88:	851a      	strh	r2, [r3, #40]	; 0x28
      hi2c->XferCount--;
 8002a8a:	68fb      	ldr	r3, [r7, #12]
 8002a8c:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8002a8e:	b29b      	uxth	r3, r3
 8002a90:	3b01      	subs	r3, #1
 8002a92:	b29a      	uxth	r2, r3
 8002a94:	68fb      	ldr	r3, [r7, #12]
 8002a96:	855a      	strh	r2, [r3, #42]	; 0x2a
    if (hi2c->Memaddress == 0xFFFFFFFFU)
 8002a98:	e089      	b.n	8002bae <I2C_Mem_ISR_IT+0x21a>
    }
    else
    {
      /* Write LSB part of Memory Address */
      hi2c->Instance->TXDR = hi2c->Memaddress;
 8002a9a:	68fb      	ldr	r3, [r7, #12]
 8002a9c:	681b      	ldr	r3, [r3, #0]
 8002a9e:	68fa      	ldr	r2, [r7, #12]
 8002aa0:	6d12      	ldr	r2, [r2, #80]	; 0x50
 8002aa2:	629a      	str	r2, [r3, #40]	; 0x28

      /* Reset Memaddress content */
      hi2c->Memaddress = 0xFFFFFFFFU;
 8002aa4:	68fb      	ldr	r3, [r7, #12]
 8002aa6:	f04f 32ff 	mov.w	r2, #4294967295
 8002aaa:	651a      	str	r2, [r3, #80]	; 0x50
    if (hi2c->Memaddress == 0xFFFFFFFFU)
 8002aac:	e07f      	b.n	8002bae <I2C_Mem_ISR_IT+0x21a>
    }
  }
  else if ((I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_TCR) != RESET) && \
 8002aae:	693b      	ldr	r3, [r7, #16]
 8002ab0:	09db      	lsrs	r3, r3, #7
 8002ab2:	f003 0301 	and.w	r3, r3, #1
 8002ab6:	2b00      	cmp	r3, #0
 8002ab8:	d03d      	beq.n	8002b36 <I2C_Mem_ISR_IT+0x1a2>
           (I2C_CHECK_IT_SOURCE(ITSources, I2C_IT_TCI) != RESET))
 8002aba:	687b      	ldr	r3, [r7, #4]
 8002abc:	099b      	lsrs	r3, r3, #6
 8002abe:	f003 0301 	and.w	r3, r3, #1
  else if ((I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_TCR) != RESET) && \
 8002ac2:	2b00      	cmp	r3, #0
 8002ac4:	d037      	beq.n	8002b36 <I2C_Mem_ISR_IT+0x1a2>
  {
    if ((hi2c->XferCount != 0U) && (hi2c->XferSize == 0U))
 8002ac6:	68fb      	ldr	r3, [r7, #12]
 8002ac8:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8002aca:	b29b      	uxth	r3, r3
 8002acc:	2b00      	cmp	r3, #0
 8002ace:	d02c      	beq.n	8002b2a <I2C_Mem_ISR_IT+0x196>
 8002ad0:	68fb      	ldr	r3, [r7, #12]
 8002ad2:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8002ad4:	2b00      	cmp	r3, #0
 8002ad6:	d128      	bne.n	8002b2a <I2C_Mem_ISR_IT+0x196>
    {
      if (hi2c->XferCount > MAX_NBYTE_SIZE)
 8002ad8:	68fb      	ldr	r3, [r7, #12]
 8002ada:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8002adc:	b29b      	uxth	r3, r3
 8002ade:	2bff      	cmp	r3, #255	; 0xff
 8002ae0:	d910      	bls.n	8002b04 <I2C_Mem_ISR_IT+0x170>
      {
        hi2c->XferSize = MAX_NBYTE_SIZE;
 8002ae2:	68fb      	ldr	r3, [r7, #12]
 8002ae4:	22ff      	movs	r2, #255	; 0xff
 8002ae6:	851a      	strh	r2, [r3, #40]	; 0x28
        I2C_TransferConfig(hi2c, (uint16_t)hi2c->Devaddress, (uint8_t)hi2c->XferSize,
 8002ae8:	68fb      	ldr	r3, [r7, #12]
 8002aea:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8002aec:	b299      	uxth	r1, r3
 8002aee:	68fb      	ldr	r3, [r7, #12]
 8002af0:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8002af2:	b2da      	uxtb	r2, r3
 8002af4:	2300      	movs	r3, #0
 8002af6:	9300      	str	r3, [sp, #0]
 8002af8:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 8002afc:	68f8      	ldr	r0, [r7, #12]
 8002afe:	f001 f9c9 	bl	8003e94 <I2C_TransferConfig>
      if (hi2c->XferCount > MAX_NBYTE_SIZE)
 8002b02:	e017      	b.n	8002b34 <I2C_Mem_ISR_IT+0x1a0>
                           I2C_RELOAD_MODE, I2C_NO_STARTSTOP);
      }
      else
      {
        hi2c->XferSize = hi2c->XferCount;
 8002b04:	68fb      	ldr	r3, [r7, #12]
 8002b06:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8002b08:	b29a      	uxth	r2, r3
 8002b0a:	68fb      	ldr	r3, [r7, #12]
 8002b0c:	851a      	strh	r2, [r3, #40]	; 0x28
        I2C_TransferConfig(hi2c, (uint16_t)hi2c->Devaddress, (uint8_t)hi2c->XferSize,
 8002b0e:	68fb      	ldr	r3, [r7, #12]
 8002b10:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8002b12:	b299      	uxth	r1, r3
 8002b14:	68fb      	ldr	r3, [r7, #12]
 8002b16:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8002b18:	b2da      	uxtb	r2, r3
 8002b1a:	2300      	movs	r3, #0
 8002b1c:	9300      	str	r3, [sp, #0]
 8002b1e:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 8002b22:	68f8      	ldr	r0, [r7, #12]
 8002b24:	f001 f9b6 	bl	8003e94 <I2C_TransferConfig>
      if (hi2c->XferCount > MAX_NBYTE_SIZE)
 8002b28:	e004      	b.n	8002b34 <I2C_Mem_ISR_IT+0x1a0>
    }
    else
    {
      /* Wrong size Status regarding TCR flag event */
      /* Call the corresponding callback to inform upper layer of End of Transfer */
      I2C_ITError(hi2c, HAL_I2C_ERROR_SIZE);
 8002b2a:	2140      	movs	r1, #64	; 0x40
 8002b2c:	68f8      	ldr	r0, [r7, #12]
 8002b2e:	f000 fecf 	bl	80038d0 <I2C_ITError>
    if ((hi2c->XferCount != 0U) && (hi2c->XferSize == 0U))
 8002b32:	e03c      	b.n	8002bae <I2C_Mem_ISR_IT+0x21a>
 8002b34:	e03b      	b.n	8002bae <I2C_Mem_ISR_IT+0x21a>
    }
  }
  else if ((I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_TC) != RESET) && \
 8002b36:	693b      	ldr	r3, [r7, #16]
 8002b38:	099b      	lsrs	r3, r3, #6
 8002b3a:	f003 0301 	and.w	r3, r3, #1
 8002b3e:	2b00      	cmp	r3, #0
 8002b40:	d035      	beq.n	8002bae <I2C_Mem_ISR_IT+0x21a>
           (I2C_CHECK_IT_SOURCE(ITSources, I2C_IT_TCI) != RESET))
 8002b42:	687b      	ldr	r3, [r7, #4]
 8002b44:	099b      	lsrs	r3, r3, #6
 8002b46:	f003 0301 	and.w	r3, r3, #1
  else if ((I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_TC) != RESET) && \
 8002b4a:	2b00      	cmp	r3, #0
 8002b4c:	d02f      	beq.n	8002bae <I2C_Mem_ISR_IT+0x21a>
  {
    if (hi2c->State == HAL_I2C_STATE_BUSY_RX)
 8002b4e:	68fb      	ldr	r3, [r7, #12]
 8002b50:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8002b54:	b2db      	uxtb	r3, r3
 8002b56:	2b22      	cmp	r3, #34	; 0x22
 8002b58:	d101      	bne.n	8002b5e <I2C_Mem_ISR_IT+0x1ca>
    {
      direction = I2C_GENERATE_START_READ;
 8002b5a:	4b22      	ldr	r3, [pc, #136]	; (8002be4 <I2C_Mem_ISR_IT+0x250>)
 8002b5c:	617b      	str	r3, [r7, #20]
    }

    if (hi2c->XferCount > MAX_NBYTE_SIZE)
 8002b5e:	68fb      	ldr	r3, [r7, #12]
 8002b60:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8002b62:	b29b      	uxth	r3, r3
 8002b64:	2bff      	cmp	r3, #255	; 0xff
 8002b66:	d910      	bls.n	8002b8a <I2C_Mem_ISR_IT+0x1f6>
    {
      hi2c->XferSize = MAX_NBYTE_SIZE;
 8002b68:	68fb      	ldr	r3, [r7, #12]
 8002b6a:	22ff      	movs	r2, #255	; 0xff
 8002b6c:	851a      	strh	r2, [r3, #40]	; 0x28

      /* Set NBYTES to write and reload if hi2c->XferCount > MAX_NBYTE_SIZE and generate RESTART */
      I2C_TransferConfig(hi2c, (uint16_t)hi2c->Devaddress, (uint8_t)hi2c->XferSize,
 8002b6e:	68fb      	ldr	r3, [r7, #12]
 8002b70:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8002b72:	b299      	uxth	r1, r3
 8002b74:	68fb      	ldr	r3, [r7, #12]
 8002b76:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8002b78:	b2da      	uxtb	r2, r3
 8002b7a:	697b      	ldr	r3, [r7, #20]
 8002b7c:	9300      	str	r3, [sp, #0]
 8002b7e:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 8002b82:	68f8      	ldr	r0, [r7, #12]
 8002b84:	f001 f986 	bl	8003e94 <I2C_TransferConfig>
 8002b88:	e011      	b.n	8002bae <I2C_Mem_ISR_IT+0x21a>
                         I2C_RELOAD_MODE, direction);
    }
    else
    {
      hi2c->XferSize = hi2c->XferCount;
 8002b8a:	68fb      	ldr	r3, [r7, #12]
 8002b8c:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8002b8e:	b29a      	uxth	r2, r3
 8002b90:	68fb      	ldr	r3, [r7, #12]
 8002b92:	851a      	strh	r2, [r3, #40]	; 0x28

      /* Set NBYTES to write and generate RESTART */
      I2C_TransferConfig(hi2c, (uint16_t)hi2c->Devaddress, (uint8_t)hi2c->XferSize,
 8002b94:	68fb      	ldr	r3, [r7, #12]
 8002b96:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8002b98:	b299      	uxth	r1, r3
 8002b9a:	68fb      	ldr	r3, [r7, #12]
 8002b9c:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8002b9e:	b2da      	uxtb	r2, r3
 8002ba0:	697b      	ldr	r3, [r7, #20]
 8002ba2:	9300      	str	r3, [sp, #0]
 8002ba4:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 8002ba8:	68f8      	ldr	r0, [r7, #12]
 8002baa:	f001 f973 	bl	8003e94 <I2C_TransferConfig>
  else
  {
    /* Nothing to do */
  }

  if ((I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_STOPF) != RESET) && \
 8002bae:	693b      	ldr	r3, [r7, #16]
 8002bb0:	095b      	lsrs	r3, r3, #5
 8002bb2:	f003 0301 	and.w	r3, r3, #1
 8002bb6:	2b00      	cmp	r3, #0
 8002bb8:	d009      	beq.n	8002bce <I2C_Mem_ISR_IT+0x23a>
      (I2C_CHECK_IT_SOURCE(ITSources, I2C_IT_STOPI) != RESET))
 8002bba:	687b      	ldr	r3, [r7, #4]
 8002bbc:	095b      	lsrs	r3, r3, #5
 8002bbe:	f003 0301 	and.w	r3, r3, #1
  if ((I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_STOPF) != RESET) && \
 8002bc2:	2b00      	cmp	r3, #0
 8002bc4:	d003      	beq.n	8002bce <I2C_Mem_ISR_IT+0x23a>
  {
    /* Call I2C Master complete process */
    I2C_ITMasterCplt(hi2c, tmpITFlags);
 8002bc6:	6939      	ldr	r1, [r7, #16]
 8002bc8:	68f8      	ldr	r0, [r7, #12]
 8002bca:	f000 fc57 	bl	800347c <I2C_ITMasterCplt>
  }

  /* Process Unlocked */
  __HAL_UNLOCK(hi2c);
 8002bce:	68fb      	ldr	r3, [r7, #12]
 8002bd0:	2200      	movs	r2, #0
 8002bd2:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

  return HAL_OK;
 8002bd6:	2300      	movs	r3, #0
}
 8002bd8:	4618      	mov	r0, r3
 8002bda:	3718      	adds	r7, #24
 8002bdc:	46bd      	mov	sp, r7
 8002bde:	bd80      	pop	{r7, pc}
 8002be0:	80002000 	.word	0x80002000
 8002be4:	80002400 	.word	0x80002400

08002be8 <I2C_Slave_ISR_IT>:
  * @param  ITSources Interrupt sources enabled.
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_Slave_ISR_IT(struct __I2C_HandleTypeDef *hi2c, uint32_t ITFlags,
                                          uint32_t ITSources)
{
 8002be8:	b580      	push	{r7, lr}
 8002bea:	b086      	sub	sp, #24
 8002bec:	af00      	add	r7, sp, #0
 8002bee:	60f8      	str	r0, [r7, #12]
 8002bf0:	60b9      	str	r1, [r7, #8]
 8002bf2:	607a      	str	r2, [r7, #4]
  uint32_t tmpoptions = hi2c->XferOptions;
 8002bf4:	68fb      	ldr	r3, [r7, #12]
 8002bf6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002bf8:	617b      	str	r3, [r7, #20]
  uint32_t tmpITFlags = ITFlags;
 8002bfa:	68bb      	ldr	r3, [r7, #8]
 8002bfc:	613b      	str	r3, [r7, #16]

  /* Process locked */
  __HAL_LOCK(hi2c);
 8002bfe:	68fb      	ldr	r3, [r7, #12]
 8002c00:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 8002c04:	2b01      	cmp	r3, #1
 8002c06:	d101      	bne.n	8002c0c <I2C_Slave_ISR_IT+0x24>
 8002c08:	2302      	movs	r3, #2
 8002c0a:	e0ec      	b.n	8002de6 <I2C_Slave_ISR_IT+0x1fe>
 8002c0c:	68fb      	ldr	r3, [r7, #12]
 8002c0e:	2201      	movs	r2, #1
 8002c10:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

  /* Check if STOPF is set */
  if ((I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_STOPF) != RESET) && \
 8002c14:	693b      	ldr	r3, [r7, #16]
 8002c16:	095b      	lsrs	r3, r3, #5
 8002c18:	f003 0301 	and.w	r3, r3, #1
 8002c1c:	2b00      	cmp	r3, #0
 8002c1e:	d009      	beq.n	8002c34 <I2C_Slave_ISR_IT+0x4c>
      (I2C_CHECK_IT_SOURCE(ITSources, I2C_IT_STOPI) != RESET))
 8002c20:	687b      	ldr	r3, [r7, #4]
 8002c22:	095b      	lsrs	r3, r3, #5
 8002c24:	f003 0301 	and.w	r3, r3, #1
  if ((I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_STOPF) != RESET) && \
 8002c28:	2b00      	cmp	r3, #0
 8002c2a:	d003      	beq.n	8002c34 <I2C_Slave_ISR_IT+0x4c>
  {
    /* Call I2C Slave complete process */
    I2C_ITSlaveCplt(hi2c, tmpITFlags);
 8002c2c:	6939      	ldr	r1, [r7, #16]
 8002c2e:	68f8      	ldr	r0, [r7, #12]
 8002c30:	f000 fcee 	bl	8003610 <I2C_ITSlaveCplt>
  }

  if ((I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_AF) != RESET) && \
 8002c34:	693b      	ldr	r3, [r7, #16]
 8002c36:	091b      	lsrs	r3, r3, #4
 8002c38:	f003 0301 	and.w	r3, r3, #1
 8002c3c:	2b00      	cmp	r3, #0
 8002c3e:	d04d      	beq.n	8002cdc <I2C_Slave_ISR_IT+0xf4>
      (I2C_CHECK_IT_SOURCE(ITSources, I2C_IT_NACKI) != RESET))
 8002c40:	687b      	ldr	r3, [r7, #4]
 8002c42:	091b      	lsrs	r3, r3, #4
 8002c44:	f003 0301 	and.w	r3, r3, #1
  if ((I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_AF) != RESET) && \
 8002c48:	2b00      	cmp	r3, #0
 8002c4a:	d047      	beq.n	8002cdc <I2C_Slave_ISR_IT+0xf4>
  {
    /* Check that I2C transfer finished */
    /* if yes, normal use case, a NACK is sent by the MASTER when Transfer is finished */
    /* Mean XferCount == 0*/
    /* So clear Flag NACKF only */
    if (hi2c->XferCount == 0U)
 8002c4c:	68fb      	ldr	r3, [r7, #12]
 8002c4e:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8002c50:	b29b      	uxth	r3, r3
 8002c52:	2b00      	cmp	r3, #0
 8002c54:	d128      	bne.n	8002ca8 <I2C_Slave_ISR_IT+0xc0>
    {
      if ((hi2c->State == HAL_I2C_STATE_LISTEN) && (tmpoptions == I2C_FIRST_AND_LAST_FRAME))
 8002c56:	68fb      	ldr	r3, [r7, #12]
 8002c58:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8002c5c:	b2db      	uxtb	r3, r3
 8002c5e:	2b28      	cmp	r3, #40	; 0x28
 8002c60:	d108      	bne.n	8002c74 <I2C_Slave_ISR_IT+0x8c>
 8002c62:	697b      	ldr	r3, [r7, #20]
 8002c64:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 8002c68:	d104      	bne.n	8002c74 <I2C_Slave_ISR_IT+0x8c>
        /* Same action must be done for (tmpoptions == I2C_LAST_FRAME) which removed for
           Warning[Pa134]: left and right operands are identical */
      {
        /* Call I2C Listen complete process */
        I2C_ITListenCplt(hi2c, tmpITFlags);
 8002c6a:	6939      	ldr	r1, [r7, #16]
 8002c6c:	68f8      	ldr	r0, [r7, #12]
 8002c6e:	f000 fdd9 	bl	8003824 <I2C_ITListenCplt>
 8002c72:	e032      	b.n	8002cda <I2C_Slave_ISR_IT+0xf2>
      }
      else if ((hi2c->State == HAL_I2C_STATE_BUSY_TX_LISTEN) && (tmpoptions != I2C_NO_OPTION_FRAME))
 8002c74:	68fb      	ldr	r3, [r7, #12]
 8002c76:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8002c7a:	b2db      	uxtb	r3, r3
 8002c7c:	2b29      	cmp	r3, #41	; 0x29
 8002c7e:	d10e      	bne.n	8002c9e <I2C_Slave_ISR_IT+0xb6>
 8002c80:	697b      	ldr	r3, [r7, #20]
 8002c82:	f513 3f80 	cmn.w	r3, #65536	; 0x10000
 8002c86:	d00a      	beq.n	8002c9e <I2C_Slave_ISR_IT+0xb6>
      {
        /* Clear NACK Flag */
        __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8002c88:	68fb      	ldr	r3, [r7, #12]
 8002c8a:	681b      	ldr	r3, [r3, #0]
 8002c8c:	2210      	movs	r2, #16
 8002c8e:	61da      	str	r2, [r3, #28]

        /* Flush TX register */
        I2C_Flush_TXDR(hi2c);
 8002c90:	68f8      	ldr	r0, [r7, #12]
 8002c92:	f000 ff14 	bl	8003abe <I2C_Flush_TXDR>

        /* Last Byte is Transmitted */
        /* Call I2C Slave Sequential complete process */
        I2C_ITSlaveSeqCplt(hi2c);
 8002c96:	68f8      	ldr	r0, [r7, #12]
 8002c98:	f000 fb91 	bl	80033be <I2C_ITSlaveSeqCplt>
 8002c9c:	e01d      	b.n	8002cda <I2C_Slave_ISR_IT+0xf2>
      }
      else
      {
        /* Clear NACK Flag */
        __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8002c9e:	68fb      	ldr	r3, [r7, #12]
 8002ca0:	681b      	ldr	r3, [r3, #0]
 8002ca2:	2210      	movs	r2, #16
 8002ca4:	61da      	str	r2, [r3, #28]
    if (hi2c->XferCount == 0U)
 8002ca6:	e096      	b.n	8002dd6 <I2C_Slave_ISR_IT+0x1ee>
    }
    else
    {
      /* if no, error use case, a Non-Acknowledge of last Data is generated by the MASTER*/
      /* Clear NACK Flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8002ca8:	68fb      	ldr	r3, [r7, #12]
 8002caa:	681b      	ldr	r3, [r3, #0]
 8002cac:	2210      	movs	r2, #16
 8002cae:	61da      	str	r2, [r3, #28]

      /* Set ErrorCode corresponding to a Non-Acknowledge */
      hi2c->ErrorCode |= HAL_I2C_ERROR_AF;
 8002cb0:	68fb      	ldr	r3, [r7, #12]
 8002cb2:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002cb4:	f043 0204 	orr.w	r2, r3, #4
 8002cb8:	68fb      	ldr	r3, [r7, #12]
 8002cba:	645a      	str	r2, [r3, #68]	; 0x44

      if ((tmpoptions == I2C_FIRST_FRAME) || (tmpoptions == I2C_NEXT_FRAME))
 8002cbc:	697b      	ldr	r3, [r7, #20]
 8002cbe:	2b00      	cmp	r3, #0
 8002cc0:	d004      	beq.n	8002ccc <I2C_Slave_ISR_IT+0xe4>
 8002cc2:	697b      	ldr	r3, [r7, #20]
 8002cc4:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8002cc8:	f040 8085 	bne.w	8002dd6 <I2C_Slave_ISR_IT+0x1ee>
      {
        /* Call the corresponding callback to inform upper layer of End of Transfer */
        I2C_ITError(hi2c, hi2c->ErrorCode);
 8002ccc:	68fb      	ldr	r3, [r7, #12]
 8002cce:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002cd0:	4619      	mov	r1, r3
 8002cd2:	68f8      	ldr	r0, [r7, #12]
 8002cd4:	f000 fdfc 	bl	80038d0 <I2C_ITError>
    if (hi2c->XferCount == 0U)
 8002cd8:	e07d      	b.n	8002dd6 <I2C_Slave_ISR_IT+0x1ee>
 8002cda:	e07c      	b.n	8002dd6 <I2C_Slave_ISR_IT+0x1ee>
      }
    }
  }
  else if ((I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_RXNE) != RESET) && \
 8002cdc:	693b      	ldr	r3, [r7, #16]
 8002cde:	089b      	lsrs	r3, r3, #2
 8002ce0:	f003 0301 	and.w	r3, r3, #1
 8002ce4:	2b00      	cmp	r3, #0
 8002ce6:	d030      	beq.n	8002d4a <I2C_Slave_ISR_IT+0x162>
           (I2C_CHECK_IT_SOURCE(ITSources, I2C_IT_RXI) != RESET))
 8002ce8:	687b      	ldr	r3, [r7, #4]
 8002cea:	089b      	lsrs	r3, r3, #2
 8002cec:	f003 0301 	and.w	r3, r3, #1
  else if ((I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_RXNE) != RESET) && \
 8002cf0:	2b00      	cmp	r3, #0
 8002cf2:	d02a      	beq.n	8002d4a <I2C_Slave_ISR_IT+0x162>
  {
    if (hi2c->XferCount > 0U)
 8002cf4:	68fb      	ldr	r3, [r7, #12]
 8002cf6:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8002cf8:	b29b      	uxth	r3, r3
 8002cfa:	2b00      	cmp	r3, #0
 8002cfc:	d018      	beq.n	8002d30 <I2C_Slave_ISR_IT+0x148>
    {
      /* Read data from RXDR */
      *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->RXDR;
 8002cfe:	68fb      	ldr	r3, [r7, #12]
 8002d00:	681b      	ldr	r3, [r3, #0]
 8002d02:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8002d04:	68fb      	ldr	r3, [r7, #12]
 8002d06:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002d08:	b2d2      	uxtb	r2, r2
 8002d0a:	701a      	strb	r2, [r3, #0]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 8002d0c:	68fb      	ldr	r3, [r7, #12]
 8002d0e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002d10:	1c5a      	adds	r2, r3, #1
 8002d12:	68fb      	ldr	r3, [r7, #12]
 8002d14:	625a      	str	r2, [r3, #36]	; 0x24

      hi2c->XferSize--;
 8002d16:	68fb      	ldr	r3, [r7, #12]
 8002d18:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8002d1a:	3b01      	subs	r3, #1
 8002d1c:	b29a      	uxth	r2, r3
 8002d1e:	68fb      	ldr	r3, [r7, #12]
 8002d20:	851a      	strh	r2, [r3, #40]	; 0x28
      hi2c->XferCount--;
 8002d22:	68fb      	ldr	r3, [r7, #12]
 8002d24:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8002d26:	b29b      	uxth	r3, r3
 8002d28:	3b01      	subs	r3, #1
 8002d2a:	b29a      	uxth	r2, r3
 8002d2c:	68fb      	ldr	r3, [r7, #12]
 8002d2e:	855a      	strh	r2, [r3, #42]	; 0x2a
    }

    if ((hi2c->XferCount == 0U) && \
 8002d30:	68fb      	ldr	r3, [r7, #12]
 8002d32:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8002d34:	b29b      	uxth	r3, r3
 8002d36:	2b00      	cmp	r3, #0
 8002d38:	d14f      	bne.n	8002dda <I2C_Slave_ISR_IT+0x1f2>
 8002d3a:	697b      	ldr	r3, [r7, #20]
 8002d3c:	f513 3f80 	cmn.w	r3, #65536	; 0x10000
 8002d40:	d04b      	beq.n	8002dda <I2C_Slave_ISR_IT+0x1f2>
        (tmpoptions != I2C_NO_OPTION_FRAME))
    {
      /* Call I2C Slave Sequential complete process */
      I2C_ITSlaveSeqCplt(hi2c);
 8002d42:	68f8      	ldr	r0, [r7, #12]
 8002d44:	f000 fb3b 	bl	80033be <I2C_ITSlaveSeqCplt>
    if ((hi2c->XferCount == 0U) && \
 8002d48:	e047      	b.n	8002dda <I2C_Slave_ISR_IT+0x1f2>
    }
  }
  else if ((I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_ADDR) != RESET) && \
 8002d4a:	693b      	ldr	r3, [r7, #16]
 8002d4c:	08db      	lsrs	r3, r3, #3
 8002d4e:	f003 0301 	and.w	r3, r3, #1
 8002d52:	2b00      	cmp	r3, #0
 8002d54:	d00a      	beq.n	8002d6c <I2C_Slave_ISR_IT+0x184>
           (I2C_CHECK_IT_SOURCE(ITSources, I2C_IT_ADDRI) != RESET))
 8002d56:	687b      	ldr	r3, [r7, #4]
 8002d58:	08db      	lsrs	r3, r3, #3
 8002d5a:	f003 0301 	and.w	r3, r3, #1
  else if ((I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_ADDR) != RESET) && \
 8002d5e:	2b00      	cmp	r3, #0
 8002d60:	d004      	beq.n	8002d6c <I2C_Slave_ISR_IT+0x184>
  {
    I2C_ITAddrCplt(hi2c, tmpITFlags);
 8002d62:	6939      	ldr	r1, [r7, #16]
 8002d64:	68f8      	ldr	r0, [r7, #12]
 8002d66:	f000 fa69 	bl	800323c <I2C_ITAddrCplt>
 8002d6a:	e037      	b.n	8002ddc <I2C_Slave_ISR_IT+0x1f4>
  }
  else if ((I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_TXIS) != RESET) && \
 8002d6c:	693b      	ldr	r3, [r7, #16]
 8002d6e:	085b      	lsrs	r3, r3, #1
 8002d70:	f003 0301 	and.w	r3, r3, #1
 8002d74:	2b00      	cmp	r3, #0
 8002d76:	d031      	beq.n	8002ddc <I2C_Slave_ISR_IT+0x1f4>
           (I2C_CHECK_IT_SOURCE(ITSources, I2C_IT_TXI) != RESET))
 8002d78:	687b      	ldr	r3, [r7, #4]
 8002d7a:	085b      	lsrs	r3, r3, #1
 8002d7c:	f003 0301 	and.w	r3, r3, #1
  else if ((I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_TXIS) != RESET) && \
 8002d80:	2b00      	cmp	r3, #0
 8002d82:	d02b      	beq.n	8002ddc <I2C_Slave_ISR_IT+0x1f4>
  {
    /* Write data to TXDR only if XferCount not reach "0" */
    /* A TXIS flag can be set, during STOP treatment      */
    /* Check if all Data have already been sent */
    /* If it is the case, this last write in TXDR is not sent, correspond to a dummy TXIS event */
    if (hi2c->XferCount > 0U)
 8002d84:	68fb      	ldr	r3, [r7, #12]
 8002d86:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8002d88:	b29b      	uxth	r3, r3
 8002d8a:	2b00      	cmp	r3, #0
 8002d8c:	d018      	beq.n	8002dc0 <I2C_Slave_ISR_IT+0x1d8>
    {
      /* Write data to TXDR */
      hi2c->Instance->TXDR = *hi2c->pBuffPtr;
 8002d8e:	68fb      	ldr	r3, [r7, #12]
 8002d90:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002d92:	781a      	ldrb	r2, [r3, #0]
 8002d94:	68fb      	ldr	r3, [r7, #12]
 8002d96:	681b      	ldr	r3, [r3, #0]
 8002d98:	629a      	str	r2, [r3, #40]	; 0x28

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 8002d9a:	68fb      	ldr	r3, [r7, #12]
 8002d9c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002d9e:	1c5a      	adds	r2, r3, #1
 8002da0:	68fb      	ldr	r3, [r7, #12]
 8002da2:	625a      	str	r2, [r3, #36]	; 0x24

      hi2c->XferCount--;
 8002da4:	68fb      	ldr	r3, [r7, #12]
 8002da6:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8002da8:	b29b      	uxth	r3, r3
 8002daa:	3b01      	subs	r3, #1
 8002dac:	b29a      	uxth	r2, r3
 8002dae:	68fb      	ldr	r3, [r7, #12]
 8002db0:	855a      	strh	r2, [r3, #42]	; 0x2a
      hi2c->XferSize--;
 8002db2:	68fb      	ldr	r3, [r7, #12]
 8002db4:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8002db6:	3b01      	subs	r3, #1
 8002db8:	b29a      	uxth	r2, r3
 8002dba:	68fb      	ldr	r3, [r7, #12]
 8002dbc:	851a      	strh	r2, [r3, #40]	; 0x28
 8002dbe:	e00d      	b.n	8002ddc <I2C_Slave_ISR_IT+0x1f4>
    }
    else
    {
      if ((tmpoptions == I2C_NEXT_FRAME) || (tmpoptions == I2C_FIRST_FRAME))
 8002dc0:	697b      	ldr	r3, [r7, #20]
 8002dc2:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8002dc6:	d002      	beq.n	8002dce <I2C_Slave_ISR_IT+0x1e6>
 8002dc8:	697b      	ldr	r3, [r7, #20]
 8002dca:	2b00      	cmp	r3, #0
 8002dcc:	d106      	bne.n	8002ddc <I2C_Slave_ISR_IT+0x1f4>
      {
        /* Last Byte is Transmitted */
        /* Call I2C Slave Sequential complete process */
        I2C_ITSlaveSeqCplt(hi2c);
 8002dce:	68f8      	ldr	r0, [r7, #12]
 8002dd0:	f000 faf5 	bl	80033be <I2C_ITSlaveSeqCplt>
 8002dd4:	e002      	b.n	8002ddc <I2C_Slave_ISR_IT+0x1f4>
    if (hi2c->XferCount == 0U)
 8002dd6:	bf00      	nop
 8002dd8:	e000      	b.n	8002ddc <I2C_Slave_ISR_IT+0x1f4>
    if ((hi2c->XferCount == 0U) && \
 8002dda:	bf00      	nop
  {
    /* Nothing to do */
  }

  /* Process Unlocked */
  __HAL_UNLOCK(hi2c);
 8002ddc:	68fb      	ldr	r3, [r7, #12]
 8002dde:	2200      	movs	r2, #0
 8002de0:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

  return HAL_OK;
 8002de4:	2300      	movs	r3, #0
}
 8002de6:	4618      	mov	r0, r3
 8002de8:	3718      	adds	r7, #24
 8002dea:	46bd      	mov	sp, r7
 8002dec:	bd80      	pop	{r7, pc}

08002dee <I2C_Master_ISR_DMA>:
  * @param  ITSources Interrupt sources enabled.
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_Master_ISR_DMA(struct __I2C_HandleTypeDef *hi2c, uint32_t ITFlags,
                                            uint32_t ITSources)
{
 8002dee:	b580      	push	{r7, lr}
 8002df0:	b088      	sub	sp, #32
 8002df2:	af02      	add	r7, sp, #8
 8002df4:	60f8      	str	r0, [r7, #12]
 8002df6:	60b9      	str	r1, [r7, #8]
 8002df8:	607a      	str	r2, [r7, #4]
  uint16_t devaddress;
  uint32_t xfermode;

  /* Process Locked */
  __HAL_LOCK(hi2c);
 8002dfa:	68fb      	ldr	r3, [r7, #12]
 8002dfc:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 8002e00:	2b01      	cmp	r3, #1
 8002e02:	d101      	bne.n	8002e08 <I2C_Master_ISR_DMA+0x1a>
 8002e04:	2302      	movs	r3, #2
 8002e06:	e0e1      	b.n	8002fcc <I2C_Master_ISR_DMA+0x1de>
 8002e08:	68fb      	ldr	r3, [r7, #12]
 8002e0a:	2201      	movs	r2, #1
 8002e0c:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

  if ((I2C_CHECK_FLAG(ITFlags, I2C_FLAG_AF) != RESET) && \
 8002e10:	68bb      	ldr	r3, [r7, #8]
 8002e12:	091b      	lsrs	r3, r3, #4
 8002e14:	f003 0301 	and.w	r3, r3, #1
 8002e18:	2b00      	cmp	r3, #0
 8002e1a:	d017      	beq.n	8002e4c <I2C_Master_ISR_DMA+0x5e>
      (I2C_CHECK_IT_SOURCE(ITSources, I2C_IT_NACKI) != RESET))
 8002e1c:	687b      	ldr	r3, [r7, #4]
 8002e1e:	091b      	lsrs	r3, r3, #4
 8002e20:	f003 0301 	and.w	r3, r3, #1
  if ((I2C_CHECK_FLAG(ITFlags, I2C_FLAG_AF) != RESET) && \
 8002e24:	2b00      	cmp	r3, #0
 8002e26:	d011      	beq.n	8002e4c <I2C_Master_ISR_DMA+0x5e>
  {
    /* Clear NACK Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8002e28:	68fb      	ldr	r3, [r7, #12]
 8002e2a:	681b      	ldr	r3, [r3, #0]
 8002e2c:	2210      	movs	r2, #16
 8002e2e:	61da      	str	r2, [r3, #28]

    /* Set corresponding Error Code */
    hi2c->ErrorCode |= HAL_I2C_ERROR_AF;
 8002e30:	68fb      	ldr	r3, [r7, #12]
 8002e32:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002e34:	f043 0204 	orr.w	r2, r3, #4
 8002e38:	68fb      	ldr	r3, [r7, #12]
 8002e3a:	645a      	str	r2, [r3, #68]	; 0x44

    /* No need to generate STOP, it is automatically done */
    /* But enable STOP interrupt, to treat it */
    /* Error callback will be send during stop flag treatment */
    I2C_Enable_IRQ(hi2c, I2C_XFER_CPLT_IT);
 8002e3c:	2120      	movs	r1, #32
 8002e3e:	68f8      	ldr	r0, [r7, #12]
 8002e40:	f001 f85a 	bl	8003ef8 <I2C_Enable_IRQ>

    /* Flush TX register */
    I2C_Flush_TXDR(hi2c);
 8002e44:	68f8      	ldr	r0, [r7, #12]
 8002e46:	f000 fe3a 	bl	8003abe <I2C_Flush_TXDR>
 8002e4a:	e0ba      	b.n	8002fc2 <I2C_Master_ISR_DMA+0x1d4>
  }
  else if ((I2C_CHECK_FLAG(ITFlags, I2C_FLAG_TCR) != RESET) && \
 8002e4c:	68bb      	ldr	r3, [r7, #8]
 8002e4e:	09db      	lsrs	r3, r3, #7
 8002e50:	f003 0301 	and.w	r3, r3, #1
 8002e54:	2b00      	cmp	r3, #0
 8002e56:	d072      	beq.n	8002f3e <I2C_Master_ISR_DMA+0x150>
           (I2C_CHECK_IT_SOURCE(ITSources, I2C_IT_TCI) != RESET))
 8002e58:	687b      	ldr	r3, [r7, #4]
 8002e5a:	099b      	lsrs	r3, r3, #6
 8002e5c:	f003 0301 	and.w	r3, r3, #1
  else if ((I2C_CHECK_FLAG(ITFlags, I2C_FLAG_TCR) != RESET) && \
 8002e60:	2b00      	cmp	r3, #0
 8002e62:	d06c      	beq.n	8002f3e <I2C_Master_ISR_DMA+0x150>
  {
    /* Disable TC interrupt */
    __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_TCI);
 8002e64:	68fb      	ldr	r3, [r7, #12]
 8002e66:	681b      	ldr	r3, [r3, #0]
 8002e68:	681a      	ldr	r2, [r3, #0]
 8002e6a:	68fb      	ldr	r3, [r7, #12]
 8002e6c:	681b      	ldr	r3, [r3, #0]
 8002e6e:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8002e72:	601a      	str	r2, [r3, #0]

    if (hi2c->XferCount != 0U)
 8002e74:	68fb      	ldr	r3, [r7, #12]
 8002e76:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8002e78:	b29b      	uxth	r3, r3
 8002e7a:	2b00      	cmp	r3, #0
 8002e7c:	d04e      	beq.n	8002f1c <I2C_Master_ISR_DMA+0x12e>
    {
      /* Recover Slave address */
      devaddress = (uint16_t)(hi2c->Instance->CR2 & I2C_CR2_SADD);
 8002e7e:	68fb      	ldr	r3, [r7, #12]
 8002e80:	681b      	ldr	r3, [r3, #0]
 8002e82:	685b      	ldr	r3, [r3, #4]
 8002e84:	b29b      	uxth	r3, r3
 8002e86:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8002e8a:	827b      	strh	r3, [r7, #18]

      /* Prepare the new XferSize to transfer */
      if (hi2c->XferCount > MAX_NBYTE_SIZE)
 8002e8c:	68fb      	ldr	r3, [r7, #12]
 8002e8e:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8002e90:	b29b      	uxth	r3, r3
 8002e92:	2bff      	cmp	r3, #255	; 0xff
 8002e94:	d906      	bls.n	8002ea4 <I2C_Master_ISR_DMA+0xb6>
      {
        hi2c->XferSize = MAX_NBYTE_SIZE;
 8002e96:	68fb      	ldr	r3, [r7, #12]
 8002e98:	22ff      	movs	r2, #255	; 0xff
 8002e9a:	851a      	strh	r2, [r3, #40]	; 0x28
        xfermode = I2C_RELOAD_MODE;
 8002e9c:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 8002ea0:	617b      	str	r3, [r7, #20]
 8002ea2:	e010      	b.n	8002ec6 <I2C_Master_ISR_DMA+0xd8>
      }
      else
      {
        hi2c->XferSize = hi2c->XferCount;
 8002ea4:	68fb      	ldr	r3, [r7, #12]
 8002ea6:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8002ea8:	b29a      	uxth	r2, r3
 8002eaa:	68fb      	ldr	r3, [r7, #12]
 8002eac:	851a      	strh	r2, [r3, #40]	; 0x28
        if (hi2c->XferOptions != I2C_NO_OPTION_FRAME)
 8002eae:	68fb      	ldr	r3, [r7, #12]
 8002eb0:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002eb2:	f513 3f80 	cmn.w	r3, #65536	; 0x10000
 8002eb6:	d003      	beq.n	8002ec0 <I2C_Master_ISR_DMA+0xd2>
        {
          xfermode = hi2c->XferOptions;
 8002eb8:	68fb      	ldr	r3, [r7, #12]
 8002eba:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002ebc:	617b      	str	r3, [r7, #20]
 8002ebe:	e002      	b.n	8002ec6 <I2C_Master_ISR_DMA+0xd8>
        }
        else
        {
          xfermode = I2C_AUTOEND_MODE;
 8002ec0:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 8002ec4:	617b      	str	r3, [r7, #20]
        }
      }

      /* Set the new XferSize in Nbytes register */
      I2C_TransferConfig(hi2c, devaddress, (uint8_t)hi2c->XferSize, xfermode, I2C_NO_STARTSTOP);
 8002ec6:	68fb      	ldr	r3, [r7, #12]
 8002ec8:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8002eca:	b2da      	uxtb	r2, r3
 8002ecc:	8a79      	ldrh	r1, [r7, #18]
 8002ece:	2300      	movs	r3, #0
 8002ed0:	9300      	str	r3, [sp, #0]
 8002ed2:	697b      	ldr	r3, [r7, #20]
 8002ed4:	68f8      	ldr	r0, [r7, #12]
 8002ed6:	f000 ffdd 	bl	8003e94 <I2C_TransferConfig>

      /* Update XferCount value */
      hi2c->XferCount -= hi2c->XferSize;
 8002eda:	68fb      	ldr	r3, [r7, #12]
 8002edc:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8002ede:	b29a      	uxth	r2, r3
 8002ee0:	68fb      	ldr	r3, [r7, #12]
 8002ee2:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8002ee4:	1ad3      	subs	r3, r2, r3
 8002ee6:	b29a      	uxth	r2, r3
 8002ee8:	68fb      	ldr	r3, [r7, #12]
 8002eea:	855a      	strh	r2, [r3, #42]	; 0x2a

      /* Enable DMA Request */
      if (hi2c->State == HAL_I2C_STATE_BUSY_RX)
 8002eec:	68fb      	ldr	r3, [r7, #12]
 8002eee:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8002ef2:	b2db      	uxtb	r3, r3
 8002ef4:	2b22      	cmp	r3, #34	; 0x22
 8002ef6:	d108      	bne.n	8002f0a <I2C_Master_ISR_DMA+0x11c>
      {
        hi2c->Instance->CR1 |= I2C_CR1_RXDMAEN;
 8002ef8:	68fb      	ldr	r3, [r7, #12]
 8002efa:	681b      	ldr	r3, [r3, #0]
 8002efc:	681a      	ldr	r2, [r3, #0]
 8002efe:	68fb      	ldr	r3, [r7, #12]
 8002f00:	681b      	ldr	r3, [r3, #0]
 8002f02:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 8002f06:	601a      	str	r2, [r3, #0]
    if (hi2c->XferCount != 0U)
 8002f08:	e05b      	b.n	8002fc2 <I2C_Master_ISR_DMA+0x1d4>
      }
      else
      {
        hi2c->Instance->CR1 |= I2C_CR1_TXDMAEN;
 8002f0a:	68fb      	ldr	r3, [r7, #12]
 8002f0c:	681b      	ldr	r3, [r3, #0]
 8002f0e:	681a      	ldr	r2, [r3, #0]
 8002f10:	68fb      	ldr	r3, [r7, #12]
 8002f12:	681b      	ldr	r3, [r3, #0]
 8002f14:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 8002f18:	601a      	str	r2, [r3, #0]
    if (hi2c->XferCount != 0U)
 8002f1a:	e052      	b.n	8002fc2 <I2C_Master_ISR_DMA+0x1d4>
      }
    }
    else
    {
      /* Call TxCpltCallback() if no stop mode is set */
      if (I2C_GET_STOP_MODE(hi2c) != I2C_AUTOEND_MODE)
 8002f1c:	68fb      	ldr	r3, [r7, #12]
 8002f1e:	681b      	ldr	r3, [r3, #0]
 8002f20:	685b      	ldr	r3, [r3, #4]
 8002f22:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002f26:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 8002f2a:	d003      	beq.n	8002f34 <I2C_Master_ISR_DMA+0x146>
      {
        /* Call I2C Master Sequential complete process */
        I2C_ITMasterSeqCplt(hi2c);
 8002f2c:	68f8      	ldr	r0, [r7, #12]
 8002f2e:	f000 fa09 	bl	8003344 <I2C_ITMasterSeqCplt>
    if (hi2c->XferCount != 0U)
 8002f32:	e046      	b.n	8002fc2 <I2C_Master_ISR_DMA+0x1d4>
      }
      else
      {
        /* Wrong size Status regarding TCR flag event */
        /* Call the corresponding callback to inform upper layer of End of Transfer */
        I2C_ITError(hi2c, HAL_I2C_ERROR_SIZE);
 8002f34:	2140      	movs	r1, #64	; 0x40
 8002f36:	68f8      	ldr	r0, [r7, #12]
 8002f38:	f000 fcca 	bl	80038d0 <I2C_ITError>
    if (hi2c->XferCount != 0U)
 8002f3c:	e041      	b.n	8002fc2 <I2C_Master_ISR_DMA+0x1d4>
      }
    }
  }
  else if ((I2C_CHECK_FLAG(ITFlags, I2C_FLAG_TC) != RESET) && \
 8002f3e:	68bb      	ldr	r3, [r7, #8]
 8002f40:	099b      	lsrs	r3, r3, #6
 8002f42:	f003 0301 	and.w	r3, r3, #1
 8002f46:	2b00      	cmp	r3, #0
 8002f48:	d029      	beq.n	8002f9e <I2C_Master_ISR_DMA+0x1b0>
           (I2C_CHECK_IT_SOURCE(ITSources, I2C_IT_TCI) != RESET))
 8002f4a:	687b      	ldr	r3, [r7, #4]
 8002f4c:	099b      	lsrs	r3, r3, #6
 8002f4e:	f003 0301 	and.w	r3, r3, #1
  else if ((I2C_CHECK_FLAG(ITFlags, I2C_FLAG_TC) != RESET) && \
 8002f52:	2b00      	cmp	r3, #0
 8002f54:	d023      	beq.n	8002f9e <I2C_Master_ISR_DMA+0x1b0>
  {
    if (hi2c->XferCount == 0U)
 8002f56:	68fb      	ldr	r3, [r7, #12]
 8002f58:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8002f5a:	b29b      	uxth	r3, r3
 8002f5c:	2b00      	cmp	r3, #0
 8002f5e:	d119      	bne.n	8002f94 <I2C_Master_ISR_DMA+0x1a6>
    {
      if (I2C_GET_STOP_MODE(hi2c) != I2C_AUTOEND_MODE)
 8002f60:	68fb      	ldr	r3, [r7, #12]
 8002f62:	681b      	ldr	r3, [r3, #0]
 8002f64:	685b      	ldr	r3, [r3, #4]
 8002f66:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002f6a:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 8002f6e:	d027      	beq.n	8002fc0 <I2C_Master_ISR_DMA+0x1d2>
      {
        /* Generate a stop condition in case of no transfer option */
        if (hi2c->XferOptions == I2C_NO_OPTION_FRAME)
 8002f70:	68fb      	ldr	r3, [r7, #12]
 8002f72:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002f74:	f513 3f80 	cmn.w	r3, #65536	; 0x10000
 8002f78:	d108      	bne.n	8002f8c <I2C_Master_ISR_DMA+0x19e>
        {
          /* Generate Stop */
          hi2c->Instance->CR2 |= I2C_CR2_STOP;
 8002f7a:	68fb      	ldr	r3, [r7, #12]
 8002f7c:	681b      	ldr	r3, [r3, #0]
 8002f7e:	685a      	ldr	r2, [r3, #4]
 8002f80:	68fb      	ldr	r3, [r7, #12]
 8002f82:	681b      	ldr	r3, [r3, #0]
 8002f84:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 8002f88:	605a      	str	r2, [r3, #4]
    if (hi2c->XferCount == 0U)
 8002f8a:	e019      	b.n	8002fc0 <I2C_Master_ISR_DMA+0x1d2>
        }
        else
        {
          /* Call I2C Master Sequential complete process */
          I2C_ITMasterSeqCplt(hi2c);
 8002f8c:	68f8      	ldr	r0, [r7, #12]
 8002f8e:	f000 f9d9 	bl	8003344 <I2C_ITMasterSeqCplt>
    if (hi2c->XferCount == 0U)
 8002f92:	e015      	b.n	8002fc0 <I2C_Master_ISR_DMA+0x1d2>
    }
    else
    {
      /* Wrong size Status regarding TC flag event */
      /* Call the corresponding callback to inform upper layer of End of Transfer */
      I2C_ITError(hi2c, HAL_I2C_ERROR_SIZE);
 8002f94:	2140      	movs	r1, #64	; 0x40
 8002f96:	68f8      	ldr	r0, [r7, #12]
 8002f98:	f000 fc9a 	bl	80038d0 <I2C_ITError>
    if (hi2c->XferCount == 0U)
 8002f9c:	e010      	b.n	8002fc0 <I2C_Master_ISR_DMA+0x1d2>
    }
  }
  else if ((I2C_CHECK_FLAG(ITFlags, I2C_FLAG_STOPF) != RESET) && \
 8002f9e:	68bb      	ldr	r3, [r7, #8]
 8002fa0:	095b      	lsrs	r3, r3, #5
 8002fa2:	f003 0301 	and.w	r3, r3, #1
 8002fa6:	2b00      	cmp	r3, #0
 8002fa8:	d00b      	beq.n	8002fc2 <I2C_Master_ISR_DMA+0x1d4>
           (I2C_CHECK_IT_SOURCE(ITSources, I2C_IT_STOPI) != RESET))
 8002faa:	687b      	ldr	r3, [r7, #4]
 8002fac:	095b      	lsrs	r3, r3, #5
 8002fae:	f003 0301 	and.w	r3, r3, #1
  else if ((I2C_CHECK_FLAG(ITFlags, I2C_FLAG_STOPF) != RESET) && \
 8002fb2:	2b00      	cmp	r3, #0
 8002fb4:	d005      	beq.n	8002fc2 <I2C_Master_ISR_DMA+0x1d4>
  {
    /* Call I2C Master complete process */
    I2C_ITMasterCplt(hi2c, ITFlags);
 8002fb6:	68b9      	ldr	r1, [r7, #8]
 8002fb8:	68f8      	ldr	r0, [r7, #12]
 8002fba:	f000 fa5f 	bl	800347c <I2C_ITMasterCplt>
 8002fbe:	e000      	b.n	8002fc2 <I2C_Master_ISR_DMA+0x1d4>
    if (hi2c->XferCount == 0U)
 8002fc0:	bf00      	nop
  {
    /* Nothing to do */
  }

  /* Process Unlocked */
  __HAL_UNLOCK(hi2c);
 8002fc2:	68fb      	ldr	r3, [r7, #12]
 8002fc4:	2200      	movs	r2, #0
 8002fc6:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

  return HAL_OK;
 8002fca:	2300      	movs	r3, #0
}
 8002fcc:	4618      	mov	r0, r3
 8002fce:	3718      	adds	r7, #24
 8002fd0:	46bd      	mov	sp, r7
 8002fd2:	bd80      	pop	{r7, pc}

08002fd4 <I2C_Slave_ISR_DMA>:
  * @param  ITSources Interrupt sources enabled.
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_Slave_ISR_DMA(struct __I2C_HandleTypeDef *hi2c, uint32_t ITFlags,
                                           uint32_t ITSources)
{
 8002fd4:	b580      	push	{r7, lr}
 8002fd6:	b088      	sub	sp, #32
 8002fd8:	af00      	add	r7, sp, #0
 8002fda:	60f8      	str	r0, [r7, #12]
 8002fdc:	60b9      	str	r1, [r7, #8]
 8002fde:	607a      	str	r2, [r7, #4]
  uint32_t tmpoptions = hi2c->XferOptions;
 8002fe0:	68fb      	ldr	r3, [r7, #12]
 8002fe2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002fe4:	61bb      	str	r3, [r7, #24]
  uint32_t treatdmanack = 0U;
 8002fe6:	2300      	movs	r3, #0
 8002fe8:	61fb      	str	r3, [r7, #28]
  HAL_I2C_StateTypeDef tmpstate;

  /* Process locked */
  __HAL_LOCK(hi2c);
 8002fea:	68fb      	ldr	r3, [r7, #12]
 8002fec:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 8002ff0:	2b01      	cmp	r3, #1
 8002ff2:	d101      	bne.n	8002ff8 <I2C_Slave_ISR_DMA+0x24>
 8002ff4:	2302      	movs	r3, #2
 8002ff6:	e0c9      	b.n	800318c <I2C_Slave_ISR_DMA+0x1b8>
 8002ff8:	68fb      	ldr	r3, [r7, #12]
 8002ffa:	2201      	movs	r2, #1
 8002ffc:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

  /* Check if STOPF is set */
  if ((I2C_CHECK_FLAG(ITFlags, I2C_FLAG_STOPF) != RESET) && \
 8003000:	68bb      	ldr	r3, [r7, #8]
 8003002:	095b      	lsrs	r3, r3, #5
 8003004:	f003 0301 	and.w	r3, r3, #1
 8003008:	2b00      	cmp	r3, #0
 800300a:	d009      	beq.n	8003020 <I2C_Slave_ISR_DMA+0x4c>
      (I2C_CHECK_IT_SOURCE(ITSources, I2C_IT_STOPI) != RESET))
 800300c:	687b      	ldr	r3, [r7, #4]
 800300e:	095b      	lsrs	r3, r3, #5
 8003010:	f003 0301 	and.w	r3, r3, #1
  if ((I2C_CHECK_FLAG(ITFlags, I2C_FLAG_STOPF) != RESET) && \
 8003014:	2b00      	cmp	r3, #0
 8003016:	d003      	beq.n	8003020 <I2C_Slave_ISR_DMA+0x4c>
  {
    /* Call I2C Slave complete process */
    I2C_ITSlaveCplt(hi2c, ITFlags);
 8003018:	68b9      	ldr	r1, [r7, #8]
 800301a:	68f8      	ldr	r0, [r7, #12]
 800301c:	f000 faf8 	bl	8003610 <I2C_ITSlaveCplt>
  }

  if ((I2C_CHECK_FLAG(ITFlags, I2C_FLAG_AF) != RESET) && \
 8003020:	68bb      	ldr	r3, [r7, #8]
 8003022:	091b      	lsrs	r3, r3, #4
 8003024:	f003 0301 	and.w	r3, r3, #1
 8003028:	2b00      	cmp	r3, #0
 800302a:	f000 809a 	beq.w	8003162 <I2C_Slave_ISR_DMA+0x18e>
      (I2C_CHECK_IT_SOURCE(ITSources, I2C_IT_NACKI) != RESET))
 800302e:	687b      	ldr	r3, [r7, #4]
 8003030:	091b      	lsrs	r3, r3, #4
 8003032:	f003 0301 	and.w	r3, r3, #1
  if ((I2C_CHECK_FLAG(ITFlags, I2C_FLAG_AF) != RESET) && \
 8003036:	2b00      	cmp	r3, #0
 8003038:	f000 8093 	beq.w	8003162 <I2C_Slave_ISR_DMA+0x18e>
  {
    /* Check that I2C transfer finished */
    /* if yes, normal use case, a NACK is sent by the MASTER when Transfer is finished */
    /* Mean XferCount == 0 */
    /* So clear Flag NACKF only */
    if ((I2C_CHECK_IT_SOURCE(ITSources, I2C_CR1_TXDMAEN) != RESET) ||
 800303c:	687b      	ldr	r3, [r7, #4]
 800303e:	0b9b      	lsrs	r3, r3, #14
 8003040:	f003 0301 	and.w	r3, r3, #1
 8003044:	2b00      	cmp	r3, #0
 8003046:	d105      	bne.n	8003054 <I2C_Slave_ISR_DMA+0x80>
        (I2C_CHECK_IT_SOURCE(ITSources, I2C_CR1_RXDMAEN) != RESET))
 8003048:	687b      	ldr	r3, [r7, #4]
 800304a:	0bdb      	lsrs	r3, r3, #15
 800304c:	f003 0301 	and.w	r3, r3, #1
    if ((I2C_CHECK_IT_SOURCE(ITSources, I2C_CR1_TXDMAEN) != RESET) ||
 8003050:	2b00      	cmp	r3, #0
 8003052:	d07f      	beq.n	8003154 <I2C_Slave_ISR_DMA+0x180>
    {
      /* Split check of hdmarx, for MISRA compliance */
      if (hi2c->hdmarx != NULL)
 8003054:	68fb      	ldr	r3, [r7, #12]
 8003056:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8003058:	2b00      	cmp	r3, #0
 800305a:	d00d      	beq.n	8003078 <I2C_Slave_ISR_DMA+0xa4>
      {
        if (I2C_CHECK_IT_SOURCE(ITSources, I2C_CR1_RXDMAEN) != RESET)
 800305c:	687b      	ldr	r3, [r7, #4]
 800305e:	0bdb      	lsrs	r3, r3, #15
 8003060:	f003 0301 	and.w	r3, r3, #1
 8003064:	2b00      	cmp	r3, #0
 8003066:	d007      	beq.n	8003078 <I2C_Slave_ISR_DMA+0xa4>
        {
          if (I2C_GET_DMA_REMAIN_DATA(hi2c->hdmarx) == 0U)
 8003068:	68fb      	ldr	r3, [r7, #12]
 800306a:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800306c:	681b      	ldr	r3, [r3, #0]
 800306e:	685b      	ldr	r3, [r3, #4]
 8003070:	2b00      	cmp	r3, #0
 8003072:	d101      	bne.n	8003078 <I2C_Slave_ISR_DMA+0xa4>
          {
            treatdmanack = 1U;
 8003074:	2301      	movs	r3, #1
 8003076:	61fb      	str	r3, [r7, #28]
          }
        }
      }

      /* Split check of hdmatx, for MISRA compliance  */
      if (hi2c->hdmatx != NULL)
 8003078:	68fb      	ldr	r3, [r7, #12]
 800307a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800307c:	2b00      	cmp	r3, #0
 800307e:	d00d      	beq.n	800309c <I2C_Slave_ISR_DMA+0xc8>
      {
        if (I2C_CHECK_IT_SOURCE(ITSources, I2C_CR1_TXDMAEN) != RESET)
 8003080:	687b      	ldr	r3, [r7, #4]
 8003082:	0b9b      	lsrs	r3, r3, #14
 8003084:	f003 0301 	and.w	r3, r3, #1
 8003088:	2b00      	cmp	r3, #0
 800308a:	d007      	beq.n	800309c <I2C_Slave_ISR_DMA+0xc8>
        {
          if (I2C_GET_DMA_REMAIN_DATA(hi2c->hdmatx) == 0U)
 800308c:	68fb      	ldr	r3, [r7, #12]
 800308e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003090:	681b      	ldr	r3, [r3, #0]
 8003092:	685b      	ldr	r3, [r3, #4]
 8003094:	2b00      	cmp	r3, #0
 8003096:	d101      	bne.n	800309c <I2C_Slave_ISR_DMA+0xc8>
          {
            treatdmanack = 1U;
 8003098:	2301      	movs	r3, #1
 800309a:	61fb      	str	r3, [r7, #28]
          }
        }
      }

      if (treatdmanack == 1U)
 800309c:	69fb      	ldr	r3, [r7, #28]
 800309e:	2b01      	cmp	r3, #1
 80030a0:	d128      	bne.n	80030f4 <I2C_Slave_ISR_DMA+0x120>
      {
        if ((hi2c->State == HAL_I2C_STATE_LISTEN) && (tmpoptions == I2C_FIRST_AND_LAST_FRAME))
 80030a2:	68fb      	ldr	r3, [r7, #12]
 80030a4:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 80030a8:	b2db      	uxtb	r3, r3
 80030aa:	2b28      	cmp	r3, #40	; 0x28
 80030ac:	d108      	bne.n	80030c0 <I2C_Slave_ISR_DMA+0xec>
 80030ae:	69bb      	ldr	r3, [r7, #24]
 80030b0:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 80030b4:	d104      	bne.n	80030c0 <I2C_Slave_ISR_DMA+0xec>
          /* Same action must be done for (tmpoptions == I2C_LAST_FRAME) which removed for
             Warning[Pa134]: left and right operands are identical */
        {
          /* Call I2C Listen complete process */
          I2C_ITListenCplt(hi2c, ITFlags);
 80030b6:	68b9      	ldr	r1, [r7, #8]
 80030b8:	68f8      	ldr	r0, [r7, #12]
 80030ba:	f000 fbb3 	bl	8003824 <I2C_ITListenCplt>
 80030be:	e048      	b.n	8003152 <I2C_Slave_ISR_DMA+0x17e>
        }
        else if ((hi2c->State == HAL_I2C_STATE_BUSY_TX_LISTEN) && (tmpoptions != I2C_NO_OPTION_FRAME))
 80030c0:	68fb      	ldr	r3, [r7, #12]
 80030c2:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 80030c6:	b2db      	uxtb	r3, r3
 80030c8:	2b29      	cmp	r3, #41	; 0x29
 80030ca:	d10e      	bne.n	80030ea <I2C_Slave_ISR_DMA+0x116>
 80030cc:	69bb      	ldr	r3, [r7, #24]
 80030ce:	f513 3f80 	cmn.w	r3, #65536	; 0x10000
 80030d2:	d00a      	beq.n	80030ea <I2C_Slave_ISR_DMA+0x116>
        {
          /* Clear NACK Flag */
          __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 80030d4:	68fb      	ldr	r3, [r7, #12]
 80030d6:	681b      	ldr	r3, [r3, #0]
 80030d8:	2210      	movs	r2, #16
 80030da:	61da      	str	r2, [r3, #28]

          /* Flush TX register */
          I2C_Flush_TXDR(hi2c);
 80030dc:	68f8      	ldr	r0, [r7, #12]
 80030de:	f000 fcee 	bl	8003abe <I2C_Flush_TXDR>

          /* Last Byte is Transmitted */
          /* Call I2C Slave Sequential complete process */
          I2C_ITSlaveSeqCplt(hi2c);
 80030e2:	68f8      	ldr	r0, [r7, #12]
 80030e4:	f000 f96b 	bl	80033be <I2C_ITSlaveSeqCplt>
 80030e8:	e033      	b.n	8003152 <I2C_Slave_ISR_DMA+0x17e>
        }
        else
        {
          /* Clear NACK Flag */
          __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 80030ea:	68fb      	ldr	r3, [r7, #12]
 80030ec:	681b      	ldr	r3, [r3, #0]
 80030ee:	2210      	movs	r2, #16
 80030f0:	61da      	str	r2, [r3, #28]
      if (treatdmanack == 1U)
 80030f2:	e034      	b.n	800315e <I2C_Slave_ISR_DMA+0x18a>
      }
      else
      {
        /* if no, error use case, a Non-Acknowledge of last Data is generated by the MASTER*/
        /* Clear NACK Flag */
        __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 80030f4:	68fb      	ldr	r3, [r7, #12]
 80030f6:	681b      	ldr	r3, [r3, #0]
 80030f8:	2210      	movs	r2, #16
 80030fa:	61da      	str	r2, [r3, #28]

        /* Set ErrorCode corresponding to a Non-Acknowledge */
        hi2c->ErrorCode |= HAL_I2C_ERROR_AF;
 80030fc:	68fb      	ldr	r3, [r7, #12]
 80030fe:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003100:	f043 0204 	orr.w	r2, r3, #4
 8003104:	68fb      	ldr	r3, [r7, #12]
 8003106:	645a      	str	r2, [r3, #68]	; 0x44

        /* Store current hi2c->State, solve MISRA2012-Rule-13.5 */
        tmpstate = hi2c->State;
 8003108:	68fb      	ldr	r3, [r7, #12]
 800310a:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 800310e:	75fb      	strb	r3, [r7, #23]

        if ((tmpoptions == I2C_FIRST_FRAME) || (tmpoptions == I2C_NEXT_FRAME))
 8003110:	69bb      	ldr	r3, [r7, #24]
 8003112:	2b00      	cmp	r3, #0
 8003114:	d003      	beq.n	800311e <I2C_Slave_ISR_DMA+0x14a>
 8003116:	69bb      	ldr	r3, [r7, #24]
 8003118:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 800311c:	d11f      	bne.n	800315e <I2C_Slave_ISR_DMA+0x18a>
        {
          if ((tmpstate == HAL_I2C_STATE_BUSY_TX) || (tmpstate == HAL_I2C_STATE_BUSY_TX_LISTEN))
 800311e:	7dfb      	ldrb	r3, [r7, #23]
 8003120:	2b21      	cmp	r3, #33	; 0x21
 8003122:	d002      	beq.n	800312a <I2C_Slave_ISR_DMA+0x156>
 8003124:	7dfb      	ldrb	r3, [r7, #23]
 8003126:	2b29      	cmp	r3, #41	; 0x29
 8003128:	d103      	bne.n	8003132 <I2C_Slave_ISR_DMA+0x15e>
          {
            hi2c->PreviousState = I2C_STATE_SLAVE_BUSY_TX;
 800312a:	68fb      	ldr	r3, [r7, #12]
 800312c:	2221      	movs	r2, #33	; 0x21
 800312e:	631a      	str	r2, [r3, #48]	; 0x30
 8003130:	e008      	b.n	8003144 <I2C_Slave_ISR_DMA+0x170>
          }
          else if ((tmpstate == HAL_I2C_STATE_BUSY_RX) || (tmpstate == HAL_I2C_STATE_BUSY_RX_LISTEN))
 8003132:	7dfb      	ldrb	r3, [r7, #23]
 8003134:	2b22      	cmp	r3, #34	; 0x22
 8003136:	d002      	beq.n	800313e <I2C_Slave_ISR_DMA+0x16a>
 8003138:	7dfb      	ldrb	r3, [r7, #23]
 800313a:	2b2a      	cmp	r3, #42	; 0x2a
 800313c:	d102      	bne.n	8003144 <I2C_Slave_ISR_DMA+0x170>
          {
            hi2c->PreviousState = I2C_STATE_SLAVE_BUSY_RX;
 800313e:	68fb      	ldr	r3, [r7, #12]
 8003140:	2222      	movs	r2, #34	; 0x22
 8003142:	631a      	str	r2, [r3, #48]	; 0x30
          {
            /* Do nothing */
          }

          /* Call the corresponding callback to inform upper layer of End of Transfer */
          I2C_ITError(hi2c, hi2c->ErrorCode);
 8003144:	68fb      	ldr	r3, [r7, #12]
 8003146:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003148:	4619      	mov	r1, r3
 800314a:	68f8      	ldr	r0, [r7, #12]
 800314c:	f000 fbc0 	bl	80038d0 <I2C_ITError>
      if (treatdmanack == 1U)
 8003150:	e005      	b.n	800315e <I2C_Slave_ISR_DMA+0x18a>
 8003152:	e004      	b.n	800315e <I2C_Slave_ISR_DMA+0x18a>
      }
    }
    else
    {
      /* Only Clear NACK Flag, no DMA treatment is pending */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8003154:	68fb      	ldr	r3, [r7, #12]
 8003156:	681b      	ldr	r3, [r3, #0]
 8003158:	2210      	movs	r2, #16
 800315a:	61da      	str	r2, [r3, #28]
    if ((I2C_CHECK_IT_SOURCE(ITSources, I2C_CR1_TXDMAEN) != RESET) ||
 800315c:	e011      	b.n	8003182 <I2C_Slave_ISR_DMA+0x1ae>
      if (treatdmanack == 1U)
 800315e:	bf00      	nop
    if ((I2C_CHECK_IT_SOURCE(ITSources, I2C_CR1_TXDMAEN) != RESET) ||
 8003160:	e00f      	b.n	8003182 <I2C_Slave_ISR_DMA+0x1ae>
    }
  }
  else if ((I2C_CHECK_FLAG(ITFlags, I2C_FLAG_ADDR) != RESET) && \
 8003162:	68bb      	ldr	r3, [r7, #8]
 8003164:	08db      	lsrs	r3, r3, #3
 8003166:	f003 0301 	and.w	r3, r3, #1
 800316a:	2b00      	cmp	r3, #0
 800316c:	d009      	beq.n	8003182 <I2C_Slave_ISR_DMA+0x1ae>
           (I2C_CHECK_IT_SOURCE(ITSources, I2C_IT_ADDRI) != RESET))
 800316e:	687b      	ldr	r3, [r7, #4]
 8003170:	08db      	lsrs	r3, r3, #3
 8003172:	f003 0301 	and.w	r3, r3, #1
  else if ((I2C_CHECK_FLAG(ITFlags, I2C_FLAG_ADDR) != RESET) && \
 8003176:	2b00      	cmp	r3, #0
 8003178:	d003      	beq.n	8003182 <I2C_Slave_ISR_DMA+0x1ae>
  {
    I2C_ITAddrCplt(hi2c, ITFlags);
 800317a:	68b9      	ldr	r1, [r7, #8]
 800317c:	68f8      	ldr	r0, [r7, #12]
 800317e:	f000 f85d 	bl	800323c <I2C_ITAddrCplt>
  {
    /* Nothing to do */
  }

  /* Process Unlocked */
  __HAL_UNLOCK(hi2c);
 8003182:	68fb      	ldr	r3, [r7, #12]
 8003184:	2200      	movs	r2, #0
 8003186:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

  return HAL_OK;
 800318a:	2300      	movs	r3, #0
}
 800318c:	4618      	mov	r0, r3
 800318e:	3720      	adds	r7, #32
 8003190:	46bd      	mov	sp, r7
 8003192:	bd80      	pop	{r7, pc}

08003194 <I2C_RequestMemoryWrite>:
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_RequestMemoryWrite(I2C_HandleTypeDef *hi2c, uint16_t DevAddress,
                                                uint16_t MemAddress, uint16_t MemAddSize, uint32_t Timeout,
                                                uint32_t Tickstart)
{
 8003194:	b580      	push	{r7, lr}
 8003196:	b086      	sub	sp, #24
 8003198:	af02      	add	r7, sp, #8
 800319a:	60f8      	str	r0, [r7, #12]
 800319c:	4608      	mov	r0, r1
 800319e:	4611      	mov	r1, r2
 80031a0:	461a      	mov	r2, r3
 80031a2:	4603      	mov	r3, r0
 80031a4:	817b      	strh	r3, [r7, #10]
 80031a6:	460b      	mov	r3, r1
 80031a8:	813b      	strh	r3, [r7, #8]
 80031aa:	4613      	mov	r3, r2
 80031ac:	80fb      	strh	r3, [r7, #6]
  I2C_TransferConfig(hi2c, DevAddress, (uint8_t)MemAddSize, I2C_RELOAD_MODE, I2C_GENERATE_START_WRITE);
 80031ae:	88fb      	ldrh	r3, [r7, #6]
 80031b0:	b2da      	uxtb	r2, r3
 80031b2:	8979      	ldrh	r1, [r7, #10]
 80031b4:	4b20      	ldr	r3, [pc, #128]	; (8003238 <I2C_RequestMemoryWrite+0xa4>)
 80031b6:	9300      	str	r3, [sp, #0]
 80031b8:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 80031bc:	68f8      	ldr	r0, [r7, #12]
 80031be:	f000 fe69 	bl	8003e94 <I2C_TransferConfig>

  /* Wait until TXIS flag is set */
  if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 80031c2:	69fa      	ldr	r2, [r7, #28]
 80031c4:	69b9      	ldr	r1, [r7, #24]
 80031c6:	68f8      	ldr	r0, [r7, #12]
 80031c8:	f000 fcfb 	bl	8003bc2 <I2C_WaitOnTXISFlagUntilTimeout>
 80031cc:	4603      	mov	r3, r0
 80031ce:	2b00      	cmp	r3, #0
 80031d0:	d001      	beq.n	80031d6 <I2C_RequestMemoryWrite+0x42>
  {
    return HAL_ERROR;
 80031d2:	2301      	movs	r3, #1
 80031d4:	e02c      	b.n	8003230 <I2C_RequestMemoryWrite+0x9c>
  }

  /* If Memory address size is 8Bit */
  if (MemAddSize == I2C_MEMADD_SIZE_8BIT)
 80031d6:	88fb      	ldrh	r3, [r7, #6]
 80031d8:	2b01      	cmp	r3, #1
 80031da:	d105      	bne.n	80031e8 <I2C_RequestMemoryWrite+0x54>
  {
    /* Send Memory Address */
    hi2c->Instance->TXDR = I2C_MEM_ADD_LSB(MemAddress);
 80031dc:	893b      	ldrh	r3, [r7, #8]
 80031de:	b2da      	uxtb	r2, r3
 80031e0:	68fb      	ldr	r3, [r7, #12]
 80031e2:	681b      	ldr	r3, [r3, #0]
 80031e4:	629a      	str	r2, [r3, #40]	; 0x28
 80031e6:	e015      	b.n	8003214 <I2C_RequestMemoryWrite+0x80>
  }
  /* If Memory address size is 16Bit */
  else
  {
    /* Send MSB of Memory Address */
    hi2c->Instance->TXDR = I2C_MEM_ADD_MSB(MemAddress);
 80031e8:	893b      	ldrh	r3, [r7, #8]
 80031ea:	0a1b      	lsrs	r3, r3, #8
 80031ec:	b29b      	uxth	r3, r3
 80031ee:	b2da      	uxtb	r2, r3
 80031f0:	68fb      	ldr	r3, [r7, #12]
 80031f2:	681b      	ldr	r3, [r3, #0]
 80031f4:	629a      	str	r2, [r3, #40]	; 0x28

    /* Wait until TXIS flag is set */
    if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 80031f6:	69fa      	ldr	r2, [r7, #28]
 80031f8:	69b9      	ldr	r1, [r7, #24]
 80031fa:	68f8      	ldr	r0, [r7, #12]
 80031fc:	f000 fce1 	bl	8003bc2 <I2C_WaitOnTXISFlagUntilTimeout>
 8003200:	4603      	mov	r3, r0
 8003202:	2b00      	cmp	r3, #0
 8003204:	d001      	beq.n	800320a <I2C_RequestMemoryWrite+0x76>
    {
      return HAL_ERROR;
 8003206:	2301      	movs	r3, #1
 8003208:	e012      	b.n	8003230 <I2C_RequestMemoryWrite+0x9c>
    }

    /* Send LSB of Memory Address */
    hi2c->Instance->TXDR = I2C_MEM_ADD_LSB(MemAddress);
 800320a:	893b      	ldrh	r3, [r7, #8]
 800320c:	b2da      	uxtb	r2, r3
 800320e:	68fb      	ldr	r3, [r7, #12]
 8003210:	681b      	ldr	r3, [r3, #0]
 8003212:	629a      	str	r2, [r3, #40]	; 0x28
  }

  /* Wait until TCR flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_TCR, RESET, Timeout, Tickstart) != HAL_OK)
 8003214:	69fb      	ldr	r3, [r7, #28]
 8003216:	9300      	str	r3, [sp, #0]
 8003218:	69bb      	ldr	r3, [r7, #24]
 800321a:	2200      	movs	r2, #0
 800321c:	2180      	movs	r1, #128	; 0x80
 800321e:	68f8      	ldr	r0, [r7, #12]
 8003220:	f000 fc8f 	bl	8003b42 <I2C_WaitOnFlagUntilTimeout>
 8003224:	4603      	mov	r3, r0
 8003226:	2b00      	cmp	r3, #0
 8003228:	d001      	beq.n	800322e <I2C_RequestMemoryWrite+0x9a>
  {
    return HAL_ERROR;
 800322a:	2301      	movs	r3, #1
 800322c:	e000      	b.n	8003230 <I2C_RequestMemoryWrite+0x9c>
  }

  return HAL_OK;
 800322e:	2300      	movs	r3, #0
}
 8003230:	4618      	mov	r0, r3
 8003232:	3710      	adds	r7, #16
 8003234:	46bd      	mov	sp, r7
 8003236:	bd80      	pop	{r7, pc}
 8003238:	80002000 	.word	0x80002000

0800323c <I2C_ITAddrCplt>:
  * @param  hi2c I2C handle.
  * @param  ITFlags Interrupt flags to handle.
  * @retval None
  */
static void I2C_ITAddrCplt(I2C_HandleTypeDef *hi2c, uint32_t ITFlags)
{
 800323c:	b580      	push	{r7, lr}
 800323e:	b084      	sub	sp, #16
 8003240:	af00      	add	r7, sp, #0
 8003242:	6078      	str	r0, [r7, #4]
 8003244:	6039      	str	r1, [r7, #0]

  /* Prevent unused argument(s) compilation warning */
  UNUSED(ITFlags);

  /* In case of Listen state, need to inform upper layer of address match code event */
  if (((uint32_t)hi2c->State & (uint32_t)HAL_I2C_STATE_LISTEN) == (uint32_t)HAL_I2C_STATE_LISTEN)
 8003246:	687b      	ldr	r3, [r7, #4]
 8003248:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 800324c:	b2db      	uxtb	r3, r3
 800324e:	f003 0328 	and.w	r3, r3, #40	; 0x28
 8003252:	2b28      	cmp	r3, #40	; 0x28
 8003254:	d16a      	bne.n	800332c <I2C_ITAddrCplt+0xf0>
  {
    transferdirection = I2C_GET_DIR(hi2c);
 8003256:	687b      	ldr	r3, [r7, #4]
 8003258:	681b      	ldr	r3, [r3, #0]
 800325a:	699b      	ldr	r3, [r3, #24]
 800325c:	0c1b      	lsrs	r3, r3, #16
 800325e:	b2db      	uxtb	r3, r3
 8003260:	f003 0301 	and.w	r3, r3, #1
 8003264:	73fb      	strb	r3, [r7, #15]
    slaveaddrcode     = I2C_GET_ADDR_MATCH(hi2c);
 8003266:	687b      	ldr	r3, [r7, #4]
 8003268:	681b      	ldr	r3, [r3, #0]
 800326a:	699b      	ldr	r3, [r3, #24]
 800326c:	0c1b      	lsrs	r3, r3, #16
 800326e:	b29b      	uxth	r3, r3
 8003270:	f003 03fe 	and.w	r3, r3, #254	; 0xfe
 8003274:	81bb      	strh	r3, [r7, #12]
    ownadd1code       = I2C_GET_OWN_ADDRESS1(hi2c);
 8003276:	687b      	ldr	r3, [r7, #4]
 8003278:	681b      	ldr	r3, [r3, #0]
 800327a:	689b      	ldr	r3, [r3, #8]
 800327c:	b29b      	uxth	r3, r3
 800327e:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8003282:	817b      	strh	r3, [r7, #10]
    ownadd2code       = I2C_GET_OWN_ADDRESS2(hi2c);
 8003284:	687b      	ldr	r3, [r7, #4]
 8003286:	681b      	ldr	r3, [r3, #0]
 8003288:	68db      	ldr	r3, [r3, #12]
 800328a:	b29b      	uxth	r3, r3
 800328c:	f003 03fe 	and.w	r3, r3, #254	; 0xfe
 8003290:	813b      	strh	r3, [r7, #8]

    /* If 10bits addressing mode is selected */
    if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_10BIT)
 8003292:	687b      	ldr	r3, [r7, #4]
 8003294:	68db      	ldr	r3, [r3, #12]
 8003296:	2b02      	cmp	r3, #2
 8003298:	d138      	bne.n	800330c <I2C_ITAddrCplt+0xd0>
    {
      if ((slaveaddrcode & SLAVE_ADDR_MSK) == ((ownadd1code >> SLAVE_ADDR_SHIFT) & SLAVE_ADDR_MSK))
 800329a:	897b      	ldrh	r3, [r7, #10]
 800329c:	09db      	lsrs	r3, r3, #7
 800329e:	b29a      	uxth	r2, r3
 80032a0:	89bb      	ldrh	r3, [r7, #12]
 80032a2:	4053      	eors	r3, r2
 80032a4:	b29b      	uxth	r3, r3
 80032a6:	f003 0306 	and.w	r3, r3, #6
 80032aa:	2b00      	cmp	r3, #0
 80032ac:	d11c      	bne.n	80032e8 <I2C_ITAddrCplt+0xac>
      {
        slaveaddrcode = ownadd1code;
 80032ae:	897b      	ldrh	r3, [r7, #10]
 80032b0:	81bb      	strh	r3, [r7, #12]
        hi2c->AddrEventCount++;
 80032b2:	687b      	ldr	r3, [r7, #4]
 80032b4:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80032b6:	1c5a      	adds	r2, r3, #1
 80032b8:	687b      	ldr	r3, [r7, #4]
 80032ba:	649a      	str	r2, [r3, #72]	; 0x48
        if (hi2c->AddrEventCount == 2U)
 80032bc:	687b      	ldr	r3, [r7, #4]
 80032be:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80032c0:	2b02      	cmp	r3, #2
 80032c2:	d13b      	bne.n	800333c <I2C_ITAddrCplt+0x100>
        {
          /* Reset Address Event counter */
          hi2c->AddrEventCount = 0U;
 80032c4:	687b      	ldr	r3, [r7, #4]
 80032c6:	2200      	movs	r2, #0
 80032c8:	649a      	str	r2, [r3, #72]	; 0x48

          /* Clear ADDR flag */
          __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_ADDR);
 80032ca:	687b      	ldr	r3, [r7, #4]
 80032cc:	681b      	ldr	r3, [r3, #0]
 80032ce:	2208      	movs	r2, #8
 80032d0:	61da      	str	r2, [r3, #28]

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 80032d2:	687b      	ldr	r3, [r7, #4]
 80032d4:	2200      	movs	r2, #0
 80032d6:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

          /* Call Slave Addr callback */
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
          hi2c->AddrCallback(hi2c, transferdirection, slaveaddrcode);
#else
          HAL_I2C_AddrCallback(hi2c, transferdirection, slaveaddrcode);
 80032da:	89ba      	ldrh	r2, [r7, #12]
 80032dc:	7bfb      	ldrb	r3, [r7, #15]
 80032de:	4619      	mov	r1, r3
 80032e0:	6878      	ldr	r0, [r7, #4]
 80032e2:	f7ff fb21 	bl	8002928 <HAL_I2C_AddrCallback>
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_ADDR);

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
  }
}
 80032e6:	e029      	b.n	800333c <I2C_ITAddrCplt+0x100>
        slaveaddrcode = ownadd2code;
 80032e8:	893b      	ldrh	r3, [r7, #8]
 80032ea:	81bb      	strh	r3, [r7, #12]
        I2C_Disable_IRQ(hi2c, I2C_XFER_LISTEN_IT);
 80032ec:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 80032f0:	6878      	ldr	r0, [r7, #4]
 80032f2:	f000 fe6b 	bl	8003fcc <I2C_Disable_IRQ>
        __HAL_UNLOCK(hi2c);
 80032f6:	687b      	ldr	r3, [r7, #4]
 80032f8:	2200      	movs	r2, #0
 80032fa:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
        HAL_I2C_AddrCallback(hi2c, transferdirection, slaveaddrcode);
 80032fe:	89ba      	ldrh	r2, [r7, #12]
 8003300:	7bfb      	ldrb	r3, [r7, #15]
 8003302:	4619      	mov	r1, r3
 8003304:	6878      	ldr	r0, [r7, #4]
 8003306:	f7ff fb0f 	bl	8002928 <HAL_I2C_AddrCallback>
}
 800330a:	e017      	b.n	800333c <I2C_ITAddrCplt+0x100>
      I2C_Disable_IRQ(hi2c, I2C_XFER_LISTEN_IT);
 800330c:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 8003310:	6878      	ldr	r0, [r7, #4]
 8003312:	f000 fe5b 	bl	8003fcc <I2C_Disable_IRQ>
      __HAL_UNLOCK(hi2c);
 8003316:	687b      	ldr	r3, [r7, #4]
 8003318:	2200      	movs	r2, #0
 800331a:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
      HAL_I2C_AddrCallback(hi2c, transferdirection, slaveaddrcode);
 800331e:	89ba      	ldrh	r2, [r7, #12]
 8003320:	7bfb      	ldrb	r3, [r7, #15]
 8003322:	4619      	mov	r1, r3
 8003324:	6878      	ldr	r0, [r7, #4]
 8003326:	f7ff faff 	bl	8002928 <HAL_I2C_AddrCallback>
}
 800332a:	e007      	b.n	800333c <I2C_ITAddrCplt+0x100>
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_ADDR);
 800332c:	687b      	ldr	r3, [r7, #4]
 800332e:	681b      	ldr	r3, [r3, #0]
 8003330:	2208      	movs	r2, #8
 8003332:	61da      	str	r2, [r3, #28]
    __HAL_UNLOCK(hi2c);
 8003334:	687b      	ldr	r3, [r7, #4]
 8003336:	2200      	movs	r2, #0
 8003338:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
}
 800333c:	bf00      	nop
 800333e:	3710      	adds	r7, #16
 8003340:	46bd      	mov	sp, r7
 8003342:	bd80      	pop	{r7, pc}

08003344 <I2C_ITMasterSeqCplt>:
  * @brief  I2C Master sequential complete process.
  * @param  hi2c I2C handle.
  * @retval None
  */
static void I2C_ITMasterSeqCplt(I2C_HandleTypeDef *hi2c)
{
 8003344:	b580      	push	{r7, lr}
 8003346:	b082      	sub	sp, #8
 8003348:	af00      	add	r7, sp, #0
 800334a:	6078      	str	r0, [r7, #4]
  /* Reset I2C handle mode */
  hi2c->Mode = HAL_I2C_MODE_NONE;
 800334c:	687b      	ldr	r3, [r7, #4]
 800334e:	2200      	movs	r2, #0
 8003350:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

  /* No Generate Stop, to permit restart mode */
  /* The stop will be done at the end of transfer, when I2C_AUTOEND_MODE enable */
  if (hi2c->State == HAL_I2C_STATE_BUSY_TX)
 8003354:	687b      	ldr	r3, [r7, #4]
 8003356:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 800335a:	b2db      	uxtb	r3, r3
 800335c:	2b21      	cmp	r3, #33	; 0x21
 800335e:	d115      	bne.n	800338c <I2C_ITMasterSeqCplt+0x48>
  {
    hi2c->State         = HAL_I2C_STATE_READY;
 8003360:	687b      	ldr	r3, [r7, #4]
 8003362:	2220      	movs	r2, #32
 8003364:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->PreviousState = I2C_STATE_MASTER_BUSY_TX;
 8003368:	687b      	ldr	r3, [r7, #4]
 800336a:	2211      	movs	r2, #17
 800336c:	631a      	str	r2, [r3, #48]	; 0x30
    hi2c->XferISR       = NULL;
 800336e:	687b      	ldr	r3, [r7, #4]
 8003370:	2200      	movs	r2, #0
 8003372:	635a      	str	r2, [r3, #52]	; 0x34

    /* Disable Interrupts */
    I2C_Disable_IRQ(hi2c, I2C_XFER_TX_IT);
 8003374:	2101      	movs	r1, #1
 8003376:	6878      	ldr	r0, [r7, #4]
 8003378:	f000 fe28 	bl	8003fcc <I2C_Disable_IRQ>

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 800337c:	687b      	ldr	r3, [r7, #4]
 800337e:	2200      	movs	r2, #0
 8003380:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    /* Call the corresponding callback to inform upper layer of End of Transfer */
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
    hi2c->MasterTxCpltCallback(hi2c);
#else
    HAL_I2C_MasterTxCpltCallback(hi2c);
 8003384:	6878      	ldr	r0, [r7, #4]
 8003386:	f7ff faa7 	bl	80028d8 <HAL_I2C_MasterTxCpltCallback>
    hi2c->MasterRxCpltCallback(hi2c);
#else
    HAL_I2C_MasterRxCpltCallback(hi2c);
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }
}
 800338a:	e014      	b.n	80033b6 <I2C_ITMasterSeqCplt+0x72>
    hi2c->State         = HAL_I2C_STATE_READY;
 800338c:	687b      	ldr	r3, [r7, #4]
 800338e:	2220      	movs	r2, #32
 8003390:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->PreviousState = I2C_STATE_MASTER_BUSY_RX;
 8003394:	687b      	ldr	r3, [r7, #4]
 8003396:	2212      	movs	r2, #18
 8003398:	631a      	str	r2, [r3, #48]	; 0x30
    hi2c->XferISR       = NULL;
 800339a:	687b      	ldr	r3, [r7, #4]
 800339c:	2200      	movs	r2, #0
 800339e:	635a      	str	r2, [r3, #52]	; 0x34
    I2C_Disable_IRQ(hi2c, I2C_XFER_RX_IT);
 80033a0:	2102      	movs	r1, #2
 80033a2:	6878      	ldr	r0, [r7, #4]
 80033a4:	f000 fe12 	bl	8003fcc <I2C_Disable_IRQ>
    __HAL_UNLOCK(hi2c);
 80033a8:	687b      	ldr	r3, [r7, #4]
 80033aa:	2200      	movs	r2, #0
 80033ac:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
    HAL_I2C_MasterRxCpltCallback(hi2c);
 80033b0:	6878      	ldr	r0, [r7, #4]
 80033b2:	f7ff fa9b 	bl	80028ec <HAL_I2C_MasterRxCpltCallback>
}
 80033b6:	bf00      	nop
 80033b8:	3708      	adds	r7, #8
 80033ba:	46bd      	mov	sp, r7
 80033bc:	bd80      	pop	{r7, pc}

080033be <I2C_ITSlaveSeqCplt>:
  * @brief  I2C Slave sequential complete process.
  * @param  hi2c I2C handle.
  * @retval None
  */
static void I2C_ITSlaveSeqCplt(I2C_HandleTypeDef *hi2c)
{
 80033be:	b580      	push	{r7, lr}
 80033c0:	b084      	sub	sp, #16
 80033c2:	af00      	add	r7, sp, #0
 80033c4:	6078      	str	r0, [r7, #4]
  uint32_t tmpcr1value = READ_REG(hi2c->Instance->CR1);
 80033c6:	687b      	ldr	r3, [r7, #4]
 80033c8:	681b      	ldr	r3, [r3, #0]
 80033ca:	681b      	ldr	r3, [r3, #0]
 80033cc:	60fb      	str	r3, [r7, #12]

  /* Reset I2C handle mode */
  hi2c->Mode = HAL_I2C_MODE_NONE;
 80033ce:	687b      	ldr	r3, [r7, #4]
 80033d0:	2200      	movs	r2, #0
 80033d2:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

  /* If a DMA is ongoing, Update handle size context */
  if (I2C_CHECK_IT_SOURCE(tmpcr1value, I2C_CR1_TXDMAEN) != RESET)
 80033d6:	68fb      	ldr	r3, [r7, #12]
 80033d8:	0b9b      	lsrs	r3, r3, #14
 80033da:	f003 0301 	and.w	r3, r3, #1
 80033de:	2b00      	cmp	r3, #0
 80033e0:	d008      	beq.n	80033f4 <I2C_ITSlaveSeqCplt+0x36>
  {
    /* Disable DMA Request */
    hi2c->Instance->CR1 &= ~I2C_CR1_TXDMAEN;
 80033e2:	687b      	ldr	r3, [r7, #4]
 80033e4:	681b      	ldr	r3, [r3, #0]
 80033e6:	681a      	ldr	r2, [r3, #0]
 80033e8:	687b      	ldr	r3, [r7, #4]
 80033ea:	681b      	ldr	r3, [r3, #0]
 80033ec:	f422 4280 	bic.w	r2, r2, #16384	; 0x4000
 80033f0:	601a      	str	r2, [r3, #0]
 80033f2:	e00d      	b.n	8003410 <I2C_ITSlaveSeqCplt+0x52>
  }
  else if (I2C_CHECK_IT_SOURCE(tmpcr1value, I2C_CR1_RXDMAEN) != RESET)
 80033f4:	68fb      	ldr	r3, [r7, #12]
 80033f6:	0bdb      	lsrs	r3, r3, #15
 80033f8:	f003 0301 	and.w	r3, r3, #1
 80033fc:	2b00      	cmp	r3, #0
 80033fe:	d007      	beq.n	8003410 <I2C_ITSlaveSeqCplt+0x52>
  {
    /* Disable DMA Request */
    hi2c->Instance->CR1 &= ~I2C_CR1_RXDMAEN;
 8003400:	687b      	ldr	r3, [r7, #4]
 8003402:	681b      	ldr	r3, [r3, #0]
 8003404:	681a      	ldr	r2, [r3, #0]
 8003406:	687b      	ldr	r3, [r7, #4]
 8003408:	681b      	ldr	r3, [r3, #0]
 800340a:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 800340e:	601a      	str	r2, [r3, #0]
  else
  {
    /* Do nothing */
  }

  if (hi2c->State == HAL_I2C_STATE_BUSY_TX_LISTEN)
 8003410:	687b      	ldr	r3, [r7, #4]
 8003412:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8003416:	b2db      	uxtb	r3, r3
 8003418:	2b29      	cmp	r3, #41	; 0x29
 800341a:	d112      	bne.n	8003442 <I2C_ITSlaveSeqCplt+0x84>
  {
    /* Remove HAL_I2C_STATE_SLAVE_BUSY_TX, keep only HAL_I2C_STATE_LISTEN */
    hi2c->State         = HAL_I2C_STATE_LISTEN;
 800341c:	687b      	ldr	r3, [r7, #4]
 800341e:	2228      	movs	r2, #40	; 0x28
 8003420:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->PreviousState = I2C_STATE_SLAVE_BUSY_TX;
 8003424:	687b      	ldr	r3, [r7, #4]
 8003426:	2221      	movs	r2, #33	; 0x21
 8003428:	631a      	str	r2, [r3, #48]	; 0x30

    /* Disable Interrupts */
    I2C_Disable_IRQ(hi2c, I2C_XFER_TX_IT);
 800342a:	2101      	movs	r1, #1
 800342c:	6878      	ldr	r0, [r7, #4]
 800342e:	f000 fdcd 	bl	8003fcc <I2C_Disable_IRQ>

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8003432:	687b      	ldr	r3, [r7, #4]
 8003434:	2200      	movs	r2, #0
 8003436:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    /* Call the corresponding callback to inform upper layer of End of Transfer */
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
    hi2c->SlaveTxCpltCallback(hi2c);
#else
    HAL_I2C_SlaveTxCpltCallback(hi2c);
 800343a:	6878      	ldr	r0, [r7, #4]
 800343c:	f7ff fa60 	bl	8002900 <HAL_I2C_SlaveTxCpltCallback>
  }
  else
  {
    /* Nothing to do */
  }
}
 8003440:	e017      	b.n	8003472 <I2C_ITSlaveSeqCplt+0xb4>
  else if (hi2c->State == HAL_I2C_STATE_BUSY_RX_LISTEN)
 8003442:	687b      	ldr	r3, [r7, #4]
 8003444:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8003448:	b2db      	uxtb	r3, r3
 800344a:	2b2a      	cmp	r3, #42	; 0x2a
 800344c:	d111      	bne.n	8003472 <I2C_ITSlaveSeqCplt+0xb4>
    hi2c->State         = HAL_I2C_STATE_LISTEN;
 800344e:	687b      	ldr	r3, [r7, #4]
 8003450:	2228      	movs	r2, #40	; 0x28
 8003452:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->PreviousState = I2C_STATE_SLAVE_BUSY_RX;
 8003456:	687b      	ldr	r3, [r7, #4]
 8003458:	2222      	movs	r2, #34	; 0x22
 800345a:	631a      	str	r2, [r3, #48]	; 0x30
    I2C_Disable_IRQ(hi2c, I2C_XFER_RX_IT);
 800345c:	2102      	movs	r1, #2
 800345e:	6878      	ldr	r0, [r7, #4]
 8003460:	f000 fdb4 	bl	8003fcc <I2C_Disable_IRQ>
    __HAL_UNLOCK(hi2c);
 8003464:	687b      	ldr	r3, [r7, #4]
 8003466:	2200      	movs	r2, #0
 8003468:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
    HAL_I2C_SlaveRxCpltCallback(hi2c);
 800346c:	6878      	ldr	r0, [r7, #4]
 800346e:	f7ff fa51 	bl	8002914 <HAL_I2C_SlaveRxCpltCallback>
}
 8003472:	bf00      	nop
 8003474:	3710      	adds	r7, #16
 8003476:	46bd      	mov	sp, r7
 8003478:	bd80      	pop	{r7, pc}
	...

0800347c <I2C_ITMasterCplt>:
  * @param  hi2c I2C handle.
  * @param  ITFlags Interrupt flags to handle.
  * @retval None
  */
static void I2C_ITMasterCplt(I2C_HandleTypeDef *hi2c, uint32_t ITFlags)
{
 800347c:	b580      	push	{r7, lr}
 800347e:	b086      	sub	sp, #24
 8003480:	af00      	add	r7, sp, #0
 8003482:	6078      	str	r0, [r7, #4]
 8003484:	6039      	str	r1, [r7, #0]
  uint32_t tmperror;
  uint32_t tmpITFlags = ITFlags;
 8003486:	683b      	ldr	r3, [r7, #0]
 8003488:	617b      	str	r3, [r7, #20]
  __IO uint32_t tmpreg;

  /* Clear STOP Flag */
  __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 800348a:	687b      	ldr	r3, [r7, #4]
 800348c:	681b      	ldr	r3, [r3, #0]
 800348e:	2220      	movs	r2, #32
 8003490:	61da      	str	r2, [r3, #28]

  /* Disable Interrupts and Store Previous state */
  if (hi2c->State == HAL_I2C_STATE_BUSY_TX)
 8003492:	687b      	ldr	r3, [r7, #4]
 8003494:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8003498:	b2db      	uxtb	r3, r3
 800349a:	2b21      	cmp	r3, #33	; 0x21
 800349c:	d107      	bne.n	80034ae <I2C_ITMasterCplt+0x32>
  {
    I2C_Disable_IRQ(hi2c, I2C_XFER_TX_IT);
 800349e:	2101      	movs	r1, #1
 80034a0:	6878      	ldr	r0, [r7, #4]
 80034a2:	f000 fd93 	bl	8003fcc <I2C_Disable_IRQ>
    hi2c->PreviousState = I2C_STATE_MASTER_BUSY_TX;
 80034a6:	687b      	ldr	r3, [r7, #4]
 80034a8:	2211      	movs	r2, #17
 80034aa:	631a      	str	r2, [r3, #48]	; 0x30
 80034ac:	e00c      	b.n	80034c8 <I2C_ITMasterCplt+0x4c>
  }
  else if (hi2c->State == HAL_I2C_STATE_BUSY_RX)
 80034ae:	687b      	ldr	r3, [r7, #4]
 80034b0:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 80034b4:	b2db      	uxtb	r3, r3
 80034b6:	2b22      	cmp	r3, #34	; 0x22
 80034b8:	d106      	bne.n	80034c8 <I2C_ITMasterCplt+0x4c>
  {
    I2C_Disable_IRQ(hi2c, I2C_XFER_RX_IT);
 80034ba:	2102      	movs	r1, #2
 80034bc:	6878      	ldr	r0, [r7, #4]
 80034be:	f000 fd85 	bl	8003fcc <I2C_Disable_IRQ>
    hi2c->PreviousState = I2C_STATE_MASTER_BUSY_RX;
 80034c2:	687b      	ldr	r3, [r7, #4]
 80034c4:	2212      	movs	r2, #18
 80034c6:	631a      	str	r2, [r3, #48]	; 0x30
  {
    /* Do nothing */
  }

  /* Clear Configuration Register 2 */
  I2C_RESET_CR2(hi2c);
 80034c8:	687b      	ldr	r3, [r7, #4]
 80034ca:	681b      	ldr	r3, [r3, #0]
 80034cc:	6859      	ldr	r1, [r3, #4]
 80034ce:	687b      	ldr	r3, [r7, #4]
 80034d0:	681a      	ldr	r2, [r3, #0]
 80034d2:	4b4d      	ldr	r3, [pc, #308]	; (8003608 <I2C_ITMasterCplt+0x18c>)
 80034d4:	400b      	ands	r3, r1
 80034d6:	6053      	str	r3, [r2, #4]

  /* Reset handle parameters */
  hi2c->XferISR       = NULL;
 80034d8:	687b      	ldr	r3, [r7, #4]
 80034da:	2200      	movs	r2, #0
 80034dc:	635a      	str	r2, [r3, #52]	; 0x34
  hi2c->XferOptions   = I2C_NO_OPTION_FRAME;
 80034de:	687b      	ldr	r3, [r7, #4]
 80034e0:	4a4a      	ldr	r2, [pc, #296]	; (800360c <I2C_ITMasterCplt+0x190>)
 80034e2:	62da      	str	r2, [r3, #44]	; 0x2c

  if (I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_AF) != RESET)
 80034e4:	697b      	ldr	r3, [r7, #20]
 80034e6:	091b      	lsrs	r3, r3, #4
 80034e8:	f003 0301 	and.w	r3, r3, #1
 80034ec:	2b00      	cmp	r3, #0
 80034ee:	d009      	beq.n	8003504 <I2C_ITMasterCplt+0x88>
  {
    /* Clear NACK Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 80034f0:	687b      	ldr	r3, [r7, #4]
 80034f2:	681b      	ldr	r3, [r3, #0]
 80034f4:	2210      	movs	r2, #16
 80034f6:	61da      	str	r2, [r3, #28]

    /* Set acknowledge error code */
    hi2c->ErrorCode |= HAL_I2C_ERROR_AF;
 80034f8:	687b      	ldr	r3, [r7, #4]
 80034fa:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80034fc:	f043 0204 	orr.w	r2, r3, #4
 8003500:	687b      	ldr	r3, [r7, #4]
 8003502:	645a      	str	r2, [r3, #68]	; 0x44
  }

  /* Fetch Last receive data if any */
  if ((hi2c->State == HAL_I2C_STATE_ABORT) && (I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_RXNE) != RESET))
 8003504:	687b      	ldr	r3, [r7, #4]
 8003506:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 800350a:	b2db      	uxtb	r3, r3
 800350c:	2b60      	cmp	r3, #96	; 0x60
 800350e:	d10b      	bne.n	8003528 <I2C_ITMasterCplt+0xac>
 8003510:	697b      	ldr	r3, [r7, #20]
 8003512:	089b      	lsrs	r3, r3, #2
 8003514:	f003 0301 	and.w	r3, r3, #1
 8003518:	2b00      	cmp	r3, #0
 800351a:	d005      	beq.n	8003528 <I2C_ITMasterCplt+0xac>
  {
    /* Read data from RXDR */
    tmpreg = (uint8_t)hi2c->Instance->RXDR;
 800351c:	687b      	ldr	r3, [r7, #4]
 800351e:	681b      	ldr	r3, [r3, #0]
 8003520:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003522:	b2db      	uxtb	r3, r3
 8003524:	60fb      	str	r3, [r7, #12]
    UNUSED(tmpreg);
 8003526:	68fb      	ldr	r3, [r7, #12]
  }

  /* Flush TX register */
  I2C_Flush_TXDR(hi2c);
 8003528:	6878      	ldr	r0, [r7, #4]
 800352a:	f000 fac8 	bl	8003abe <I2C_Flush_TXDR>

  /* Store current volatile hi2c->ErrorCode, misra rule */
  tmperror = hi2c->ErrorCode;
 800352e:	687b      	ldr	r3, [r7, #4]
 8003530:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003532:	613b      	str	r3, [r7, #16]

  /* Call the corresponding callback to inform upper layer of End of Transfer */
  if ((hi2c->State == HAL_I2C_STATE_ABORT) || (tmperror != HAL_I2C_ERROR_NONE))
 8003534:	687b      	ldr	r3, [r7, #4]
 8003536:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 800353a:	b2db      	uxtb	r3, r3
 800353c:	2b60      	cmp	r3, #96	; 0x60
 800353e:	d002      	beq.n	8003546 <I2C_ITMasterCplt+0xca>
 8003540:	693b      	ldr	r3, [r7, #16]
 8003542:	2b00      	cmp	r3, #0
 8003544:	d006      	beq.n	8003554 <I2C_ITMasterCplt+0xd8>
  {
    /* Call the corresponding callback to inform upper layer of End of Transfer */
    I2C_ITError(hi2c, hi2c->ErrorCode);
 8003546:	687b      	ldr	r3, [r7, #4]
 8003548:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800354a:	4619      	mov	r1, r3
 800354c:	6878      	ldr	r0, [r7, #4]
 800354e:	f000 f9bf 	bl	80038d0 <I2C_ITError>
  }
  else
  {
    /* Nothing to do */
  }
}
 8003552:	e054      	b.n	80035fe <I2C_ITMasterCplt+0x182>
  else if (hi2c->State == HAL_I2C_STATE_BUSY_TX)
 8003554:	687b      	ldr	r3, [r7, #4]
 8003556:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 800355a:	b2db      	uxtb	r3, r3
 800355c:	2b21      	cmp	r3, #33	; 0x21
 800355e:	d124      	bne.n	80035aa <I2C_ITMasterCplt+0x12e>
    hi2c->State = HAL_I2C_STATE_READY;
 8003560:	687b      	ldr	r3, [r7, #4]
 8003562:	2220      	movs	r2, #32
 8003564:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->PreviousState = I2C_STATE_NONE;
 8003568:	687b      	ldr	r3, [r7, #4]
 800356a:	2200      	movs	r2, #0
 800356c:	631a      	str	r2, [r3, #48]	; 0x30
    if (hi2c->Mode == HAL_I2C_MODE_MEM)
 800356e:	687b      	ldr	r3, [r7, #4]
 8003570:	f893 3042 	ldrb.w	r3, [r3, #66]	; 0x42
 8003574:	b2db      	uxtb	r3, r3
 8003576:	2b40      	cmp	r3, #64	; 0x40
 8003578:	d10b      	bne.n	8003592 <I2C_ITMasterCplt+0x116>
      hi2c->Mode = HAL_I2C_MODE_NONE;
 800357a:	687b      	ldr	r3, [r7, #4]
 800357c:	2200      	movs	r2, #0
 800357e:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
      __HAL_UNLOCK(hi2c);
 8003582:	687b      	ldr	r3, [r7, #4]
 8003584:	2200      	movs	r2, #0
 8003586:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
      HAL_I2C_MemTxCpltCallback(hi2c);
 800358a:	6878      	ldr	r0, [r7, #4]
 800358c:	f7ff f9e4 	bl	8002958 <HAL_I2C_MemTxCpltCallback>
}
 8003590:	e035      	b.n	80035fe <I2C_ITMasterCplt+0x182>
      hi2c->Mode = HAL_I2C_MODE_NONE;
 8003592:	687b      	ldr	r3, [r7, #4]
 8003594:	2200      	movs	r2, #0
 8003596:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
      __HAL_UNLOCK(hi2c);
 800359a:	687b      	ldr	r3, [r7, #4]
 800359c:	2200      	movs	r2, #0
 800359e:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
      HAL_I2C_MasterTxCpltCallback(hi2c);
 80035a2:	6878      	ldr	r0, [r7, #4]
 80035a4:	f7ff f998 	bl	80028d8 <HAL_I2C_MasterTxCpltCallback>
}
 80035a8:	e029      	b.n	80035fe <I2C_ITMasterCplt+0x182>
  else if (hi2c->State == HAL_I2C_STATE_BUSY_RX)
 80035aa:	687b      	ldr	r3, [r7, #4]
 80035ac:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 80035b0:	b2db      	uxtb	r3, r3
 80035b2:	2b22      	cmp	r3, #34	; 0x22
 80035b4:	d123      	bne.n	80035fe <I2C_ITMasterCplt+0x182>
    hi2c->State = HAL_I2C_STATE_READY;
 80035b6:	687b      	ldr	r3, [r7, #4]
 80035b8:	2220      	movs	r2, #32
 80035ba:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->PreviousState = I2C_STATE_NONE;
 80035be:	687b      	ldr	r3, [r7, #4]
 80035c0:	2200      	movs	r2, #0
 80035c2:	631a      	str	r2, [r3, #48]	; 0x30
    if (hi2c->Mode == HAL_I2C_MODE_MEM)
 80035c4:	687b      	ldr	r3, [r7, #4]
 80035c6:	f893 3042 	ldrb.w	r3, [r3, #66]	; 0x42
 80035ca:	b2db      	uxtb	r3, r3
 80035cc:	2b40      	cmp	r3, #64	; 0x40
 80035ce:	d10b      	bne.n	80035e8 <I2C_ITMasterCplt+0x16c>
      hi2c->Mode = HAL_I2C_MODE_NONE;
 80035d0:	687b      	ldr	r3, [r7, #4]
 80035d2:	2200      	movs	r2, #0
 80035d4:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
      __HAL_UNLOCK(hi2c);
 80035d8:	687b      	ldr	r3, [r7, #4]
 80035da:	2200      	movs	r2, #0
 80035dc:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
      HAL_I2C_MemRxCpltCallback(hi2c);
 80035e0:	6878      	ldr	r0, [r7, #4]
 80035e2:	f7fd fd59 	bl	8001098 <HAL_I2C_MemRxCpltCallback>
}
 80035e6:	e00a      	b.n	80035fe <I2C_ITMasterCplt+0x182>
      hi2c->Mode = HAL_I2C_MODE_NONE;
 80035e8:	687b      	ldr	r3, [r7, #4]
 80035ea:	2200      	movs	r2, #0
 80035ec:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
      __HAL_UNLOCK(hi2c);
 80035f0:	687b      	ldr	r3, [r7, #4]
 80035f2:	2200      	movs	r2, #0
 80035f4:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
      HAL_I2C_MasterRxCpltCallback(hi2c);
 80035f8:	6878      	ldr	r0, [r7, #4]
 80035fa:	f7ff f977 	bl	80028ec <HAL_I2C_MasterRxCpltCallback>
}
 80035fe:	bf00      	nop
 8003600:	3718      	adds	r7, #24
 8003602:	46bd      	mov	sp, r7
 8003604:	bd80      	pop	{r7, pc}
 8003606:	bf00      	nop
 8003608:	fe00e800 	.word	0xfe00e800
 800360c:	ffff0000 	.word	0xffff0000

08003610 <I2C_ITSlaveCplt>:
  * @param  hi2c I2C handle.
  * @param  ITFlags Interrupt flags to handle.
  * @retval None
  */
static void I2C_ITSlaveCplt(I2C_HandleTypeDef *hi2c, uint32_t ITFlags)
{
 8003610:	b580      	push	{r7, lr}
 8003612:	b086      	sub	sp, #24
 8003614:	af00      	add	r7, sp, #0
 8003616:	6078      	str	r0, [r7, #4]
 8003618:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1value = READ_REG(hi2c->Instance->CR1);
 800361a:	687b      	ldr	r3, [r7, #4]
 800361c:	681b      	ldr	r3, [r3, #0]
 800361e:	681b      	ldr	r3, [r3, #0]
 8003620:	613b      	str	r3, [r7, #16]
  uint32_t tmpITFlags = ITFlags;
 8003622:	683b      	ldr	r3, [r7, #0]
 8003624:	617b      	str	r3, [r7, #20]
  HAL_I2C_StateTypeDef tmpstate = hi2c->State;
 8003626:	687b      	ldr	r3, [r7, #4]
 8003628:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 800362c:	73fb      	strb	r3, [r7, #15]

  /* Clear STOP Flag */
  __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 800362e:	687b      	ldr	r3, [r7, #4]
 8003630:	681b      	ldr	r3, [r3, #0]
 8003632:	2220      	movs	r2, #32
 8003634:	61da      	str	r2, [r3, #28]

  /* Disable Interrupts and Store Previous state */
  if ((tmpstate == HAL_I2C_STATE_BUSY_TX) || (tmpstate == HAL_I2C_STATE_BUSY_TX_LISTEN))
 8003636:	7bfb      	ldrb	r3, [r7, #15]
 8003638:	2b21      	cmp	r3, #33	; 0x21
 800363a:	d002      	beq.n	8003642 <I2C_ITSlaveCplt+0x32>
 800363c:	7bfb      	ldrb	r3, [r7, #15]
 800363e:	2b29      	cmp	r3, #41	; 0x29
 8003640:	d108      	bne.n	8003654 <I2C_ITSlaveCplt+0x44>
  {
    I2C_Disable_IRQ(hi2c, I2C_XFER_LISTEN_IT | I2C_XFER_TX_IT);
 8003642:	f248 0101 	movw	r1, #32769	; 0x8001
 8003646:	6878      	ldr	r0, [r7, #4]
 8003648:	f000 fcc0 	bl	8003fcc <I2C_Disable_IRQ>
    hi2c->PreviousState = I2C_STATE_SLAVE_BUSY_TX;
 800364c:	687b      	ldr	r3, [r7, #4]
 800364e:	2221      	movs	r2, #33	; 0x21
 8003650:	631a      	str	r2, [r3, #48]	; 0x30
 8003652:	e00d      	b.n	8003670 <I2C_ITSlaveCplt+0x60>
  }
  else if ((tmpstate == HAL_I2C_STATE_BUSY_RX) || (tmpstate == HAL_I2C_STATE_BUSY_RX_LISTEN))
 8003654:	7bfb      	ldrb	r3, [r7, #15]
 8003656:	2b22      	cmp	r3, #34	; 0x22
 8003658:	d002      	beq.n	8003660 <I2C_ITSlaveCplt+0x50>
 800365a:	7bfb      	ldrb	r3, [r7, #15]
 800365c:	2b2a      	cmp	r3, #42	; 0x2a
 800365e:	d107      	bne.n	8003670 <I2C_ITSlaveCplt+0x60>
  {
    I2C_Disable_IRQ(hi2c, I2C_XFER_LISTEN_IT | I2C_XFER_RX_IT);
 8003660:	f248 0102 	movw	r1, #32770	; 0x8002
 8003664:	6878      	ldr	r0, [r7, #4]
 8003666:	f000 fcb1 	bl	8003fcc <I2C_Disable_IRQ>
    hi2c->PreviousState = I2C_STATE_SLAVE_BUSY_RX;
 800366a:	687b      	ldr	r3, [r7, #4]
 800366c:	2222      	movs	r2, #34	; 0x22
 800366e:	631a      	str	r2, [r3, #48]	; 0x30
  {
    /* Do nothing */
  }

  /* Disable Address Acknowledge */
  hi2c->Instance->CR2 |= I2C_CR2_NACK;
 8003670:	687b      	ldr	r3, [r7, #4]
 8003672:	681b      	ldr	r3, [r3, #0]
 8003674:	685a      	ldr	r2, [r3, #4]
 8003676:	687b      	ldr	r3, [r7, #4]
 8003678:	681b      	ldr	r3, [r3, #0]
 800367a:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 800367e:	605a      	str	r2, [r3, #4]

  /* Clear Configuration Register 2 */
  I2C_RESET_CR2(hi2c);
 8003680:	687b      	ldr	r3, [r7, #4]
 8003682:	681b      	ldr	r3, [r3, #0]
 8003684:	6859      	ldr	r1, [r3, #4]
 8003686:	687b      	ldr	r3, [r7, #4]
 8003688:	681a      	ldr	r2, [r3, #0]
 800368a:	4b64      	ldr	r3, [pc, #400]	; (800381c <I2C_ITSlaveCplt+0x20c>)
 800368c:	400b      	ands	r3, r1
 800368e:	6053      	str	r3, [r2, #4]

  /* Flush TX register */
  I2C_Flush_TXDR(hi2c);
 8003690:	6878      	ldr	r0, [r7, #4]
 8003692:	f000 fa14 	bl	8003abe <I2C_Flush_TXDR>

  /* If a DMA is ongoing, Update handle size context */
  if (I2C_CHECK_IT_SOURCE(tmpcr1value, I2C_CR1_TXDMAEN) != RESET)
 8003696:	693b      	ldr	r3, [r7, #16]
 8003698:	0b9b      	lsrs	r3, r3, #14
 800369a:	f003 0301 	and.w	r3, r3, #1
 800369e:	2b00      	cmp	r3, #0
 80036a0:	d013      	beq.n	80036ca <I2C_ITSlaveCplt+0xba>
  {
    /* Disable DMA Request */
    hi2c->Instance->CR1 &= ~I2C_CR1_TXDMAEN;
 80036a2:	687b      	ldr	r3, [r7, #4]
 80036a4:	681b      	ldr	r3, [r3, #0]
 80036a6:	681a      	ldr	r2, [r3, #0]
 80036a8:	687b      	ldr	r3, [r7, #4]
 80036aa:	681b      	ldr	r3, [r3, #0]
 80036ac:	f422 4280 	bic.w	r2, r2, #16384	; 0x4000
 80036b0:	601a      	str	r2, [r3, #0]

    if (hi2c->hdmatx != NULL)
 80036b2:	687b      	ldr	r3, [r7, #4]
 80036b4:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80036b6:	2b00      	cmp	r3, #0
 80036b8:	d020      	beq.n	80036fc <I2C_ITSlaveCplt+0xec>
    {
      hi2c->XferCount = (uint16_t)I2C_GET_DMA_REMAIN_DATA(hi2c->hdmatx);
 80036ba:	687b      	ldr	r3, [r7, #4]
 80036bc:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80036be:	681b      	ldr	r3, [r3, #0]
 80036c0:	685b      	ldr	r3, [r3, #4]
 80036c2:	b29a      	uxth	r2, r3
 80036c4:	687b      	ldr	r3, [r7, #4]
 80036c6:	855a      	strh	r2, [r3, #42]	; 0x2a
 80036c8:	e018      	b.n	80036fc <I2C_ITSlaveCplt+0xec>
    }
  }
  else if (I2C_CHECK_IT_SOURCE(tmpcr1value, I2C_CR1_RXDMAEN) != RESET)
 80036ca:	693b      	ldr	r3, [r7, #16]
 80036cc:	0bdb      	lsrs	r3, r3, #15
 80036ce:	f003 0301 	and.w	r3, r3, #1
 80036d2:	2b00      	cmp	r3, #0
 80036d4:	d012      	beq.n	80036fc <I2C_ITSlaveCplt+0xec>
  {
    /* Disable DMA Request */
    hi2c->Instance->CR1 &= ~I2C_CR1_RXDMAEN;
 80036d6:	687b      	ldr	r3, [r7, #4]
 80036d8:	681b      	ldr	r3, [r3, #0]
 80036da:	681a      	ldr	r2, [r3, #0]
 80036dc:	687b      	ldr	r3, [r7, #4]
 80036de:	681b      	ldr	r3, [r3, #0]
 80036e0:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 80036e4:	601a      	str	r2, [r3, #0]

    if (hi2c->hdmarx != NULL)
 80036e6:	687b      	ldr	r3, [r7, #4]
 80036e8:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80036ea:	2b00      	cmp	r3, #0
 80036ec:	d006      	beq.n	80036fc <I2C_ITSlaveCplt+0xec>
    {
      hi2c->XferCount = (uint16_t)I2C_GET_DMA_REMAIN_DATA(hi2c->hdmarx);
 80036ee:	687b      	ldr	r3, [r7, #4]
 80036f0:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80036f2:	681b      	ldr	r3, [r3, #0]
 80036f4:	685b      	ldr	r3, [r3, #4]
 80036f6:	b29a      	uxth	r2, r3
 80036f8:	687b      	ldr	r3, [r7, #4]
 80036fa:	855a      	strh	r2, [r3, #42]	; 0x2a
  {
    /* Do nothing */
  }

  /* Store Last receive data if any */
  if (I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_RXNE) != RESET)
 80036fc:	697b      	ldr	r3, [r7, #20]
 80036fe:	089b      	lsrs	r3, r3, #2
 8003700:	f003 0301 	and.w	r3, r3, #1
 8003704:	2b00      	cmp	r3, #0
 8003706:	d020      	beq.n	800374a <I2C_ITSlaveCplt+0x13a>
  {
    /* Remove RXNE flag on temporary variable as read done */
    tmpITFlags &= ~I2C_FLAG_RXNE;
 8003708:	697b      	ldr	r3, [r7, #20]
 800370a:	f023 0304 	bic.w	r3, r3, #4
 800370e:	617b      	str	r3, [r7, #20]

    /* Read data from RXDR */
    *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->RXDR;
 8003710:	687b      	ldr	r3, [r7, #4]
 8003712:	681b      	ldr	r3, [r3, #0]
 8003714:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8003716:	687b      	ldr	r3, [r7, #4]
 8003718:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800371a:	b2d2      	uxtb	r2, r2
 800371c:	701a      	strb	r2, [r3, #0]

    /* Increment Buffer pointer */
    hi2c->pBuffPtr++;
 800371e:	687b      	ldr	r3, [r7, #4]
 8003720:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003722:	1c5a      	adds	r2, r3, #1
 8003724:	687b      	ldr	r3, [r7, #4]
 8003726:	625a      	str	r2, [r3, #36]	; 0x24

    if ((hi2c->XferSize > 0U))
 8003728:	687b      	ldr	r3, [r7, #4]
 800372a:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800372c:	2b00      	cmp	r3, #0
 800372e:	d00c      	beq.n	800374a <I2C_ITSlaveCplt+0x13a>
    {
      hi2c->XferSize--;
 8003730:	687b      	ldr	r3, [r7, #4]
 8003732:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8003734:	3b01      	subs	r3, #1
 8003736:	b29a      	uxth	r2, r3
 8003738:	687b      	ldr	r3, [r7, #4]
 800373a:	851a      	strh	r2, [r3, #40]	; 0x28
      hi2c->XferCount--;
 800373c:	687b      	ldr	r3, [r7, #4]
 800373e:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8003740:	b29b      	uxth	r3, r3
 8003742:	3b01      	subs	r3, #1
 8003744:	b29a      	uxth	r2, r3
 8003746:	687b      	ldr	r3, [r7, #4]
 8003748:	855a      	strh	r2, [r3, #42]	; 0x2a
    }
  }

  /* All data are not transferred, so set error code accordingly */
  if (hi2c->XferCount != 0U)
 800374a:	687b      	ldr	r3, [r7, #4]
 800374c:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800374e:	b29b      	uxth	r3, r3
 8003750:	2b00      	cmp	r3, #0
 8003752:	d005      	beq.n	8003760 <I2C_ITSlaveCplt+0x150>
  {
    /* Set ErrorCode corresponding to a Non-Acknowledge */
    hi2c->ErrorCode |= HAL_I2C_ERROR_AF;
 8003754:	687b      	ldr	r3, [r7, #4]
 8003756:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003758:	f043 0204 	orr.w	r2, r3, #4
 800375c:	687b      	ldr	r3, [r7, #4]
 800375e:	645a      	str	r2, [r3, #68]	; 0x44
  }

  hi2c->Mode = HAL_I2C_MODE_NONE;
 8003760:	687b      	ldr	r3, [r7, #4]
 8003762:	2200      	movs	r2, #0
 8003764:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
  hi2c->XferISR = NULL;
 8003768:	687b      	ldr	r3, [r7, #4]
 800376a:	2200      	movs	r2, #0
 800376c:	635a      	str	r2, [r3, #52]	; 0x34

  if (hi2c->ErrorCode != HAL_I2C_ERROR_NONE)
 800376e:	687b      	ldr	r3, [r7, #4]
 8003770:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003772:	2b00      	cmp	r3, #0
 8003774:	d010      	beq.n	8003798 <I2C_ITSlaveCplt+0x188>
  {
    /* Call the corresponding callback to inform upper layer of End of Transfer */
    I2C_ITError(hi2c, hi2c->ErrorCode);
 8003776:	687b      	ldr	r3, [r7, #4]
 8003778:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800377a:	4619      	mov	r1, r3
 800377c:	6878      	ldr	r0, [r7, #4]
 800377e:	f000 f8a7 	bl	80038d0 <I2C_ITError>

    /* Call the Listen Complete callback, to inform upper layer of the end of Listen usecase */
    if (hi2c->State == HAL_I2C_STATE_LISTEN)
 8003782:	687b      	ldr	r3, [r7, #4]
 8003784:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8003788:	b2db      	uxtb	r3, r3
 800378a:	2b28      	cmp	r3, #40	; 0x28
 800378c:	d141      	bne.n	8003812 <I2C_ITSlaveCplt+0x202>
    {
      /* Call I2C Listen complete process */
      I2C_ITListenCplt(hi2c, tmpITFlags);
 800378e:	6979      	ldr	r1, [r7, #20]
 8003790:	6878      	ldr	r0, [r7, #4]
 8003792:	f000 f847 	bl	8003824 <I2C_ITListenCplt>
    hi2c->SlaveTxCpltCallback(hi2c);
#else
    HAL_I2C_SlaveTxCpltCallback(hi2c);
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }
}
 8003796:	e03c      	b.n	8003812 <I2C_ITSlaveCplt+0x202>
  else if (hi2c->XferOptions != I2C_NO_OPTION_FRAME)
 8003798:	687b      	ldr	r3, [r7, #4]
 800379a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800379c:	f513 3f80 	cmn.w	r3, #65536	; 0x10000
 80037a0:	d014      	beq.n	80037cc <I2C_ITSlaveCplt+0x1bc>
    I2C_ITSlaveSeqCplt(hi2c);
 80037a2:	6878      	ldr	r0, [r7, #4]
 80037a4:	f7ff fe0b 	bl	80033be <I2C_ITSlaveSeqCplt>
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 80037a8:	687b      	ldr	r3, [r7, #4]
 80037aa:	4a1d      	ldr	r2, [pc, #116]	; (8003820 <I2C_ITSlaveCplt+0x210>)
 80037ac:	62da      	str	r2, [r3, #44]	; 0x2c
    hi2c->State = HAL_I2C_STATE_READY;
 80037ae:	687b      	ldr	r3, [r7, #4]
 80037b0:	2220      	movs	r2, #32
 80037b2:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->PreviousState = I2C_STATE_NONE;
 80037b6:	687b      	ldr	r3, [r7, #4]
 80037b8:	2200      	movs	r2, #0
 80037ba:	631a      	str	r2, [r3, #48]	; 0x30
    __HAL_UNLOCK(hi2c);
 80037bc:	687b      	ldr	r3, [r7, #4]
 80037be:	2200      	movs	r2, #0
 80037c0:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
    HAL_I2C_ListenCpltCallback(hi2c);
 80037c4:	6878      	ldr	r0, [r7, #4]
 80037c6:	f7ff f8bd 	bl	8002944 <HAL_I2C_ListenCpltCallback>
}
 80037ca:	e022      	b.n	8003812 <I2C_ITSlaveCplt+0x202>
  else if (hi2c->State == HAL_I2C_STATE_BUSY_RX)
 80037cc:	687b      	ldr	r3, [r7, #4]
 80037ce:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 80037d2:	b2db      	uxtb	r3, r3
 80037d4:	2b22      	cmp	r3, #34	; 0x22
 80037d6:	d10e      	bne.n	80037f6 <I2C_ITSlaveCplt+0x1e6>
    hi2c->State = HAL_I2C_STATE_READY;
 80037d8:	687b      	ldr	r3, [r7, #4]
 80037da:	2220      	movs	r2, #32
 80037dc:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->PreviousState = I2C_STATE_NONE;
 80037e0:	687b      	ldr	r3, [r7, #4]
 80037e2:	2200      	movs	r2, #0
 80037e4:	631a      	str	r2, [r3, #48]	; 0x30
    __HAL_UNLOCK(hi2c);
 80037e6:	687b      	ldr	r3, [r7, #4]
 80037e8:	2200      	movs	r2, #0
 80037ea:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
    HAL_I2C_SlaveRxCpltCallback(hi2c);
 80037ee:	6878      	ldr	r0, [r7, #4]
 80037f0:	f7ff f890 	bl	8002914 <HAL_I2C_SlaveRxCpltCallback>
}
 80037f4:	e00d      	b.n	8003812 <I2C_ITSlaveCplt+0x202>
    hi2c->State = HAL_I2C_STATE_READY;
 80037f6:	687b      	ldr	r3, [r7, #4]
 80037f8:	2220      	movs	r2, #32
 80037fa:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->PreviousState = I2C_STATE_NONE;
 80037fe:	687b      	ldr	r3, [r7, #4]
 8003800:	2200      	movs	r2, #0
 8003802:	631a      	str	r2, [r3, #48]	; 0x30
    __HAL_UNLOCK(hi2c);
 8003804:	687b      	ldr	r3, [r7, #4]
 8003806:	2200      	movs	r2, #0
 8003808:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
    HAL_I2C_SlaveTxCpltCallback(hi2c);
 800380c:	6878      	ldr	r0, [r7, #4]
 800380e:	f7ff f877 	bl	8002900 <HAL_I2C_SlaveTxCpltCallback>
}
 8003812:	bf00      	nop
 8003814:	3718      	adds	r7, #24
 8003816:	46bd      	mov	sp, r7
 8003818:	bd80      	pop	{r7, pc}
 800381a:	bf00      	nop
 800381c:	fe00e800 	.word	0xfe00e800
 8003820:	ffff0000 	.word	0xffff0000

08003824 <I2C_ITListenCplt>:
  * @param  hi2c I2C handle.
  * @param  ITFlags Interrupt flags to handle.
  * @retval None
  */
static void I2C_ITListenCplt(I2C_HandleTypeDef *hi2c, uint32_t ITFlags)
{
 8003824:	b580      	push	{r7, lr}
 8003826:	b082      	sub	sp, #8
 8003828:	af00      	add	r7, sp, #0
 800382a:	6078      	str	r0, [r7, #4]
 800382c:	6039      	str	r1, [r7, #0]
  /* Reset handle parameters */
  hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 800382e:	687b      	ldr	r3, [r7, #4]
 8003830:	4a26      	ldr	r2, [pc, #152]	; (80038cc <I2C_ITListenCplt+0xa8>)
 8003832:	62da      	str	r2, [r3, #44]	; 0x2c
  hi2c->PreviousState = I2C_STATE_NONE;
 8003834:	687b      	ldr	r3, [r7, #4]
 8003836:	2200      	movs	r2, #0
 8003838:	631a      	str	r2, [r3, #48]	; 0x30
  hi2c->State = HAL_I2C_STATE_READY;
 800383a:	687b      	ldr	r3, [r7, #4]
 800383c:	2220      	movs	r2, #32
 800383e:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  hi2c->Mode = HAL_I2C_MODE_NONE;
 8003842:	687b      	ldr	r3, [r7, #4]
 8003844:	2200      	movs	r2, #0
 8003846:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
  hi2c->XferISR = NULL;
 800384a:	687b      	ldr	r3, [r7, #4]
 800384c:	2200      	movs	r2, #0
 800384e:	635a      	str	r2, [r3, #52]	; 0x34

  /* Store Last receive data if any */
  if (I2C_CHECK_FLAG(ITFlags, I2C_FLAG_RXNE) != RESET)
 8003850:	683b      	ldr	r3, [r7, #0]
 8003852:	089b      	lsrs	r3, r3, #2
 8003854:	f003 0301 	and.w	r3, r3, #1
 8003858:	2b00      	cmp	r3, #0
 800385a:	d022      	beq.n	80038a2 <I2C_ITListenCplt+0x7e>
  {
    /* Read data from RXDR */
    *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->RXDR;
 800385c:	687b      	ldr	r3, [r7, #4]
 800385e:	681b      	ldr	r3, [r3, #0]
 8003860:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8003862:	687b      	ldr	r3, [r7, #4]
 8003864:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003866:	b2d2      	uxtb	r2, r2
 8003868:	701a      	strb	r2, [r3, #0]

    /* Increment Buffer pointer */
    hi2c->pBuffPtr++;
 800386a:	687b      	ldr	r3, [r7, #4]
 800386c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800386e:	1c5a      	adds	r2, r3, #1
 8003870:	687b      	ldr	r3, [r7, #4]
 8003872:	625a      	str	r2, [r3, #36]	; 0x24

    if ((hi2c->XferSize > 0U))
 8003874:	687b      	ldr	r3, [r7, #4]
 8003876:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8003878:	2b00      	cmp	r3, #0
 800387a:	d012      	beq.n	80038a2 <I2C_ITListenCplt+0x7e>
    {
      hi2c->XferSize--;
 800387c:	687b      	ldr	r3, [r7, #4]
 800387e:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8003880:	3b01      	subs	r3, #1
 8003882:	b29a      	uxth	r2, r3
 8003884:	687b      	ldr	r3, [r7, #4]
 8003886:	851a      	strh	r2, [r3, #40]	; 0x28
      hi2c->XferCount--;
 8003888:	687b      	ldr	r3, [r7, #4]
 800388a:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800388c:	b29b      	uxth	r3, r3
 800388e:	3b01      	subs	r3, #1
 8003890:	b29a      	uxth	r2, r3
 8003892:	687b      	ldr	r3, [r7, #4]
 8003894:	855a      	strh	r2, [r3, #42]	; 0x2a

      /* Set ErrorCode corresponding to a Non-Acknowledge */
      hi2c->ErrorCode |= HAL_I2C_ERROR_AF;
 8003896:	687b      	ldr	r3, [r7, #4]
 8003898:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800389a:	f043 0204 	orr.w	r2, r3, #4
 800389e:	687b      	ldr	r3, [r7, #4]
 80038a0:	645a      	str	r2, [r3, #68]	; 0x44
    }
  }

  /* Disable all Interrupts*/
  I2C_Disable_IRQ(hi2c, I2C_XFER_LISTEN_IT | I2C_XFER_RX_IT | I2C_XFER_TX_IT);
 80038a2:	f248 0103 	movw	r1, #32771	; 0x8003
 80038a6:	6878      	ldr	r0, [r7, #4]
 80038a8:	f000 fb90 	bl	8003fcc <I2C_Disable_IRQ>

  /* Clear NACK Flag */
  __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 80038ac:	687b      	ldr	r3, [r7, #4]
 80038ae:	681b      	ldr	r3, [r3, #0]
 80038b0:	2210      	movs	r2, #16
 80038b2:	61da      	str	r2, [r3, #28]

  /* Process Unlocked */
  __HAL_UNLOCK(hi2c);
 80038b4:	687b      	ldr	r3, [r7, #4]
 80038b6:	2200      	movs	r2, #0
 80038b8:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

  /* Call the Listen Complete callback, to inform upper layer of the end of Listen usecase */
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
  hi2c->ListenCpltCallback(hi2c);
#else
  HAL_I2C_ListenCpltCallback(hi2c);
 80038bc:	6878      	ldr	r0, [r7, #4]
 80038be:	f7ff f841 	bl	8002944 <HAL_I2C_ListenCpltCallback>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
}
 80038c2:	bf00      	nop
 80038c4:	3708      	adds	r7, #8
 80038c6:	46bd      	mov	sp, r7
 80038c8:	bd80      	pop	{r7, pc}
 80038ca:	bf00      	nop
 80038cc:	ffff0000 	.word	0xffff0000

080038d0 <I2C_ITError>:
  * @param  hi2c I2C handle.
  * @param  ErrorCode Error code to handle.
  * @retval None
  */
static void I2C_ITError(I2C_HandleTypeDef *hi2c, uint32_t ErrorCode)
{
 80038d0:	b580      	push	{r7, lr}
 80038d2:	b084      	sub	sp, #16
 80038d4:	af00      	add	r7, sp, #0
 80038d6:	6078      	str	r0, [r7, #4]
 80038d8:	6039      	str	r1, [r7, #0]
  HAL_I2C_StateTypeDef tmpstate = hi2c->State;
 80038da:	687b      	ldr	r3, [r7, #4]
 80038dc:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 80038e0:	73fb      	strb	r3, [r7, #15]
  uint32_t tmppreviousstate;

  /* Reset handle parameters */
  hi2c->Mode          = HAL_I2C_MODE_NONE;
 80038e2:	687b      	ldr	r3, [r7, #4]
 80038e4:	2200      	movs	r2, #0
 80038e6:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
  hi2c->XferOptions   = I2C_NO_OPTION_FRAME;
 80038ea:	687b      	ldr	r3, [r7, #4]
 80038ec:	4a5d      	ldr	r2, [pc, #372]	; (8003a64 <I2C_ITError+0x194>)
 80038ee:	62da      	str	r2, [r3, #44]	; 0x2c
  hi2c->XferCount     = 0U;
 80038f0:	687b      	ldr	r3, [r7, #4]
 80038f2:	2200      	movs	r2, #0
 80038f4:	855a      	strh	r2, [r3, #42]	; 0x2a

  /* Set new error code */
  hi2c->ErrorCode |= ErrorCode;
 80038f6:	687b      	ldr	r3, [r7, #4]
 80038f8:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 80038fa:	683b      	ldr	r3, [r7, #0]
 80038fc:	431a      	orrs	r2, r3
 80038fe:	687b      	ldr	r3, [r7, #4]
 8003900:	645a      	str	r2, [r3, #68]	; 0x44

  /* Disable Interrupts */
  if ((tmpstate == HAL_I2C_STATE_LISTEN)         ||
 8003902:	7bfb      	ldrb	r3, [r7, #15]
 8003904:	2b28      	cmp	r3, #40	; 0x28
 8003906:	d005      	beq.n	8003914 <I2C_ITError+0x44>
 8003908:	7bfb      	ldrb	r3, [r7, #15]
 800390a:	2b29      	cmp	r3, #41	; 0x29
 800390c:	d002      	beq.n	8003914 <I2C_ITError+0x44>
      (tmpstate == HAL_I2C_STATE_BUSY_TX_LISTEN) ||
 800390e:	7bfb      	ldrb	r3, [r7, #15]
 8003910:	2b2a      	cmp	r3, #42	; 0x2a
 8003912:	d10b      	bne.n	800392c <I2C_ITError+0x5c>
      (tmpstate == HAL_I2C_STATE_BUSY_RX_LISTEN))
  {
    /* Disable all interrupts, except interrupts related to LISTEN state */
    I2C_Disable_IRQ(hi2c, I2C_XFER_RX_IT | I2C_XFER_TX_IT);
 8003914:	2103      	movs	r1, #3
 8003916:	6878      	ldr	r0, [r7, #4]
 8003918:	f000 fb58 	bl	8003fcc <I2C_Disable_IRQ>

    /* keep HAL_I2C_STATE_LISTEN if set */
    hi2c->State         = HAL_I2C_STATE_LISTEN;
 800391c:	687b      	ldr	r3, [r7, #4]
 800391e:	2228      	movs	r2, #40	; 0x28
 8003920:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->XferISR       = I2C_Slave_ISR_IT;
 8003924:	687b      	ldr	r3, [r7, #4]
 8003926:	4a50      	ldr	r2, [pc, #320]	; (8003a68 <I2C_ITError+0x198>)
 8003928:	635a      	str	r2, [r3, #52]	; 0x34
 800392a:	e011      	b.n	8003950 <I2C_ITError+0x80>
  }
  else
  {
    /* Disable all interrupts */
    I2C_Disable_IRQ(hi2c, I2C_XFER_LISTEN_IT | I2C_XFER_RX_IT | I2C_XFER_TX_IT);
 800392c:	f248 0103 	movw	r1, #32771	; 0x8003
 8003930:	6878      	ldr	r0, [r7, #4]
 8003932:	f000 fb4b 	bl	8003fcc <I2C_Disable_IRQ>

    /* If state is an abort treatment on going, don't change state */
    /* This change will be do later */
    if (hi2c->State != HAL_I2C_STATE_ABORT)
 8003936:	687b      	ldr	r3, [r7, #4]
 8003938:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 800393c:	b2db      	uxtb	r3, r3
 800393e:	2b60      	cmp	r3, #96	; 0x60
 8003940:	d003      	beq.n	800394a <I2C_ITError+0x7a>
    {
      /* Set HAL_I2C_STATE_READY */
      hi2c->State         = HAL_I2C_STATE_READY;
 8003942:	687b      	ldr	r3, [r7, #4]
 8003944:	2220      	movs	r2, #32
 8003946:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    }
    hi2c->XferISR       = NULL;
 800394a:	687b      	ldr	r3, [r7, #4]
 800394c:	2200      	movs	r2, #0
 800394e:	635a      	str	r2, [r3, #52]	; 0x34
  }

  /* Abort DMA TX transfer if any */
  tmppreviousstate = hi2c->PreviousState;
 8003950:	687b      	ldr	r3, [r7, #4]
 8003952:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003954:	60bb      	str	r3, [r7, #8]
  if ((hi2c->hdmatx != NULL) && ((tmppreviousstate == I2C_STATE_MASTER_BUSY_TX) || \
 8003956:	687b      	ldr	r3, [r7, #4]
 8003958:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800395a:	2b00      	cmp	r3, #0
 800395c:	d039      	beq.n	80039d2 <I2C_ITError+0x102>
 800395e:	68bb      	ldr	r3, [r7, #8]
 8003960:	2b11      	cmp	r3, #17
 8003962:	d002      	beq.n	800396a <I2C_ITError+0x9a>
 8003964:	68bb      	ldr	r3, [r7, #8]
 8003966:	2b21      	cmp	r3, #33	; 0x21
 8003968:	d133      	bne.n	80039d2 <I2C_ITError+0x102>
                                 (tmppreviousstate == I2C_STATE_SLAVE_BUSY_TX)))
  {
    if ((hi2c->Instance->CR1 & I2C_CR1_TXDMAEN) == I2C_CR1_TXDMAEN)
 800396a:	687b      	ldr	r3, [r7, #4]
 800396c:	681b      	ldr	r3, [r3, #0]
 800396e:	681b      	ldr	r3, [r3, #0]
 8003970:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8003974:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 8003978:	d107      	bne.n	800398a <I2C_ITError+0xba>
    {
      hi2c->Instance->CR1 &= ~I2C_CR1_TXDMAEN;
 800397a:	687b      	ldr	r3, [r7, #4]
 800397c:	681b      	ldr	r3, [r3, #0]
 800397e:	681a      	ldr	r2, [r3, #0]
 8003980:	687b      	ldr	r3, [r7, #4]
 8003982:	681b      	ldr	r3, [r3, #0]
 8003984:	f422 4280 	bic.w	r2, r2, #16384	; 0x4000
 8003988:	601a      	str	r2, [r3, #0]
    }

    if (HAL_DMA_GetState(hi2c->hdmatx) != HAL_DMA_STATE_READY)
 800398a:	687b      	ldr	r3, [r7, #4]
 800398c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800398e:	4618      	mov	r0, r3
 8003990:	f7fe fb44 	bl	800201c <HAL_DMA_GetState>
 8003994:	4603      	mov	r3, r0
 8003996:	2b01      	cmp	r3, #1
 8003998:	d017      	beq.n	80039ca <I2C_ITError+0xfa>
    {
      /* Set the I2C DMA Abort callback :
       will lead to call HAL_I2C_ErrorCallback() at end of DMA abort procedure */
      hi2c->hdmatx->XferAbortCallback = I2C_DMAAbort;
 800399a:	687b      	ldr	r3, [r7, #4]
 800399c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800399e:	4a33      	ldr	r2, [pc, #204]	; (8003a6c <I2C_ITError+0x19c>)
 80039a0:	639a      	str	r2, [r3, #56]	; 0x38

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 80039a2:	687b      	ldr	r3, [r7, #4]
 80039a4:	2200      	movs	r2, #0
 80039a6:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

      /* Abort DMA TX */
      if (HAL_DMA_Abort_IT(hi2c->hdmatx) != HAL_OK)
 80039aa:	687b      	ldr	r3, [r7, #4]
 80039ac:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80039ae:	4618      	mov	r0, r3
 80039b0:	f7fe faf3 	bl	8001f9a <HAL_DMA_Abort_IT>
 80039b4:	4603      	mov	r3, r0
 80039b6:	2b00      	cmp	r3, #0
 80039b8:	d04d      	beq.n	8003a56 <I2C_ITError+0x186>
      {
        /* Call Directly XferAbortCallback function in case of error */
        hi2c->hdmatx->XferAbortCallback(hi2c->hdmatx);
 80039ba:	687b      	ldr	r3, [r7, #4]
 80039bc:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80039be:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80039c0:	687a      	ldr	r2, [r7, #4]
 80039c2:	6b92      	ldr	r2, [r2, #56]	; 0x38
 80039c4:	4610      	mov	r0, r2
 80039c6:	4798      	blx	r3
    if (HAL_DMA_GetState(hi2c->hdmatx) != HAL_DMA_STATE_READY)
 80039c8:	e045      	b.n	8003a56 <I2C_ITError+0x186>
      }
    }
    else
    {
      I2C_TreatErrorCallback(hi2c);
 80039ca:	6878      	ldr	r0, [r7, #4]
 80039cc:	f000 f850 	bl	8003a70 <I2C_TreatErrorCallback>
    if (HAL_DMA_GetState(hi2c->hdmatx) != HAL_DMA_STATE_READY)
 80039d0:	e041      	b.n	8003a56 <I2C_ITError+0x186>
    }
  }
  /* Abort DMA RX transfer if any */
  else if ((hi2c->hdmarx != NULL) && ((tmppreviousstate == I2C_STATE_MASTER_BUSY_RX) || \
 80039d2:	687b      	ldr	r3, [r7, #4]
 80039d4:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80039d6:	2b00      	cmp	r3, #0
 80039d8:	d039      	beq.n	8003a4e <I2C_ITError+0x17e>
 80039da:	68bb      	ldr	r3, [r7, #8]
 80039dc:	2b12      	cmp	r3, #18
 80039de:	d002      	beq.n	80039e6 <I2C_ITError+0x116>
 80039e0:	68bb      	ldr	r3, [r7, #8]
 80039e2:	2b22      	cmp	r3, #34	; 0x22
 80039e4:	d133      	bne.n	8003a4e <I2C_ITError+0x17e>
                                      (tmppreviousstate == I2C_STATE_SLAVE_BUSY_RX)))
  {
    if ((hi2c->Instance->CR1 & I2C_CR1_RXDMAEN) == I2C_CR1_RXDMAEN)
 80039e6:	687b      	ldr	r3, [r7, #4]
 80039e8:	681b      	ldr	r3, [r3, #0]
 80039ea:	681b      	ldr	r3, [r3, #0]
 80039ec:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 80039f0:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 80039f4:	d107      	bne.n	8003a06 <I2C_ITError+0x136>
    {
      hi2c->Instance->CR1 &= ~I2C_CR1_RXDMAEN;
 80039f6:	687b      	ldr	r3, [r7, #4]
 80039f8:	681b      	ldr	r3, [r3, #0]
 80039fa:	681a      	ldr	r2, [r3, #0]
 80039fc:	687b      	ldr	r3, [r7, #4]
 80039fe:	681b      	ldr	r3, [r3, #0]
 8003a00:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 8003a04:	601a      	str	r2, [r3, #0]
    }

    if (HAL_DMA_GetState(hi2c->hdmarx) != HAL_DMA_STATE_READY)
 8003a06:	687b      	ldr	r3, [r7, #4]
 8003a08:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8003a0a:	4618      	mov	r0, r3
 8003a0c:	f7fe fb06 	bl	800201c <HAL_DMA_GetState>
 8003a10:	4603      	mov	r3, r0
 8003a12:	2b01      	cmp	r3, #1
 8003a14:	d017      	beq.n	8003a46 <I2C_ITError+0x176>
    {
      /* Set the I2C DMA Abort callback :
        will lead to call HAL_I2C_ErrorCallback() at end of DMA abort procedure */
      hi2c->hdmarx->XferAbortCallback = I2C_DMAAbort;
 8003a16:	687b      	ldr	r3, [r7, #4]
 8003a18:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8003a1a:	4a14      	ldr	r2, [pc, #80]	; (8003a6c <I2C_ITError+0x19c>)
 8003a1c:	639a      	str	r2, [r3, #56]	; 0x38

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 8003a1e:	687b      	ldr	r3, [r7, #4]
 8003a20:	2200      	movs	r2, #0
 8003a22:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

      /* Abort DMA RX */
      if (HAL_DMA_Abort_IT(hi2c->hdmarx) != HAL_OK)
 8003a26:	687b      	ldr	r3, [r7, #4]
 8003a28:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8003a2a:	4618      	mov	r0, r3
 8003a2c:	f7fe fab5 	bl	8001f9a <HAL_DMA_Abort_IT>
 8003a30:	4603      	mov	r3, r0
 8003a32:	2b00      	cmp	r3, #0
 8003a34:	d011      	beq.n	8003a5a <I2C_ITError+0x18a>
      {
        /* Call Directly hi2c->hdmarx->XferAbortCallback function in case of error */
        hi2c->hdmarx->XferAbortCallback(hi2c->hdmarx);
 8003a36:	687b      	ldr	r3, [r7, #4]
 8003a38:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8003a3a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003a3c:	687a      	ldr	r2, [r7, #4]
 8003a3e:	6bd2      	ldr	r2, [r2, #60]	; 0x3c
 8003a40:	4610      	mov	r0, r2
 8003a42:	4798      	blx	r3
    if (HAL_DMA_GetState(hi2c->hdmarx) != HAL_DMA_STATE_READY)
 8003a44:	e009      	b.n	8003a5a <I2C_ITError+0x18a>
      }
    }
    else
    {
      I2C_TreatErrorCallback(hi2c);
 8003a46:	6878      	ldr	r0, [r7, #4]
 8003a48:	f000 f812 	bl	8003a70 <I2C_TreatErrorCallback>
    if (HAL_DMA_GetState(hi2c->hdmarx) != HAL_DMA_STATE_READY)
 8003a4c:	e005      	b.n	8003a5a <I2C_ITError+0x18a>
    }
  }
  else
  {
    I2C_TreatErrorCallback(hi2c);
 8003a4e:	6878      	ldr	r0, [r7, #4]
 8003a50:	f000 f80e 	bl	8003a70 <I2C_TreatErrorCallback>
  }
}
 8003a54:	e002      	b.n	8003a5c <I2C_ITError+0x18c>
    if (HAL_DMA_GetState(hi2c->hdmatx) != HAL_DMA_STATE_READY)
 8003a56:	bf00      	nop
 8003a58:	e000      	b.n	8003a5c <I2C_ITError+0x18c>
    if (HAL_DMA_GetState(hi2c->hdmarx) != HAL_DMA_STATE_READY)
 8003a5a:	bf00      	nop
}
 8003a5c:	bf00      	nop
 8003a5e:	3710      	adds	r7, #16
 8003a60:	46bd      	mov	sp, r7
 8003a62:	bd80      	pop	{r7, pc}
 8003a64:	ffff0000 	.word	0xffff0000
 8003a68:	08002be9 	.word	0x08002be9
 8003a6c:	08003b07 	.word	0x08003b07

08003a70 <I2C_TreatErrorCallback>:
  * @brief  I2C Error callback treatment.
  * @param  hi2c I2C handle.
  * @retval None
  */
static void I2C_TreatErrorCallback(I2C_HandleTypeDef *hi2c)
{
 8003a70:	b580      	push	{r7, lr}
 8003a72:	b082      	sub	sp, #8
 8003a74:	af00      	add	r7, sp, #0
 8003a76:	6078      	str	r0, [r7, #4]
  if (hi2c->State == HAL_I2C_STATE_ABORT)
 8003a78:	687b      	ldr	r3, [r7, #4]
 8003a7a:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8003a7e:	b2db      	uxtb	r3, r3
 8003a80:	2b60      	cmp	r3, #96	; 0x60
 8003a82:	d10e      	bne.n	8003aa2 <I2C_TreatErrorCallback+0x32>
  {
    hi2c->State = HAL_I2C_STATE_READY;
 8003a84:	687b      	ldr	r3, [r7, #4]
 8003a86:	2220      	movs	r2, #32
 8003a88:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->PreviousState = I2C_STATE_NONE;
 8003a8c:	687b      	ldr	r3, [r7, #4]
 8003a8e:	2200      	movs	r2, #0
 8003a90:	631a      	str	r2, [r3, #48]	; 0x30

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8003a92:	687b      	ldr	r3, [r7, #4]
 8003a94:	2200      	movs	r2, #0
 8003a96:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    /* Call the corresponding callback to inform upper layer of End of Transfer */
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
    hi2c->AbortCpltCallback(hi2c);
#else
    HAL_I2C_AbortCpltCallback(hi2c);
 8003a9a:	6878      	ldr	r0, [r7, #4]
 8003a9c:	f7fe ff70 	bl	8002980 <HAL_I2C_AbortCpltCallback>
    hi2c->ErrorCallback(hi2c);
#else
    HAL_I2C_ErrorCallback(hi2c);
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }
}
 8003aa0:	e009      	b.n	8003ab6 <I2C_TreatErrorCallback+0x46>
    hi2c->PreviousState = I2C_STATE_NONE;
 8003aa2:	687b      	ldr	r3, [r7, #4]
 8003aa4:	2200      	movs	r2, #0
 8003aa6:	631a      	str	r2, [r3, #48]	; 0x30
    __HAL_UNLOCK(hi2c);
 8003aa8:	687b      	ldr	r3, [r7, #4]
 8003aaa:	2200      	movs	r2, #0
 8003aac:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
    HAL_I2C_ErrorCallback(hi2c);
 8003ab0:	6878      	ldr	r0, [r7, #4]
 8003ab2:	f7fe ff5b 	bl	800296c <HAL_I2C_ErrorCallback>
}
 8003ab6:	bf00      	nop
 8003ab8:	3708      	adds	r7, #8
 8003aba:	46bd      	mov	sp, r7
 8003abc:	bd80      	pop	{r7, pc}

08003abe <I2C_Flush_TXDR>:
  * @brief  I2C Tx data register flush process.
  * @param  hi2c I2C handle.
  * @retval None
  */
static void I2C_Flush_TXDR(I2C_HandleTypeDef *hi2c)
{
 8003abe:	b480      	push	{r7}
 8003ac0:	b083      	sub	sp, #12
 8003ac2:	af00      	add	r7, sp, #0
 8003ac4:	6078      	str	r0, [r7, #4]
  /* If a pending TXIS flag is set */
  /* Write a dummy data in TXDR to clear it */
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) != RESET)
 8003ac6:	687b      	ldr	r3, [r7, #4]
 8003ac8:	681b      	ldr	r3, [r3, #0]
 8003aca:	699b      	ldr	r3, [r3, #24]
 8003acc:	f003 0302 	and.w	r3, r3, #2
 8003ad0:	2b02      	cmp	r3, #2
 8003ad2:	d103      	bne.n	8003adc <I2C_Flush_TXDR+0x1e>
  {
    hi2c->Instance->TXDR = 0x00U;
 8003ad4:	687b      	ldr	r3, [r7, #4]
 8003ad6:	681b      	ldr	r3, [r3, #0]
 8003ad8:	2200      	movs	r2, #0
 8003ada:	629a      	str	r2, [r3, #40]	; 0x28
  }

  /* Flush TX register if not empty */
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 8003adc:	687b      	ldr	r3, [r7, #4]
 8003ade:	681b      	ldr	r3, [r3, #0]
 8003ae0:	699b      	ldr	r3, [r3, #24]
 8003ae2:	f003 0301 	and.w	r3, r3, #1
 8003ae6:	2b01      	cmp	r3, #1
 8003ae8:	d007      	beq.n	8003afa <I2C_Flush_TXDR+0x3c>
  {
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_TXE);
 8003aea:	687b      	ldr	r3, [r7, #4]
 8003aec:	681b      	ldr	r3, [r3, #0]
 8003aee:	699a      	ldr	r2, [r3, #24]
 8003af0:	687b      	ldr	r3, [r7, #4]
 8003af2:	681b      	ldr	r3, [r3, #0]
 8003af4:	f042 0201 	orr.w	r2, r2, #1
 8003af8:	619a      	str	r2, [r3, #24]
  }
}
 8003afa:	bf00      	nop
 8003afc:	370c      	adds	r7, #12
 8003afe:	46bd      	mov	sp, r7
 8003b00:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003b04:	4770      	bx	lr

08003b06 <I2C_DMAAbort>:
  *        (To be called at end of DMA Abort procedure).
  * @param hdma DMA handle.
  * @retval None
  */
static void I2C_DMAAbort(DMA_HandleTypeDef *hdma)
{
 8003b06:	b580      	push	{r7, lr}
 8003b08:	b084      	sub	sp, #16
 8003b0a:	af00      	add	r7, sp, #0
 8003b0c:	6078      	str	r0, [r7, #4]
  /* Derogation MISRAC2012-Rule-11.5 */
  I2C_HandleTypeDef *hi2c = (I2C_HandleTypeDef *)(((DMA_HandleTypeDef *)hdma)->Parent);
 8003b0e:	687b      	ldr	r3, [r7, #4]
 8003b10:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003b12:	60fb      	str	r3, [r7, #12]

  /* Reset AbortCpltCallback */
  if (hi2c->hdmatx != NULL)
 8003b14:	68fb      	ldr	r3, [r7, #12]
 8003b16:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003b18:	2b00      	cmp	r3, #0
 8003b1a:	d003      	beq.n	8003b24 <I2C_DMAAbort+0x1e>
  {
    hi2c->hdmatx->XferAbortCallback = NULL;
 8003b1c:	68fb      	ldr	r3, [r7, #12]
 8003b1e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003b20:	2200      	movs	r2, #0
 8003b22:	639a      	str	r2, [r3, #56]	; 0x38
  }
  if (hi2c->hdmarx != NULL)
 8003b24:	68fb      	ldr	r3, [r7, #12]
 8003b26:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8003b28:	2b00      	cmp	r3, #0
 8003b2a:	d003      	beq.n	8003b34 <I2C_DMAAbort+0x2e>
  {
    hi2c->hdmarx->XferAbortCallback = NULL;
 8003b2c:	68fb      	ldr	r3, [r7, #12]
 8003b2e:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8003b30:	2200      	movs	r2, #0
 8003b32:	639a      	str	r2, [r3, #56]	; 0x38
  }

  I2C_TreatErrorCallback(hi2c);
 8003b34:	68f8      	ldr	r0, [r7, #12]
 8003b36:	f7ff ff9b 	bl	8003a70 <I2C_TreatErrorCallback>
}
 8003b3a:	bf00      	nop
 8003b3c:	3710      	adds	r7, #16
 8003b3e:	46bd      	mov	sp, r7
 8003b40:	bd80      	pop	{r7, pc}

08003b42 <I2C_WaitOnFlagUntilTimeout>:
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, FlagStatus Status,
                                                    uint32_t Timeout, uint32_t Tickstart)
{
 8003b42:	b580      	push	{r7, lr}
 8003b44:	b084      	sub	sp, #16
 8003b46:	af00      	add	r7, sp, #0
 8003b48:	60f8      	str	r0, [r7, #12]
 8003b4a:	60b9      	str	r1, [r7, #8]
 8003b4c:	603b      	str	r3, [r7, #0]
 8003b4e:	4613      	mov	r3, r2
 8003b50:	71fb      	strb	r3, [r7, #7]
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 8003b52:	e022      	b.n	8003b9a <I2C_WaitOnFlagUntilTimeout+0x58>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8003b54:	683b      	ldr	r3, [r7, #0]
 8003b56:	f1b3 3fff 	cmp.w	r3, #4294967295
 8003b5a:	d01e      	beq.n	8003b9a <I2C_WaitOnFlagUntilTimeout+0x58>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8003b5c:	f7fe f8c2 	bl	8001ce4 <HAL_GetTick>
 8003b60:	4602      	mov	r2, r0
 8003b62:	69bb      	ldr	r3, [r7, #24]
 8003b64:	1ad3      	subs	r3, r2, r3
 8003b66:	683a      	ldr	r2, [r7, #0]
 8003b68:	429a      	cmp	r2, r3
 8003b6a:	d302      	bcc.n	8003b72 <I2C_WaitOnFlagUntilTimeout+0x30>
 8003b6c:	683b      	ldr	r3, [r7, #0]
 8003b6e:	2b00      	cmp	r3, #0
 8003b70:	d113      	bne.n	8003b9a <I2C_WaitOnFlagUntilTimeout+0x58>
      {
        hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 8003b72:	68fb      	ldr	r3, [r7, #12]
 8003b74:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003b76:	f043 0220 	orr.w	r2, r3, #32
 8003b7a:	68fb      	ldr	r3, [r7, #12]
 8003b7c:	645a      	str	r2, [r3, #68]	; 0x44
        hi2c->State = HAL_I2C_STATE_READY;
 8003b7e:	68fb      	ldr	r3, [r7, #12]
 8003b80:	2220      	movs	r2, #32
 8003b82:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
        hi2c->Mode = HAL_I2C_MODE_NONE;
 8003b86:	68fb      	ldr	r3, [r7, #12]
 8003b88:	2200      	movs	r2, #0
 8003b8a:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8003b8e:	68fb      	ldr	r3, [r7, #12]
 8003b90:	2200      	movs	r2, #0
 8003b92:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
        return HAL_ERROR;
 8003b96:	2301      	movs	r3, #1
 8003b98:	e00f      	b.n	8003bba <I2C_WaitOnFlagUntilTimeout+0x78>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 8003b9a:	68fb      	ldr	r3, [r7, #12]
 8003b9c:	681b      	ldr	r3, [r3, #0]
 8003b9e:	699a      	ldr	r2, [r3, #24]
 8003ba0:	68bb      	ldr	r3, [r7, #8]
 8003ba2:	4013      	ands	r3, r2
 8003ba4:	68ba      	ldr	r2, [r7, #8]
 8003ba6:	429a      	cmp	r2, r3
 8003ba8:	bf0c      	ite	eq
 8003baa:	2301      	moveq	r3, #1
 8003bac:	2300      	movne	r3, #0
 8003bae:	b2db      	uxtb	r3, r3
 8003bb0:	461a      	mov	r2, r3
 8003bb2:	79fb      	ldrb	r3, [r7, #7]
 8003bb4:	429a      	cmp	r2, r3
 8003bb6:	d0cd      	beq.n	8003b54 <I2C_WaitOnFlagUntilTimeout+0x12>
      }
    }
  }
  return HAL_OK;
 8003bb8:	2300      	movs	r3, #0
}
 8003bba:	4618      	mov	r0, r3
 8003bbc:	3710      	adds	r7, #16
 8003bbe:	46bd      	mov	sp, r7
 8003bc0:	bd80      	pop	{r7, pc}

08003bc2 <I2C_WaitOnTXISFlagUntilTimeout>:
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnTXISFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout,
                                                        uint32_t Tickstart)
{
 8003bc2:	b580      	push	{r7, lr}
 8003bc4:	b084      	sub	sp, #16
 8003bc6:	af00      	add	r7, sp, #0
 8003bc8:	60f8      	str	r0, [r7, #12]
 8003bca:	60b9      	str	r1, [r7, #8]
 8003bcc:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) == RESET)
 8003bce:	e02c      	b.n	8003c2a <I2C_WaitOnTXISFlagUntilTimeout+0x68>
  {
    /* Check if an error is detected */
    if (I2C_IsErrorOccurred(hi2c, Timeout, Tickstart) != HAL_OK)
 8003bd0:	687a      	ldr	r2, [r7, #4]
 8003bd2:	68b9      	ldr	r1, [r7, #8]
 8003bd4:	68f8      	ldr	r0, [r7, #12]
 8003bd6:	f000 f871 	bl	8003cbc <I2C_IsErrorOccurred>
 8003bda:	4603      	mov	r3, r0
 8003bdc:	2b00      	cmp	r3, #0
 8003bde:	d001      	beq.n	8003be4 <I2C_WaitOnTXISFlagUntilTimeout+0x22>
    {
      return HAL_ERROR;
 8003be0:	2301      	movs	r3, #1
 8003be2:	e02a      	b.n	8003c3a <I2C_WaitOnTXISFlagUntilTimeout+0x78>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8003be4:	68bb      	ldr	r3, [r7, #8]
 8003be6:	f1b3 3fff 	cmp.w	r3, #4294967295
 8003bea:	d01e      	beq.n	8003c2a <I2C_WaitOnTXISFlagUntilTimeout+0x68>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8003bec:	f7fe f87a 	bl	8001ce4 <HAL_GetTick>
 8003bf0:	4602      	mov	r2, r0
 8003bf2:	687b      	ldr	r3, [r7, #4]
 8003bf4:	1ad3      	subs	r3, r2, r3
 8003bf6:	68ba      	ldr	r2, [r7, #8]
 8003bf8:	429a      	cmp	r2, r3
 8003bfa:	d302      	bcc.n	8003c02 <I2C_WaitOnTXISFlagUntilTimeout+0x40>
 8003bfc:	68bb      	ldr	r3, [r7, #8]
 8003bfe:	2b00      	cmp	r3, #0
 8003c00:	d113      	bne.n	8003c2a <I2C_WaitOnTXISFlagUntilTimeout+0x68>
      {
        hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 8003c02:	68fb      	ldr	r3, [r7, #12]
 8003c04:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003c06:	f043 0220 	orr.w	r2, r3, #32
 8003c0a:	68fb      	ldr	r3, [r7, #12]
 8003c0c:	645a      	str	r2, [r3, #68]	; 0x44
        hi2c->State = HAL_I2C_STATE_READY;
 8003c0e:	68fb      	ldr	r3, [r7, #12]
 8003c10:	2220      	movs	r2, #32
 8003c12:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
        hi2c->Mode = HAL_I2C_MODE_NONE;
 8003c16:	68fb      	ldr	r3, [r7, #12]
 8003c18:	2200      	movs	r2, #0
 8003c1a:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8003c1e:	68fb      	ldr	r3, [r7, #12]
 8003c20:	2200      	movs	r2, #0
 8003c22:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

        return HAL_ERROR;
 8003c26:	2301      	movs	r3, #1
 8003c28:	e007      	b.n	8003c3a <I2C_WaitOnTXISFlagUntilTimeout+0x78>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) == RESET)
 8003c2a:	68fb      	ldr	r3, [r7, #12]
 8003c2c:	681b      	ldr	r3, [r3, #0]
 8003c2e:	699b      	ldr	r3, [r3, #24]
 8003c30:	f003 0302 	and.w	r3, r3, #2
 8003c34:	2b02      	cmp	r3, #2
 8003c36:	d1cb      	bne.n	8003bd0 <I2C_WaitOnTXISFlagUntilTimeout+0xe>
      }
    }
  }
  return HAL_OK;
 8003c38:	2300      	movs	r3, #0
}
 8003c3a:	4618      	mov	r0, r3
 8003c3c:	3710      	adds	r7, #16
 8003c3e:	46bd      	mov	sp, r7
 8003c40:	bd80      	pop	{r7, pc}

08003c42 <I2C_WaitOnSTOPFlagUntilTimeout>:
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnSTOPFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout,
                                                        uint32_t Tickstart)
{
 8003c42:	b580      	push	{r7, lr}
 8003c44:	b084      	sub	sp, #16
 8003c46:	af00      	add	r7, sp, #0
 8003c48:	60f8      	str	r0, [r7, #12]
 8003c4a:	60b9      	str	r1, [r7, #8]
 8003c4c:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 8003c4e:	e028      	b.n	8003ca2 <I2C_WaitOnSTOPFlagUntilTimeout+0x60>
  {
    /* Check if an error is detected */
    if (I2C_IsErrorOccurred(hi2c, Timeout, Tickstart) != HAL_OK)
 8003c50:	687a      	ldr	r2, [r7, #4]
 8003c52:	68b9      	ldr	r1, [r7, #8]
 8003c54:	68f8      	ldr	r0, [r7, #12]
 8003c56:	f000 f831 	bl	8003cbc <I2C_IsErrorOccurred>
 8003c5a:	4603      	mov	r3, r0
 8003c5c:	2b00      	cmp	r3, #0
 8003c5e:	d001      	beq.n	8003c64 <I2C_WaitOnSTOPFlagUntilTimeout+0x22>
    {
      return HAL_ERROR;
 8003c60:	2301      	movs	r3, #1
 8003c62:	e026      	b.n	8003cb2 <I2C_WaitOnSTOPFlagUntilTimeout+0x70>
    }

    /* Check for the Timeout */
    if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8003c64:	f7fe f83e 	bl	8001ce4 <HAL_GetTick>
 8003c68:	4602      	mov	r2, r0
 8003c6a:	687b      	ldr	r3, [r7, #4]
 8003c6c:	1ad3      	subs	r3, r2, r3
 8003c6e:	68ba      	ldr	r2, [r7, #8]
 8003c70:	429a      	cmp	r2, r3
 8003c72:	d302      	bcc.n	8003c7a <I2C_WaitOnSTOPFlagUntilTimeout+0x38>
 8003c74:	68bb      	ldr	r3, [r7, #8]
 8003c76:	2b00      	cmp	r3, #0
 8003c78:	d113      	bne.n	8003ca2 <I2C_WaitOnSTOPFlagUntilTimeout+0x60>
    {
      hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 8003c7a:	68fb      	ldr	r3, [r7, #12]
 8003c7c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003c7e:	f043 0220 	orr.w	r2, r3, #32
 8003c82:	68fb      	ldr	r3, [r7, #12]
 8003c84:	645a      	str	r2, [r3, #68]	; 0x44
      hi2c->State = HAL_I2C_STATE_READY;
 8003c86:	68fb      	ldr	r3, [r7, #12]
 8003c88:	2220      	movs	r2, #32
 8003c8a:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
      hi2c->Mode = HAL_I2C_MODE_NONE;
 8003c8e:	68fb      	ldr	r3, [r7, #12]
 8003c90:	2200      	movs	r2, #0
 8003c92:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 8003c96:	68fb      	ldr	r3, [r7, #12]
 8003c98:	2200      	movs	r2, #0
 8003c9a:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

      return HAL_ERROR;
 8003c9e:	2301      	movs	r3, #1
 8003ca0:	e007      	b.n	8003cb2 <I2C_WaitOnSTOPFlagUntilTimeout+0x70>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 8003ca2:	68fb      	ldr	r3, [r7, #12]
 8003ca4:	681b      	ldr	r3, [r3, #0]
 8003ca6:	699b      	ldr	r3, [r3, #24]
 8003ca8:	f003 0320 	and.w	r3, r3, #32
 8003cac:	2b20      	cmp	r3, #32
 8003cae:	d1cf      	bne.n	8003c50 <I2C_WaitOnSTOPFlagUntilTimeout+0xe>
    }
  }
  return HAL_OK;
 8003cb0:	2300      	movs	r3, #0
}
 8003cb2:	4618      	mov	r0, r3
 8003cb4:	3710      	adds	r7, #16
 8003cb6:	46bd      	mov	sp, r7
 8003cb8:	bd80      	pop	{r7, pc}
	...

08003cbc <I2C_IsErrorOccurred>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_IsErrorOccurred(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 8003cbc:	b580      	push	{r7, lr}
 8003cbe:	b08a      	sub	sp, #40	; 0x28
 8003cc0:	af00      	add	r7, sp, #0
 8003cc2:	60f8      	str	r0, [r7, #12]
 8003cc4:	60b9      	str	r1, [r7, #8]
 8003cc6:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8003cc8:	2300      	movs	r3, #0
 8003cca:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
  uint32_t itflag   = hi2c->Instance->ISR;
 8003cce:	68fb      	ldr	r3, [r7, #12]
 8003cd0:	681b      	ldr	r3, [r3, #0]
 8003cd2:	699b      	ldr	r3, [r3, #24]
 8003cd4:	61bb      	str	r3, [r7, #24]
  uint32_t error_code = 0;
 8003cd6:	2300      	movs	r3, #0
 8003cd8:	623b      	str	r3, [r7, #32]
  uint32_t tickstart = Tickstart;
 8003cda:	687b      	ldr	r3, [r7, #4]
 8003cdc:	61fb      	str	r3, [r7, #28]
  uint32_t tmp1;
  HAL_I2C_ModeTypeDef tmp2;

  if (HAL_IS_BIT_SET(itflag, I2C_FLAG_AF))
 8003cde:	69bb      	ldr	r3, [r7, #24]
 8003ce0:	f003 0310 	and.w	r3, r3, #16
 8003ce4:	2b00      	cmp	r3, #0
 8003ce6:	d075      	beq.n	8003dd4 <I2C_IsErrorOccurred+0x118>
  {
    /* Clear NACKF Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8003ce8:	68fb      	ldr	r3, [r7, #12]
 8003cea:	681b      	ldr	r3, [r3, #0]
 8003cec:	2210      	movs	r2, #16
 8003cee:	61da      	str	r2, [r3, #28]

    /* Wait until STOP Flag is set or timeout occurred */
    /* AutoEnd should be initiate after AF */
    while ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET) && (status == HAL_OK))
 8003cf0:	e056      	b.n	8003da0 <I2C_IsErrorOccurred+0xe4>
    {
      /* Check for the Timeout */
      if (Timeout != HAL_MAX_DELAY)
 8003cf2:	68bb      	ldr	r3, [r7, #8]
 8003cf4:	f1b3 3fff 	cmp.w	r3, #4294967295
 8003cf8:	d052      	beq.n	8003da0 <I2C_IsErrorOccurred+0xe4>
      {
        if (((HAL_GetTick() - tickstart) > Timeout) || (Timeout == 0U))
 8003cfa:	f7fd fff3 	bl	8001ce4 <HAL_GetTick>
 8003cfe:	4602      	mov	r2, r0
 8003d00:	69fb      	ldr	r3, [r7, #28]
 8003d02:	1ad3      	subs	r3, r2, r3
 8003d04:	68ba      	ldr	r2, [r7, #8]
 8003d06:	429a      	cmp	r2, r3
 8003d08:	d302      	bcc.n	8003d10 <I2C_IsErrorOccurred+0x54>
 8003d0a:	68bb      	ldr	r3, [r7, #8]
 8003d0c:	2b00      	cmp	r3, #0
 8003d0e:	d147      	bne.n	8003da0 <I2C_IsErrorOccurred+0xe4>
        {
          tmp1 = (uint32_t)(hi2c->Instance->CR2 & I2C_CR2_STOP);
 8003d10:	68fb      	ldr	r3, [r7, #12]
 8003d12:	681b      	ldr	r3, [r3, #0]
 8003d14:	685b      	ldr	r3, [r3, #4]
 8003d16:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8003d1a:	617b      	str	r3, [r7, #20]
          tmp2 = hi2c->Mode;
 8003d1c:	68fb      	ldr	r3, [r7, #12]
 8003d1e:	f893 3042 	ldrb.w	r3, [r3, #66]	; 0x42
 8003d22:	74fb      	strb	r3, [r7, #19]

          /* In case of I2C still busy, try to regenerate a STOP manually */
          if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BUSY) != RESET) && \
 8003d24:	68fb      	ldr	r3, [r7, #12]
 8003d26:	681b      	ldr	r3, [r3, #0]
 8003d28:	699b      	ldr	r3, [r3, #24]
 8003d2a:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8003d2e:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8003d32:	d12e      	bne.n	8003d92 <I2C_IsErrorOccurred+0xd6>
 8003d34:	697b      	ldr	r3, [r7, #20]
 8003d36:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 8003d3a:	d02a      	beq.n	8003d92 <I2C_IsErrorOccurred+0xd6>
              (tmp1 != I2C_CR2_STOP) && \
 8003d3c:	7cfb      	ldrb	r3, [r7, #19]
 8003d3e:	2b20      	cmp	r3, #32
 8003d40:	d027      	beq.n	8003d92 <I2C_IsErrorOccurred+0xd6>
              (tmp2 != HAL_I2C_MODE_SLAVE))
          {
            /* Generate Stop */
            hi2c->Instance->CR2 |= I2C_CR2_STOP;
 8003d42:	68fb      	ldr	r3, [r7, #12]
 8003d44:	681b      	ldr	r3, [r3, #0]
 8003d46:	685a      	ldr	r2, [r3, #4]
 8003d48:	68fb      	ldr	r3, [r7, #12]
 8003d4a:	681b      	ldr	r3, [r3, #0]
 8003d4c:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 8003d50:	605a      	str	r2, [r3, #4]

            /* Update Tick with new reference */
            tickstart = HAL_GetTick();
 8003d52:	f7fd ffc7 	bl	8001ce4 <HAL_GetTick>
 8003d56:	61f8      	str	r0, [r7, #28]
          }

          while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 8003d58:	e01b      	b.n	8003d92 <I2C_IsErrorOccurred+0xd6>
          {
            /* Check for the Timeout */
            if ((HAL_GetTick() - tickstart) > I2C_TIMEOUT_STOPF)
 8003d5a:	f7fd ffc3 	bl	8001ce4 <HAL_GetTick>
 8003d5e:	4602      	mov	r2, r0
 8003d60:	69fb      	ldr	r3, [r7, #28]
 8003d62:	1ad3      	subs	r3, r2, r3
 8003d64:	2b19      	cmp	r3, #25
 8003d66:	d914      	bls.n	8003d92 <I2C_IsErrorOccurred+0xd6>
            {
              hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 8003d68:	68fb      	ldr	r3, [r7, #12]
 8003d6a:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003d6c:	f043 0220 	orr.w	r2, r3, #32
 8003d70:	68fb      	ldr	r3, [r7, #12]
 8003d72:	645a      	str	r2, [r3, #68]	; 0x44
              hi2c->State = HAL_I2C_STATE_READY;
 8003d74:	68fb      	ldr	r3, [r7, #12]
 8003d76:	2220      	movs	r2, #32
 8003d78:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
              hi2c->Mode = HAL_I2C_MODE_NONE;
 8003d7c:	68fb      	ldr	r3, [r7, #12]
 8003d7e:	2200      	movs	r2, #0
 8003d80:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

              /* Process Unlocked */
              __HAL_UNLOCK(hi2c);
 8003d84:	68fb      	ldr	r3, [r7, #12]
 8003d86:	2200      	movs	r2, #0
 8003d88:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

              status = HAL_ERROR;
 8003d8c:	2301      	movs	r3, #1
 8003d8e:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
          while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 8003d92:	68fb      	ldr	r3, [r7, #12]
 8003d94:	681b      	ldr	r3, [r3, #0]
 8003d96:	699b      	ldr	r3, [r3, #24]
 8003d98:	f003 0320 	and.w	r3, r3, #32
 8003d9c:	2b20      	cmp	r3, #32
 8003d9e:	d1dc      	bne.n	8003d5a <I2C_IsErrorOccurred+0x9e>
    while ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET) && (status == HAL_OK))
 8003da0:	68fb      	ldr	r3, [r7, #12]
 8003da2:	681b      	ldr	r3, [r3, #0]
 8003da4:	699b      	ldr	r3, [r3, #24]
 8003da6:	f003 0320 	and.w	r3, r3, #32
 8003daa:	2b20      	cmp	r3, #32
 8003dac:	d003      	beq.n	8003db6 <I2C_IsErrorOccurred+0xfa>
 8003dae:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8003db2:	2b00      	cmp	r3, #0
 8003db4:	d09d      	beq.n	8003cf2 <I2C_IsErrorOccurred+0x36>
        }
      }
    }

    /* In case STOP Flag is detected, clear it */
    if (status == HAL_OK)
 8003db6:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8003dba:	2b00      	cmp	r3, #0
 8003dbc:	d103      	bne.n	8003dc6 <I2C_IsErrorOccurred+0x10a>
    {
      /* Clear STOP Flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 8003dbe:	68fb      	ldr	r3, [r7, #12]
 8003dc0:	681b      	ldr	r3, [r3, #0]
 8003dc2:	2220      	movs	r2, #32
 8003dc4:	61da      	str	r2, [r3, #28]
    }

    error_code |= HAL_I2C_ERROR_AF;
 8003dc6:	6a3b      	ldr	r3, [r7, #32]
 8003dc8:	f043 0304 	orr.w	r3, r3, #4
 8003dcc:	623b      	str	r3, [r7, #32]

    status = HAL_ERROR;
 8003dce:	2301      	movs	r3, #1
 8003dd0:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
  }

  /* Refresh Content of Status register */
  itflag = hi2c->Instance->ISR;
 8003dd4:	68fb      	ldr	r3, [r7, #12]
 8003dd6:	681b      	ldr	r3, [r3, #0]
 8003dd8:	699b      	ldr	r3, [r3, #24]
 8003dda:	61bb      	str	r3, [r7, #24]

  /* Then verify if an additional errors occurs */
  /* Check if a Bus error occurred */
  if (HAL_IS_BIT_SET(itflag, I2C_FLAG_BERR))
 8003ddc:	69bb      	ldr	r3, [r7, #24]
 8003dde:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003de2:	2b00      	cmp	r3, #0
 8003de4:	d00b      	beq.n	8003dfe <I2C_IsErrorOccurred+0x142>
  {
    error_code |= HAL_I2C_ERROR_BERR;
 8003de6:	6a3b      	ldr	r3, [r7, #32]
 8003de8:	f043 0301 	orr.w	r3, r3, #1
 8003dec:	623b      	str	r3, [r7, #32]

    /* Clear BERR flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_BERR);
 8003dee:	68fb      	ldr	r3, [r7, #12]
 8003df0:	681b      	ldr	r3, [r3, #0]
 8003df2:	f44f 7280 	mov.w	r2, #256	; 0x100
 8003df6:	61da      	str	r2, [r3, #28]

    status = HAL_ERROR;
 8003df8:	2301      	movs	r3, #1
 8003dfa:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
  }

  /* Check if an Over-Run/Under-Run error occurred */
  if (HAL_IS_BIT_SET(itflag, I2C_FLAG_OVR))
 8003dfe:	69bb      	ldr	r3, [r7, #24]
 8003e00:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8003e04:	2b00      	cmp	r3, #0
 8003e06:	d00b      	beq.n	8003e20 <I2C_IsErrorOccurred+0x164>
  {
    error_code |= HAL_I2C_ERROR_OVR;
 8003e08:	6a3b      	ldr	r3, [r7, #32]
 8003e0a:	f043 0308 	orr.w	r3, r3, #8
 8003e0e:	623b      	str	r3, [r7, #32]

    /* Clear OVR flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_OVR);
 8003e10:	68fb      	ldr	r3, [r7, #12]
 8003e12:	681b      	ldr	r3, [r3, #0]
 8003e14:	f44f 6280 	mov.w	r2, #1024	; 0x400
 8003e18:	61da      	str	r2, [r3, #28]

    status = HAL_ERROR;
 8003e1a:	2301      	movs	r3, #1
 8003e1c:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
  }

  /* Check if an Arbitration Loss error occurred */
  if (HAL_IS_BIT_SET(itflag, I2C_FLAG_ARLO))
 8003e20:	69bb      	ldr	r3, [r7, #24]
 8003e22:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8003e26:	2b00      	cmp	r3, #0
 8003e28:	d00b      	beq.n	8003e42 <I2C_IsErrorOccurred+0x186>
  {
    error_code |= HAL_I2C_ERROR_ARLO;
 8003e2a:	6a3b      	ldr	r3, [r7, #32]
 8003e2c:	f043 0302 	orr.w	r3, r3, #2
 8003e30:	623b      	str	r3, [r7, #32]

    /* Clear ARLO flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_ARLO);
 8003e32:	68fb      	ldr	r3, [r7, #12]
 8003e34:	681b      	ldr	r3, [r3, #0]
 8003e36:	f44f 7200 	mov.w	r2, #512	; 0x200
 8003e3a:	61da      	str	r2, [r3, #28]

    status = HAL_ERROR;
 8003e3c:	2301      	movs	r3, #1
 8003e3e:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
  }

  if (status != HAL_OK)
 8003e42:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8003e46:	2b00      	cmp	r3, #0
 8003e48:	d01c      	beq.n	8003e84 <I2C_IsErrorOccurred+0x1c8>
  {
    /* Flush TX register */
    I2C_Flush_TXDR(hi2c);
 8003e4a:	68f8      	ldr	r0, [r7, #12]
 8003e4c:	f7ff fe37 	bl	8003abe <I2C_Flush_TXDR>

    /* Clear Configuration Register 2 */
    I2C_RESET_CR2(hi2c);
 8003e50:	68fb      	ldr	r3, [r7, #12]
 8003e52:	681b      	ldr	r3, [r3, #0]
 8003e54:	6859      	ldr	r1, [r3, #4]
 8003e56:	68fb      	ldr	r3, [r7, #12]
 8003e58:	681a      	ldr	r2, [r3, #0]
 8003e5a:	4b0d      	ldr	r3, [pc, #52]	; (8003e90 <I2C_IsErrorOccurred+0x1d4>)
 8003e5c:	400b      	ands	r3, r1
 8003e5e:	6053      	str	r3, [r2, #4]

    hi2c->ErrorCode |= error_code;
 8003e60:	68fb      	ldr	r3, [r7, #12]
 8003e62:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8003e64:	6a3b      	ldr	r3, [r7, #32]
 8003e66:	431a      	orrs	r2, r3
 8003e68:	68fb      	ldr	r3, [r7, #12]
 8003e6a:	645a      	str	r2, [r3, #68]	; 0x44
    hi2c->State = HAL_I2C_STATE_READY;
 8003e6c:	68fb      	ldr	r3, [r7, #12]
 8003e6e:	2220      	movs	r2, #32
 8003e70:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->Mode = HAL_I2C_MODE_NONE;
 8003e74:	68fb      	ldr	r3, [r7, #12]
 8003e76:	2200      	movs	r2, #0
 8003e78:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8003e7c:	68fb      	ldr	r3, [r7, #12]
 8003e7e:	2200      	movs	r2, #0
 8003e80:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
  }

  return status;
 8003e84:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
}
 8003e88:	4618      	mov	r0, r3
 8003e8a:	3728      	adds	r7, #40	; 0x28
 8003e8c:	46bd      	mov	sp, r7
 8003e8e:	bd80      	pop	{r7, pc}
 8003e90:	fe00e800 	.word	0xfe00e800

08003e94 <I2C_TransferConfig>:
  *     @arg @ref I2C_GENERATE_START_WRITE Generate Restart for write request.
  * @retval None
  */
static void I2C_TransferConfig(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint8_t Size, uint32_t Mode,
                               uint32_t Request)
{
 8003e94:	b480      	push	{r7}
 8003e96:	b087      	sub	sp, #28
 8003e98:	af00      	add	r7, sp, #0
 8003e9a:	60f8      	str	r0, [r7, #12]
 8003e9c:	607b      	str	r3, [r7, #4]
 8003e9e:	460b      	mov	r3, r1
 8003ea0:	817b      	strh	r3, [r7, #10]
 8003ea2:	4613      	mov	r3, r2
 8003ea4:	727b      	strb	r3, [r7, #9]
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_TRANSFER_MODE(Mode));
  assert_param(IS_TRANSFER_REQUEST(Request));

  /* Declaration of tmp to prevent undefined behavior of volatile usage */
  uint32_t tmp = ((uint32_t)(((uint32_t)DevAddress & I2C_CR2_SADD) | \
 8003ea6:	897b      	ldrh	r3, [r7, #10]
 8003ea8:	f3c3 0209 	ubfx	r2, r3, #0, #10
                             (((uint32_t)Size << I2C_CR2_NBYTES_Pos) & I2C_CR2_NBYTES) | \
 8003eac:	7a7b      	ldrb	r3, [r7, #9]
 8003eae:	041b      	lsls	r3, r3, #16
 8003eb0:	f403 037f 	and.w	r3, r3, #16711680	; 0xff0000
  uint32_t tmp = ((uint32_t)(((uint32_t)DevAddress & I2C_CR2_SADD) | \
 8003eb4:	431a      	orrs	r2, r3
                             (((uint32_t)Size << I2C_CR2_NBYTES_Pos) & I2C_CR2_NBYTES) | \
 8003eb6:	687b      	ldr	r3, [r7, #4]
 8003eb8:	431a      	orrs	r2, r3
  uint32_t tmp = ((uint32_t)(((uint32_t)DevAddress & I2C_CR2_SADD) | \
 8003eba:	6a3b      	ldr	r3, [r7, #32]
 8003ebc:	4313      	orrs	r3, r2
 8003ebe:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 8003ec2:	617b      	str	r3, [r7, #20]
                             (uint32_t)Mode | (uint32_t)Request) & (~0x80000000U));

  /* update CR2 register */
  MODIFY_REG(hi2c->Instance->CR2, \
 8003ec4:	68fb      	ldr	r3, [r7, #12]
 8003ec6:	681b      	ldr	r3, [r3, #0]
 8003ec8:	685a      	ldr	r2, [r3, #4]
 8003eca:	6a3b      	ldr	r3, [r7, #32]
 8003ecc:	0d5b      	lsrs	r3, r3, #21
 8003ece:	f403 6180 	and.w	r1, r3, #1024	; 0x400
 8003ed2:	4b08      	ldr	r3, [pc, #32]	; (8003ef4 <I2C_TransferConfig+0x60>)
 8003ed4:	430b      	orrs	r3, r1
 8003ed6:	43db      	mvns	r3, r3
 8003ed8:	ea02 0103 	and.w	r1, r2, r3
 8003edc:	68fb      	ldr	r3, [r7, #12]
 8003ede:	681b      	ldr	r3, [r3, #0]
 8003ee0:	697a      	ldr	r2, [r7, #20]
 8003ee2:	430a      	orrs	r2, r1
 8003ee4:	605a      	str	r2, [r3, #4]
             ((I2C_CR2_SADD | I2C_CR2_NBYTES | I2C_CR2_RELOAD | I2C_CR2_AUTOEND | \
               (I2C_CR2_RD_WRN & (uint32_t)(Request >> (31U - I2C_CR2_RD_WRN_Pos))) | \
               I2C_CR2_START | I2C_CR2_STOP)), tmp);
}
 8003ee6:	bf00      	nop
 8003ee8:	371c      	adds	r7, #28
 8003eea:	46bd      	mov	sp, r7
 8003eec:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003ef0:	4770      	bx	lr
 8003ef2:	bf00      	nop
 8003ef4:	03ff63ff 	.word	0x03ff63ff

08003ef8 <I2C_Enable_IRQ>:
  *                the configuration information for the specified I2C.
  * @param  InterruptRequest Value of @ref I2C_Interrupt_configuration_definition.
  * @retval None
  */
static void I2C_Enable_IRQ(I2C_HandleTypeDef *hi2c, uint16_t InterruptRequest)
{
 8003ef8:	b480      	push	{r7}
 8003efa:	b085      	sub	sp, #20
 8003efc:	af00      	add	r7, sp, #0
 8003efe:	6078      	str	r0, [r7, #4]
 8003f00:	460b      	mov	r3, r1
 8003f02:	807b      	strh	r3, [r7, #2]
  uint32_t tmpisr = 0U;
 8003f04:	2300      	movs	r3, #0
 8003f06:	60fb      	str	r3, [r7, #12]

  if ((hi2c->XferISR == I2C_Master_ISR_DMA) || \
 8003f08:	687b      	ldr	r3, [r7, #4]
 8003f0a:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8003f0c:	4a2d      	ldr	r2, [pc, #180]	; (8003fc4 <I2C_Enable_IRQ+0xcc>)
 8003f0e:	4293      	cmp	r3, r2
 8003f10:	d004      	beq.n	8003f1c <I2C_Enable_IRQ+0x24>
      (hi2c->XferISR == I2C_Slave_ISR_DMA))
 8003f12:	687b      	ldr	r3, [r7, #4]
 8003f14:	6b5b      	ldr	r3, [r3, #52]	; 0x34
  if ((hi2c->XferISR == I2C_Master_ISR_DMA) || \
 8003f16:	4a2c      	ldr	r2, [pc, #176]	; (8003fc8 <I2C_Enable_IRQ+0xd0>)
 8003f18:	4293      	cmp	r3, r2
 8003f1a:	d11d      	bne.n	8003f58 <I2C_Enable_IRQ+0x60>
  {
    if ((InterruptRequest & I2C_XFER_LISTEN_IT) == I2C_XFER_LISTEN_IT)
 8003f1c:	f9b7 3002 	ldrsh.w	r3, [r7, #2]
 8003f20:	2b00      	cmp	r3, #0
 8003f22:	da03      	bge.n	8003f2c <I2C_Enable_IRQ+0x34>
    {
      /* Enable ERR, STOP, NACK and ADDR interrupts */
      tmpisr |= I2C_IT_ADDRI | I2C_IT_STOPI | I2C_IT_NACKI | I2C_IT_ERRI;
 8003f24:	68fb      	ldr	r3, [r7, #12]
 8003f26:	f043 03b8 	orr.w	r3, r3, #184	; 0xb8
 8003f2a:	60fb      	str	r3, [r7, #12]
    }

    if (InterruptRequest == I2C_XFER_ERROR_IT)
 8003f2c:	887b      	ldrh	r3, [r7, #2]
 8003f2e:	2b10      	cmp	r3, #16
 8003f30:	d103      	bne.n	8003f3a <I2C_Enable_IRQ+0x42>
    {
      /* Enable ERR and NACK interrupts */
      tmpisr |= I2C_IT_ERRI | I2C_IT_NACKI;
 8003f32:	68fb      	ldr	r3, [r7, #12]
 8003f34:	f043 0390 	orr.w	r3, r3, #144	; 0x90
 8003f38:	60fb      	str	r3, [r7, #12]
    }

    if (InterruptRequest == I2C_XFER_CPLT_IT)
 8003f3a:	887b      	ldrh	r3, [r7, #2]
 8003f3c:	2b20      	cmp	r3, #32
 8003f3e:	d103      	bne.n	8003f48 <I2C_Enable_IRQ+0x50>
    {
      /* Enable STOP interrupts */
      tmpisr |= (I2C_IT_STOPI | I2C_IT_TCI);
 8003f40:	68fb      	ldr	r3, [r7, #12]
 8003f42:	f043 0360 	orr.w	r3, r3, #96	; 0x60
 8003f46:	60fb      	str	r3, [r7, #12]
    }

    if (InterruptRequest == I2C_XFER_RELOAD_IT)
 8003f48:	887b      	ldrh	r3, [r7, #2]
 8003f4a:	2b40      	cmp	r3, #64	; 0x40
 8003f4c:	d12c      	bne.n	8003fa8 <I2C_Enable_IRQ+0xb0>
    {
      /* Enable TC interrupts */
      tmpisr |= I2C_IT_TCI;
 8003f4e:	68fb      	ldr	r3, [r7, #12]
 8003f50:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8003f54:	60fb      	str	r3, [r7, #12]
    if (InterruptRequest == I2C_XFER_RELOAD_IT)
 8003f56:	e027      	b.n	8003fa8 <I2C_Enable_IRQ+0xb0>
    }
  }
  else
  {
    if ((InterruptRequest & I2C_XFER_LISTEN_IT) == I2C_XFER_LISTEN_IT)
 8003f58:	f9b7 3002 	ldrsh.w	r3, [r7, #2]
 8003f5c:	2b00      	cmp	r3, #0
 8003f5e:	da03      	bge.n	8003f68 <I2C_Enable_IRQ+0x70>
    {
      /* Enable ERR, STOP, NACK, and ADDR interrupts */
      tmpisr |= I2C_IT_ADDRI | I2C_IT_STOPI | I2C_IT_NACKI | I2C_IT_ERRI;
 8003f60:	68fb      	ldr	r3, [r7, #12]
 8003f62:	f043 03b8 	orr.w	r3, r3, #184	; 0xb8
 8003f66:	60fb      	str	r3, [r7, #12]
    }

    if ((InterruptRequest & I2C_XFER_TX_IT) == I2C_XFER_TX_IT)
 8003f68:	887b      	ldrh	r3, [r7, #2]
 8003f6a:	f003 0301 	and.w	r3, r3, #1
 8003f6e:	2b00      	cmp	r3, #0
 8003f70:	d003      	beq.n	8003f7a <I2C_Enable_IRQ+0x82>
    {
      /* Enable ERR, TC, STOP, NACK and RXI interrupts */
      tmpisr |= I2C_IT_ERRI | I2C_IT_TCI | I2C_IT_STOPI | I2C_IT_NACKI | I2C_IT_TXI;
 8003f72:	68fb      	ldr	r3, [r7, #12]
 8003f74:	f043 03f2 	orr.w	r3, r3, #242	; 0xf2
 8003f78:	60fb      	str	r3, [r7, #12]
    }

    if ((InterruptRequest & I2C_XFER_RX_IT) == I2C_XFER_RX_IT)
 8003f7a:	887b      	ldrh	r3, [r7, #2]
 8003f7c:	f003 0302 	and.w	r3, r3, #2
 8003f80:	2b00      	cmp	r3, #0
 8003f82:	d003      	beq.n	8003f8c <I2C_Enable_IRQ+0x94>
    {
      /* Enable ERR, TC, STOP, NACK and TXI interrupts */
      tmpisr |= I2C_IT_ERRI | I2C_IT_TCI | I2C_IT_STOPI | I2C_IT_NACKI | I2C_IT_RXI;
 8003f84:	68fb      	ldr	r3, [r7, #12]
 8003f86:	f043 03f4 	orr.w	r3, r3, #244	; 0xf4
 8003f8a:	60fb      	str	r3, [r7, #12]
    }

    if (InterruptRequest == I2C_XFER_ERROR_IT)
 8003f8c:	887b      	ldrh	r3, [r7, #2]
 8003f8e:	2b10      	cmp	r3, #16
 8003f90:	d103      	bne.n	8003f9a <I2C_Enable_IRQ+0xa2>
    {
      /* Enable ERR and NACK interrupts */
      tmpisr |= I2C_IT_ERRI | I2C_IT_NACKI;
 8003f92:	68fb      	ldr	r3, [r7, #12]
 8003f94:	f043 0390 	orr.w	r3, r3, #144	; 0x90
 8003f98:	60fb      	str	r3, [r7, #12]
    }

    if (InterruptRequest == I2C_XFER_CPLT_IT)
 8003f9a:	887b      	ldrh	r3, [r7, #2]
 8003f9c:	2b20      	cmp	r3, #32
 8003f9e:	d103      	bne.n	8003fa8 <I2C_Enable_IRQ+0xb0>
    {
      /* Enable STOP interrupts */
      tmpisr |= I2C_IT_STOPI;
 8003fa0:	68fb      	ldr	r3, [r7, #12]
 8003fa2:	f043 0320 	orr.w	r3, r3, #32
 8003fa6:	60fb      	str	r3, [r7, #12]
  }

  /* Enable interrupts only at the end */
  /* to avoid the risk of I2C interrupt handle execution before */
  /* all interrupts requested done */
  __HAL_I2C_ENABLE_IT(hi2c, tmpisr);
 8003fa8:	687b      	ldr	r3, [r7, #4]
 8003faa:	681b      	ldr	r3, [r3, #0]
 8003fac:	6819      	ldr	r1, [r3, #0]
 8003fae:	687b      	ldr	r3, [r7, #4]
 8003fb0:	681b      	ldr	r3, [r3, #0]
 8003fb2:	68fa      	ldr	r2, [r7, #12]
 8003fb4:	430a      	orrs	r2, r1
 8003fb6:	601a      	str	r2, [r3, #0]
}
 8003fb8:	bf00      	nop
 8003fba:	3714      	adds	r7, #20
 8003fbc:	46bd      	mov	sp, r7
 8003fbe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003fc2:	4770      	bx	lr
 8003fc4:	08002def 	.word	0x08002def
 8003fc8:	08002fd5 	.word	0x08002fd5

08003fcc <I2C_Disable_IRQ>:
  *                the configuration information for the specified I2C.
  * @param  InterruptRequest Value of @ref I2C_Interrupt_configuration_definition.
  * @retval None
  */
static void I2C_Disable_IRQ(I2C_HandleTypeDef *hi2c, uint16_t InterruptRequest)
{
 8003fcc:	b480      	push	{r7}
 8003fce:	b085      	sub	sp, #20
 8003fd0:	af00      	add	r7, sp, #0
 8003fd2:	6078      	str	r0, [r7, #4]
 8003fd4:	460b      	mov	r3, r1
 8003fd6:	807b      	strh	r3, [r7, #2]
  uint32_t tmpisr = 0U;
 8003fd8:	2300      	movs	r3, #0
 8003fda:	60fb      	str	r3, [r7, #12]

  if ((InterruptRequest & I2C_XFER_TX_IT) == I2C_XFER_TX_IT)
 8003fdc:	887b      	ldrh	r3, [r7, #2]
 8003fde:	f003 0301 	and.w	r3, r3, #1
 8003fe2:	2b00      	cmp	r3, #0
 8003fe4:	d00f      	beq.n	8004006 <I2C_Disable_IRQ+0x3a>
  {
    /* Disable TC and TXI interrupts */
    tmpisr |= I2C_IT_TCI | I2C_IT_TXI;
 8003fe6:	68fb      	ldr	r3, [r7, #12]
 8003fe8:	f043 0342 	orr.w	r3, r3, #66	; 0x42
 8003fec:	60fb      	str	r3, [r7, #12]

    if (((uint32_t)hi2c->State & (uint32_t)HAL_I2C_STATE_LISTEN) != (uint32_t)HAL_I2C_STATE_LISTEN)
 8003fee:	687b      	ldr	r3, [r7, #4]
 8003ff0:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8003ff4:	b2db      	uxtb	r3, r3
 8003ff6:	f003 0328 	and.w	r3, r3, #40	; 0x28
 8003ffa:	2b28      	cmp	r3, #40	; 0x28
 8003ffc:	d003      	beq.n	8004006 <I2C_Disable_IRQ+0x3a>
    {
      /* Disable NACK and STOP interrupts */
      tmpisr |= I2C_IT_STOPI | I2C_IT_NACKI | I2C_IT_ERRI;
 8003ffe:	68fb      	ldr	r3, [r7, #12]
 8004000:	f043 03b0 	orr.w	r3, r3, #176	; 0xb0
 8004004:	60fb      	str	r3, [r7, #12]
    }
  }

  if ((InterruptRequest & I2C_XFER_RX_IT) == I2C_XFER_RX_IT)
 8004006:	887b      	ldrh	r3, [r7, #2]
 8004008:	f003 0302 	and.w	r3, r3, #2
 800400c:	2b00      	cmp	r3, #0
 800400e:	d00f      	beq.n	8004030 <I2C_Disable_IRQ+0x64>
  {
    /* Disable TC and RXI interrupts */
    tmpisr |= I2C_IT_TCI | I2C_IT_RXI;
 8004010:	68fb      	ldr	r3, [r7, #12]
 8004012:	f043 0344 	orr.w	r3, r3, #68	; 0x44
 8004016:	60fb      	str	r3, [r7, #12]

    if (((uint32_t)hi2c->State & (uint32_t)HAL_I2C_STATE_LISTEN) != (uint32_t)HAL_I2C_STATE_LISTEN)
 8004018:	687b      	ldr	r3, [r7, #4]
 800401a:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 800401e:	b2db      	uxtb	r3, r3
 8004020:	f003 0328 	and.w	r3, r3, #40	; 0x28
 8004024:	2b28      	cmp	r3, #40	; 0x28
 8004026:	d003      	beq.n	8004030 <I2C_Disable_IRQ+0x64>
    {
      /* Disable NACK and STOP interrupts */
      tmpisr |= I2C_IT_STOPI | I2C_IT_NACKI | I2C_IT_ERRI;
 8004028:	68fb      	ldr	r3, [r7, #12]
 800402a:	f043 03b0 	orr.w	r3, r3, #176	; 0xb0
 800402e:	60fb      	str	r3, [r7, #12]
    }
  }

  if ((InterruptRequest & I2C_XFER_LISTEN_IT) == I2C_XFER_LISTEN_IT)
 8004030:	f9b7 3002 	ldrsh.w	r3, [r7, #2]
 8004034:	2b00      	cmp	r3, #0
 8004036:	da03      	bge.n	8004040 <I2C_Disable_IRQ+0x74>
  {
    /* Disable ADDR, NACK and STOP interrupts */
    tmpisr |= I2C_IT_ADDRI | I2C_IT_STOPI | I2C_IT_NACKI | I2C_IT_ERRI;
 8004038:	68fb      	ldr	r3, [r7, #12]
 800403a:	f043 03b8 	orr.w	r3, r3, #184	; 0xb8
 800403e:	60fb      	str	r3, [r7, #12]
  }

  if (InterruptRequest == I2C_XFER_ERROR_IT)
 8004040:	887b      	ldrh	r3, [r7, #2]
 8004042:	2b10      	cmp	r3, #16
 8004044:	d103      	bne.n	800404e <I2C_Disable_IRQ+0x82>
  {
    /* Enable ERR and NACK interrupts */
    tmpisr |= I2C_IT_ERRI | I2C_IT_NACKI;
 8004046:	68fb      	ldr	r3, [r7, #12]
 8004048:	f043 0390 	orr.w	r3, r3, #144	; 0x90
 800404c:	60fb      	str	r3, [r7, #12]
  }

  if (InterruptRequest == I2C_XFER_CPLT_IT)
 800404e:	887b      	ldrh	r3, [r7, #2]
 8004050:	2b20      	cmp	r3, #32
 8004052:	d103      	bne.n	800405c <I2C_Disable_IRQ+0x90>
  {
    /* Enable STOP interrupts */
    tmpisr |= I2C_IT_STOPI;
 8004054:	68fb      	ldr	r3, [r7, #12]
 8004056:	f043 0320 	orr.w	r3, r3, #32
 800405a:	60fb      	str	r3, [r7, #12]
  }

  if (InterruptRequest == I2C_XFER_RELOAD_IT)
 800405c:	887b      	ldrh	r3, [r7, #2]
 800405e:	2b40      	cmp	r3, #64	; 0x40
 8004060:	d103      	bne.n	800406a <I2C_Disable_IRQ+0x9e>
  {
    /* Enable TC interrupts */
    tmpisr |= I2C_IT_TCI;
 8004062:	68fb      	ldr	r3, [r7, #12]
 8004064:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8004068:	60fb      	str	r3, [r7, #12]
  }

  /* Disable interrupts only at the end */
  /* to avoid a breaking situation like at "t" time */
  /* all disable interrupts request are not done */
  __HAL_I2C_DISABLE_IT(hi2c, tmpisr);
 800406a:	687b      	ldr	r3, [r7, #4]
 800406c:	681b      	ldr	r3, [r3, #0]
 800406e:	6819      	ldr	r1, [r3, #0]
 8004070:	68fb      	ldr	r3, [r7, #12]
 8004072:	43da      	mvns	r2, r3
 8004074:	687b      	ldr	r3, [r7, #4]
 8004076:	681b      	ldr	r3, [r3, #0]
 8004078:	400a      	ands	r2, r1
 800407a:	601a      	str	r2, [r3, #0]
}
 800407c:	bf00      	nop
 800407e:	3714      	adds	r7, #20
 8004080:	46bd      	mov	sp, r7
 8004082:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004086:	4770      	bx	lr

08004088 <HAL_I2CEx_ConfigAnalogFilter>:
  *                the configuration information for the specified I2Cx peripheral.
  * @param  AnalogFilter New state of the Analog filter.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2CEx_ConfigAnalogFilter(I2C_HandleTypeDef *hi2c, uint32_t AnalogFilter)
{
 8004088:	b480      	push	{r7}
 800408a:	b083      	sub	sp, #12
 800408c:	af00      	add	r7, sp, #0
 800408e:	6078      	str	r0, [r7, #4]
 8004090:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_ANALOG_FILTER(AnalogFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8004092:	687b      	ldr	r3, [r7, #4]
 8004094:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8004098:	b2db      	uxtb	r3, r3
 800409a:	2b20      	cmp	r3, #32
 800409c:	d138      	bne.n	8004110 <HAL_I2CEx_ConfigAnalogFilter+0x88>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 800409e:	687b      	ldr	r3, [r7, #4]
 80040a0:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 80040a4:	2b01      	cmp	r3, #1
 80040a6:	d101      	bne.n	80040ac <HAL_I2CEx_ConfigAnalogFilter+0x24>
 80040a8:	2302      	movs	r3, #2
 80040aa:	e032      	b.n	8004112 <HAL_I2CEx_ConfigAnalogFilter+0x8a>
 80040ac:	687b      	ldr	r3, [r7, #4]
 80040ae:	2201      	movs	r2, #1
 80040b0:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    hi2c->State = HAL_I2C_STATE_BUSY;
 80040b4:	687b      	ldr	r3, [r7, #4]
 80040b6:	2224      	movs	r2, #36	; 0x24
 80040b8:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
 80040bc:	687b      	ldr	r3, [r7, #4]
 80040be:	681b      	ldr	r3, [r3, #0]
 80040c0:	681a      	ldr	r2, [r3, #0]
 80040c2:	687b      	ldr	r3, [r7, #4]
 80040c4:	681b      	ldr	r3, [r3, #0]
 80040c6:	f022 0201 	bic.w	r2, r2, #1
 80040ca:	601a      	str	r2, [r3, #0]

    /* Reset I2Cx ANOFF bit */
    hi2c->Instance->CR1 &= ~(I2C_CR1_ANFOFF);
 80040cc:	687b      	ldr	r3, [r7, #4]
 80040ce:	681b      	ldr	r3, [r3, #0]
 80040d0:	681a      	ldr	r2, [r3, #0]
 80040d2:	687b      	ldr	r3, [r7, #4]
 80040d4:	681b      	ldr	r3, [r3, #0]
 80040d6:	f422 5280 	bic.w	r2, r2, #4096	; 0x1000
 80040da:	601a      	str	r2, [r3, #0]

    /* Set analog filter bit*/
    hi2c->Instance->CR1 |= AnalogFilter;
 80040dc:	687b      	ldr	r3, [r7, #4]
 80040de:	681b      	ldr	r3, [r3, #0]
 80040e0:	6819      	ldr	r1, [r3, #0]
 80040e2:	687b      	ldr	r3, [r7, #4]
 80040e4:	681b      	ldr	r3, [r3, #0]
 80040e6:	683a      	ldr	r2, [r7, #0]
 80040e8:	430a      	orrs	r2, r1
 80040ea:	601a      	str	r2, [r3, #0]

    __HAL_I2C_ENABLE(hi2c);
 80040ec:	687b      	ldr	r3, [r7, #4]
 80040ee:	681b      	ldr	r3, [r3, #0]
 80040f0:	681a      	ldr	r2, [r3, #0]
 80040f2:	687b      	ldr	r3, [r7, #4]
 80040f4:	681b      	ldr	r3, [r3, #0]
 80040f6:	f042 0201 	orr.w	r2, r2, #1
 80040fa:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 80040fc:	687b      	ldr	r3, [r7, #4]
 80040fe:	2220      	movs	r2, #32
 8004100:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8004104:	687b      	ldr	r3, [r7, #4]
 8004106:	2200      	movs	r2, #0
 8004108:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    return HAL_OK;
 800410c:	2300      	movs	r3, #0
 800410e:	e000      	b.n	8004112 <HAL_I2CEx_ConfigAnalogFilter+0x8a>
  }
  else
  {
    return HAL_BUSY;
 8004110:	2302      	movs	r3, #2
  }
}
 8004112:	4618      	mov	r0, r3
 8004114:	370c      	adds	r7, #12
 8004116:	46bd      	mov	sp, r7
 8004118:	f85d 7b04 	ldr.w	r7, [sp], #4
 800411c:	4770      	bx	lr

0800411e <HAL_I2CEx_ConfigDigitalFilter>:
  *                the configuration information for the specified I2Cx peripheral.
  * @param  DigitalFilter Coefficient of digital noise filter between Min_Data=0x00 and Max_Data=0x0F.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2CEx_ConfigDigitalFilter(I2C_HandleTypeDef *hi2c, uint32_t DigitalFilter)
{
 800411e:	b480      	push	{r7}
 8004120:	b085      	sub	sp, #20
 8004122:	af00      	add	r7, sp, #0
 8004124:	6078      	str	r0, [r7, #4]
 8004126:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_DIGITAL_FILTER(DigitalFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8004128:	687b      	ldr	r3, [r7, #4]
 800412a:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 800412e:	b2db      	uxtb	r3, r3
 8004130:	2b20      	cmp	r3, #32
 8004132:	d139      	bne.n	80041a8 <HAL_I2CEx_ConfigDigitalFilter+0x8a>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 8004134:	687b      	ldr	r3, [r7, #4]
 8004136:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 800413a:	2b01      	cmp	r3, #1
 800413c:	d101      	bne.n	8004142 <HAL_I2CEx_ConfigDigitalFilter+0x24>
 800413e:	2302      	movs	r3, #2
 8004140:	e033      	b.n	80041aa <HAL_I2CEx_ConfigDigitalFilter+0x8c>
 8004142:	687b      	ldr	r3, [r7, #4]
 8004144:	2201      	movs	r2, #1
 8004146:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    hi2c->State = HAL_I2C_STATE_BUSY;
 800414a:	687b      	ldr	r3, [r7, #4]
 800414c:	2224      	movs	r2, #36	; 0x24
 800414e:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
 8004152:	687b      	ldr	r3, [r7, #4]
 8004154:	681b      	ldr	r3, [r3, #0]
 8004156:	681a      	ldr	r2, [r3, #0]
 8004158:	687b      	ldr	r3, [r7, #4]
 800415a:	681b      	ldr	r3, [r3, #0]
 800415c:	f022 0201 	bic.w	r2, r2, #1
 8004160:	601a      	str	r2, [r3, #0]

    /* Get the old register value */
    tmpreg = hi2c->Instance->CR1;
 8004162:	687b      	ldr	r3, [r7, #4]
 8004164:	681b      	ldr	r3, [r3, #0]
 8004166:	681b      	ldr	r3, [r3, #0]
 8004168:	60fb      	str	r3, [r7, #12]

    /* Reset I2Cx DNF bits [11:8] */
    tmpreg &= ~(I2C_CR1_DNF);
 800416a:	68fb      	ldr	r3, [r7, #12]
 800416c:	f423 6370 	bic.w	r3, r3, #3840	; 0xf00
 8004170:	60fb      	str	r3, [r7, #12]

    /* Set I2Cx DNF coefficient */
    tmpreg |= DigitalFilter << 8U;
 8004172:	683b      	ldr	r3, [r7, #0]
 8004174:	021b      	lsls	r3, r3, #8
 8004176:	68fa      	ldr	r2, [r7, #12]
 8004178:	4313      	orrs	r3, r2
 800417a:	60fb      	str	r3, [r7, #12]

    /* Store the new register value */
    hi2c->Instance->CR1 = tmpreg;
 800417c:	687b      	ldr	r3, [r7, #4]
 800417e:	681b      	ldr	r3, [r3, #0]
 8004180:	68fa      	ldr	r2, [r7, #12]
 8004182:	601a      	str	r2, [r3, #0]

    __HAL_I2C_ENABLE(hi2c);
 8004184:	687b      	ldr	r3, [r7, #4]
 8004186:	681b      	ldr	r3, [r3, #0]
 8004188:	681a      	ldr	r2, [r3, #0]
 800418a:	687b      	ldr	r3, [r7, #4]
 800418c:	681b      	ldr	r3, [r3, #0]
 800418e:	f042 0201 	orr.w	r2, r2, #1
 8004192:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 8004194:	687b      	ldr	r3, [r7, #4]
 8004196:	2220      	movs	r2, #32
 8004198:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 800419c:	687b      	ldr	r3, [r7, #4]
 800419e:	2200      	movs	r2, #0
 80041a0:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    return HAL_OK;
 80041a4:	2300      	movs	r3, #0
 80041a6:	e000      	b.n	80041aa <HAL_I2CEx_ConfigDigitalFilter+0x8c>
  }
  else
  {
    return HAL_BUSY;
 80041a8:	2302      	movs	r3, #2
  }
}
 80041aa:	4618      	mov	r0, r3
 80041ac:	3714      	adds	r7, #20
 80041ae:	46bd      	mov	sp, r7
 80041b0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80041b4:	4770      	bx	lr
	...

080041b8 <HAL_PWREx_GetVoltageRange>:
  * @brief Return Voltage Scaling Range.
  * @retval VOS bit field (PWR_REGULATOR_VOLTAGE_SCALE1 or PWR_REGULATOR_VOLTAGE_SCALE2
  *         or PWR_REGULATOR_VOLTAGE_SCALE1_BOOST when applicable)
  */
uint32_t HAL_PWREx_GetVoltageRange(void)
{
 80041b8:	b480      	push	{r7}
 80041ba:	af00      	add	r7, sp, #0
    else
    {
      return PWR_REGULATOR_VOLTAGE_SCALE1_BOOST;
    }
#else
  return  (PWR->CR1 & PWR_CR1_VOS);
 80041bc:	4b04      	ldr	r3, [pc, #16]	; (80041d0 <HAL_PWREx_GetVoltageRange+0x18>)
 80041be:	681b      	ldr	r3, [r3, #0]
 80041c0:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
#endif
}
 80041c4:	4618      	mov	r0, r3
 80041c6:	46bd      	mov	sp, r7
 80041c8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80041cc:	4770      	bx	lr
 80041ce:	bf00      	nop
 80041d0:	40007000 	.word	0x40007000

080041d4 <HAL_PWREx_ControlVoltageScaling>:
  *        cleared before returning the status. If the flag is not cleared within
  *        50 microseconds, HAL_TIMEOUT status is reported.
  * @retval HAL Status
  */
HAL_StatusTypeDef HAL_PWREx_ControlVoltageScaling(uint32_t VoltageScaling)
{
 80041d4:	b480      	push	{r7}
 80041d6:	b085      	sub	sp, #20
 80041d8:	af00      	add	r7, sp, #0
 80041da:	6078      	str	r0, [r7, #4]
  }

#else

  /* If Set Range 1 */
  if (VoltageScaling == PWR_REGULATOR_VOLTAGE_SCALE1)
 80041dc:	687b      	ldr	r3, [r7, #4]
 80041de:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 80041e2:	d130      	bne.n	8004246 <HAL_PWREx_ControlVoltageScaling+0x72>
  {
    if (READ_BIT(PWR->CR1, PWR_CR1_VOS) != PWR_REGULATOR_VOLTAGE_SCALE1)
 80041e4:	4b23      	ldr	r3, [pc, #140]	; (8004274 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 80041e6:	681b      	ldr	r3, [r3, #0]
 80041e8:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
 80041ec:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 80041f0:	d038      	beq.n	8004264 <HAL_PWREx_ControlVoltageScaling+0x90>
    {
      /* Set Range 1 */
      MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE1);
 80041f2:	4b20      	ldr	r3, [pc, #128]	; (8004274 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 80041f4:	681b      	ldr	r3, [r3, #0]
 80041f6:	f423 63c0 	bic.w	r3, r3, #1536	; 0x600
 80041fa:	4a1e      	ldr	r2, [pc, #120]	; (8004274 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 80041fc:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8004200:	6013      	str	r3, [r2, #0]

      /* Wait until VOSF is cleared */
      wait_loop_index = ((PWR_FLAG_SETTING_DELAY_US * SystemCoreClock) / 1000000U) + 1U;
 8004202:	4b1d      	ldr	r3, [pc, #116]	; (8004278 <HAL_PWREx_ControlVoltageScaling+0xa4>)
 8004204:	681b      	ldr	r3, [r3, #0]
 8004206:	2232      	movs	r2, #50	; 0x32
 8004208:	fb02 f303 	mul.w	r3, r2, r3
 800420c:	4a1b      	ldr	r2, [pc, #108]	; (800427c <HAL_PWREx_ControlVoltageScaling+0xa8>)
 800420e:	fba2 2303 	umull	r2, r3, r2, r3
 8004212:	0c9b      	lsrs	r3, r3, #18
 8004214:	3301      	adds	r3, #1
 8004216:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 8004218:	e002      	b.n	8004220 <HAL_PWREx_ControlVoltageScaling+0x4c>
      {
        wait_loop_index--;
 800421a:	68fb      	ldr	r3, [r7, #12]
 800421c:	3b01      	subs	r3, #1
 800421e:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 8004220:	4b14      	ldr	r3, [pc, #80]	; (8004274 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8004222:	695b      	ldr	r3, [r3, #20]
 8004224:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8004228:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800422c:	d102      	bne.n	8004234 <HAL_PWREx_ControlVoltageScaling+0x60>
 800422e:	68fb      	ldr	r3, [r7, #12]
 8004230:	2b00      	cmp	r3, #0
 8004232:	d1f2      	bne.n	800421a <HAL_PWREx_ControlVoltageScaling+0x46>
      }
      if (HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF))
 8004234:	4b0f      	ldr	r3, [pc, #60]	; (8004274 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8004236:	695b      	ldr	r3, [r3, #20]
 8004238:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 800423c:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8004240:	d110      	bne.n	8004264 <HAL_PWREx_ControlVoltageScaling+0x90>
      {
        return HAL_TIMEOUT;
 8004242:	2303      	movs	r3, #3
 8004244:	e00f      	b.n	8004266 <HAL_PWREx_ControlVoltageScaling+0x92>
      }
    }
  }
  else
  {
    if (READ_BIT(PWR->CR1, PWR_CR1_VOS) != PWR_REGULATOR_VOLTAGE_SCALE2)
 8004246:	4b0b      	ldr	r3, [pc, #44]	; (8004274 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8004248:	681b      	ldr	r3, [r3, #0]
 800424a:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
 800424e:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8004252:	d007      	beq.n	8004264 <HAL_PWREx_ControlVoltageScaling+0x90>
    {
      /* Set Range 2 */
      MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE2);
 8004254:	4b07      	ldr	r3, [pc, #28]	; (8004274 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8004256:	681b      	ldr	r3, [r3, #0]
 8004258:	f423 63c0 	bic.w	r3, r3, #1536	; 0x600
 800425c:	4a05      	ldr	r2, [pc, #20]	; (8004274 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 800425e:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 8004262:	6013      	str	r3, [r2, #0]
      /* No need to wait for VOSF to be cleared for this transition */
    }
  }
#endif

  return HAL_OK;
 8004264:	2300      	movs	r3, #0
}
 8004266:	4618      	mov	r0, r3
 8004268:	3714      	adds	r7, #20
 800426a:	46bd      	mov	sp, r7
 800426c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004270:	4770      	bx	lr
 8004272:	bf00      	nop
 8004274:	40007000 	.word	0x40007000
 8004278:	20000000 	.word	0x20000000
 800427c:	431bde83 	.word	0x431bde83

08004280 <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8004280:	b580      	push	{r7, lr}
 8004282:	b088      	sub	sp, #32
 8004284:	af00      	add	r7, sp, #0
 8004286:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  HAL_StatusTypeDef status;
  uint32_t sysclk_source, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 8004288:	687b      	ldr	r3, [r7, #4]
 800428a:	2b00      	cmp	r3, #0
 800428c:	d101      	bne.n	8004292 <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 800428e:	2301      	movs	r3, #1
 8004290:	e3ca      	b.n	8004a28 <HAL_RCC_OscConfig+0x7a8>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  sysclk_source = __HAL_RCC_GET_SYSCLK_SOURCE();
 8004292:	4b97      	ldr	r3, [pc, #604]	; (80044f0 <HAL_RCC_OscConfig+0x270>)
 8004294:	689b      	ldr	r3, [r3, #8]
 8004296:	f003 030c 	and.w	r3, r3, #12
 800429a:	61bb      	str	r3, [r7, #24]
  pll_config = __HAL_RCC_GET_PLL_OSCSOURCE();
 800429c:	4b94      	ldr	r3, [pc, #592]	; (80044f0 <HAL_RCC_OscConfig+0x270>)
 800429e:	68db      	ldr	r3, [r3, #12]
 80042a0:	f003 0303 	and.w	r3, r3, #3
 80042a4:	617b      	str	r3, [r7, #20]

  /*----------------------------- MSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_MSI) == RCC_OSCILLATORTYPE_MSI)
 80042a6:	687b      	ldr	r3, [r7, #4]
 80042a8:	681b      	ldr	r3, [r3, #0]
 80042aa:	f003 0310 	and.w	r3, r3, #16
 80042ae:	2b00      	cmp	r3, #0
 80042b0:	f000 80e4 	beq.w	800447c <HAL_RCC_OscConfig+0x1fc>
    assert_param(IS_RCC_MSI(RCC_OscInitStruct->MSIState));
    assert_param(IS_RCC_MSICALIBRATION_VALUE(RCC_OscInitStruct->MSICalibrationValue));
    assert_param(IS_RCC_MSI_CLOCK_RANGE(RCC_OscInitStruct->MSIClockRange));

    /* Check if MSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((sysclk_source == RCC_CFGR_SWS_MSI) ||
 80042b4:	69bb      	ldr	r3, [r7, #24]
 80042b6:	2b00      	cmp	r3, #0
 80042b8:	d007      	beq.n	80042ca <HAL_RCC_OscConfig+0x4a>
 80042ba:	69bb      	ldr	r3, [r7, #24]
 80042bc:	2b0c      	cmp	r3, #12
 80042be:	f040 808b 	bne.w	80043d8 <HAL_RCC_OscConfig+0x158>
       ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_config == RCC_PLLSOURCE_MSI)))
 80042c2:	697b      	ldr	r3, [r7, #20]
 80042c4:	2b01      	cmp	r3, #1
 80042c6:	f040 8087 	bne.w	80043d8 <HAL_RCC_OscConfig+0x158>
    {
      if((READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U) && (RCC_OscInitStruct->MSIState == RCC_MSI_OFF))
 80042ca:	4b89      	ldr	r3, [pc, #548]	; (80044f0 <HAL_RCC_OscConfig+0x270>)
 80042cc:	681b      	ldr	r3, [r3, #0]
 80042ce:	f003 0302 	and.w	r3, r3, #2
 80042d2:	2b00      	cmp	r3, #0
 80042d4:	d005      	beq.n	80042e2 <HAL_RCC_OscConfig+0x62>
 80042d6:	687b      	ldr	r3, [r7, #4]
 80042d8:	699b      	ldr	r3, [r3, #24]
 80042da:	2b00      	cmp	r3, #0
 80042dc:	d101      	bne.n	80042e2 <HAL_RCC_OscConfig+0x62>
      {
        return HAL_ERROR;
 80042de:	2301      	movs	r3, #1
 80042e0:	e3a2      	b.n	8004a28 <HAL_RCC_OscConfig+0x7a8>
      else
      {
        /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
           must be correctly programmed according to the frequency of the CPU clock
           (HCLK) and the supply voltage of the device. */
        if(RCC_OscInitStruct->MSIClockRange > __HAL_RCC_GET_MSI_RANGE())
 80042e2:	687b      	ldr	r3, [r7, #4]
 80042e4:	6a1a      	ldr	r2, [r3, #32]
 80042e6:	4b82      	ldr	r3, [pc, #520]	; (80044f0 <HAL_RCC_OscConfig+0x270>)
 80042e8:	681b      	ldr	r3, [r3, #0]
 80042ea:	f003 0308 	and.w	r3, r3, #8
 80042ee:	2b00      	cmp	r3, #0
 80042f0:	d004      	beq.n	80042fc <HAL_RCC_OscConfig+0x7c>
 80042f2:	4b7f      	ldr	r3, [pc, #508]	; (80044f0 <HAL_RCC_OscConfig+0x270>)
 80042f4:	681b      	ldr	r3, [r3, #0]
 80042f6:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 80042fa:	e005      	b.n	8004308 <HAL_RCC_OscConfig+0x88>
 80042fc:	4b7c      	ldr	r3, [pc, #496]	; (80044f0 <HAL_RCC_OscConfig+0x270>)
 80042fe:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8004302:	091b      	lsrs	r3, r3, #4
 8004304:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8004308:	4293      	cmp	r3, r2
 800430a:	d223      	bcs.n	8004354 <HAL_RCC_OscConfig+0xd4>
        {
          /* First increase number of wait states update if necessary */
          if(RCC_SetFlashLatencyFromMSIRange(RCC_OscInitStruct->MSIClockRange) != HAL_OK)
 800430c:	687b      	ldr	r3, [r7, #4]
 800430e:	6a1b      	ldr	r3, [r3, #32]
 8004310:	4618      	mov	r0, r3
 8004312:	f000 fd55 	bl	8004dc0 <RCC_SetFlashLatencyFromMSIRange>
 8004316:	4603      	mov	r3, r0
 8004318:	2b00      	cmp	r3, #0
 800431a:	d001      	beq.n	8004320 <HAL_RCC_OscConfig+0xa0>
          {
            return HAL_ERROR;
 800431c:	2301      	movs	r3, #1
 800431e:	e383      	b.n	8004a28 <HAL_RCC_OscConfig+0x7a8>
          }

          /* Selects the Multiple Speed oscillator (MSI) clock range .*/
          __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 8004320:	4b73      	ldr	r3, [pc, #460]	; (80044f0 <HAL_RCC_OscConfig+0x270>)
 8004322:	681b      	ldr	r3, [r3, #0]
 8004324:	4a72      	ldr	r2, [pc, #456]	; (80044f0 <HAL_RCC_OscConfig+0x270>)
 8004326:	f043 0308 	orr.w	r3, r3, #8
 800432a:	6013      	str	r3, [r2, #0]
 800432c:	4b70      	ldr	r3, [pc, #448]	; (80044f0 <HAL_RCC_OscConfig+0x270>)
 800432e:	681b      	ldr	r3, [r3, #0]
 8004330:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8004334:	687b      	ldr	r3, [r7, #4]
 8004336:	6a1b      	ldr	r3, [r3, #32]
 8004338:	496d      	ldr	r1, [pc, #436]	; (80044f0 <HAL_RCC_OscConfig+0x270>)
 800433a:	4313      	orrs	r3, r2
 800433c:	600b      	str	r3, [r1, #0]
          /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
          __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 800433e:	4b6c      	ldr	r3, [pc, #432]	; (80044f0 <HAL_RCC_OscConfig+0x270>)
 8004340:	685b      	ldr	r3, [r3, #4]
 8004342:	f423 427f 	bic.w	r2, r3, #65280	; 0xff00
 8004346:	687b      	ldr	r3, [r7, #4]
 8004348:	69db      	ldr	r3, [r3, #28]
 800434a:	021b      	lsls	r3, r3, #8
 800434c:	4968      	ldr	r1, [pc, #416]	; (80044f0 <HAL_RCC_OscConfig+0x270>)
 800434e:	4313      	orrs	r3, r2
 8004350:	604b      	str	r3, [r1, #4]
 8004352:	e025      	b.n	80043a0 <HAL_RCC_OscConfig+0x120>
        }
        else
        {
          /* Else, keep current flash latency while decreasing applies */
          /* Selects the Multiple Speed oscillator (MSI) clock range .*/
          __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 8004354:	4b66      	ldr	r3, [pc, #408]	; (80044f0 <HAL_RCC_OscConfig+0x270>)
 8004356:	681b      	ldr	r3, [r3, #0]
 8004358:	4a65      	ldr	r2, [pc, #404]	; (80044f0 <HAL_RCC_OscConfig+0x270>)
 800435a:	f043 0308 	orr.w	r3, r3, #8
 800435e:	6013      	str	r3, [r2, #0]
 8004360:	4b63      	ldr	r3, [pc, #396]	; (80044f0 <HAL_RCC_OscConfig+0x270>)
 8004362:	681b      	ldr	r3, [r3, #0]
 8004364:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8004368:	687b      	ldr	r3, [r7, #4]
 800436a:	6a1b      	ldr	r3, [r3, #32]
 800436c:	4960      	ldr	r1, [pc, #384]	; (80044f0 <HAL_RCC_OscConfig+0x270>)
 800436e:	4313      	orrs	r3, r2
 8004370:	600b      	str	r3, [r1, #0]
          /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
          __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 8004372:	4b5f      	ldr	r3, [pc, #380]	; (80044f0 <HAL_RCC_OscConfig+0x270>)
 8004374:	685b      	ldr	r3, [r3, #4]
 8004376:	f423 427f 	bic.w	r2, r3, #65280	; 0xff00
 800437a:	687b      	ldr	r3, [r7, #4]
 800437c:	69db      	ldr	r3, [r3, #28]
 800437e:	021b      	lsls	r3, r3, #8
 8004380:	495b      	ldr	r1, [pc, #364]	; (80044f0 <HAL_RCC_OscConfig+0x270>)
 8004382:	4313      	orrs	r3, r2
 8004384:	604b      	str	r3, [r1, #4]

          /* Decrease number of wait states update if necessary */
          /* Only possible when MSI is the System clock source  */
          if(sysclk_source == RCC_CFGR_SWS_MSI)
 8004386:	69bb      	ldr	r3, [r7, #24]
 8004388:	2b00      	cmp	r3, #0
 800438a:	d109      	bne.n	80043a0 <HAL_RCC_OscConfig+0x120>
          {
            if(RCC_SetFlashLatencyFromMSIRange(RCC_OscInitStruct->MSIClockRange) != HAL_OK)
 800438c:	687b      	ldr	r3, [r7, #4]
 800438e:	6a1b      	ldr	r3, [r3, #32]
 8004390:	4618      	mov	r0, r3
 8004392:	f000 fd15 	bl	8004dc0 <RCC_SetFlashLatencyFromMSIRange>
 8004396:	4603      	mov	r3, r0
 8004398:	2b00      	cmp	r3, #0
 800439a:	d001      	beq.n	80043a0 <HAL_RCC_OscConfig+0x120>
            {
              return HAL_ERROR;
 800439c:	2301      	movs	r3, #1
 800439e:	e343      	b.n	8004a28 <HAL_RCC_OscConfig+0x7a8>
            }
          }
        }

        /* Update the SystemCoreClock global variable */
        SystemCoreClock = HAL_RCC_GetSysClockFreq() >> (AHBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos] & 0x1FU);
 80043a0:	f000 fc4a 	bl	8004c38 <HAL_RCC_GetSysClockFreq>
 80043a4:	4602      	mov	r2, r0
 80043a6:	4b52      	ldr	r3, [pc, #328]	; (80044f0 <HAL_RCC_OscConfig+0x270>)
 80043a8:	689b      	ldr	r3, [r3, #8]
 80043aa:	091b      	lsrs	r3, r3, #4
 80043ac:	f003 030f 	and.w	r3, r3, #15
 80043b0:	4950      	ldr	r1, [pc, #320]	; (80044f4 <HAL_RCC_OscConfig+0x274>)
 80043b2:	5ccb      	ldrb	r3, [r1, r3]
 80043b4:	f003 031f 	and.w	r3, r3, #31
 80043b8:	fa22 f303 	lsr.w	r3, r2, r3
 80043bc:	4a4e      	ldr	r2, [pc, #312]	; (80044f8 <HAL_RCC_OscConfig+0x278>)
 80043be:	6013      	str	r3, [r2, #0]

        /* Configure the source of time base considering new system clocks settings*/
        status = HAL_InitTick(uwTickPrio);
 80043c0:	4b4e      	ldr	r3, [pc, #312]	; (80044fc <HAL_RCC_OscConfig+0x27c>)
 80043c2:	681b      	ldr	r3, [r3, #0]
 80043c4:	4618      	mov	r0, r3
 80043c6:	f7fd fc3d 	bl	8001c44 <HAL_InitTick>
 80043ca:	4603      	mov	r3, r0
 80043cc:	73fb      	strb	r3, [r7, #15]
        if(status != HAL_OK)
 80043ce:	7bfb      	ldrb	r3, [r7, #15]
 80043d0:	2b00      	cmp	r3, #0
 80043d2:	d052      	beq.n	800447a <HAL_RCC_OscConfig+0x1fa>
        {
          return status;
 80043d4:	7bfb      	ldrb	r3, [r7, #15]
 80043d6:	e327      	b.n	8004a28 <HAL_RCC_OscConfig+0x7a8>
      }
    }
    else
    {
      /* Check the MSI State */
      if(RCC_OscInitStruct->MSIState != RCC_MSI_OFF)
 80043d8:	687b      	ldr	r3, [r7, #4]
 80043da:	699b      	ldr	r3, [r3, #24]
 80043dc:	2b00      	cmp	r3, #0
 80043de:	d032      	beq.n	8004446 <HAL_RCC_OscConfig+0x1c6>
      {
        /* Enable the Internal High Speed oscillator (MSI). */
        __HAL_RCC_MSI_ENABLE();
 80043e0:	4b43      	ldr	r3, [pc, #268]	; (80044f0 <HAL_RCC_OscConfig+0x270>)
 80043e2:	681b      	ldr	r3, [r3, #0]
 80043e4:	4a42      	ldr	r2, [pc, #264]	; (80044f0 <HAL_RCC_OscConfig+0x270>)
 80043e6:	f043 0301 	orr.w	r3, r3, #1
 80043ea:	6013      	str	r3, [r2, #0]

        /* Get timeout */
        tickstart = HAL_GetTick();
 80043ec:	f7fd fc7a 	bl	8001ce4 <HAL_GetTick>
 80043f0:	6138      	str	r0, [r7, #16]

        /* Wait till MSI is ready */
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) == 0U)
 80043f2:	e008      	b.n	8004406 <HAL_RCC_OscConfig+0x186>
        {
          if((HAL_GetTick() - tickstart) > MSI_TIMEOUT_VALUE)
 80043f4:	f7fd fc76 	bl	8001ce4 <HAL_GetTick>
 80043f8:	4602      	mov	r2, r0
 80043fa:	693b      	ldr	r3, [r7, #16]
 80043fc:	1ad3      	subs	r3, r2, r3
 80043fe:	2b02      	cmp	r3, #2
 8004400:	d901      	bls.n	8004406 <HAL_RCC_OscConfig+0x186>
          {
            return HAL_TIMEOUT;
 8004402:	2303      	movs	r3, #3
 8004404:	e310      	b.n	8004a28 <HAL_RCC_OscConfig+0x7a8>
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) == 0U)
 8004406:	4b3a      	ldr	r3, [pc, #232]	; (80044f0 <HAL_RCC_OscConfig+0x270>)
 8004408:	681b      	ldr	r3, [r3, #0]
 800440a:	f003 0302 	and.w	r3, r3, #2
 800440e:	2b00      	cmp	r3, #0
 8004410:	d0f0      	beq.n	80043f4 <HAL_RCC_OscConfig+0x174>
          }
        }
         /* Selects the Multiple Speed oscillator (MSI) clock range .*/
        __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 8004412:	4b37      	ldr	r3, [pc, #220]	; (80044f0 <HAL_RCC_OscConfig+0x270>)
 8004414:	681b      	ldr	r3, [r3, #0]
 8004416:	4a36      	ldr	r2, [pc, #216]	; (80044f0 <HAL_RCC_OscConfig+0x270>)
 8004418:	f043 0308 	orr.w	r3, r3, #8
 800441c:	6013      	str	r3, [r2, #0]
 800441e:	4b34      	ldr	r3, [pc, #208]	; (80044f0 <HAL_RCC_OscConfig+0x270>)
 8004420:	681b      	ldr	r3, [r3, #0]
 8004422:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8004426:	687b      	ldr	r3, [r7, #4]
 8004428:	6a1b      	ldr	r3, [r3, #32]
 800442a:	4931      	ldr	r1, [pc, #196]	; (80044f0 <HAL_RCC_OscConfig+0x270>)
 800442c:	4313      	orrs	r3, r2
 800442e:	600b      	str	r3, [r1, #0]
         /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
        __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 8004430:	4b2f      	ldr	r3, [pc, #188]	; (80044f0 <HAL_RCC_OscConfig+0x270>)
 8004432:	685b      	ldr	r3, [r3, #4]
 8004434:	f423 427f 	bic.w	r2, r3, #65280	; 0xff00
 8004438:	687b      	ldr	r3, [r7, #4]
 800443a:	69db      	ldr	r3, [r3, #28]
 800443c:	021b      	lsls	r3, r3, #8
 800443e:	492c      	ldr	r1, [pc, #176]	; (80044f0 <HAL_RCC_OscConfig+0x270>)
 8004440:	4313      	orrs	r3, r2
 8004442:	604b      	str	r3, [r1, #4]
 8004444:	e01a      	b.n	800447c <HAL_RCC_OscConfig+0x1fc>

      }
      else
      {
        /* Disable the Internal High Speed oscillator (MSI). */
        __HAL_RCC_MSI_DISABLE();
 8004446:	4b2a      	ldr	r3, [pc, #168]	; (80044f0 <HAL_RCC_OscConfig+0x270>)
 8004448:	681b      	ldr	r3, [r3, #0]
 800444a:	4a29      	ldr	r2, [pc, #164]	; (80044f0 <HAL_RCC_OscConfig+0x270>)
 800444c:	f023 0301 	bic.w	r3, r3, #1
 8004450:	6013      	str	r3, [r2, #0]

        /* Get timeout */
        tickstart = HAL_GetTick();
 8004452:	f7fd fc47 	bl	8001ce4 <HAL_GetTick>
 8004456:	6138      	str	r0, [r7, #16]

        /* Wait till MSI is ready */
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U)
 8004458:	e008      	b.n	800446c <HAL_RCC_OscConfig+0x1ec>
        {
          if((HAL_GetTick() - tickstart) > MSI_TIMEOUT_VALUE)
 800445a:	f7fd fc43 	bl	8001ce4 <HAL_GetTick>
 800445e:	4602      	mov	r2, r0
 8004460:	693b      	ldr	r3, [r7, #16]
 8004462:	1ad3      	subs	r3, r2, r3
 8004464:	2b02      	cmp	r3, #2
 8004466:	d901      	bls.n	800446c <HAL_RCC_OscConfig+0x1ec>
          {
            return HAL_TIMEOUT;
 8004468:	2303      	movs	r3, #3
 800446a:	e2dd      	b.n	8004a28 <HAL_RCC_OscConfig+0x7a8>
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U)
 800446c:	4b20      	ldr	r3, [pc, #128]	; (80044f0 <HAL_RCC_OscConfig+0x270>)
 800446e:	681b      	ldr	r3, [r3, #0]
 8004470:	f003 0302 	and.w	r3, r3, #2
 8004474:	2b00      	cmp	r3, #0
 8004476:	d1f0      	bne.n	800445a <HAL_RCC_OscConfig+0x1da>
 8004478:	e000      	b.n	800447c <HAL_RCC_OscConfig+0x1fc>
      if((READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U) && (RCC_OscInitStruct->MSIState == RCC_MSI_OFF))
 800447a:	bf00      	nop
        }
      }
    }
  }
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 800447c:	687b      	ldr	r3, [r7, #4]
 800447e:	681b      	ldr	r3, [r3, #0]
 8004480:	f003 0301 	and.w	r3, r3, #1
 8004484:	2b00      	cmp	r3, #0
 8004486:	d074      	beq.n	8004572 <HAL_RCC_OscConfig+0x2f2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if((sysclk_source == RCC_CFGR_SWS_HSE) ||
 8004488:	69bb      	ldr	r3, [r7, #24]
 800448a:	2b08      	cmp	r3, #8
 800448c:	d005      	beq.n	800449a <HAL_RCC_OscConfig+0x21a>
 800448e:	69bb      	ldr	r3, [r7, #24]
 8004490:	2b0c      	cmp	r3, #12
 8004492:	d10e      	bne.n	80044b2 <HAL_RCC_OscConfig+0x232>
       ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_config == RCC_PLLSOURCE_HSE)))
 8004494:	697b      	ldr	r3, [r7, #20]
 8004496:	2b03      	cmp	r3, #3
 8004498:	d10b      	bne.n	80044b2 <HAL_RCC_OscConfig+0x232>
    {
      if((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 800449a:	4b15      	ldr	r3, [pc, #84]	; (80044f0 <HAL_RCC_OscConfig+0x270>)
 800449c:	681b      	ldr	r3, [r3, #0]
 800449e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80044a2:	2b00      	cmp	r3, #0
 80044a4:	d064      	beq.n	8004570 <HAL_RCC_OscConfig+0x2f0>
 80044a6:	687b      	ldr	r3, [r7, #4]
 80044a8:	685b      	ldr	r3, [r3, #4]
 80044aa:	2b00      	cmp	r3, #0
 80044ac:	d160      	bne.n	8004570 <HAL_RCC_OscConfig+0x2f0>
      {
        return HAL_ERROR;
 80044ae:	2301      	movs	r3, #1
 80044b0:	e2ba      	b.n	8004a28 <HAL_RCC_OscConfig+0x7a8>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 80044b2:	687b      	ldr	r3, [r7, #4]
 80044b4:	685b      	ldr	r3, [r3, #4]
 80044b6:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80044ba:	d106      	bne.n	80044ca <HAL_RCC_OscConfig+0x24a>
 80044bc:	4b0c      	ldr	r3, [pc, #48]	; (80044f0 <HAL_RCC_OscConfig+0x270>)
 80044be:	681b      	ldr	r3, [r3, #0]
 80044c0:	4a0b      	ldr	r2, [pc, #44]	; (80044f0 <HAL_RCC_OscConfig+0x270>)
 80044c2:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80044c6:	6013      	str	r3, [r2, #0]
 80044c8:	e026      	b.n	8004518 <HAL_RCC_OscConfig+0x298>
 80044ca:	687b      	ldr	r3, [r7, #4]
 80044cc:	685b      	ldr	r3, [r3, #4]
 80044ce:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 80044d2:	d115      	bne.n	8004500 <HAL_RCC_OscConfig+0x280>
 80044d4:	4b06      	ldr	r3, [pc, #24]	; (80044f0 <HAL_RCC_OscConfig+0x270>)
 80044d6:	681b      	ldr	r3, [r3, #0]
 80044d8:	4a05      	ldr	r2, [pc, #20]	; (80044f0 <HAL_RCC_OscConfig+0x270>)
 80044da:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 80044de:	6013      	str	r3, [r2, #0]
 80044e0:	4b03      	ldr	r3, [pc, #12]	; (80044f0 <HAL_RCC_OscConfig+0x270>)
 80044e2:	681b      	ldr	r3, [r3, #0]
 80044e4:	4a02      	ldr	r2, [pc, #8]	; (80044f0 <HAL_RCC_OscConfig+0x270>)
 80044e6:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80044ea:	6013      	str	r3, [r2, #0]
 80044ec:	e014      	b.n	8004518 <HAL_RCC_OscConfig+0x298>
 80044ee:	bf00      	nop
 80044f0:	40021000 	.word	0x40021000
 80044f4:	0800b9b4 	.word	0x0800b9b4
 80044f8:	20000000 	.word	0x20000000
 80044fc:	20000004 	.word	0x20000004
 8004500:	4ba0      	ldr	r3, [pc, #640]	; (8004784 <HAL_RCC_OscConfig+0x504>)
 8004502:	681b      	ldr	r3, [r3, #0]
 8004504:	4a9f      	ldr	r2, [pc, #636]	; (8004784 <HAL_RCC_OscConfig+0x504>)
 8004506:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 800450a:	6013      	str	r3, [r2, #0]
 800450c:	4b9d      	ldr	r3, [pc, #628]	; (8004784 <HAL_RCC_OscConfig+0x504>)
 800450e:	681b      	ldr	r3, [r3, #0]
 8004510:	4a9c      	ldr	r2, [pc, #624]	; (8004784 <HAL_RCC_OscConfig+0x504>)
 8004512:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8004516:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if(RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8004518:	687b      	ldr	r3, [r7, #4]
 800451a:	685b      	ldr	r3, [r3, #4]
 800451c:	2b00      	cmp	r3, #0
 800451e:	d013      	beq.n	8004548 <HAL_RCC_OscConfig+0x2c8>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8004520:	f7fd fbe0 	bl	8001ce4 <HAL_GetTick>
 8004524:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8004526:	e008      	b.n	800453a <HAL_RCC_OscConfig+0x2ba>
        {
          if((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8004528:	f7fd fbdc 	bl	8001ce4 <HAL_GetTick>
 800452c:	4602      	mov	r2, r0
 800452e:	693b      	ldr	r3, [r7, #16]
 8004530:	1ad3      	subs	r3, r2, r3
 8004532:	2b64      	cmp	r3, #100	; 0x64
 8004534:	d901      	bls.n	800453a <HAL_RCC_OscConfig+0x2ba>
          {
            return HAL_TIMEOUT;
 8004536:	2303      	movs	r3, #3
 8004538:	e276      	b.n	8004a28 <HAL_RCC_OscConfig+0x7a8>
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 800453a:	4b92      	ldr	r3, [pc, #584]	; (8004784 <HAL_RCC_OscConfig+0x504>)
 800453c:	681b      	ldr	r3, [r3, #0]
 800453e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8004542:	2b00      	cmp	r3, #0
 8004544:	d0f0      	beq.n	8004528 <HAL_RCC_OscConfig+0x2a8>
 8004546:	e014      	b.n	8004572 <HAL_RCC_OscConfig+0x2f2>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8004548:	f7fd fbcc 	bl	8001ce4 <HAL_GetTick>
 800454c:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is disabled */
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 800454e:	e008      	b.n	8004562 <HAL_RCC_OscConfig+0x2e2>
        {
          if((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8004550:	f7fd fbc8 	bl	8001ce4 <HAL_GetTick>
 8004554:	4602      	mov	r2, r0
 8004556:	693b      	ldr	r3, [r7, #16]
 8004558:	1ad3      	subs	r3, r2, r3
 800455a:	2b64      	cmp	r3, #100	; 0x64
 800455c:	d901      	bls.n	8004562 <HAL_RCC_OscConfig+0x2e2>
          {
            return HAL_TIMEOUT;
 800455e:	2303      	movs	r3, #3
 8004560:	e262      	b.n	8004a28 <HAL_RCC_OscConfig+0x7a8>
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 8004562:	4b88      	ldr	r3, [pc, #544]	; (8004784 <HAL_RCC_OscConfig+0x504>)
 8004564:	681b      	ldr	r3, [r3, #0]
 8004566:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800456a:	2b00      	cmp	r3, #0
 800456c:	d1f0      	bne.n	8004550 <HAL_RCC_OscConfig+0x2d0>
 800456e:	e000      	b.n	8004572 <HAL_RCC_OscConfig+0x2f2>
      if((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8004570:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8004572:	687b      	ldr	r3, [r7, #4]
 8004574:	681b      	ldr	r3, [r3, #0]
 8004576:	f003 0302 	and.w	r3, r3, #2
 800457a:	2b00      	cmp	r3, #0
 800457c:	d060      	beq.n	8004640 <HAL_RCC_OscConfig+0x3c0>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_HSI_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((sysclk_source == RCC_CFGR_SWS_HSI) ||
 800457e:	69bb      	ldr	r3, [r7, #24]
 8004580:	2b04      	cmp	r3, #4
 8004582:	d005      	beq.n	8004590 <HAL_RCC_OscConfig+0x310>
 8004584:	69bb      	ldr	r3, [r7, #24]
 8004586:	2b0c      	cmp	r3, #12
 8004588:	d119      	bne.n	80045be <HAL_RCC_OscConfig+0x33e>
       ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_config == RCC_PLLSOURCE_HSI)))
 800458a:	697b      	ldr	r3, [r7, #20]
 800458c:	2b02      	cmp	r3, #2
 800458e:	d116      	bne.n	80045be <HAL_RCC_OscConfig+0x33e>
    {
      /* When HSI is used as system clock it will not be disabled */
      if((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8004590:	4b7c      	ldr	r3, [pc, #496]	; (8004784 <HAL_RCC_OscConfig+0x504>)
 8004592:	681b      	ldr	r3, [r3, #0]
 8004594:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8004598:	2b00      	cmp	r3, #0
 800459a:	d005      	beq.n	80045a8 <HAL_RCC_OscConfig+0x328>
 800459c:	687b      	ldr	r3, [r7, #4]
 800459e:	68db      	ldr	r3, [r3, #12]
 80045a0:	2b00      	cmp	r3, #0
 80045a2:	d101      	bne.n	80045a8 <HAL_RCC_OscConfig+0x328>
      {
        return HAL_ERROR;
 80045a4:	2301      	movs	r3, #1
 80045a6:	e23f      	b.n	8004a28 <HAL_RCC_OscConfig+0x7a8>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80045a8:	4b76      	ldr	r3, [pc, #472]	; (8004784 <HAL_RCC_OscConfig+0x504>)
 80045aa:	685b      	ldr	r3, [r3, #4]
 80045ac:	f023 52f8 	bic.w	r2, r3, #520093696	; 0x1f000000
 80045b0:	687b      	ldr	r3, [r7, #4]
 80045b2:	691b      	ldr	r3, [r3, #16]
 80045b4:	061b      	lsls	r3, r3, #24
 80045b6:	4973      	ldr	r1, [pc, #460]	; (8004784 <HAL_RCC_OscConfig+0x504>)
 80045b8:	4313      	orrs	r3, r2
 80045ba:	604b      	str	r3, [r1, #4]
      if((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 80045bc:	e040      	b.n	8004640 <HAL_RCC_OscConfig+0x3c0>
      }
    }
    else
    {
      /* Check the HSI State */
      if(RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 80045be:	687b      	ldr	r3, [r7, #4]
 80045c0:	68db      	ldr	r3, [r3, #12]
 80045c2:	2b00      	cmp	r3, #0
 80045c4:	d023      	beq.n	800460e <HAL_RCC_OscConfig+0x38e>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 80045c6:	4b6f      	ldr	r3, [pc, #444]	; (8004784 <HAL_RCC_OscConfig+0x504>)
 80045c8:	681b      	ldr	r3, [r3, #0]
 80045ca:	4a6e      	ldr	r2, [pc, #440]	; (8004784 <HAL_RCC_OscConfig+0x504>)
 80045cc:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80045d0:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80045d2:	f7fd fb87 	bl	8001ce4 <HAL_GetTick>
 80045d6:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 80045d8:	e008      	b.n	80045ec <HAL_RCC_OscConfig+0x36c>
        {
          if((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 80045da:	f7fd fb83 	bl	8001ce4 <HAL_GetTick>
 80045de:	4602      	mov	r2, r0
 80045e0:	693b      	ldr	r3, [r7, #16]
 80045e2:	1ad3      	subs	r3, r2, r3
 80045e4:	2b02      	cmp	r3, #2
 80045e6:	d901      	bls.n	80045ec <HAL_RCC_OscConfig+0x36c>
          {
            return HAL_TIMEOUT;
 80045e8:	2303      	movs	r3, #3
 80045ea:	e21d      	b.n	8004a28 <HAL_RCC_OscConfig+0x7a8>
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 80045ec:	4b65      	ldr	r3, [pc, #404]	; (8004784 <HAL_RCC_OscConfig+0x504>)
 80045ee:	681b      	ldr	r3, [r3, #0]
 80045f0:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80045f4:	2b00      	cmp	r3, #0
 80045f6:	d0f0      	beq.n	80045da <HAL_RCC_OscConfig+0x35a>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80045f8:	4b62      	ldr	r3, [pc, #392]	; (8004784 <HAL_RCC_OscConfig+0x504>)
 80045fa:	685b      	ldr	r3, [r3, #4]
 80045fc:	f023 52f8 	bic.w	r2, r3, #520093696	; 0x1f000000
 8004600:	687b      	ldr	r3, [r7, #4]
 8004602:	691b      	ldr	r3, [r3, #16]
 8004604:	061b      	lsls	r3, r3, #24
 8004606:	495f      	ldr	r1, [pc, #380]	; (8004784 <HAL_RCC_OscConfig+0x504>)
 8004608:	4313      	orrs	r3, r2
 800460a:	604b      	str	r3, [r1, #4]
 800460c:	e018      	b.n	8004640 <HAL_RCC_OscConfig+0x3c0>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 800460e:	4b5d      	ldr	r3, [pc, #372]	; (8004784 <HAL_RCC_OscConfig+0x504>)
 8004610:	681b      	ldr	r3, [r3, #0]
 8004612:	4a5c      	ldr	r2, [pc, #368]	; (8004784 <HAL_RCC_OscConfig+0x504>)
 8004614:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8004618:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800461a:	f7fd fb63 	bl	8001ce4 <HAL_GetTick>
 800461e:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is disabled */
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 8004620:	e008      	b.n	8004634 <HAL_RCC_OscConfig+0x3b4>
        {
          if((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8004622:	f7fd fb5f 	bl	8001ce4 <HAL_GetTick>
 8004626:	4602      	mov	r2, r0
 8004628:	693b      	ldr	r3, [r7, #16]
 800462a:	1ad3      	subs	r3, r2, r3
 800462c:	2b02      	cmp	r3, #2
 800462e:	d901      	bls.n	8004634 <HAL_RCC_OscConfig+0x3b4>
          {
            return HAL_TIMEOUT;
 8004630:	2303      	movs	r3, #3
 8004632:	e1f9      	b.n	8004a28 <HAL_RCC_OscConfig+0x7a8>
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 8004634:	4b53      	ldr	r3, [pc, #332]	; (8004784 <HAL_RCC_OscConfig+0x504>)
 8004636:	681b      	ldr	r3, [r3, #0]
 8004638:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 800463c:	2b00      	cmp	r3, #0
 800463e:	d1f0      	bne.n	8004622 <HAL_RCC_OscConfig+0x3a2>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8004640:	687b      	ldr	r3, [r7, #4]
 8004642:	681b      	ldr	r3, [r3, #0]
 8004644:	f003 0308 	and.w	r3, r3, #8
 8004648:	2b00      	cmp	r3, #0
 800464a:	d03c      	beq.n	80046c6 <HAL_RCC_OscConfig+0x446>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if(RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 800464c:	687b      	ldr	r3, [r7, #4]
 800464e:	695b      	ldr	r3, [r3, #20]
 8004650:	2b00      	cmp	r3, #0
 8004652:	d01c      	beq.n	800468e <HAL_RCC_OscConfig+0x40e>
        MODIFY_REG(RCC->CSR, RCC_CSR_LSIPREDIV, RCC_OscInitStruct->LSIDiv);
      }
#endif /* RCC_CSR_LSIPREDIV */

      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8004654:	4b4b      	ldr	r3, [pc, #300]	; (8004784 <HAL_RCC_OscConfig+0x504>)
 8004656:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 800465a:	4a4a      	ldr	r2, [pc, #296]	; (8004784 <HAL_RCC_OscConfig+0x504>)
 800465c:	f043 0301 	orr.w	r3, r3, #1
 8004660:	f8c2 3094 	str.w	r3, [r2, #148]	; 0x94

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8004664:	f7fd fb3e 	bl	8001ce4 <HAL_GetTick>
 8004668:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 800466a:	e008      	b.n	800467e <HAL_RCC_OscConfig+0x3fe>
      {
        if((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 800466c:	f7fd fb3a 	bl	8001ce4 <HAL_GetTick>
 8004670:	4602      	mov	r2, r0
 8004672:	693b      	ldr	r3, [r7, #16]
 8004674:	1ad3      	subs	r3, r2, r3
 8004676:	2b02      	cmp	r3, #2
 8004678:	d901      	bls.n	800467e <HAL_RCC_OscConfig+0x3fe>
        {
          return HAL_TIMEOUT;
 800467a:	2303      	movs	r3, #3
 800467c:	e1d4      	b.n	8004a28 <HAL_RCC_OscConfig+0x7a8>
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 800467e:	4b41      	ldr	r3, [pc, #260]	; (8004784 <HAL_RCC_OscConfig+0x504>)
 8004680:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8004684:	f003 0302 	and.w	r3, r3, #2
 8004688:	2b00      	cmp	r3, #0
 800468a:	d0ef      	beq.n	800466c <HAL_RCC_OscConfig+0x3ec>
 800468c:	e01b      	b.n	80046c6 <HAL_RCC_OscConfig+0x446>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 800468e:	4b3d      	ldr	r3, [pc, #244]	; (8004784 <HAL_RCC_OscConfig+0x504>)
 8004690:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8004694:	4a3b      	ldr	r2, [pc, #236]	; (8004784 <HAL_RCC_OscConfig+0x504>)
 8004696:	f023 0301 	bic.w	r3, r3, #1
 800469a:	f8c2 3094 	str.w	r3, [r2, #148]	; 0x94

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800469e:	f7fd fb21 	bl	8001ce4 <HAL_GetTick>
 80046a2:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is disabled */
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 80046a4:	e008      	b.n	80046b8 <HAL_RCC_OscConfig+0x438>
      {
        if((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 80046a6:	f7fd fb1d 	bl	8001ce4 <HAL_GetTick>
 80046aa:	4602      	mov	r2, r0
 80046ac:	693b      	ldr	r3, [r7, #16]
 80046ae:	1ad3      	subs	r3, r2, r3
 80046b0:	2b02      	cmp	r3, #2
 80046b2:	d901      	bls.n	80046b8 <HAL_RCC_OscConfig+0x438>
        {
          return HAL_TIMEOUT;
 80046b4:	2303      	movs	r3, #3
 80046b6:	e1b7      	b.n	8004a28 <HAL_RCC_OscConfig+0x7a8>
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 80046b8:	4b32      	ldr	r3, [pc, #200]	; (8004784 <HAL_RCC_OscConfig+0x504>)
 80046ba:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 80046be:	f003 0302 	and.w	r3, r3, #2
 80046c2:	2b00      	cmp	r3, #0
 80046c4:	d1ef      	bne.n	80046a6 <HAL_RCC_OscConfig+0x426>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 80046c6:	687b      	ldr	r3, [r7, #4]
 80046c8:	681b      	ldr	r3, [r3, #0]
 80046ca:	f003 0304 	and.w	r3, r3, #4
 80046ce:	2b00      	cmp	r3, #0
 80046d0:	f000 80a6 	beq.w	8004820 <HAL_RCC_OscConfig+0x5a0>
  {
    FlagStatus       pwrclkchanged = RESET;
 80046d4:	2300      	movs	r3, #0
 80046d6:	77fb      	strb	r3, [r7, #31]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(HAL_IS_BIT_CLR(RCC->APB1ENR1, RCC_APB1ENR1_PWREN))
 80046d8:	4b2a      	ldr	r3, [pc, #168]	; (8004784 <HAL_RCC_OscConfig+0x504>)
 80046da:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80046dc:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80046e0:	2b00      	cmp	r3, #0
 80046e2:	d10d      	bne.n	8004700 <HAL_RCC_OscConfig+0x480>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 80046e4:	4b27      	ldr	r3, [pc, #156]	; (8004784 <HAL_RCC_OscConfig+0x504>)
 80046e6:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80046e8:	4a26      	ldr	r2, [pc, #152]	; (8004784 <HAL_RCC_OscConfig+0x504>)
 80046ea:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80046ee:	6593      	str	r3, [r2, #88]	; 0x58
 80046f0:	4b24      	ldr	r3, [pc, #144]	; (8004784 <HAL_RCC_OscConfig+0x504>)
 80046f2:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80046f4:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80046f8:	60bb      	str	r3, [r7, #8]
 80046fa:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 80046fc:	2301      	movs	r3, #1
 80046fe:	77fb      	strb	r3, [r7, #31]
    }

    if(HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8004700:	4b21      	ldr	r3, [pc, #132]	; (8004788 <HAL_RCC_OscConfig+0x508>)
 8004702:	681b      	ldr	r3, [r3, #0]
 8004704:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8004708:	2b00      	cmp	r3, #0
 800470a:	d118      	bne.n	800473e <HAL_RCC_OscConfig+0x4be>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR1, PWR_CR1_DBP);
 800470c:	4b1e      	ldr	r3, [pc, #120]	; (8004788 <HAL_RCC_OscConfig+0x508>)
 800470e:	681b      	ldr	r3, [r3, #0]
 8004710:	4a1d      	ldr	r2, [pc, #116]	; (8004788 <HAL_RCC_OscConfig+0x508>)
 8004712:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8004716:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8004718:	f7fd fae4 	bl	8001ce4 <HAL_GetTick>
 800471c:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 800471e:	e008      	b.n	8004732 <HAL_RCC_OscConfig+0x4b2>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8004720:	f7fd fae0 	bl	8001ce4 <HAL_GetTick>
 8004724:	4602      	mov	r2, r0
 8004726:	693b      	ldr	r3, [r7, #16]
 8004728:	1ad3      	subs	r3, r2, r3
 800472a:	2b02      	cmp	r3, #2
 800472c:	d901      	bls.n	8004732 <HAL_RCC_OscConfig+0x4b2>
        {
          return HAL_TIMEOUT;
 800472e:	2303      	movs	r3, #3
 8004730:	e17a      	b.n	8004a28 <HAL_RCC_OscConfig+0x7a8>
      while(HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8004732:	4b15      	ldr	r3, [pc, #84]	; (8004788 <HAL_RCC_OscConfig+0x508>)
 8004734:	681b      	ldr	r3, [r3, #0]
 8004736:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800473a:	2b00      	cmp	r3, #0
 800473c:	d0f0      	beq.n	8004720 <HAL_RCC_OscConfig+0x4a0>
    {
      CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSEON);
      CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSEBYP);
    }
#else
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 800473e:	687b      	ldr	r3, [r7, #4]
 8004740:	689b      	ldr	r3, [r3, #8]
 8004742:	2b01      	cmp	r3, #1
 8004744:	d108      	bne.n	8004758 <HAL_RCC_OscConfig+0x4d8>
 8004746:	4b0f      	ldr	r3, [pc, #60]	; (8004784 <HAL_RCC_OscConfig+0x504>)
 8004748:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800474c:	4a0d      	ldr	r2, [pc, #52]	; (8004784 <HAL_RCC_OscConfig+0x504>)
 800474e:	f043 0301 	orr.w	r3, r3, #1
 8004752:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 8004756:	e029      	b.n	80047ac <HAL_RCC_OscConfig+0x52c>
 8004758:	687b      	ldr	r3, [r7, #4]
 800475a:	689b      	ldr	r3, [r3, #8]
 800475c:	2b05      	cmp	r3, #5
 800475e:	d115      	bne.n	800478c <HAL_RCC_OscConfig+0x50c>
 8004760:	4b08      	ldr	r3, [pc, #32]	; (8004784 <HAL_RCC_OscConfig+0x504>)
 8004762:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8004766:	4a07      	ldr	r2, [pc, #28]	; (8004784 <HAL_RCC_OscConfig+0x504>)
 8004768:	f043 0304 	orr.w	r3, r3, #4
 800476c:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 8004770:	4b04      	ldr	r3, [pc, #16]	; (8004784 <HAL_RCC_OscConfig+0x504>)
 8004772:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8004776:	4a03      	ldr	r2, [pc, #12]	; (8004784 <HAL_RCC_OscConfig+0x504>)
 8004778:	f043 0301 	orr.w	r3, r3, #1
 800477c:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 8004780:	e014      	b.n	80047ac <HAL_RCC_OscConfig+0x52c>
 8004782:	bf00      	nop
 8004784:	40021000 	.word	0x40021000
 8004788:	40007000 	.word	0x40007000
 800478c:	4b9c      	ldr	r3, [pc, #624]	; (8004a00 <HAL_RCC_OscConfig+0x780>)
 800478e:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8004792:	4a9b      	ldr	r2, [pc, #620]	; (8004a00 <HAL_RCC_OscConfig+0x780>)
 8004794:	f023 0301 	bic.w	r3, r3, #1
 8004798:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 800479c:	4b98      	ldr	r3, [pc, #608]	; (8004a00 <HAL_RCC_OscConfig+0x780>)
 800479e:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80047a2:	4a97      	ldr	r2, [pc, #604]	; (8004a00 <HAL_RCC_OscConfig+0x780>)
 80047a4:	f023 0304 	bic.w	r3, r3, #4
 80047a8:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
#endif /* RCC_BDCR_LSESYSDIS */

    /* Check the LSE State */
    if(RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 80047ac:	687b      	ldr	r3, [r7, #4]
 80047ae:	689b      	ldr	r3, [r3, #8]
 80047b0:	2b00      	cmp	r3, #0
 80047b2:	d016      	beq.n	80047e2 <HAL_RCC_OscConfig+0x562>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80047b4:	f7fd fa96 	bl	8001ce4 <HAL_GetTick>
 80047b8:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 80047ba:	e00a      	b.n	80047d2 <HAL_RCC_OscConfig+0x552>
      {
        if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80047bc:	f7fd fa92 	bl	8001ce4 <HAL_GetTick>
 80047c0:	4602      	mov	r2, r0
 80047c2:	693b      	ldr	r3, [r7, #16]
 80047c4:	1ad3      	subs	r3, r2, r3
 80047c6:	f241 3288 	movw	r2, #5000	; 0x1388
 80047ca:	4293      	cmp	r3, r2
 80047cc:	d901      	bls.n	80047d2 <HAL_RCC_OscConfig+0x552>
        {
          return HAL_TIMEOUT;
 80047ce:	2303      	movs	r3, #3
 80047d0:	e12a      	b.n	8004a28 <HAL_RCC_OscConfig+0x7a8>
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 80047d2:	4b8b      	ldr	r3, [pc, #556]	; (8004a00 <HAL_RCC_OscConfig+0x780>)
 80047d4:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80047d8:	f003 0302 	and.w	r3, r3, #2
 80047dc:	2b00      	cmp	r3, #0
 80047de:	d0ed      	beq.n	80047bc <HAL_RCC_OscConfig+0x53c>
 80047e0:	e015      	b.n	800480e <HAL_RCC_OscConfig+0x58e>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80047e2:	f7fd fa7f 	bl	8001ce4 <HAL_GetTick>
 80047e6:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is disabled */
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 80047e8:	e00a      	b.n	8004800 <HAL_RCC_OscConfig+0x580>
      {
        if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80047ea:	f7fd fa7b 	bl	8001ce4 <HAL_GetTick>
 80047ee:	4602      	mov	r2, r0
 80047f0:	693b      	ldr	r3, [r7, #16]
 80047f2:	1ad3      	subs	r3, r2, r3
 80047f4:	f241 3288 	movw	r2, #5000	; 0x1388
 80047f8:	4293      	cmp	r3, r2
 80047fa:	d901      	bls.n	8004800 <HAL_RCC_OscConfig+0x580>
        {
          return HAL_TIMEOUT;
 80047fc:	2303      	movs	r3, #3
 80047fe:	e113      	b.n	8004a28 <HAL_RCC_OscConfig+0x7a8>
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 8004800:	4b7f      	ldr	r3, [pc, #508]	; (8004a00 <HAL_RCC_OscConfig+0x780>)
 8004802:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8004806:	f003 0302 	and.w	r3, r3, #2
 800480a:	2b00      	cmp	r3, #0
 800480c:	d1ed      	bne.n	80047ea <HAL_RCC_OscConfig+0x56a>
      CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSESYSDIS);
#endif /* RCC_BDCR_LSESYSDIS */
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 800480e:	7ffb      	ldrb	r3, [r7, #31]
 8004810:	2b01      	cmp	r3, #1
 8004812:	d105      	bne.n	8004820 <HAL_RCC_OscConfig+0x5a0>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8004814:	4b7a      	ldr	r3, [pc, #488]	; (8004a00 <HAL_RCC_OscConfig+0x780>)
 8004816:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8004818:	4a79      	ldr	r2, [pc, #484]	; (8004a00 <HAL_RCC_OscConfig+0x780>)
 800481a:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 800481e:	6593      	str	r3, [r2, #88]	; 0x58
#endif /* RCC_HSI48_SUPPORT */
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));

  if(RCC_OscInitStruct->PLL.PLLState != RCC_PLL_NONE)
 8004820:	687b      	ldr	r3, [r7, #4]
 8004822:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004824:	2b00      	cmp	r3, #0
 8004826:	f000 80fe 	beq.w	8004a26 <HAL_RCC_OscConfig+0x7a6>
  {
    /* PLL On ? */
    if(RCC_OscInitStruct->PLL.PLLState == RCC_PLL_ON)
 800482a:	687b      	ldr	r3, [r7, #4]
 800482c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800482e:	2b02      	cmp	r3, #2
 8004830:	f040 80d0 	bne.w	80049d4 <HAL_RCC_OscConfig+0x754>
#endif /* RCC_PLLP_SUPPORT */
      assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));
      assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));

      /* Do nothing if PLL configuration is the unchanged */
      pll_config = RCC->PLLCFGR;
 8004834:	4b72      	ldr	r3, [pc, #456]	; (8004a00 <HAL_RCC_OscConfig+0x780>)
 8004836:	68db      	ldr	r3, [r3, #12]
 8004838:	617b      	str	r3, [r7, #20]
      if((READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC)  != RCC_OscInitStruct->PLL.PLLSource) ||
 800483a:	697b      	ldr	r3, [r7, #20]
 800483c:	f003 0203 	and.w	r2, r3, #3
 8004840:	687b      	ldr	r3, [r7, #4]
 8004842:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004844:	429a      	cmp	r2, r3
 8004846:	d130      	bne.n	80048aa <HAL_RCC_OscConfig+0x62a>
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLM)    != ((RCC_OscInitStruct->PLL.PLLM - 1U) << RCC_PLLCFGR_PLLM_Pos)) ||
 8004848:	697b      	ldr	r3, [r7, #20]
 800484a:	f003 0270 	and.w	r2, r3, #112	; 0x70
 800484e:	687b      	ldr	r3, [r7, #4]
 8004850:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004852:	3b01      	subs	r3, #1
 8004854:	011b      	lsls	r3, r3, #4
      if((READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC)  != RCC_OscInitStruct->PLL.PLLSource) ||
 8004856:	429a      	cmp	r2, r3
 8004858:	d127      	bne.n	80048aa <HAL_RCC_OscConfig+0x62a>
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLN)    != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 800485a:	697b      	ldr	r3, [r7, #20]
 800485c:	f403 42fe 	and.w	r2, r3, #32512	; 0x7f00
 8004860:	687b      	ldr	r3, [r7, #4]
 8004862:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8004864:	021b      	lsls	r3, r3, #8
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLM)    != ((RCC_OscInitStruct->PLL.PLLM - 1U) << RCC_PLLCFGR_PLLM_Pos)) ||
 8004866:	429a      	cmp	r2, r3
 8004868:	d11f      	bne.n	80048aa <HAL_RCC_OscConfig+0x62a>
#if defined(RCC_PLLP_SUPPORT)
#if defined(RCC_PLLP_DIV_2_31_SUPPORT)
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLPDIV) != (RCC_OscInitStruct->PLL.PLLP << RCC_PLLCFGR_PLLPDIV_Pos)) ||
#else
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLP)    != ((RCC_OscInitStruct->PLL.PLLP == RCC_PLLP_DIV7) ? 0U : 1U)) ||
 800486a:	697b      	ldr	r3, [r7, #20]
 800486c:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8004870:	687a      	ldr	r2, [r7, #4]
 8004872:	6b92      	ldr	r2, [r2, #56]	; 0x38
 8004874:	2a07      	cmp	r2, #7
 8004876:	bf14      	ite	ne
 8004878:	2201      	movne	r2, #1
 800487a:	2200      	moveq	r2, #0
 800487c:	b2d2      	uxtb	r2, r2
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLN)    != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 800487e:	4293      	cmp	r3, r2
 8004880:	d113      	bne.n	80048aa <HAL_RCC_OscConfig+0x62a>
#endif
#endif
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ)    != ((((RCC_OscInitStruct->PLL.PLLQ) >> 1U) - 1U) << RCC_PLLCFGR_PLLQ_Pos)) ||
 8004882:	697b      	ldr	r3, [r7, #20]
 8004884:	f403 02c0 	and.w	r2, r3, #6291456	; 0x600000
 8004888:	687b      	ldr	r3, [r7, #4]
 800488a:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800488c:	085b      	lsrs	r3, r3, #1
 800488e:	3b01      	subs	r3, #1
 8004890:	055b      	lsls	r3, r3, #21
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLP)    != ((RCC_OscInitStruct->PLL.PLLP == RCC_PLLP_DIV7) ? 0U : 1U)) ||
 8004892:	429a      	cmp	r2, r3
 8004894:	d109      	bne.n	80048aa <HAL_RCC_OscConfig+0x62a>
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLR)    != ((((RCC_OscInitStruct->PLL.PLLR) >> 1U) - 1U) << RCC_PLLCFGR_PLLR_Pos)))
 8004896:	697b      	ldr	r3, [r7, #20]
 8004898:	f003 62c0 	and.w	r2, r3, #100663296	; 0x6000000
 800489c:	687b      	ldr	r3, [r7, #4]
 800489e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80048a0:	085b      	lsrs	r3, r3, #1
 80048a2:	3b01      	subs	r3, #1
 80048a4:	065b      	lsls	r3, r3, #25
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ)    != ((((RCC_OscInitStruct->PLL.PLLQ) >> 1U) - 1U) << RCC_PLLCFGR_PLLQ_Pos)) ||
 80048a6:	429a      	cmp	r2, r3
 80048a8:	d06e      	beq.n	8004988 <HAL_RCC_OscConfig+0x708>
      {
        /* Check if the PLL is used as system clock or not */
        if(sysclk_source != RCC_CFGR_SWS_PLL)
 80048aa:	69bb      	ldr	r3, [r7, #24]
 80048ac:	2b0c      	cmp	r3, #12
 80048ae:	d069      	beq.n	8004984 <HAL_RCC_OscConfig+0x704>
        {
#if defined(RCC_PLLSAI1_SUPPORT) || defined(RCC_PLLSAI2_SUPPORT)
          /* Check if main PLL can be updated */
          /* Not possible if the source is shared by other enabled PLLSAIx */
          if((READ_BIT(RCC->CR, RCC_CR_PLLSAI1ON) != 0U)
 80048b0:	4b53      	ldr	r3, [pc, #332]	; (8004a00 <HAL_RCC_OscConfig+0x780>)
 80048b2:	681b      	ldr	r3, [r3, #0]
 80048b4:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
 80048b8:	2b00      	cmp	r3, #0
 80048ba:	d105      	bne.n	80048c8 <HAL_RCC_OscConfig+0x648>
#if defined(RCC_PLLSAI2_SUPPORT)
             || (READ_BIT(RCC->CR, RCC_CR_PLLSAI2ON) != 0U)
 80048bc:	4b50      	ldr	r3, [pc, #320]	; (8004a00 <HAL_RCC_OscConfig+0x780>)
 80048be:	681b      	ldr	r3, [r3, #0]
 80048c0:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80048c4:	2b00      	cmp	r3, #0
 80048c6:	d001      	beq.n	80048cc <HAL_RCC_OscConfig+0x64c>
#endif
            )
          {
            return HAL_ERROR;
 80048c8:	2301      	movs	r3, #1
 80048ca:	e0ad      	b.n	8004a28 <HAL_RCC_OscConfig+0x7a8>
          }
          else
#endif /* RCC_PLLSAI1_SUPPORT || RCC_PLLSAI2_SUPPORT */
          {
            /* Disable the main PLL. */
            __HAL_RCC_PLL_DISABLE();
 80048cc:	4b4c      	ldr	r3, [pc, #304]	; (8004a00 <HAL_RCC_OscConfig+0x780>)
 80048ce:	681b      	ldr	r3, [r3, #0]
 80048d0:	4a4b      	ldr	r2, [pc, #300]	; (8004a00 <HAL_RCC_OscConfig+0x780>)
 80048d2:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 80048d6:	6013      	str	r3, [r2, #0]

            /* Get Start Tick*/
            tickstart = HAL_GetTick();
 80048d8:	f7fd fa04 	bl	8001ce4 <HAL_GetTick>
 80048dc:	6138      	str	r0, [r7, #16]

            /* Wait till PLL is ready */
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 80048de:	e008      	b.n	80048f2 <HAL_RCC_OscConfig+0x672>
            {
              if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80048e0:	f7fd fa00 	bl	8001ce4 <HAL_GetTick>
 80048e4:	4602      	mov	r2, r0
 80048e6:	693b      	ldr	r3, [r7, #16]
 80048e8:	1ad3      	subs	r3, r2, r3
 80048ea:	2b02      	cmp	r3, #2
 80048ec:	d901      	bls.n	80048f2 <HAL_RCC_OscConfig+0x672>
              {
                return HAL_TIMEOUT;
 80048ee:	2303      	movs	r3, #3
 80048f0:	e09a      	b.n	8004a28 <HAL_RCC_OscConfig+0x7a8>
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 80048f2:	4b43      	ldr	r3, [pc, #268]	; (8004a00 <HAL_RCC_OscConfig+0x780>)
 80048f4:	681b      	ldr	r3, [r3, #0]
 80048f6:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80048fa:	2b00      	cmp	r3, #0
 80048fc:	d1f0      	bne.n	80048e0 <HAL_RCC_OscConfig+0x660>
              }
            }

            /* Configure the main PLL clock source, multiplication and division factors. */
#if defined(RCC_PLLP_SUPPORT)
            __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 80048fe:	4b40      	ldr	r3, [pc, #256]	; (8004a00 <HAL_RCC_OscConfig+0x780>)
 8004900:	68da      	ldr	r2, [r3, #12]
 8004902:	4b40      	ldr	r3, [pc, #256]	; (8004a04 <HAL_RCC_OscConfig+0x784>)
 8004904:	4013      	ands	r3, r2
 8004906:	687a      	ldr	r2, [r7, #4]
 8004908:	6ad1      	ldr	r1, [r2, #44]	; 0x2c
 800490a:	687a      	ldr	r2, [r7, #4]
 800490c:	6b12      	ldr	r2, [r2, #48]	; 0x30
 800490e:	3a01      	subs	r2, #1
 8004910:	0112      	lsls	r2, r2, #4
 8004912:	4311      	orrs	r1, r2
 8004914:	687a      	ldr	r2, [r7, #4]
 8004916:	6b52      	ldr	r2, [r2, #52]	; 0x34
 8004918:	0212      	lsls	r2, r2, #8
 800491a:	4311      	orrs	r1, r2
 800491c:	687a      	ldr	r2, [r7, #4]
 800491e:	6bd2      	ldr	r2, [r2, #60]	; 0x3c
 8004920:	0852      	lsrs	r2, r2, #1
 8004922:	3a01      	subs	r2, #1
 8004924:	0552      	lsls	r2, r2, #21
 8004926:	4311      	orrs	r1, r2
 8004928:	687a      	ldr	r2, [r7, #4]
 800492a:	6c12      	ldr	r2, [r2, #64]	; 0x40
 800492c:	0852      	lsrs	r2, r2, #1
 800492e:	3a01      	subs	r2, #1
 8004930:	0652      	lsls	r2, r2, #25
 8004932:	4311      	orrs	r1, r2
 8004934:	687a      	ldr	r2, [r7, #4]
 8004936:	6b92      	ldr	r2, [r2, #56]	; 0x38
 8004938:	0912      	lsrs	r2, r2, #4
 800493a:	0452      	lsls	r2, r2, #17
 800493c:	430a      	orrs	r2, r1
 800493e:	4930      	ldr	r1, [pc, #192]	; (8004a00 <HAL_RCC_OscConfig+0x780>)
 8004940:	4313      	orrs	r3, r2
 8004942:	60cb      	str	r3, [r1, #12]
                                 RCC_OscInitStruct->PLL.PLLQ,
                                 RCC_OscInitStruct->PLL.PLLR);
#endif

            /* Enable the main PLL. */
            __HAL_RCC_PLL_ENABLE();
 8004944:	4b2e      	ldr	r3, [pc, #184]	; (8004a00 <HAL_RCC_OscConfig+0x780>)
 8004946:	681b      	ldr	r3, [r3, #0]
 8004948:	4a2d      	ldr	r2, [pc, #180]	; (8004a00 <HAL_RCC_OscConfig+0x780>)
 800494a:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 800494e:	6013      	str	r3, [r2, #0]

            /* Enable PLL System Clock output. */
            __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SYSCLK);
 8004950:	4b2b      	ldr	r3, [pc, #172]	; (8004a00 <HAL_RCC_OscConfig+0x780>)
 8004952:	68db      	ldr	r3, [r3, #12]
 8004954:	4a2a      	ldr	r2, [pc, #168]	; (8004a00 <HAL_RCC_OscConfig+0x780>)
 8004956:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 800495a:	60d3      	str	r3, [r2, #12]

            /* Get Start Tick*/
            tickstart = HAL_GetTick();
 800495c:	f7fd f9c2 	bl	8001ce4 <HAL_GetTick>
 8004960:	6138      	str	r0, [r7, #16]

            /* Wait till PLL is ready */
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8004962:	e008      	b.n	8004976 <HAL_RCC_OscConfig+0x6f6>
            {
              if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8004964:	f7fd f9be 	bl	8001ce4 <HAL_GetTick>
 8004968:	4602      	mov	r2, r0
 800496a:	693b      	ldr	r3, [r7, #16]
 800496c:	1ad3      	subs	r3, r2, r3
 800496e:	2b02      	cmp	r3, #2
 8004970:	d901      	bls.n	8004976 <HAL_RCC_OscConfig+0x6f6>
              {
                return HAL_TIMEOUT;
 8004972:	2303      	movs	r3, #3
 8004974:	e058      	b.n	8004a28 <HAL_RCC_OscConfig+0x7a8>
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8004976:	4b22      	ldr	r3, [pc, #136]	; (8004a00 <HAL_RCC_OscConfig+0x780>)
 8004978:	681b      	ldr	r3, [r3, #0]
 800497a:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800497e:	2b00      	cmp	r3, #0
 8004980:	d0f0      	beq.n	8004964 <HAL_RCC_OscConfig+0x6e4>
        if(sysclk_source != RCC_CFGR_SWS_PLL)
 8004982:	e050      	b.n	8004a26 <HAL_RCC_OscConfig+0x7a6>
          }
        }
        else
        {
          /* PLL is already used as System core clock */
          return HAL_ERROR;
 8004984:	2301      	movs	r3, #1
 8004986:	e04f      	b.n	8004a28 <HAL_RCC_OscConfig+0x7a8>
      }
      else
      {
        /* PLL configuration is unchanged */
        /* Re-enable PLL if it was disabled (ie. low power mode) */
        if(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8004988:	4b1d      	ldr	r3, [pc, #116]	; (8004a00 <HAL_RCC_OscConfig+0x780>)
 800498a:	681b      	ldr	r3, [r3, #0]
 800498c:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8004990:	2b00      	cmp	r3, #0
 8004992:	d148      	bne.n	8004a26 <HAL_RCC_OscConfig+0x7a6>
        {
          /* Enable the main PLL. */
          __HAL_RCC_PLL_ENABLE();
 8004994:	4b1a      	ldr	r3, [pc, #104]	; (8004a00 <HAL_RCC_OscConfig+0x780>)
 8004996:	681b      	ldr	r3, [r3, #0]
 8004998:	4a19      	ldr	r2, [pc, #100]	; (8004a00 <HAL_RCC_OscConfig+0x780>)
 800499a:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 800499e:	6013      	str	r3, [r2, #0]

          /* Enable PLL System Clock output. */
          __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SYSCLK);
 80049a0:	4b17      	ldr	r3, [pc, #92]	; (8004a00 <HAL_RCC_OscConfig+0x780>)
 80049a2:	68db      	ldr	r3, [r3, #12]
 80049a4:	4a16      	ldr	r2, [pc, #88]	; (8004a00 <HAL_RCC_OscConfig+0x780>)
 80049a6:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 80049aa:	60d3      	str	r3, [r2, #12]

          /* Get Start Tick*/
          tickstart = HAL_GetTick();
 80049ac:	f7fd f99a 	bl	8001ce4 <HAL_GetTick>
 80049b0:	6138      	str	r0, [r7, #16]

          /* Wait till PLL is ready */
          while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 80049b2:	e008      	b.n	80049c6 <HAL_RCC_OscConfig+0x746>
          {
            if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80049b4:	f7fd f996 	bl	8001ce4 <HAL_GetTick>
 80049b8:	4602      	mov	r2, r0
 80049ba:	693b      	ldr	r3, [r7, #16]
 80049bc:	1ad3      	subs	r3, r2, r3
 80049be:	2b02      	cmp	r3, #2
 80049c0:	d901      	bls.n	80049c6 <HAL_RCC_OscConfig+0x746>
            {
              return HAL_TIMEOUT;
 80049c2:	2303      	movs	r3, #3
 80049c4:	e030      	b.n	8004a28 <HAL_RCC_OscConfig+0x7a8>
          while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 80049c6:	4b0e      	ldr	r3, [pc, #56]	; (8004a00 <HAL_RCC_OscConfig+0x780>)
 80049c8:	681b      	ldr	r3, [r3, #0]
 80049ca:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80049ce:	2b00      	cmp	r3, #0
 80049d0:	d0f0      	beq.n	80049b4 <HAL_RCC_OscConfig+0x734>
 80049d2:	e028      	b.n	8004a26 <HAL_RCC_OscConfig+0x7a6>
      }
    }
    else
    {
      /* Check that PLL is not used as system clock or not */
      if(sysclk_source != RCC_CFGR_SWS_PLL)
 80049d4:	69bb      	ldr	r3, [r7, #24]
 80049d6:	2b0c      	cmp	r3, #12
 80049d8:	d023      	beq.n	8004a22 <HAL_RCC_OscConfig+0x7a2>
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80049da:	4b09      	ldr	r3, [pc, #36]	; (8004a00 <HAL_RCC_OscConfig+0x780>)
 80049dc:	681b      	ldr	r3, [r3, #0]
 80049de:	4a08      	ldr	r2, [pc, #32]	; (8004a00 <HAL_RCC_OscConfig+0x780>)
 80049e0:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 80049e4:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80049e6:	f7fd f97d 	bl	8001ce4 <HAL_GetTick>
 80049ea:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 80049ec:	e00c      	b.n	8004a08 <HAL_RCC_OscConfig+0x788>
        {
          if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80049ee:	f7fd f979 	bl	8001ce4 <HAL_GetTick>
 80049f2:	4602      	mov	r2, r0
 80049f4:	693b      	ldr	r3, [r7, #16]
 80049f6:	1ad3      	subs	r3, r2, r3
 80049f8:	2b02      	cmp	r3, #2
 80049fa:	d905      	bls.n	8004a08 <HAL_RCC_OscConfig+0x788>
          {
            return HAL_TIMEOUT;
 80049fc:	2303      	movs	r3, #3
 80049fe:	e013      	b.n	8004a28 <HAL_RCC_OscConfig+0x7a8>
 8004a00:	40021000 	.word	0x40021000
 8004a04:	f99d808c 	.word	0xf99d808c
        while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8004a08:	4b09      	ldr	r3, [pc, #36]	; (8004a30 <HAL_RCC_OscConfig+0x7b0>)
 8004a0a:	681b      	ldr	r3, [r3, #0]
 8004a0c:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8004a10:	2b00      	cmp	r3, #0
 8004a12:	d1ec      	bne.n	80049ee <HAL_RCC_OscConfig+0x76e>
          }
        }
        /* Unselect main PLL clock source and disable main PLL outputs to save power */
#if defined(RCC_PLLSAI2_SUPPORT)
        RCC->PLLCFGR &= ~(RCC_PLLCFGR_PLLSRC | RCC_PLL_SYSCLK | RCC_PLL_48M1CLK | RCC_PLL_SAI3CLK);
 8004a14:	4b06      	ldr	r3, [pc, #24]	; (8004a30 <HAL_RCC_OscConfig+0x7b0>)
 8004a16:	68da      	ldr	r2, [r3, #12]
 8004a18:	4905      	ldr	r1, [pc, #20]	; (8004a30 <HAL_RCC_OscConfig+0x7b0>)
 8004a1a:	4b06      	ldr	r3, [pc, #24]	; (8004a34 <HAL_RCC_OscConfig+0x7b4>)
 8004a1c:	4013      	ands	r3, r2
 8004a1e:	60cb      	str	r3, [r1, #12]
 8004a20:	e001      	b.n	8004a26 <HAL_RCC_OscConfig+0x7a6>
#endif /* RCC_PLLSAI2_SUPPORT */
      }
      else
      {
        /* PLL is already used as System core clock */
        return HAL_ERROR;
 8004a22:	2301      	movs	r3, #1
 8004a24:	e000      	b.n	8004a28 <HAL_RCC_OscConfig+0x7a8>
      }
    }
  }
  return HAL_OK;
 8004a26:	2300      	movs	r3, #0
}
 8004a28:	4618      	mov	r0, r3
 8004a2a:	3720      	adds	r7, #32
 8004a2c:	46bd      	mov	sp, r7
 8004a2e:	bd80      	pop	{r7, pc}
 8004a30:	40021000 	.word	0x40021000
 8004a34:	feeefffc 	.word	0xfeeefffc

08004a38 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8004a38:	b580      	push	{r7, lr}
 8004a3a:	b084      	sub	sp, #16
 8004a3c:	af00      	add	r7, sp, #0
 8004a3e:	6078      	str	r0, [r7, #4]
 8004a40:	6039      	str	r1, [r7, #0]
  uint32_t hpre = RCC_SYSCLK_DIV1;
#endif
  HAL_StatusTypeDef status;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 8004a42:	687b      	ldr	r3, [r7, #4]
 8004a44:	2b00      	cmp	r3, #0
 8004a46:	d101      	bne.n	8004a4c <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8004a48:	2301      	movs	r3, #1
 8004a4a:	e0e7      	b.n	8004c1c <HAL_RCC_ClockConfig+0x1e4>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 8004a4c:	4b75      	ldr	r3, [pc, #468]	; (8004c24 <HAL_RCC_ClockConfig+0x1ec>)
 8004a4e:	681b      	ldr	r3, [r3, #0]
 8004a50:	f003 0307 	and.w	r3, r3, #7
 8004a54:	683a      	ldr	r2, [r7, #0]
 8004a56:	429a      	cmp	r2, r3
 8004a58:	d910      	bls.n	8004a7c <HAL_RCC_ClockConfig+0x44>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8004a5a:	4b72      	ldr	r3, [pc, #456]	; (8004c24 <HAL_RCC_ClockConfig+0x1ec>)
 8004a5c:	681b      	ldr	r3, [r3, #0]
 8004a5e:	f023 0207 	bic.w	r2, r3, #7
 8004a62:	4970      	ldr	r1, [pc, #448]	; (8004c24 <HAL_RCC_ClockConfig+0x1ec>)
 8004a64:	683b      	ldr	r3, [r7, #0]
 8004a66:	4313      	orrs	r3, r2
 8004a68:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8004a6a:	4b6e      	ldr	r3, [pc, #440]	; (8004c24 <HAL_RCC_ClockConfig+0x1ec>)
 8004a6c:	681b      	ldr	r3, [r3, #0]
 8004a6e:	f003 0307 	and.w	r3, r3, #7
 8004a72:	683a      	ldr	r2, [r7, #0]
 8004a74:	429a      	cmp	r2, r3
 8004a76:	d001      	beq.n	8004a7c <HAL_RCC_ClockConfig+0x44>
    {
      return HAL_ERROR;
 8004a78:	2301      	movs	r3, #1
 8004a7a:	e0cf      	b.n	8004c1c <HAL_RCC_ClockConfig+0x1e4>
    }
  }

  /*----------------- HCLK Configuration prior to SYSCLK----------------------*/
  /* Apply higher HCLK prescaler request here to ensure CPU clock is not of of spec when SYSCLK is increased */
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8004a7c:	687b      	ldr	r3, [r7, #4]
 8004a7e:	681b      	ldr	r3, [r3, #0]
 8004a80:	f003 0302 	and.w	r3, r3, #2
 8004a84:	2b00      	cmp	r3, #0
 8004a86:	d010      	beq.n	8004aaa <HAL_RCC_ClockConfig+0x72>
  {
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));

    if(RCC_ClkInitStruct->AHBCLKDivider > READ_BIT(RCC->CFGR, RCC_CFGR_HPRE))
 8004a88:	687b      	ldr	r3, [r7, #4]
 8004a8a:	689a      	ldr	r2, [r3, #8]
 8004a8c:	4b66      	ldr	r3, [pc, #408]	; (8004c28 <HAL_RCC_ClockConfig+0x1f0>)
 8004a8e:	689b      	ldr	r3, [r3, #8]
 8004a90:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8004a94:	429a      	cmp	r2, r3
 8004a96:	d908      	bls.n	8004aaa <HAL_RCC_ClockConfig+0x72>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8004a98:	4b63      	ldr	r3, [pc, #396]	; (8004c28 <HAL_RCC_ClockConfig+0x1f0>)
 8004a9a:	689b      	ldr	r3, [r3, #8]
 8004a9c:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8004aa0:	687b      	ldr	r3, [r7, #4]
 8004aa2:	689b      	ldr	r3, [r3, #8]
 8004aa4:	4960      	ldr	r1, [pc, #384]	; (8004c28 <HAL_RCC_ClockConfig+0x1f0>)
 8004aa6:	4313      	orrs	r3, r2
 8004aa8:	608b      	str	r3, [r1, #8]
    }
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8004aaa:	687b      	ldr	r3, [r7, #4]
 8004aac:	681b      	ldr	r3, [r3, #0]
 8004aae:	f003 0301 	and.w	r3, r3, #1
 8004ab2:	2b00      	cmp	r3, #0
 8004ab4:	d04c      	beq.n	8004b50 <HAL_RCC_ClockConfig+0x118>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* PLL is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8004ab6:	687b      	ldr	r3, [r7, #4]
 8004ab8:	685b      	ldr	r3, [r3, #4]
 8004aba:	2b03      	cmp	r3, #3
 8004abc:	d107      	bne.n	8004ace <HAL_RCC_ClockConfig+0x96>
    {
      /* Check the PLL ready flag */
      if(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8004abe:	4b5a      	ldr	r3, [pc, #360]	; (8004c28 <HAL_RCC_ClockConfig+0x1f0>)
 8004ac0:	681b      	ldr	r3, [r3, #0]
 8004ac2:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8004ac6:	2b00      	cmp	r3, #0
 8004ac8:	d121      	bne.n	8004b0e <HAL_RCC_ClockConfig+0xd6>
      {
        return HAL_ERROR;
 8004aca:	2301      	movs	r3, #1
 8004acc:	e0a6      	b.n	8004c1c <HAL_RCC_ClockConfig+0x1e4>
#endif
    }
    else
    {
      /* HSE is selected as System Clock Source */
      if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8004ace:	687b      	ldr	r3, [r7, #4]
 8004ad0:	685b      	ldr	r3, [r3, #4]
 8004ad2:	2b02      	cmp	r3, #2
 8004ad4:	d107      	bne.n	8004ae6 <HAL_RCC_ClockConfig+0xae>
      {
        /* Check the HSE ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8004ad6:	4b54      	ldr	r3, [pc, #336]	; (8004c28 <HAL_RCC_ClockConfig+0x1f0>)
 8004ad8:	681b      	ldr	r3, [r3, #0]
 8004ada:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8004ade:	2b00      	cmp	r3, #0
 8004ae0:	d115      	bne.n	8004b0e <HAL_RCC_ClockConfig+0xd6>
        {
          return HAL_ERROR;
 8004ae2:	2301      	movs	r3, #1
 8004ae4:	e09a      	b.n	8004c1c <HAL_RCC_ClockConfig+0x1e4>
        }
      }
      /* MSI is selected as System Clock Source */
      else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_MSI)
 8004ae6:	687b      	ldr	r3, [r7, #4]
 8004ae8:	685b      	ldr	r3, [r3, #4]
 8004aea:	2b00      	cmp	r3, #0
 8004aec:	d107      	bne.n	8004afe <HAL_RCC_ClockConfig+0xc6>
      {
        /* Check the MSI ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_MSIRDY) == 0U)
 8004aee:	4b4e      	ldr	r3, [pc, #312]	; (8004c28 <HAL_RCC_ClockConfig+0x1f0>)
 8004af0:	681b      	ldr	r3, [r3, #0]
 8004af2:	f003 0302 	and.w	r3, r3, #2
 8004af6:	2b00      	cmp	r3, #0
 8004af8:	d109      	bne.n	8004b0e <HAL_RCC_ClockConfig+0xd6>
        {
          return HAL_ERROR;
 8004afa:	2301      	movs	r3, #1
 8004afc:	e08e      	b.n	8004c1c <HAL_RCC_ClockConfig+0x1e4>
      }
      /* HSI is selected as System Clock Source */
      else
      {
        /* Check the HSI ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8004afe:	4b4a      	ldr	r3, [pc, #296]	; (8004c28 <HAL_RCC_ClockConfig+0x1f0>)
 8004b00:	681b      	ldr	r3, [r3, #0]
 8004b02:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8004b06:	2b00      	cmp	r3, #0
 8004b08:	d101      	bne.n	8004b0e <HAL_RCC_ClockConfig+0xd6>
        {
          return HAL_ERROR;
 8004b0a:	2301      	movs	r3, #1
 8004b0c:	e086      	b.n	8004c1c <HAL_RCC_ClockConfig+0x1e4>
      }
#endif

    }

    MODIFY_REG(RCC->CFGR, RCC_CFGR_SW, RCC_ClkInitStruct->SYSCLKSource);
 8004b0e:	4b46      	ldr	r3, [pc, #280]	; (8004c28 <HAL_RCC_ClockConfig+0x1f0>)
 8004b10:	689b      	ldr	r3, [r3, #8]
 8004b12:	f023 0203 	bic.w	r2, r3, #3
 8004b16:	687b      	ldr	r3, [r7, #4]
 8004b18:	685b      	ldr	r3, [r3, #4]
 8004b1a:	4943      	ldr	r1, [pc, #268]	; (8004c28 <HAL_RCC_ClockConfig+0x1f0>)
 8004b1c:	4313      	orrs	r3, r2
 8004b1e:	608b      	str	r3, [r1, #8]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8004b20:	f7fd f8e0 	bl	8001ce4 <HAL_GetTick>
 8004b24:	60f8      	str	r0, [r7, #12]

    while(__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8004b26:	e00a      	b.n	8004b3e <HAL_RCC_ClockConfig+0x106>
    {
      if((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8004b28:	f7fd f8dc 	bl	8001ce4 <HAL_GetTick>
 8004b2c:	4602      	mov	r2, r0
 8004b2e:	68fb      	ldr	r3, [r7, #12]
 8004b30:	1ad3      	subs	r3, r2, r3
 8004b32:	f241 3288 	movw	r2, #5000	; 0x1388
 8004b36:	4293      	cmp	r3, r2
 8004b38:	d901      	bls.n	8004b3e <HAL_RCC_ClockConfig+0x106>
      {
        return HAL_TIMEOUT;
 8004b3a:	2303      	movs	r3, #3
 8004b3c:	e06e      	b.n	8004c1c <HAL_RCC_ClockConfig+0x1e4>
    while(__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8004b3e:	4b3a      	ldr	r3, [pc, #232]	; (8004c28 <HAL_RCC_ClockConfig+0x1f0>)
 8004b40:	689b      	ldr	r3, [r3, #8]
 8004b42:	f003 020c 	and.w	r2, r3, #12
 8004b46:	687b      	ldr	r3, [r7, #4]
 8004b48:	685b      	ldr	r3, [r3, #4]
 8004b4a:	009b      	lsls	r3, r3, #2
 8004b4c:	429a      	cmp	r2, r3
 8004b4e:	d1eb      	bne.n	8004b28 <HAL_RCC_ClockConfig+0xf0>
  }
#endif

  /*----------------- HCLK Configuration after SYSCLK-------------------------*/
  /* Apply lower HCLK prescaler request here to ensure CPU clock is not of of spec when SYSCLK is set */
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8004b50:	687b      	ldr	r3, [r7, #4]
 8004b52:	681b      	ldr	r3, [r3, #0]
 8004b54:	f003 0302 	and.w	r3, r3, #2
 8004b58:	2b00      	cmp	r3, #0
 8004b5a:	d010      	beq.n	8004b7e <HAL_RCC_ClockConfig+0x146>
  {
    if(RCC_ClkInitStruct->AHBCLKDivider < READ_BIT(RCC->CFGR, RCC_CFGR_HPRE))
 8004b5c:	687b      	ldr	r3, [r7, #4]
 8004b5e:	689a      	ldr	r2, [r3, #8]
 8004b60:	4b31      	ldr	r3, [pc, #196]	; (8004c28 <HAL_RCC_ClockConfig+0x1f0>)
 8004b62:	689b      	ldr	r3, [r3, #8]
 8004b64:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8004b68:	429a      	cmp	r2, r3
 8004b6a:	d208      	bcs.n	8004b7e <HAL_RCC_ClockConfig+0x146>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8004b6c:	4b2e      	ldr	r3, [pc, #184]	; (8004c28 <HAL_RCC_ClockConfig+0x1f0>)
 8004b6e:	689b      	ldr	r3, [r3, #8]
 8004b70:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8004b74:	687b      	ldr	r3, [r7, #4]
 8004b76:	689b      	ldr	r3, [r3, #8]
 8004b78:	492b      	ldr	r1, [pc, #172]	; (8004c28 <HAL_RCC_ClockConfig+0x1f0>)
 8004b7a:	4313      	orrs	r3, r2
 8004b7c:	608b      	str	r3, [r1, #8]
    }
  }

  /* Allow decreasing of the number of wait states (because of lower CPU frequency expected) */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 8004b7e:	4b29      	ldr	r3, [pc, #164]	; (8004c24 <HAL_RCC_ClockConfig+0x1ec>)
 8004b80:	681b      	ldr	r3, [r3, #0]
 8004b82:	f003 0307 	and.w	r3, r3, #7
 8004b86:	683a      	ldr	r2, [r7, #0]
 8004b88:	429a      	cmp	r2, r3
 8004b8a:	d210      	bcs.n	8004bae <HAL_RCC_ClockConfig+0x176>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8004b8c:	4b25      	ldr	r3, [pc, #148]	; (8004c24 <HAL_RCC_ClockConfig+0x1ec>)
 8004b8e:	681b      	ldr	r3, [r3, #0]
 8004b90:	f023 0207 	bic.w	r2, r3, #7
 8004b94:	4923      	ldr	r1, [pc, #140]	; (8004c24 <HAL_RCC_ClockConfig+0x1ec>)
 8004b96:	683b      	ldr	r3, [r7, #0]
 8004b98:	4313      	orrs	r3, r2
 8004b9a:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8004b9c:	4b21      	ldr	r3, [pc, #132]	; (8004c24 <HAL_RCC_ClockConfig+0x1ec>)
 8004b9e:	681b      	ldr	r3, [r3, #0]
 8004ba0:	f003 0307 	and.w	r3, r3, #7
 8004ba4:	683a      	ldr	r2, [r7, #0]
 8004ba6:	429a      	cmp	r2, r3
 8004ba8:	d001      	beq.n	8004bae <HAL_RCC_ClockConfig+0x176>
    {
      return HAL_ERROR;
 8004baa:	2301      	movs	r3, #1
 8004bac:	e036      	b.n	8004c1c <HAL_RCC_ClockConfig+0x1e4>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8004bae:	687b      	ldr	r3, [r7, #4]
 8004bb0:	681b      	ldr	r3, [r3, #0]
 8004bb2:	f003 0304 	and.w	r3, r3, #4
 8004bb6:	2b00      	cmp	r3, #0
 8004bb8:	d008      	beq.n	8004bcc <HAL_RCC_ClockConfig+0x194>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8004bba:	4b1b      	ldr	r3, [pc, #108]	; (8004c28 <HAL_RCC_ClockConfig+0x1f0>)
 8004bbc:	689b      	ldr	r3, [r3, #8]
 8004bbe:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 8004bc2:	687b      	ldr	r3, [r7, #4]
 8004bc4:	68db      	ldr	r3, [r3, #12]
 8004bc6:	4918      	ldr	r1, [pc, #96]	; (8004c28 <HAL_RCC_ClockConfig+0x1f0>)
 8004bc8:	4313      	orrs	r3, r2
 8004bca:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8004bcc:	687b      	ldr	r3, [r7, #4]
 8004bce:	681b      	ldr	r3, [r3, #0]
 8004bd0:	f003 0308 	and.w	r3, r3, #8
 8004bd4:	2b00      	cmp	r3, #0
 8004bd6:	d009      	beq.n	8004bec <HAL_RCC_ClockConfig+0x1b4>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 8004bd8:	4b13      	ldr	r3, [pc, #76]	; (8004c28 <HAL_RCC_ClockConfig+0x1f0>)
 8004bda:	689b      	ldr	r3, [r3, #8]
 8004bdc:	f423 5260 	bic.w	r2, r3, #14336	; 0x3800
 8004be0:	687b      	ldr	r3, [r7, #4]
 8004be2:	691b      	ldr	r3, [r3, #16]
 8004be4:	00db      	lsls	r3, r3, #3
 8004be6:	4910      	ldr	r1, [pc, #64]	; (8004c28 <HAL_RCC_ClockConfig+0x1f0>)
 8004be8:	4313      	orrs	r3, r2
 8004bea:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> (AHBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos] & 0x1FU);
 8004bec:	f000 f824 	bl	8004c38 <HAL_RCC_GetSysClockFreq>
 8004bf0:	4602      	mov	r2, r0
 8004bf2:	4b0d      	ldr	r3, [pc, #52]	; (8004c28 <HAL_RCC_ClockConfig+0x1f0>)
 8004bf4:	689b      	ldr	r3, [r3, #8]
 8004bf6:	091b      	lsrs	r3, r3, #4
 8004bf8:	f003 030f 	and.w	r3, r3, #15
 8004bfc:	490b      	ldr	r1, [pc, #44]	; (8004c2c <HAL_RCC_ClockConfig+0x1f4>)
 8004bfe:	5ccb      	ldrb	r3, [r1, r3]
 8004c00:	f003 031f 	and.w	r3, r3, #31
 8004c04:	fa22 f303 	lsr.w	r3, r2, r3
 8004c08:	4a09      	ldr	r2, [pc, #36]	; (8004c30 <HAL_RCC_ClockConfig+0x1f8>)
 8004c0a:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  status = HAL_InitTick(uwTickPrio);
 8004c0c:	4b09      	ldr	r3, [pc, #36]	; (8004c34 <HAL_RCC_ClockConfig+0x1fc>)
 8004c0e:	681b      	ldr	r3, [r3, #0]
 8004c10:	4618      	mov	r0, r3
 8004c12:	f7fd f817 	bl	8001c44 <HAL_InitTick>
 8004c16:	4603      	mov	r3, r0
 8004c18:	72fb      	strb	r3, [r7, #11]

  return status;
 8004c1a:	7afb      	ldrb	r3, [r7, #11]
}
 8004c1c:	4618      	mov	r0, r3
 8004c1e:	3710      	adds	r7, #16
 8004c20:	46bd      	mov	sp, r7
 8004c22:	bd80      	pop	{r7, pc}
 8004c24:	40022000 	.word	0x40022000
 8004c28:	40021000 	.word	0x40021000
 8004c2c:	0800b9b4 	.word	0x0800b9b4
 8004c30:	20000000 	.word	0x20000000
 8004c34:	20000004 	.word	0x20000004

08004c38 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8004c38:	b480      	push	{r7}
 8004c3a:	b089      	sub	sp, #36	; 0x24
 8004c3c:	af00      	add	r7, sp, #0
  uint32_t msirange = 0U, sysclockfreq = 0U;
 8004c3e:	2300      	movs	r3, #0
 8004c40:	61fb      	str	r3, [r7, #28]
 8004c42:	2300      	movs	r3, #0
 8004c44:	61bb      	str	r3, [r7, #24]
  uint32_t pllvco, pllsource, pllr, pllm;    /* no init needed */
  uint32_t sysclk_source, pll_oscsource;

  sysclk_source = __HAL_RCC_GET_SYSCLK_SOURCE();
 8004c46:	4b3e      	ldr	r3, [pc, #248]	; (8004d40 <HAL_RCC_GetSysClockFreq+0x108>)
 8004c48:	689b      	ldr	r3, [r3, #8]
 8004c4a:	f003 030c 	and.w	r3, r3, #12
 8004c4e:	613b      	str	r3, [r7, #16]
  pll_oscsource = __HAL_RCC_GET_PLL_OSCSOURCE();
 8004c50:	4b3b      	ldr	r3, [pc, #236]	; (8004d40 <HAL_RCC_GetSysClockFreq+0x108>)
 8004c52:	68db      	ldr	r3, [r3, #12]
 8004c54:	f003 0303 	and.w	r3, r3, #3
 8004c58:	60fb      	str	r3, [r7, #12]

  if((sysclk_source == RCC_CFGR_SWS_MSI) ||
 8004c5a:	693b      	ldr	r3, [r7, #16]
 8004c5c:	2b00      	cmp	r3, #0
 8004c5e:	d005      	beq.n	8004c6c <HAL_RCC_GetSysClockFreq+0x34>
 8004c60:	693b      	ldr	r3, [r7, #16]
 8004c62:	2b0c      	cmp	r3, #12
 8004c64:	d121      	bne.n	8004caa <HAL_RCC_GetSysClockFreq+0x72>
     ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_oscsource == RCC_PLLSOURCE_MSI)))
 8004c66:	68fb      	ldr	r3, [r7, #12]
 8004c68:	2b01      	cmp	r3, #1
 8004c6a:	d11e      	bne.n	8004caa <HAL_RCC_GetSysClockFreq+0x72>
  {
    /* MSI or PLL with MSI source used as system clock source */

    /* Get SYSCLK source */
    if(READ_BIT(RCC->CR, RCC_CR_MSIRGSEL) == 0U)
 8004c6c:	4b34      	ldr	r3, [pc, #208]	; (8004d40 <HAL_RCC_GetSysClockFreq+0x108>)
 8004c6e:	681b      	ldr	r3, [r3, #0]
 8004c70:	f003 0308 	and.w	r3, r3, #8
 8004c74:	2b00      	cmp	r3, #0
 8004c76:	d107      	bne.n	8004c88 <HAL_RCC_GetSysClockFreq+0x50>
    { /* MSISRANGE from RCC_CSR applies */
      msirange = READ_BIT(RCC->CSR, RCC_CSR_MSISRANGE) >> RCC_CSR_MSISRANGE_Pos;
 8004c78:	4b31      	ldr	r3, [pc, #196]	; (8004d40 <HAL_RCC_GetSysClockFreq+0x108>)
 8004c7a:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8004c7e:	0a1b      	lsrs	r3, r3, #8
 8004c80:	f003 030f 	and.w	r3, r3, #15
 8004c84:	61fb      	str	r3, [r7, #28]
 8004c86:	e005      	b.n	8004c94 <HAL_RCC_GetSysClockFreq+0x5c>
    }
    else
    { /* MSIRANGE from RCC_CR applies */
      msirange = READ_BIT(RCC->CR, RCC_CR_MSIRANGE) >> RCC_CR_MSIRANGE_Pos;
 8004c88:	4b2d      	ldr	r3, [pc, #180]	; (8004d40 <HAL_RCC_GetSysClockFreq+0x108>)
 8004c8a:	681b      	ldr	r3, [r3, #0]
 8004c8c:	091b      	lsrs	r3, r3, #4
 8004c8e:	f003 030f 	and.w	r3, r3, #15
 8004c92:	61fb      	str	r3, [r7, #28]
    }
    /*MSI frequency range in HZ*/
    msirange = MSIRangeTable[msirange];
 8004c94:	4a2b      	ldr	r2, [pc, #172]	; (8004d44 <HAL_RCC_GetSysClockFreq+0x10c>)
 8004c96:	69fb      	ldr	r3, [r7, #28]
 8004c98:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8004c9c:	61fb      	str	r3, [r7, #28]

    if(sysclk_source == RCC_CFGR_SWS_MSI)
 8004c9e:	693b      	ldr	r3, [r7, #16]
 8004ca0:	2b00      	cmp	r3, #0
 8004ca2:	d10d      	bne.n	8004cc0 <HAL_RCC_GetSysClockFreq+0x88>
    {
      /* MSI used as system clock source */
      sysclockfreq = msirange;
 8004ca4:	69fb      	ldr	r3, [r7, #28]
 8004ca6:	61bb      	str	r3, [r7, #24]
    if(sysclk_source == RCC_CFGR_SWS_MSI)
 8004ca8:	e00a      	b.n	8004cc0 <HAL_RCC_GetSysClockFreq+0x88>
    }
  }
  else if(sysclk_source == RCC_CFGR_SWS_HSI)
 8004caa:	693b      	ldr	r3, [r7, #16]
 8004cac:	2b04      	cmp	r3, #4
 8004cae:	d102      	bne.n	8004cb6 <HAL_RCC_GetSysClockFreq+0x7e>
  {
    /* HSI used as system clock source */
    sysclockfreq = HSI_VALUE;
 8004cb0:	4b25      	ldr	r3, [pc, #148]	; (8004d48 <HAL_RCC_GetSysClockFreq+0x110>)
 8004cb2:	61bb      	str	r3, [r7, #24]
 8004cb4:	e004      	b.n	8004cc0 <HAL_RCC_GetSysClockFreq+0x88>
  }
  else if(sysclk_source == RCC_CFGR_SWS_HSE)
 8004cb6:	693b      	ldr	r3, [r7, #16]
 8004cb8:	2b08      	cmp	r3, #8
 8004cba:	d101      	bne.n	8004cc0 <HAL_RCC_GetSysClockFreq+0x88>
  {
    /* HSE used as system clock source */
    sysclockfreq = HSE_VALUE;
 8004cbc:	4b23      	ldr	r3, [pc, #140]	; (8004d4c <HAL_RCC_GetSysClockFreq+0x114>)
 8004cbe:	61bb      	str	r3, [r7, #24]
  else
  {
    /* unexpected case: sysclockfreq at 0 */
  }

  if(sysclk_source == RCC_CFGR_SWS_PLL)
 8004cc0:	693b      	ldr	r3, [r7, #16]
 8004cc2:	2b0c      	cmp	r3, #12
 8004cc4:	d134      	bne.n	8004d30 <HAL_RCC_GetSysClockFreq+0xf8>
    /* PLL used as system clock  source */

    /* PLL_VCO = (HSE_VALUE or HSI_VALUE or MSI_VALUE) * PLLN / PLLM
    SYSCLK = PLL_VCO / PLLR
    */
    pllsource = READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC);
 8004cc6:	4b1e      	ldr	r3, [pc, #120]	; (8004d40 <HAL_RCC_GetSysClockFreq+0x108>)
 8004cc8:	68db      	ldr	r3, [r3, #12]
 8004cca:	f003 0303 	and.w	r3, r3, #3
 8004cce:	60bb      	str	r3, [r7, #8]

    switch (pllsource)
 8004cd0:	68bb      	ldr	r3, [r7, #8]
 8004cd2:	2b02      	cmp	r3, #2
 8004cd4:	d003      	beq.n	8004cde <HAL_RCC_GetSysClockFreq+0xa6>
 8004cd6:	68bb      	ldr	r3, [r7, #8]
 8004cd8:	2b03      	cmp	r3, #3
 8004cda:	d003      	beq.n	8004ce4 <HAL_RCC_GetSysClockFreq+0xac>
 8004cdc:	e005      	b.n	8004cea <HAL_RCC_GetSysClockFreq+0xb2>
    {
    case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */
      pllvco = HSI_VALUE;
 8004cde:	4b1a      	ldr	r3, [pc, #104]	; (8004d48 <HAL_RCC_GetSysClockFreq+0x110>)
 8004ce0:	617b      	str	r3, [r7, #20]
      break;
 8004ce2:	e005      	b.n	8004cf0 <HAL_RCC_GetSysClockFreq+0xb8>

    case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
      pllvco = HSE_VALUE;
 8004ce4:	4b19      	ldr	r3, [pc, #100]	; (8004d4c <HAL_RCC_GetSysClockFreq+0x114>)
 8004ce6:	617b      	str	r3, [r7, #20]
      break;
 8004ce8:	e002      	b.n	8004cf0 <HAL_RCC_GetSysClockFreq+0xb8>

    case RCC_PLLSOURCE_MSI:  /* MSI used as PLL clock source */
    default:
      pllvco = msirange;
 8004cea:	69fb      	ldr	r3, [r7, #28]
 8004cec:	617b      	str	r3, [r7, #20]
      break;
 8004cee:	bf00      	nop
    }
    pllm = (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U ;
 8004cf0:	4b13      	ldr	r3, [pc, #76]	; (8004d40 <HAL_RCC_GetSysClockFreq+0x108>)
 8004cf2:	68db      	ldr	r3, [r3, #12]
 8004cf4:	091b      	lsrs	r3, r3, #4
 8004cf6:	f003 0307 	and.w	r3, r3, #7
 8004cfa:	3301      	adds	r3, #1
 8004cfc:	607b      	str	r3, [r7, #4]
    pllvco = (pllvco * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)) / pllm;
 8004cfe:	4b10      	ldr	r3, [pc, #64]	; (8004d40 <HAL_RCC_GetSysClockFreq+0x108>)
 8004d00:	68db      	ldr	r3, [r3, #12]
 8004d02:	0a1b      	lsrs	r3, r3, #8
 8004d04:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8004d08:	697a      	ldr	r2, [r7, #20]
 8004d0a:	fb03 f202 	mul.w	r2, r3, r2
 8004d0e:	687b      	ldr	r3, [r7, #4]
 8004d10:	fbb2 f3f3 	udiv	r3, r2, r3
 8004d14:	617b      	str	r3, [r7, #20]
    pllr = ((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLR) >> RCC_PLLCFGR_PLLR_Pos) + 1U ) * 2U;
 8004d16:	4b0a      	ldr	r3, [pc, #40]	; (8004d40 <HAL_RCC_GetSysClockFreq+0x108>)
 8004d18:	68db      	ldr	r3, [r3, #12]
 8004d1a:	0e5b      	lsrs	r3, r3, #25
 8004d1c:	f003 0303 	and.w	r3, r3, #3
 8004d20:	3301      	adds	r3, #1
 8004d22:	005b      	lsls	r3, r3, #1
 8004d24:	603b      	str	r3, [r7, #0]
    sysclockfreq = pllvco / pllr;
 8004d26:	697a      	ldr	r2, [r7, #20]
 8004d28:	683b      	ldr	r3, [r7, #0]
 8004d2a:	fbb2 f3f3 	udiv	r3, r2, r3
 8004d2e:	61bb      	str	r3, [r7, #24]
  }

  return sysclockfreq;
 8004d30:	69bb      	ldr	r3, [r7, #24]
}
 8004d32:	4618      	mov	r0, r3
 8004d34:	3724      	adds	r7, #36	; 0x24
 8004d36:	46bd      	mov	sp, r7
 8004d38:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004d3c:	4770      	bx	lr
 8004d3e:	bf00      	nop
 8004d40:	40021000 	.word	0x40021000
 8004d44:	0800b9cc 	.word	0x0800b9cc
 8004d48:	00f42400 	.word	0x00f42400
 8004d4c:	007a1200 	.word	0x007a1200

08004d50 <HAL_RCC_GetHCLKFreq>:
  *
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency.
  * @retval HCLK frequency in Hz
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8004d50:	b480      	push	{r7}
 8004d52:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8004d54:	4b03      	ldr	r3, [pc, #12]	; (8004d64 <HAL_RCC_GetHCLKFreq+0x14>)
 8004d56:	681b      	ldr	r3, [r3, #0]
}
 8004d58:	4618      	mov	r0, r3
 8004d5a:	46bd      	mov	sp, r7
 8004d5c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004d60:	4770      	bx	lr
 8004d62:	bf00      	nop
 8004d64:	20000000 	.word	0x20000000

08004d68 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency in Hz
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8004d68:	b580      	push	{r7, lr}
 8004d6a:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> (APBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos] & 0x1FU));
 8004d6c:	f7ff fff0 	bl	8004d50 <HAL_RCC_GetHCLKFreq>
 8004d70:	4602      	mov	r2, r0
 8004d72:	4b06      	ldr	r3, [pc, #24]	; (8004d8c <HAL_RCC_GetPCLK1Freq+0x24>)
 8004d74:	689b      	ldr	r3, [r3, #8]
 8004d76:	0a1b      	lsrs	r3, r3, #8
 8004d78:	f003 0307 	and.w	r3, r3, #7
 8004d7c:	4904      	ldr	r1, [pc, #16]	; (8004d90 <HAL_RCC_GetPCLK1Freq+0x28>)
 8004d7e:	5ccb      	ldrb	r3, [r1, r3]
 8004d80:	f003 031f 	and.w	r3, r3, #31
 8004d84:	fa22 f303 	lsr.w	r3, r2, r3
}
 8004d88:	4618      	mov	r0, r3
 8004d8a:	bd80      	pop	{r7, pc}
 8004d8c:	40021000 	.word	0x40021000
 8004d90:	0800b9c4 	.word	0x0800b9c4

08004d94 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency in Hz
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8004d94:	b580      	push	{r7, lr}
 8004d96:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> (APBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos] & 0x1FU));
 8004d98:	f7ff ffda 	bl	8004d50 <HAL_RCC_GetHCLKFreq>
 8004d9c:	4602      	mov	r2, r0
 8004d9e:	4b06      	ldr	r3, [pc, #24]	; (8004db8 <HAL_RCC_GetPCLK2Freq+0x24>)
 8004da0:	689b      	ldr	r3, [r3, #8]
 8004da2:	0adb      	lsrs	r3, r3, #11
 8004da4:	f003 0307 	and.w	r3, r3, #7
 8004da8:	4904      	ldr	r1, [pc, #16]	; (8004dbc <HAL_RCC_GetPCLK2Freq+0x28>)
 8004daa:	5ccb      	ldrb	r3, [r1, r3]
 8004dac:	f003 031f 	and.w	r3, r3, #31
 8004db0:	fa22 f303 	lsr.w	r3, r2, r3
}
 8004db4:	4618      	mov	r0, r3
 8004db6:	bd80      	pop	{r7, pc}
 8004db8:	40021000 	.word	0x40021000
 8004dbc:	0800b9c4 	.word	0x0800b9c4

08004dc0 <RCC_SetFlashLatencyFromMSIRange>:
            voltage range.
  * @param  msirange  MSI range value from RCC_MSIRANGE_0 to RCC_MSIRANGE_11
  * @retval HAL status
  */
static HAL_StatusTypeDef RCC_SetFlashLatencyFromMSIRange(uint32_t msirange)
{
 8004dc0:	b580      	push	{r7, lr}
 8004dc2:	b086      	sub	sp, #24
 8004dc4:	af00      	add	r7, sp, #0
 8004dc6:	6078      	str	r0, [r7, #4]
  uint32_t vos;
  uint32_t latency = FLASH_LATENCY_0;  /* default value 0WS */
 8004dc8:	2300      	movs	r3, #0
 8004dca:	613b      	str	r3, [r7, #16]

  if(__HAL_RCC_PWR_IS_CLK_ENABLED())
 8004dcc:	4b2a      	ldr	r3, [pc, #168]	; (8004e78 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 8004dce:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8004dd0:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8004dd4:	2b00      	cmp	r3, #0
 8004dd6:	d003      	beq.n	8004de0 <RCC_SetFlashLatencyFromMSIRange+0x20>
  {
    vos = HAL_PWREx_GetVoltageRange();
 8004dd8:	f7ff f9ee 	bl	80041b8 <HAL_PWREx_GetVoltageRange>
 8004ddc:	6178      	str	r0, [r7, #20]
 8004dde:	e014      	b.n	8004e0a <RCC_SetFlashLatencyFromMSIRange+0x4a>
  }
  else
  {
    __HAL_RCC_PWR_CLK_ENABLE();
 8004de0:	4b25      	ldr	r3, [pc, #148]	; (8004e78 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 8004de2:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8004de4:	4a24      	ldr	r2, [pc, #144]	; (8004e78 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 8004de6:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8004dea:	6593      	str	r3, [r2, #88]	; 0x58
 8004dec:	4b22      	ldr	r3, [pc, #136]	; (8004e78 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 8004dee:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8004df0:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8004df4:	60fb      	str	r3, [r7, #12]
 8004df6:	68fb      	ldr	r3, [r7, #12]
    vos = HAL_PWREx_GetVoltageRange();
 8004df8:	f7ff f9de 	bl	80041b8 <HAL_PWREx_GetVoltageRange>
 8004dfc:	6178      	str	r0, [r7, #20]
    __HAL_RCC_PWR_CLK_DISABLE();
 8004dfe:	4b1e      	ldr	r3, [pc, #120]	; (8004e78 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 8004e00:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8004e02:	4a1d      	ldr	r2, [pc, #116]	; (8004e78 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 8004e04:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8004e08:	6593      	str	r3, [r2, #88]	; 0x58
  }

  if(vos == PWR_REGULATOR_VOLTAGE_SCALE1)
 8004e0a:	697b      	ldr	r3, [r7, #20]
 8004e0c:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8004e10:	d10b      	bne.n	8004e2a <RCC_SetFlashLatencyFromMSIRange+0x6a>
  {
    if(msirange > RCC_MSIRANGE_8)
 8004e12:	687b      	ldr	r3, [r7, #4]
 8004e14:	2b80      	cmp	r3, #128	; 0x80
 8004e16:	d919      	bls.n	8004e4c <RCC_SetFlashLatencyFromMSIRange+0x8c>
    {
      /* MSI > 16Mhz */
      if(msirange > RCC_MSIRANGE_10)
 8004e18:	687b      	ldr	r3, [r7, #4]
 8004e1a:	2ba0      	cmp	r3, #160	; 0xa0
 8004e1c:	d902      	bls.n	8004e24 <RCC_SetFlashLatencyFromMSIRange+0x64>
      {
        /* MSI 48Mhz */
        latency = FLASH_LATENCY_2; /* 2WS */
 8004e1e:	2302      	movs	r3, #2
 8004e20:	613b      	str	r3, [r7, #16]
 8004e22:	e013      	b.n	8004e4c <RCC_SetFlashLatencyFromMSIRange+0x8c>
      }
      else
      {
        /* MSI 24Mhz or 32Mhz */
        latency = FLASH_LATENCY_1; /* 1WS */
 8004e24:	2301      	movs	r3, #1
 8004e26:	613b      	str	r3, [r7, #16]
 8004e28:	e010      	b.n	8004e4c <RCC_SetFlashLatencyFromMSIRange+0x8c>
        latency = FLASH_LATENCY_1; /* 1WS */
      }
      /* else MSI < 8Mhz default FLASH_LATENCY_0 0WS */
    }
#else
    if(msirange > RCC_MSIRANGE_8)
 8004e2a:	687b      	ldr	r3, [r7, #4]
 8004e2c:	2b80      	cmp	r3, #128	; 0x80
 8004e2e:	d902      	bls.n	8004e36 <RCC_SetFlashLatencyFromMSIRange+0x76>
    {
      /* MSI > 16Mhz */
      latency = FLASH_LATENCY_3; /* 3WS */
 8004e30:	2303      	movs	r3, #3
 8004e32:	613b      	str	r3, [r7, #16]
 8004e34:	e00a      	b.n	8004e4c <RCC_SetFlashLatencyFromMSIRange+0x8c>
    }
    else
    {
      if(msirange == RCC_MSIRANGE_8)
 8004e36:	687b      	ldr	r3, [r7, #4]
 8004e38:	2b80      	cmp	r3, #128	; 0x80
 8004e3a:	d102      	bne.n	8004e42 <RCC_SetFlashLatencyFromMSIRange+0x82>
      {
        /* MSI 16Mhz */
        latency = FLASH_LATENCY_2; /* 2WS */
 8004e3c:	2302      	movs	r3, #2
 8004e3e:	613b      	str	r3, [r7, #16]
 8004e40:	e004      	b.n	8004e4c <RCC_SetFlashLatencyFromMSIRange+0x8c>
      }
      else if(msirange == RCC_MSIRANGE_7)
 8004e42:	687b      	ldr	r3, [r7, #4]
 8004e44:	2b70      	cmp	r3, #112	; 0x70
 8004e46:	d101      	bne.n	8004e4c <RCC_SetFlashLatencyFromMSIRange+0x8c>
      {
        /* MSI 8Mhz */
        latency = FLASH_LATENCY_1; /* 1WS */
 8004e48:	2301      	movs	r3, #1
 8004e4a:	613b      	str	r3, [r7, #16]
      /* else MSI < 8Mhz default FLASH_LATENCY_0 0WS */
    }
#endif
  }

  __HAL_FLASH_SET_LATENCY(latency);
 8004e4c:	4b0b      	ldr	r3, [pc, #44]	; (8004e7c <RCC_SetFlashLatencyFromMSIRange+0xbc>)
 8004e4e:	681b      	ldr	r3, [r3, #0]
 8004e50:	f023 0207 	bic.w	r2, r3, #7
 8004e54:	4909      	ldr	r1, [pc, #36]	; (8004e7c <RCC_SetFlashLatencyFromMSIRange+0xbc>)
 8004e56:	693b      	ldr	r3, [r7, #16]
 8004e58:	4313      	orrs	r3, r2
 8004e5a:	600b      	str	r3, [r1, #0]

  /* Check that the new number of wait states is taken into account to access the Flash
     memory by reading the FLASH_ACR register */
  if(__HAL_FLASH_GET_LATENCY() != latency)
 8004e5c:	4b07      	ldr	r3, [pc, #28]	; (8004e7c <RCC_SetFlashLatencyFromMSIRange+0xbc>)
 8004e5e:	681b      	ldr	r3, [r3, #0]
 8004e60:	f003 0307 	and.w	r3, r3, #7
 8004e64:	693a      	ldr	r2, [r7, #16]
 8004e66:	429a      	cmp	r2, r3
 8004e68:	d001      	beq.n	8004e6e <RCC_SetFlashLatencyFromMSIRange+0xae>
  {
    return HAL_ERROR;
 8004e6a:	2301      	movs	r3, #1
 8004e6c:	e000      	b.n	8004e70 <RCC_SetFlashLatencyFromMSIRange+0xb0>
  }

  return HAL_OK;
 8004e6e:	2300      	movs	r3, #0
}
 8004e70:	4618      	mov	r0, r3
 8004e72:	3718      	adds	r7, #24
 8004e74:	46bd      	mov	sp, r7
 8004e76:	bd80      	pop	{r7, pc}
 8004e78:	40021000 	.word	0x40021000
 8004e7c:	40022000 	.word	0x40022000

08004e80 <HAL_RCCEx_PeriphCLKConfig>:
  *         the RTC clock source: in this case the access to Backup domain is enabled.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 8004e80:	b580      	push	{r7, lr}
 8004e82:	b086      	sub	sp, #24
 8004e84:	af00      	add	r7, sp, #0
 8004e86:	6078      	str	r0, [r7, #4]
  uint32_t tmpregister, tickstart;     /* no init needed */
  HAL_StatusTypeDef ret = HAL_OK;      /* Intermediate status */
 8004e88:	2300      	movs	r3, #0
 8004e8a:	74fb      	strb	r3, [r7, #19]
  HAL_StatusTypeDef status = HAL_OK;   /* Final status */
 8004e8c:	2300      	movs	r3, #0
 8004e8e:	74bb      	strb	r3, [r7, #18]
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

#if defined(SAI1)

  /*-------------------------- SAI1 clock source configuration ---------------------*/
  if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1))
 8004e90:	687b      	ldr	r3, [r7, #4]
 8004e92:	681b      	ldr	r3, [r3, #0]
 8004e94:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8004e98:	2b00      	cmp	r3, #0
 8004e9a:	d041      	beq.n	8004f20 <HAL_RCCEx_PeriphCLKConfig+0xa0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI1CLK(PeriphClkInit->Sai1ClockSelection));

    switch(PeriphClkInit->Sai1ClockSelection)
 8004e9c:	687b      	ldr	r3, [r7, #4]
 8004e9e:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8004ea0:	f5b3 0f40 	cmp.w	r3, #12582912	; 0xc00000
 8004ea4:	d02a      	beq.n	8004efc <HAL_RCCEx_PeriphCLKConfig+0x7c>
 8004ea6:	f5b3 0f40 	cmp.w	r3, #12582912	; 0xc00000
 8004eaa:	d824      	bhi.n	8004ef6 <HAL_RCCEx_PeriphCLKConfig+0x76>
 8004eac:	f5b3 0f00 	cmp.w	r3, #8388608	; 0x800000
 8004eb0:	d008      	beq.n	8004ec4 <HAL_RCCEx_PeriphCLKConfig+0x44>
 8004eb2:	f5b3 0f00 	cmp.w	r3, #8388608	; 0x800000
 8004eb6:	d81e      	bhi.n	8004ef6 <HAL_RCCEx_PeriphCLKConfig+0x76>
 8004eb8:	2b00      	cmp	r3, #0
 8004eba:	d00a      	beq.n	8004ed2 <HAL_RCCEx_PeriphCLKConfig+0x52>
 8004ebc:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8004ec0:	d010      	beq.n	8004ee4 <HAL_RCCEx_PeriphCLKConfig+0x64>
 8004ec2:	e018      	b.n	8004ef6 <HAL_RCCEx_PeriphCLKConfig+0x76>
    {
    case RCC_SAI1CLKSOURCE_PLL:      /* PLL is used as clock source for SAI1*/
      /* Enable SAI Clock output generated from System PLL . */
#if defined(RCC_PLLSAI2_SUPPORT)
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SAI3CLK);
 8004ec4:	4b86      	ldr	r3, [pc, #536]	; (80050e0 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8004ec6:	68db      	ldr	r3, [r3, #12]
 8004ec8:	4a85      	ldr	r2, [pc, #532]	; (80050e0 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8004eca:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8004ece:	60d3      	str	r3, [r2, #12]
#else
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SAI2CLK);
#endif /* RCC_PLLSAI2_SUPPORT */
      /* SAI1 clock source config set later after clock selection check */
      break;
 8004ed0:	e015      	b.n	8004efe <HAL_RCCEx_PeriphCLKConfig+0x7e>

    case RCC_SAI1CLKSOURCE_PLLSAI1:  /* PLLSAI1 is used as clock source for SAI1*/
      /* PLLSAI1 input clock, parameters M, N & P configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_P_UPDATE);
 8004ed2:	687b      	ldr	r3, [r7, #4]
 8004ed4:	3304      	adds	r3, #4
 8004ed6:	2100      	movs	r1, #0
 8004ed8:	4618      	mov	r0, r3
 8004eda:	f000 fabb 	bl	8005454 <RCCEx_PLLSAI1_Config>
 8004ede:	4603      	mov	r3, r0
 8004ee0:	74fb      	strb	r3, [r7, #19]
      /* SAI1 clock source config set later after clock selection check */
      break;
 8004ee2:	e00c      	b.n	8004efe <HAL_RCCEx_PeriphCLKConfig+0x7e>

#if defined(RCC_PLLSAI2_SUPPORT)

    case RCC_SAI1CLKSOURCE_PLLSAI2:  /* PLLSAI2 is used as clock source for SAI1*/
      /* PLLSAI2 input clock, parameters M, N & P configuration clock output (PLLSAI2ClockOut) */
      ret = RCCEx_PLLSAI2_Config(&(PeriphClkInit->PLLSAI2), DIVIDER_P_UPDATE);
 8004ee4:	687b      	ldr	r3, [r7, #4]
 8004ee6:	3320      	adds	r3, #32
 8004ee8:	2100      	movs	r1, #0
 8004eea:	4618      	mov	r0, r3
 8004eec:	f000 fba6 	bl	800563c <RCCEx_PLLSAI2_Config>
 8004ef0:	4603      	mov	r3, r0
 8004ef2:	74fb      	strb	r3, [r7, #19]
      /* SAI1 clock source config set later after clock selection check */
      break;
 8004ef4:	e003      	b.n	8004efe <HAL_RCCEx_PeriphCLKConfig+0x7e>
#endif /* STM32L4P5xx || STM32L4Q5xx || STM32L4R5xx || STM32L4R7xx || STM32L4R9xx || STM32L4S5xx || STM32L4S7xx || STM32L4S9xx */
      /* SAI1 clock source config set later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 8004ef6:	2301      	movs	r3, #1
 8004ef8:	74fb      	strb	r3, [r7, #19]
      break;
 8004efa:	e000      	b.n	8004efe <HAL_RCCEx_PeriphCLKConfig+0x7e>
      break;
 8004efc:	bf00      	nop
    }

    if(ret == HAL_OK)
 8004efe:	7cfb      	ldrb	r3, [r7, #19]
 8004f00:	2b00      	cmp	r3, #0
 8004f02:	d10b      	bne.n	8004f1c <HAL_RCCEx_PeriphCLKConfig+0x9c>
    {
      /* Set the source of SAI1 clock*/
      __HAL_RCC_SAI1_CONFIG(PeriphClkInit->Sai1ClockSelection);
 8004f04:	4b76      	ldr	r3, [pc, #472]	; (80050e0 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8004f06:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8004f0a:	f423 0240 	bic.w	r2, r3, #12582912	; 0xc00000
 8004f0e:	687b      	ldr	r3, [r7, #4]
 8004f10:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8004f12:	4973      	ldr	r1, [pc, #460]	; (80050e0 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8004f14:	4313      	orrs	r3, r2
 8004f16:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
 8004f1a:	e001      	b.n	8004f20 <HAL_RCCEx_PeriphCLKConfig+0xa0>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8004f1c:	7cfb      	ldrb	r3, [r7, #19]
 8004f1e:	74bb      	strb	r3, [r7, #18]
#endif /* SAI1 */

#if defined(SAI2)

  /*-------------------------- SAI2 clock source configuration ---------------------*/
  if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2))
 8004f20:	687b      	ldr	r3, [r7, #4]
 8004f22:	681b      	ldr	r3, [r3, #0]
 8004f24:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8004f28:	2b00      	cmp	r3, #0
 8004f2a:	d041      	beq.n	8004fb0 <HAL_RCCEx_PeriphCLKConfig+0x130>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI2CLK(PeriphClkInit->Sai2ClockSelection));

    switch(PeriphClkInit->Sai2ClockSelection)
 8004f2c:	687b      	ldr	r3, [r7, #4]
 8004f2e:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8004f30:	f1b3 7f40 	cmp.w	r3, #50331648	; 0x3000000
 8004f34:	d02a      	beq.n	8004f8c <HAL_RCCEx_PeriphCLKConfig+0x10c>
 8004f36:	f1b3 7f40 	cmp.w	r3, #50331648	; 0x3000000
 8004f3a:	d824      	bhi.n	8004f86 <HAL_RCCEx_PeriphCLKConfig+0x106>
 8004f3c:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 8004f40:	d008      	beq.n	8004f54 <HAL_RCCEx_PeriphCLKConfig+0xd4>
 8004f42:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 8004f46:	d81e      	bhi.n	8004f86 <HAL_RCCEx_PeriphCLKConfig+0x106>
 8004f48:	2b00      	cmp	r3, #0
 8004f4a:	d00a      	beq.n	8004f62 <HAL_RCCEx_PeriphCLKConfig+0xe2>
 8004f4c:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8004f50:	d010      	beq.n	8004f74 <HAL_RCCEx_PeriphCLKConfig+0xf4>
 8004f52:	e018      	b.n	8004f86 <HAL_RCCEx_PeriphCLKConfig+0x106>
    {
    case RCC_SAI2CLKSOURCE_PLL:      /* PLL is used as clock source for SAI2*/
      /* Enable SAI Clock output generated from System PLL . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SAI3CLK);
 8004f54:	4b62      	ldr	r3, [pc, #392]	; (80050e0 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8004f56:	68db      	ldr	r3, [r3, #12]
 8004f58:	4a61      	ldr	r2, [pc, #388]	; (80050e0 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8004f5a:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8004f5e:	60d3      	str	r3, [r2, #12]
      /* SAI2 clock source config set later after clock selection check */
      break;
 8004f60:	e015      	b.n	8004f8e <HAL_RCCEx_PeriphCLKConfig+0x10e>

    case RCC_SAI2CLKSOURCE_PLLSAI1: /* PLLSAI1 is used as clock source for SAI2*/
      /* PLLSAI1 input clock, parameters M, N & P configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_P_UPDATE);
 8004f62:	687b      	ldr	r3, [r7, #4]
 8004f64:	3304      	adds	r3, #4
 8004f66:	2100      	movs	r1, #0
 8004f68:	4618      	mov	r0, r3
 8004f6a:	f000 fa73 	bl	8005454 <RCCEx_PLLSAI1_Config>
 8004f6e:	4603      	mov	r3, r0
 8004f70:	74fb      	strb	r3, [r7, #19]
      /* SAI2 clock source config set later after clock selection check */
      break;
 8004f72:	e00c      	b.n	8004f8e <HAL_RCCEx_PeriphCLKConfig+0x10e>

    case RCC_SAI2CLKSOURCE_PLLSAI2:  /* PLLSAI2 is used as clock source for SAI2*/
      /* PLLSAI2 input clock, parameters M, N & P configuration and clock output (PLLSAI2ClockOut) */
      ret = RCCEx_PLLSAI2_Config(&(PeriphClkInit->PLLSAI2), DIVIDER_P_UPDATE);
 8004f74:	687b      	ldr	r3, [r7, #4]
 8004f76:	3320      	adds	r3, #32
 8004f78:	2100      	movs	r1, #0
 8004f7a:	4618      	mov	r0, r3
 8004f7c:	f000 fb5e 	bl	800563c <RCCEx_PLLSAI2_Config>
 8004f80:	4603      	mov	r3, r0
 8004f82:	74fb      	strb	r3, [r7, #19]
      /* SAI2 clock source config set later after clock selection check */
      break;
 8004f84:	e003      	b.n	8004f8e <HAL_RCCEx_PeriphCLKConfig+0x10e>
#endif /* STM32L4P5xx || STM32L4Q5xx || STM32L4R5xx || STM32L4R7xx || STM32L4R9xx || STM32L4S5xx || STM32L4S7xx || STM32L4S9xx */
      /* SAI2 clock source config set later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 8004f86:	2301      	movs	r3, #1
 8004f88:	74fb      	strb	r3, [r7, #19]
      break;
 8004f8a:	e000      	b.n	8004f8e <HAL_RCCEx_PeriphCLKConfig+0x10e>
      break;
 8004f8c:	bf00      	nop
    }

    if(ret == HAL_OK)
 8004f8e:	7cfb      	ldrb	r3, [r7, #19]
 8004f90:	2b00      	cmp	r3, #0
 8004f92:	d10b      	bne.n	8004fac <HAL_RCCEx_PeriphCLKConfig+0x12c>
    {
      /* Set the source of SAI2 clock*/
      __HAL_RCC_SAI2_CONFIG(PeriphClkInit->Sai2ClockSelection);
 8004f94:	4b52      	ldr	r3, [pc, #328]	; (80050e0 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8004f96:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8004f9a:	f023 7240 	bic.w	r2, r3, #50331648	; 0x3000000
 8004f9e:	687b      	ldr	r3, [r7, #4]
 8004fa0:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8004fa2:	494f      	ldr	r1, [pc, #316]	; (80050e0 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8004fa4:	4313      	orrs	r3, r2
 8004fa6:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
 8004faa:	e001      	b.n	8004fb0 <HAL_RCCEx_PeriphCLKConfig+0x130>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8004fac:	7cfb      	ldrb	r3, [r7, #19]
 8004fae:	74bb      	strb	r3, [r7, #18]
    }
  }
#endif /* SAI2 */

  /*-------------------------- RTC clock source configuration ----------------------*/
  if((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC)
 8004fb0:	687b      	ldr	r3, [r7, #4]
 8004fb2:	681b      	ldr	r3, [r3, #0]
 8004fb4:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8004fb8:	2b00      	cmp	r3, #0
 8004fba:	f000 80a0 	beq.w	80050fe <HAL_RCCEx_PeriphCLKConfig+0x27e>
  {
    FlagStatus       pwrclkchanged = RESET;
 8004fbe:	2300      	movs	r3, #0
 8004fc0:	747b      	strb	r3, [r7, #17]

    /* Check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable Power Clock */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED() != 0U)
 8004fc2:	4b47      	ldr	r3, [pc, #284]	; (80050e0 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8004fc4:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8004fc6:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8004fca:	2b00      	cmp	r3, #0
 8004fcc:	d101      	bne.n	8004fd2 <HAL_RCCEx_PeriphCLKConfig+0x152>
 8004fce:	2301      	movs	r3, #1
 8004fd0:	e000      	b.n	8004fd4 <HAL_RCCEx_PeriphCLKConfig+0x154>
 8004fd2:	2300      	movs	r3, #0
 8004fd4:	2b00      	cmp	r3, #0
 8004fd6:	d00d      	beq.n	8004ff4 <HAL_RCCEx_PeriphCLKConfig+0x174>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8004fd8:	4b41      	ldr	r3, [pc, #260]	; (80050e0 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8004fda:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8004fdc:	4a40      	ldr	r2, [pc, #256]	; (80050e0 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8004fde:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8004fe2:	6593      	str	r3, [r2, #88]	; 0x58
 8004fe4:	4b3e      	ldr	r3, [pc, #248]	; (80050e0 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8004fe6:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8004fe8:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8004fec:	60bb      	str	r3, [r7, #8]
 8004fee:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8004ff0:	2301      	movs	r3, #1
 8004ff2:	747b      	strb	r3, [r7, #17]
    }

    /* Enable write access to Backup domain */
    SET_BIT(PWR->CR1, PWR_CR1_DBP);
 8004ff4:	4b3b      	ldr	r3, [pc, #236]	; (80050e4 <HAL_RCCEx_PeriphCLKConfig+0x264>)
 8004ff6:	681b      	ldr	r3, [r3, #0]
 8004ff8:	4a3a      	ldr	r2, [pc, #232]	; (80050e4 <HAL_RCCEx_PeriphCLKConfig+0x264>)
 8004ffa:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8004ffe:	6013      	str	r3, [r2, #0]

    /* Wait for Backup domain Write protection disable */
    tickstart = HAL_GetTick();
 8005000:	f7fc fe70 	bl	8001ce4 <HAL_GetTick>
 8005004:	60f8      	str	r0, [r7, #12]

    while(READ_BIT(PWR->CR1, PWR_CR1_DBP) == 0U)
 8005006:	e009      	b.n	800501c <HAL_RCCEx_PeriphCLKConfig+0x19c>
    {
      if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8005008:	f7fc fe6c 	bl	8001ce4 <HAL_GetTick>
 800500c:	4602      	mov	r2, r0
 800500e:	68fb      	ldr	r3, [r7, #12]
 8005010:	1ad3      	subs	r3, r2, r3
 8005012:	2b02      	cmp	r3, #2
 8005014:	d902      	bls.n	800501c <HAL_RCCEx_PeriphCLKConfig+0x19c>
      {
        ret = HAL_TIMEOUT;
 8005016:	2303      	movs	r3, #3
 8005018:	74fb      	strb	r3, [r7, #19]
        break;
 800501a:	e005      	b.n	8005028 <HAL_RCCEx_PeriphCLKConfig+0x1a8>
    while(READ_BIT(PWR->CR1, PWR_CR1_DBP) == 0U)
 800501c:	4b31      	ldr	r3, [pc, #196]	; (80050e4 <HAL_RCCEx_PeriphCLKConfig+0x264>)
 800501e:	681b      	ldr	r3, [r3, #0]
 8005020:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8005024:	2b00      	cmp	r3, #0
 8005026:	d0ef      	beq.n	8005008 <HAL_RCCEx_PeriphCLKConfig+0x188>
      }
    }

    if(ret == HAL_OK)
 8005028:	7cfb      	ldrb	r3, [r7, #19]
 800502a:	2b00      	cmp	r3, #0
 800502c:	d15c      	bne.n	80050e8 <HAL_RCCEx_PeriphCLKConfig+0x268>
    {
      /* Reset the Backup domain only if the RTC Clock source selection is modified from default */
      tmpregister = READ_BIT(RCC->BDCR, RCC_BDCR_RTCSEL);
 800502e:	4b2c      	ldr	r3, [pc, #176]	; (80050e0 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8005030:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8005034:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8005038:	617b      	str	r3, [r7, #20]

      if((tmpregister != RCC_RTCCLKSOURCE_NONE) && (tmpregister != PeriphClkInit->RTCClockSelection))
 800503a:	697b      	ldr	r3, [r7, #20]
 800503c:	2b00      	cmp	r3, #0
 800503e:	d01f      	beq.n	8005080 <HAL_RCCEx_PeriphCLKConfig+0x200>
 8005040:	687b      	ldr	r3, [r7, #4]
 8005042:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8005046:	697a      	ldr	r2, [r7, #20]
 8005048:	429a      	cmp	r2, r3
 800504a:	d019      	beq.n	8005080 <HAL_RCCEx_PeriphCLKConfig+0x200>
      {
        /* Store the content of BDCR register before the reset of Backup Domain */
        tmpregister = READ_BIT(RCC->BDCR, ~(RCC_BDCR_RTCSEL));
 800504c:	4b24      	ldr	r3, [pc, #144]	; (80050e0 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 800504e:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8005052:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8005056:	617b      	str	r3, [r7, #20]
        /* RTC Clock selection can be changed only if the Backup Domain is reset */
        __HAL_RCC_BACKUPRESET_FORCE();
 8005058:	4b21      	ldr	r3, [pc, #132]	; (80050e0 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 800505a:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800505e:	4a20      	ldr	r2, [pc, #128]	; (80050e0 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8005060:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8005064:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
        __HAL_RCC_BACKUPRESET_RELEASE();
 8005068:	4b1d      	ldr	r3, [pc, #116]	; (80050e0 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 800506a:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800506e:	4a1c      	ldr	r2, [pc, #112]	; (80050e0 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8005070:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8005074:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
        /* Restore the Content of BDCR register */
        RCC->BDCR = tmpregister;
 8005078:	4a19      	ldr	r2, [pc, #100]	; (80050e0 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 800507a:	697b      	ldr	r3, [r7, #20]
 800507c:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
      }

      /* Wait for LSE reactivation if LSE was enable prior to Backup Domain reset */
      if (HAL_IS_BIT_SET(tmpregister, RCC_BDCR_LSEON))
 8005080:	697b      	ldr	r3, [r7, #20]
 8005082:	f003 0301 	and.w	r3, r3, #1
 8005086:	2b00      	cmp	r3, #0
 8005088:	d016      	beq.n	80050b8 <HAL_RCCEx_PeriphCLKConfig+0x238>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800508a:	f7fc fe2b 	bl	8001ce4 <HAL_GetTick>
 800508e:	60f8      	str	r0, [r7, #12]

        /* Wait till LSE is ready */
        while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8005090:	e00b      	b.n	80050aa <HAL_RCCEx_PeriphCLKConfig+0x22a>
        {
          if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8005092:	f7fc fe27 	bl	8001ce4 <HAL_GetTick>
 8005096:	4602      	mov	r2, r0
 8005098:	68fb      	ldr	r3, [r7, #12]
 800509a:	1ad3      	subs	r3, r2, r3
 800509c:	f241 3288 	movw	r2, #5000	; 0x1388
 80050a0:	4293      	cmp	r3, r2
 80050a2:	d902      	bls.n	80050aa <HAL_RCCEx_PeriphCLKConfig+0x22a>
          {
            ret = HAL_TIMEOUT;
 80050a4:	2303      	movs	r3, #3
 80050a6:	74fb      	strb	r3, [r7, #19]
            break;
 80050a8:	e006      	b.n	80050b8 <HAL_RCCEx_PeriphCLKConfig+0x238>
        while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 80050aa:	4b0d      	ldr	r3, [pc, #52]	; (80050e0 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 80050ac:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80050b0:	f003 0302 	and.w	r3, r3, #2
 80050b4:	2b00      	cmp	r3, #0
 80050b6:	d0ec      	beq.n	8005092 <HAL_RCCEx_PeriphCLKConfig+0x212>
          }
        }
      }

      if(ret == HAL_OK)
 80050b8:	7cfb      	ldrb	r3, [r7, #19]
 80050ba:	2b00      	cmp	r3, #0
 80050bc:	d10c      	bne.n	80050d8 <HAL_RCCEx_PeriphCLKConfig+0x258>
      {
        /* Apply new RTC clock source selection */
        __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 80050be:	4b08      	ldr	r3, [pc, #32]	; (80050e0 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 80050c0:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80050c4:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 80050c8:	687b      	ldr	r3, [r7, #4]
 80050ca:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 80050ce:	4904      	ldr	r1, [pc, #16]	; (80050e0 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 80050d0:	4313      	orrs	r3, r2
 80050d2:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
 80050d6:	e009      	b.n	80050ec <HAL_RCCEx_PeriphCLKConfig+0x26c>
      }
      else
      {
        /* set overall return value */
        status = ret;
 80050d8:	7cfb      	ldrb	r3, [r7, #19]
 80050da:	74bb      	strb	r3, [r7, #18]
 80050dc:	e006      	b.n	80050ec <HAL_RCCEx_PeriphCLKConfig+0x26c>
 80050de:	bf00      	nop
 80050e0:	40021000 	.word	0x40021000
 80050e4:	40007000 	.word	0x40007000
      }
    }
    else
    {
      /* set overall return value */
      status = ret;
 80050e8:	7cfb      	ldrb	r3, [r7, #19]
 80050ea:	74bb      	strb	r3, [r7, #18]
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 80050ec:	7c7b      	ldrb	r3, [r7, #17]
 80050ee:	2b01      	cmp	r3, #1
 80050f0:	d105      	bne.n	80050fe <HAL_RCCEx_PeriphCLKConfig+0x27e>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 80050f2:	4b9e      	ldr	r3, [pc, #632]	; (800536c <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80050f4:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80050f6:	4a9d      	ldr	r2, [pc, #628]	; (800536c <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80050f8:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 80050fc:	6593      	str	r3, [r2, #88]	; 0x58
    }
  }

  /*-------------------------- USART1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART1) == RCC_PERIPHCLK_USART1)
 80050fe:	687b      	ldr	r3, [r7, #4]
 8005100:	681b      	ldr	r3, [r3, #0]
 8005102:	f003 0301 	and.w	r3, r3, #1
 8005106:	2b00      	cmp	r3, #0
 8005108:	d00a      	beq.n	8005120 <HAL_RCCEx_PeriphCLKConfig+0x2a0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART1CLKSOURCE(PeriphClkInit->Usart1ClockSelection));

    /* Configure the USART1 clock source */
    __HAL_RCC_USART1_CONFIG(PeriphClkInit->Usart1ClockSelection);
 800510a:	4b98      	ldr	r3, [pc, #608]	; (800536c <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 800510c:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8005110:	f023 0203 	bic.w	r2, r3, #3
 8005114:	687b      	ldr	r3, [r7, #4]
 8005116:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005118:	4994      	ldr	r1, [pc, #592]	; (800536c <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 800511a:	4313      	orrs	r3, r2
 800511c:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- USART2 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART2) == RCC_PERIPHCLK_USART2)
 8005120:	687b      	ldr	r3, [r7, #4]
 8005122:	681b      	ldr	r3, [r3, #0]
 8005124:	f003 0302 	and.w	r3, r3, #2
 8005128:	2b00      	cmp	r3, #0
 800512a:	d00a      	beq.n	8005142 <HAL_RCCEx_PeriphCLKConfig+0x2c2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART2CLKSOURCE(PeriphClkInit->Usart2ClockSelection));

    /* Configure the USART2 clock source */
    __HAL_RCC_USART2_CONFIG(PeriphClkInit->Usart2ClockSelection);
 800512c:	4b8f      	ldr	r3, [pc, #572]	; (800536c <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 800512e:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8005132:	f023 020c 	bic.w	r2, r3, #12
 8005136:	687b      	ldr	r3, [r7, #4]
 8005138:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800513a:	498c      	ldr	r1, [pc, #560]	; (800536c <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 800513c:	4313      	orrs	r3, r2
 800513e:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

#if defined(USART3)

  /*-------------------------- USART3 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART3) == RCC_PERIPHCLK_USART3)
 8005142:	687b      	ldr	r3, [r7, #4]
 8005144:	681b      	ldr	r3, [r3, #0]
 8005146:	f003 0304 	and.w	r3, r3, #4
 800514a:	2b00      	cmp	r3, #0
 800514c:	d00a      	beq.n	8005164 <HAL_RCCEx_PeriphCLKConfig+0x2e4>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART3CLKSOURCE(PeriphClkInit->Usart3ClockSelection));

    /* Configure the USART3 clock source */
    __HAL_RCC_USART3_CONFIG(PeriphClkInit->Usart3ClockSelection);
 800514e:	4b87      	ldr	r3, [pc, #540]	; (800536c <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8005150:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8005154:	f023 0230 	bic.w	r2, r3, #48	; 0x30
 8005158:	687b      	ldr	r3, [r7, #4]
 800515a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800515c:	4983      	ldr	r1, [pc, #524]	; (800536c <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 800515e:	4313      	orrs	r3, r2
 8005160:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
#endif /* USART3 */

#if defined(UART4)

  /*-------------------------- UART4 clock source configuration --------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART4) == RCC_PERIPHCLK_UART4)
 8005164:	687b      	ldr	r3, [r7, #4]
 8005166:	681b      	ldr	r3, [r3, #0]
 8005168:	f003 0308 	and.w	r3, r3, #8
 800516c:	2b00      	cmp	r3, #0
 800516e:	d00a      	beq.n	8005186 <HAL_RCCEx_PeriphCLKConfig+0x306>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART4CLKSOURCE(PeriphClkInit->Uart4ClockSelection));

    /* Configure the UART4 clock source */
    __HAL_RCC_UART4_CONFIG(PeriphClkInit->Uart4ClockSelection);
 8005170:	4b7e      	ldr	r3, [pc, #504]	; (800536c <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8005172:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8005176:	f023 02c0 	bic.w	r2, r3, #192	; 0xc0
 800517a:	687b      	ldr	r3, [r7, #4]
 800517c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800517e:	497b      	ldr	r1, [pc, #492]	; (800536c <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8005180:	4313      	orrs	r3, r2
 8005182:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
#endif /* UART4 */

#if defined(UART5)

  /*-------------------------- UART5 clock source configuration --------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART5) == RCC_PERIPHCLK_UART5)
 8005186:	687b      	ldr	r3, [r7, #4]
 8005188:	681b      	ldr	r3, [r3, #0]
 800518a:	f003 0310 	and.w	r3, r3, #16
 800518e:	2b00      	cmp	r3, #0
 8005190:	d00a      	beq.n	80051a8 <HAL_RCCEx_PeriphCLKConfig+0x328>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART5CLKSOURCE(PeriphClkInit->Uart5ClockSelection));

    /* Configure the UART5 clock source */
    __HAL_RCC_UART5_CONFIG(PeriphClkInit->Uart5ClockSelection);
 8005192:	4b76      	ldr	r3, [pc, #472]	; (800536c <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8005194:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8005198:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 800519c:	687b      	ldr	r3, [r7, #4]
 800519e:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80051a0:	4972      	ldr	r1, [pc, #456]	; (800536c <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80051a2:	4313      	orrs	r3, r2
 80051a4:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

#endif /* UART5 */

  /*-------------------------- LPUART1 clock source configuration ------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPUART1) == RCC_PERIPHCLK_LPUART1)
 80051a8:	687b      	ldr	r3, [r7, #4]
 80051aa:	681b      	ldr	r3, [r3, #0]
 80051ac:	f003 0320 	and.w	r3, r3, #32
 80051b0:	2b00      	cmp	r3, #0
 80051b2:	d00a      	beq.n	80051ca <HAL_RCCEx_PeriphCLKConfig+0x34a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPUART1CLKSOURCE(PeriphClkInit->Lpuart1ClockSelection));

    /* Configure the LPUART1 clock source */
    __HAL_RCC_LPUART1_CONFIG(PeriphClkInit->Lpuart1ClockSelection);
 80051b4:	4b6d      	ldr	r3, [pc, #436]	; (800536c <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80051b6:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80051ba:	f423 6240 	bic.w	r2, r3, #3072	; 0xc00
 80051be:	687b      	ldr	r3, [r7, #4]
 80051c0:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80051c2:	496a      	ldr	r1, [pc, #424]	; (800536c <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80051c4:	4313      	orrs	r3, r2
 80051c6:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- LPTIM1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == (RCC_PERIPHCLK_LPTIM1))
 80051ca:	687b      	ldr	r3, [r7, #4]
 80051cc:	681b      	ldr	r3, [r3, #0]
 80051ce:	f403 7300 	and.w	r3, r3, #512	; 0x200
 80051d2:	2b00      	cmp	r3, #0
 80051d4:	d00a      	beq.n	80051ec <HAL_RCCEx_PeriphCLKConfig+0x36c>
  {
    assert_param(IS_RCC_LPTIM1CLK(PeriphClkInit->Lptim1ClockSelection));
    __HAL_RCC_LPTIM1_CONFIG(PeriphClkInit->Lptim1ClockSelection);
 80051d6:	4b65      	ldr	r3, [pc, #404]	; (800536c <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80051d8:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80051dc:	f423 2240 	bic.w	r2, r3, #786432	; 0xc0000
 80051e0:	687b      	ldr	r3, [r7, #4]
 80051e2:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80051e4:	4961      	ldr	r1, [pc, #388]	; (800536c <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80051e6:	4313      	orrs	r3, r2
 80051e8:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- LPTIM2 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM2) == (RCC_PERIPHCLK_LPTIM2))
 80051ec:	687b      	ldr	r3, [r7, #4]
 80051ee:	681b      	ldr	r3, [r3, #0]
 80051f0:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80051f4:	2b00      	cmp	r3, #0
 80051f6:	d00a      	beq.n	800520e <HAL_RCCEx_PeriphCLKConfig+0x38e>
  {
    assert_param(IS_RCC_LPTIM2CLK(PeriphClkInit->Lptim2ClockSelection));
    __HAL_RCC_LPTIM2_CONFIG(PeriphClkInit->Lptim2ClockSelection);
 80051f8:	4b5c      	ldr	r3, [pc, #368]	; (800536c <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80051fa:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80051fe:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 8005202:	687b      	ldr	r3, [r7, #4]
 8005204:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8005206:	4959      	ldr	r1, [pc, #356]	; (800536c <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8005208:	4313      	orrs	r3, r2
 800520a:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- I2C1 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1) == RCC_PERIPHCLK_I2C1)
 800520e:	687b      	ldr	r3, [r7, #4]
 8005210:	681b      	ldr	r3, [r3, #0]
 8005212:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8005216:	2b00      	cmp	r3, #0
 8005218:	d00a      	beq.n	8005230 <HAL_RCCEx_PeriphCLKConfig+0x3b0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1CLKSOURCE(PeriphClkInit->I2c1ClockSelection));

    /* Configure the I2C1 clock source */
    __HAL_RCC_I2C1_CONFIG(PeriphClkInit->I2c1ClockSelection);
 800521a:	4b54      	ldr	r3, [pc, #336]	; (800536c <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 800521c:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8005220:	f423 5240 	bic.w	r2, r3, #12288	; 0x3000
 8005224:	687b      	ldr	r3, [r7, #4]
 8005226:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8005228:	4950      	ldr	r1, [pc, #320]	; (800536c <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 800522a:	4313      	orrs	r3, r2
 800522c:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

#if defined(I2C2)

  /*-------------------------- I2C2 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C2) == RCC_PERIPHCLK_I2C2)
 8005230:	687b      	ldr	r3, [r7, #4]
 8005232:	681b      	ldr	r3, [r3, #0]
 8005234:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8005238:	2b00      	cmp	r3, #0
 800523a:	d00a      	beq.n	8005252 <HAL_RCCEx_PeriphCLKConfig+0x3d2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C2CLKSOURCE(PeriphClkInit->I2c2ClockSelection));

    /* Configure the I2C2 clock source */
    __HAL_RCC_I2C2_CONFIG(PeriphClkInit->I2c2ClockSelection);
 800523c:	4b4b      	ldr	r3, [pc, #300]	; (800536c <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 800523e:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8005242:	f423 4240 	bic.w	r2, r3, #49152	; 0xc000
 8005246:	687b      	ldr	r3, [r7, #4]
 8005248:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800524a:	4948      	ldr	r1, [pc, #288]	; (800536c <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 800524c:	4313      	orrs	r3, r2
 800524e:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

#endif /* I2C2 */

  /*-------------------------- I2C3 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C3) == RCC_PERIPHCLK_I2C3)
 8005252:	687b      	ldr	r3, [r7, #4]
 8005254:	681b      	ldr	r3, [r3, #0]
 8005256:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800525a:	2b00      	cmp	r3, #0
 800525c:	d00a      	beq.n	8005274 <HAL_RCCEx_PeriphCLKConfig+0x3f4>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C3CLKSOURCE(PeriphClkInit->I2c3ClockSelection));

    /* Configure the I2C3 clock source */
    __HAL_RCC_I2C3_CONFIG(PeriphClkInit->I2c3ClockSelection);
 800525e:	4b43      	ldr	r3, [pc, #268]	; (800536c <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8005260:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8005264:	f423 3240 	bic.w	r2, r3, #196608	; 0x30000
 8005268:	687b      	ldr	r3, [r7, #4]
 800526a:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800526c:	493f      	ldr	r1, [pc, #252]	; (800536c <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 800526e:	4313      	orrs	r3, r2
 8005270:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
#endif /* I2C4 */

#if defined(USB_OTG_FS) || defined(USB)

  /*-------------------------- USB clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == (RCC_PERIPHCLK_USB))
 8005274:	687b      	ldr	r3, [r7, #4]
 8005276:	681b      	ldr	r3, [r3, #0]
 8005278:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 800527c:	2b00      	cmp	r3, #0
 800527e:	d028      	beq.n	80052d2 <HAL_RCCEx_PeriphCLKConfig+0x452>
  {
    assert_param(IS_RCC_USBCLKSOURCE(PeriphClkInit->UsbClockSelection));
    __HAL_RCC_USB_CONFIG(PeriphClkInit->UsbClockSelection);
 8005280:	4b3a      	ldr	r3, [pc, #232]	; (800536c <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8005282:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8005286:	f023 6240 	bic.w	r2, r3, #201326592	; 0xc000000
 800528a:	687b      	ldr	r3, [r7, #4]
 800528c:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800528e:	4937      	ldr	r1, [pc, #220]	; (800536c <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8005290:	4313      	orrs	r3, r2
 8005292:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

    if(PeriphClkInit->UsbClockSelection == RCC_USBCLKSOURCE_PLL)
 8005296:	687b      	ldr	r3, [r7, #4]
 8005298:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800529a:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 800529e:	d106      	bne.n	80052ae <HAL_RCCEx_PeriphCLKConfig+0x42e>
    {
      /* Enable PLL48M1CLK output clock */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 80052a0:	4b32      	ldr	r3, [pc, #200]	; (800536c <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80052a2:	68db      	ldr	r3, [r3, #12]
 80052a4:	4a31      	ldr	r2, [pc, #196]	; (800536c <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80052a6:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 80052aa:	60d3      	str	r3, [r2, #12]
 80052ac:	e011      	b.n	80052d2 <HAL_RCCEx_PeriphCLKConfig+0x452>
    }
    else
    {
#if defined(RCC_PLLSAI1_SUPPORT)
      if(PeriphClkInit->UsbClockSelection == RCC_USBCLKSOURCE_PLLSAI1)
 80052ae:	687b      	ldr	r3, [r7, #4]
 80052b0:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 80052b2:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 80052b6:	d10c      	bne.n	80052d2 <HAL_RCCEx_PeriphCLKConfig+0x452>
      {
        /* PLLSAI1 input clock, parameters M, N & Q configuration and clock output (PLLSAI1ClockOut) */
        ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_Q_UPDATE);
 80052b8:	687b      	ldr	r3, [r7, #4]
 80052ba:	3304      	adds	r3, #4
 80052bc:	2101      	movs	r1, #1
 80052be:	4618      	mov	r0, r3
 80052c0:	f000 f8c8 	bl	8005454 <RCCEx_PLLSAI1_Config>
 80052c4:	4603      	mov	r3, r0
 80052c6:	74fb      	strb	r3, [r7, #19]

        if(ret != HAL_OK)
 80052c8:	7cfb      	ldrb	r3, [r7, #19]
 80052ca:	2b00      	cmp	r3, #0
 80052cc:	d001      	beq.n	80052d2 <HAL_RCCEx_PeriphCLKConfig+0x452>
        {
          /* set overall return value */
          status = ret;
 80052ce:	7cfb      	ldrb	r3, [r7, #19]
 80052d0:	74bb      	strb	r3, [r7, #18]
#endif /* USB_OTG_FS || USB */

#if defined(SDMMC1)

  /*-------------------------- SDMMC1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SDMMC1) == (RCC_PERIPHCLK_SDMMC1))
 80052d2:	687b      	ldr	r3, [r7, #4]
 80052d4:	681b      	ldr	r3, [r3, #0]
 80052d6:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 80052da:	2b00      	cmp	r3, #0
 80052dc:	d028      	beq.n	8005330 <HAL_RCCEx_PeriphCLKConfig+0x4b0>
  {
    assert_param(IS_RCC_SDMMC1CLKSOURCE(PeriphClkInit->Sdmmc1ClockSelection));
    __HAL_RCC_SDMMC1_CONFIG(PeriphClkInit->Sdmmc1ClockSelection);
 80052de:	4b23      	ldr	r3, [pc, #140]	; (800536c <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80052e0:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80052e4:	f023 6240 	bic.w	r2, r3, #201326592	; 0xc000000
 80052e8:	687b      	ldr	r3, [r7, #4]
 80052ea:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80052ec:	491f      	ldr	r1, [pc, #124]	; (800536c <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80052ee:	4313      	orrs	r3, r2
 80052f0:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

    if(PeriphClkInit->Sdmmc1ClockSelection == RCC_SDMMC1CLKSOURCE_PLL)   /* PLL "Q" ? */
 80052f4:	687b      	ldr	r3, [r7, #4]
 80052f6:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80052f8:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 80052fc:	d106      	bne.n	800530c <HAL_RCCEx_PeriphCLKConfig+0x48c>
    {
      /* Enable PLL48M1CLK output clock */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 80052fe:	4b1b      	ldr	r3, [pc, #108]	; (800536c <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8005300:	68db      	ldr	r3, [r3, #12]
 8005302:	4a1a      	ldr	r2, [pc, #104]	; (800536c <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8005304:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8005308:	60d3      	str	r3, [r2, #12]
 800530a:	e011      	b.n	8005330 <HAL_RCCEx_PeriphCLKConfig+0x4b0>
    {
      /* Enable PLLSAI3CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SAI3CLK);
    }
#endif
    else if(PeriphClkInit->Sdmmc1ClockSelection == RCC_SDMMC1CLKSOURCE_PLLSAI1)
 800530c:	687b      	ldr	r3, [r7, #4]
 800530e:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8005310:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 8005314:	d10c      	bne.n	8005330 <HAL_RCCEx_PeriphCLKConfig+0x4b0>
    {
      /* PLLSAI1 input clock, parameters M, N & Q configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_Q_UPDATE);
 8005316:	687b      	ldr	r3, [r7, #4]
 8005318:	3304      	adds	r3, #4
 800531a:	2101      	movs	r1, #1
 800531c:	4618      	mov	r0, r3
 800531e:	f000 f899 	bl	8005454 <RCCEx_PLLSAI1_Config>
 8005322:	4603      	mov	r3, r0
 8005324:	74fb      	strb	r3, [r7, #19]

      if(ret != HAL_OK)
 8005326:	7cfb      	ldrb	r3, [r7, #19]
 8005328:	2b00      	cmp	r3, #0
 800532a:	d001      	beq.n	8005330 <HAL_RCCEx_PeriphCLKConfig+0x4b0>
      {
        /* set overall return value */
        status = ret;
 800532c:	7cfb      	ldrb	r3, [r7, #19]
 800532e:	74bb      	strb	r3, [r7, #18]
  }

#endif /* SDMMC1 */

  /*-------------------------- RNG clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RNG) == (RCC_PERIPHCLK_RNG))
 8005330:	687b      	ldr	r3, [r7, #4]
 8005332:	681b      	ldr	r3, [r3, #0]
 8005334:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8005338:	2b00      	cmp	r3, #0
 800533a:	d02b      	beq.n	8005394 <HAL_RCCEx_PeriphCLKConfig+0x514>
  {
    assert_param(IS_RCC_RNGCLKSOURCE(PeriphClkInit->RngClockSelection));
    __HAL_RCC_RNG_CONFIG(PeriphClkInit->RngClockSelection);
 800533c:	4b0b      	ldr	r3, [pc, #44]	; (800536c <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 800533e:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8005342:	f023 6240 	bic.w	r2, r3, #201326592	; 0xc000000
 8005346:	687b      	ldr	r3, [r7, #4]
 8005348:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800534a:	4908      	ldr	r1, [pc, #32]	; (800536c <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 800534c:	4313      	orrs	r3, r2
 800534e:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

    if(PeriphClkInit->RngClockSelection == RCC_RNGCLKSOURCE_PLL)
 8005352:	687b      	ldr	r3, [r7, #4]
 8005354:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8005356:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 800535a:	d109      	bne.n	8005370 <HAL_RCCEx_PeriphCLKConfig+0x4f0>
    {
      /* Enable PLL48M1CLK output clock */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 800535c:	4b03      	ldr	r3, [pc, #12]	; (800536c <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 800535e:	68db      	ldr	r3, [r3, #12]
 8005360:	4a02      	ldr	r2, [pc, #8]	; (800536c <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8005362:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8005366:	60d3      	str	r3, [r2, #12]
 8005368:	e014      	b.n	8005394 <HAL_RCCEx_PeriphCLKConfig+0x514>
 800536a:	bf00      	nop
 800536c:	40021000 	.word	0x40021000
    }
#if defined(RCC_PLLSAI1_SUPPORT)
    else if(PeriphClkInit->RngClockSelection == RCC_RNGCLKSOURCE_PLLSAI1)
 8005370:	687b      	ldr	r3, [r7, #4]
 8005372:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8005374:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 8005378:	d10c      	bne.n	8005394 <HAL_RCCEx_PeriphCLKConfig+0x514>
    {
      /* PLLSAI1 input clock, parameters M, N & Q configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_Q_UPDATE);
 800537a:	687b      	ldr	r3, [r7, #4]
 800537c:	3304      	adds	r3, #4
 800537e:	2101      	movs	r1, #1
 8005380:	4618      	mov	r0, r3
 8005382:	f000 f867 	bl	8005454 <RCCEx_PLLSAI1_Config>
 8005386:	4603      	mov	r3, r0
 8005388:	74fb      	strb	r3, [r7, #19]

      if(ret != HAL_OK)
 800538a:	7cfb      	ldrb	r3, [r7, #19]
 800538c:	2b00      	cmp	r3, #0
 800538e:	d001      	beq.n	8005394 <HAL_RCCEx_PeriphCLKConfig+0x514>
      {
        /* set overall return value */
        status = ret;
 8005390:	7cfb      	ldrb	r3, [r7, #19]
 8005392:	74bb      	strb	r3, [r7, #18]
    }
  }

  /*-------------------------- ADC clock source configuration ----------------------*/
#if !defined(STM32L412xx) && !defined(STM32L422xx)
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC) == RCC_PERIPHCLK_ADC)
 8005394:	687b      	ldr	r3, [r7, #4]
 8005396:	681b      	ldr	r3, [r3, #0]
 8005398:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 800539c:	2b00      	cmp	r3, #0
 800539e:	d02f      	beq.n	8005400 <HAL_RCCEx_PeriphCLKConfig+0x580>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADCCLKSOURCE(PeriphClkInit->AdcClockSelection));

    /* Configure the ADC interface clock source */
    __HAL_RCC_ADC_CONFIG(PeriphClkInit->AdcClockSelection);
 80053a0:	4b2b      	ldr	r3, [pc, #172]	; (8005450 <HAL_RCCEx_PeriphCLKConfig+0x5d0>)
 80053a2:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80053a6:	f023 5240 	bic.w	r2, r3, #805306368	; 0x30000000
 80053aa:	687b      	ldr	r3, [r7, #4]
 80053ac:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 80053ae:	4928      	ldr	r1, [pc, #160]	; (8005450 <HAL_RCCEx_PeriphCLKConfig+0x5d0>)
 80053b0:	4313      	orrs	r3, r2
 80053b2:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

#if defined(RCC_PLLSAI1_SUPPORT)
    if(PeriphClkInit->AdcClockSelection == RCC_ADCCLKSOURCE_PLLSAI1)
 80053b6:	687b      	ldr	r3, [r7, #4]
 80053b8:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 80053ba:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 80053be:	d10d      	bne.n	80053dc <HAL_RCCEx_PeriphCLKConfig+0x55c>
    {
      /* PLLSAI1 input clock, parameters M, N & R configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_R_UPDATE);
 80053c0:	687b      	ldr	r3, [r7, #4]
 80053c2:	3304      	adds	r3, #4
 80053c4:	2102      	movs	r1, #2
 80053c6:	4618      	mov	r0, r3
 80053c8:	f000 f844 	bl	8005454 <RCCEx_PLLSAI1_Config>
 80053cc:	4603      	mov	r3, r0
 80053ce:	74fb      	strb	r3, [r7, #19]

      if(ret != HAL_OK)
 80053d0:	7cfb      	ldrb	r3, [r7, #19]
 80053d2:	2b00      	cmp	r3, #0
 80053d4:	d014      	beq.n	8005400 <HAL_RCCEx_PeriphCLKConfig+0x580>
      {
        /* set overall return value */
        status = ret;
 80053d6:	7cfb      	ldrb	r3, [r7, #19]
 80053d8:	74bb      	strb	r3, [r7, #18]
 80053da:	e011      	b.n	8005400 <HAL_RCCEx_PeriphCLKConfig+0x580>
    }
#endif /* RCC_PLLSAI1_SUPPORT */

#if defined(STM32L471xx) || defined(STM32L475xx) || defined(STM32L476xx) || defined(STM32L485xx) || defined(STM32L486xx) || defined(STM32L496xx) || defined(STM32L4A6xx)

    else if(PeriphClkInit->AdcClockSelection == RCC_ADCCLKSOURCE_PLLSAI2)
 80053dc:	687b      	ldr	r3, [r7, #4]
 80053de:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 80053e0:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 80053e4:	d10c      	bne.n	8005400 <HAL_RCCEx_PeriphCLKConfig+0x580>
    {
      /* PLLSAI2 input clock, parameters M, N & R configuration and clock output (PLLSAI2ClockOut) */
      ret = RCCEx_PLLSAI2_Config(&(PeriphClkInit->PLLSAI2), DIVIDER_R_UPDATE);
 80053e6:	687b      	ldr	r3, [r7, #4]
 80053e8:	3320      	adds	r3, #32
 80053ea:	2102      	movs	r1, #2
 80053ec:	4618      	mov	r0, r3
 80053ee:	f000 f925 	bl	800563c <RCCEx_PLLSAI2_Config>
 80053f2:	4603      	mov	r3, r0
 80053f4:	74fb      	strb	r3, [r7, #19]

      if(ret != HAL_OK)
 80053f6:	7cfb      	ldrb	r3, [r7, #19]
 80053f8:	2b00      	cmp	r3, #0
 80053fa:	d001      	beq.n	8005400 <HAL_RCCEx_PeriphCLKConfig+0x580>
      {
        /* set overall return value */
        status = ret;
 80053fc:	7cfb      	ldrb	r3, [r7, #19]
 80053fe:	74bb      	strb	r3, [r7, #18]
#endif /* !STM32L412xx && !STM32L422xx */

#if defined(SWPMI1)

  /*-------------------------- SWPMI1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SWPMI1) == RCC_PERIPHCLK_SWPMI1)
 8005400:	687b      	ldr	r3, [r7, #4]
 8005402:	681b      	ldr	r3, [r3, #0]
 8005404:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8005408:	2b00      	cmp	r3, #0
 800540a:	d00a      	beq.n	8005422 <HAL_RCCEx_PeriphCLKConfig+0x5a2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SWPMI1CLKSOURCE(PeriphClkInit->Swpmi1ClockSelection));

    /* Configure the SWPMI1 clock source */
    __HAL_RCC_SWPMI1_CONFIG(PeriphClkInit->Swpmi1ClockSelection);
 800540c:	4b10      	ldr	r3, [pc, #64]	; (8005450 <HAL_RCCEx_PeriphCLKConfig+0x5d0>)
 800540e:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8005412:	f023 4280 	bic.w	r2, r3, #1073741824	; 0x40000000
 8005416:	687b      	ldr	r3, [r7, #4]
 8005418:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 800541a:	490d      	ldr	r1, [pc, #52]	; (8005450 <HAL_RCCEx_PeriphCLKConfig+0x5d0>)
 800541c:	4313      	orrs	r3, r2
 800541e:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
#endif /* SWPMI1 */

#if defined(DFSDM1_Filter0)

  /*-------------------------- DFSDM1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_DFSDM1) == RCC_PERIPHCLK_DFSDM1)
 8005422:	687b      	ldr	r3, [r7, #4]
 8005424:	681b      	ldr	r3, [r3, #0]
 8005426:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 800542a:	2b00      	cmp	r3, #0
 800542c:	d00b      	beq.n	8005446 <HAL_RCCEx_PeriphCLKConfig+0x5c6>
  {
    /* Check the parameters */
    assert_param(IS_RCC_DFSDM1CLKSOURCE(PeriphClkInit->Dfsdm1ClockSelection));

    /* Configure the DFSDM1 interface clock source */
    __HAL_RCC_DFSDM1_CONFIG(PeriphClkInit->Dfsdm1ClockSelection);
 800542e:	4b08      	ldr	r3, [pc, #32]	; (8005450 <HAL_RCCEx_PeriphCLKConfig+0x5d0>)
 8005430:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8005434:	f023 4200 	bic.w	r2, r3, #2147483648	; 0x80000000
 8005438:	687b      	ldr	r3, [r7, #4]
 800543a:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 800543e:	4904      	ldr	r1, [pc, #16]	; (8005450 <HAL_RCCEx_PeriphCLKConfig+0x5d0>)
 8005440:	4313      	orrs	r3, r2
 8005442:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
    }
  }

#endif /* OCTOSPI1 || OCTOSPI2 */

  return status;
 8005446:	7cbb      	ldrb	r3, [r7, #18]
}
 8005448:	4618      	mov	r0, r3
 800544a:	3718      	adds	r7, #24
 800544c:	46bd      	mov	sp, r7
 800544e:	bd80      	pop	{r7, pc}
 8005450:	40021000 	.word	0x40021000

08005454 <RCCEx_PLLSAI1_Config>:
  * @note   PLLSAI1 is temporary disable to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLLSAI1_Config(RCC_PLLSAI1InitTypeDef *PllSai1, uint32_t Divider)
{
 8005454:	b580      	push	{r7, lr}
 8005456:	b084      	sub	sp, #16
 8005458:	af00      	add	r7, sp, #0
 800545a:	6078      	str	r0, [r7, #4]
 800545c:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 800545e:	2300      	movs	r3, #0
 8005460:	73fb      	strb	r3, [r7, #15]
  assert_param(IS_RCC_PLLSAI1M_VALUE(PllSai1->PLLSAI1M));
  assert_param(IS_RCC_PLLSAI1N_VALUE(PllSai1->PLLSAI1N));
  assert_param(IS_RCC_PLLSAI1CLOCKOUT_VALUE(PllSai1->PLLSAI1ClockOut));

  /* Check that PLLSAI1 clock source and divider M can be applied */
  if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_NONE)
 8005462:	4b75      	ldr	r3, [pc, #468]	; (8005638 <RCCEx_PLLSAI1_Config+0x1e4>)
 8005464:	68db      	ldr	r3, [r3, #12]
 8005466:	f003 0303 	and.w	r3, r3, #3
 800546a:	2b00      	cmp	r3, #0
 800546c:	d018      	beq.n	80054a0 <RCCEx_PLLSAI1_Config+0x4c>
  {
    /* PLL clock source and divider M already set, check that no request for change  */
    if((__HAL_RCC_GET_PLL_OSCSOURCE() != PllSai1->PLLSAI1Source)
 800546e:	4b72      	ldr	r3, [pc, #456]	; (8005638 <RCCEx_PLLSAI1_Config+0x1e4>)
 8005470:	68db      	ldr	r3, [r3, #12]
 8005472:	f003 0203 	and.w	r2, r3, #3
 8005476:	687b      	ldr	r3, [r7, #4]
 8005478:	681b      	ldr	r3, [r3, #0]
 800547a:	429a      	cmp	r2, r3
 800547c:	d10d      	bne.n	800549a <RCCEx_PLLSAI1_Config+0x46>
       ||
       (PllSai1->PLLSAI1Source == RCC_PLLSOURCE_NONE)
 800547e:	687b      	ldr	r3, [r7, #4]
 8005480:	681b      	ldr	r3, [r3, #0]
       ||
 8005482:	2b00      	cmp	r3, #0
 8005484:	d009      	beq.n	800549a <RCCEx_PLLSAI1_Config+0x46>
#if !defined(RCC_PLLSAI1M_DIV_1_16_SUPPORT)
       ||
       (((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U) != PllSai1->PLLSAI1M)
 8005486:	4b6c      	ldr	r3, [pc, #432]	; (8005638 <RCCEx_PLLSAI1_Config+0x1e4>)
 8005488:	68db      	ldr	r3, [r3, #12]
 800548a:	091b      	lsrs	r3, r3, #4
 800548c:	f003 0307 	and.w	r3, r3, #7
 8005490:	1c5a      	adds	r2, r3, #1
 8005492:	687b      	ldr	r3, [r7, #4]
 8005494:	685b      	ldr	r3, [r3, #4]
       ||
 8005496:	429a      	cmp	r2, r3
 8005498:	d047      	beq.n	800552a <RCCEx_PLLSAI1_Config+0xd6>
#endif
      )
    {
      status = HAL_ERROR;
 800549a:	2301      	movs	r3, #1
 800549c:	73fb      	strb	r3, [r7, #15]
 800549e:	e044      	b.n	800552a <RCCEx_PLLSAI1_Config+0xd6>
    }
  }
  else
  {
    /* Check PLLSAI1 clock source availability */
    switch(PllSai1->PLLSAI1Source)
 80054a0:	687b      	ldr	r3, [r7, #4]
 80054a2:	681b      	ldr	r3, [r3, #0]
 80054a4:	2b03      	cmp	r3, #3
 80054a6:	d018      	beq.n	80054da <RCCEx_PLLSAI1_Config+0x86>
 80054a8:	2b03      	cmp	r3, #3
 80054aa:	d825      	bhi.n	80054f8 <RCCEx_PLLSAI1_Config+0xa4>
 80054ac:	2b01      	cmp	r3, #1
 80054ae:	d002      	beq.n	80054b6 <RCCEx_PLLSAI1_Config+0x62>
 80054b0:	2b02      	cmp	r3, #2
 80054b2:	d009      	beq.n	80054c8 <RCCEx_PLLSAI1_Config+0x74>
 80054b4:	e020      	b.n	80054f8 <RCCEx_PLLSAI1_Config+0xa4>
    {
    case RCC_PLLSOURCE_MSI:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_MSIRDY))
 80054b6:	4b60      	ldr	r3, [pc, #384]	; (8005638 <RCCEx_PLLSAI1_Config+0x1e4>)
 80054b8:	681b      	ldr	r3, [r3, #0]
 80054ba:	f003 0302 	and.w	r3, r3, #2
 80054be:	2b00      	cmp	r3, #0
 80054c0:	d11d      	bne.n	80054fe <RCCEx_PLLSAI1_Config+0xaa>
      {
        status = HAL_ERROR;
 80054c2:	2301      	movs	r3, #1
 80054c4:	73fb      	strb	r3, [r7, #15]
      }
      break;
 80054c6:	e01a      	b.n	80054fe <RCCEx_PLLSAI1_Config+0xaa>
    case RCC_PLLSOURCE_HSI:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSIRDY))
 80054c8:	4b5b      	ldr	r3, [pc, #364]	; (8005638 <RCCEx_PLLSAI1_Config+0x1e4>)
 80054ca:	681b      	ldr	r3, [r3, #0]
 80054cc:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80054d0:	2b00      	cmp	r3, #0
 80054d2:	d116      	bne.n	8005502 <RCCEx_PLLSAI1_Config+0xae>
      {
        status = HAL_ERROR;
 80054d4:	2301      	movs	r3, #1
 80054d6:	73fb      	strb	r3, [r7, #15]
      }
      break;
 80054d8:	e013      	b.n	8005502 <RCCEx_PLLSAI1_Config+0xae>
    case RCC_PLLSOURCE_HSE:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSERDY))
 80054da:	4b57      	ldr	r3, [pc, #348]	; (8005638 <RCCEx_PLLSAI1_Config+0x1e4>)
 80054dc:	681b      	ldr	r3, [r3, #0]
 80054de:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80054e2:	2b00      	cmp	r3, #0
 80054e4:	d10f      	bne.n	8005506 <RCCEx_PLLSAI1_Config+0xb2>
      {
        if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSEBYP))
 80054e6:	4b54      	ldr	r3, [pc, #336]	; (8005638 <RCCEx_PLLSAI1_Config+0x1e4>)
 80054e8:	681b      	ldr	r3, [r3, #0]
 80054ea:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 80054ee:	2b00      	cmp	r3, #0
 80054f0:	d109      	bne.n	8005506 <RCCEx_PLLSAI1_Config+0xb2>
        {
          status = HAL_ERROR;
 80054f2:	2301      	movs	r3, #1
 80054f4:	73fb      	strb	r3, [r7, #15]
        }
      }
      break;
 80054f6:	e006      	b.n	8005506 <RCCEx_PLLSAI1_Config+0xb2>
    default:
      status = HAL_ERROR;
 80054f8:	2301      	movs	r3, #1
 80054fa:	73fb      	strb	r3, [r7, #15]
      break;
 80054fc:	e004      	b.n	8005508 <RCCEx_PLLSAI1_Config+0xb4>
      break;
 80054fe:	bf00      	nop
 8005500:	e002      	b.n	8005508 <RCCEx_PLLSAI1_Config+0xb4>
      break;
 8005502:	bf00      	nop
 8005504:	e000      	b.n	8005508 <RCCEx_PLLSAI1_Config+0xb4>
      break;
 8005506:	bf00      	nop
    }

    if(status == HAL_OK)
 8005508:	7bfb      	ldrb	r3, [r7, #15]
 800550a:	2b00      	cmp	r3, #0
 800550c:	d10d      	bne.n	800552a <RCCEx_PLLSAI1_Config+0xd6>
#if defined(RCC_PLLSAI1M_DIV_1_16_SUPPORT)
      /* Set PLLSAI1 clock source */
      MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC, PllSai1->PLLSAI1Source);
#else
      /* Set PLLSAI1 clock source and divider M */
      MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC | RCC_PLLCFGR_PLLM, PllSai1->PLLSAI1Source | (PllSai1->PLLSAI1M - 1U) << RCC_PLLCFGR_PLLM_Pos);
 800550e:	4b4a      	ldr	r3, [pc, #296]	; (8005638 <RCCEx_PLLSAI1_Config+0x1e4>)
 8005510:	68db      	ldr	r3, [r3, #12]
 8005512:	f023 0273 	bic.w	r2, r3, #115	; 0x73
 8005516:	687b      	ldr	r3, [r7, #4]
 8005518:	6819      	ldr	r1, [r3, #0]
 800551a:	687b      	ldr	r3, [r7, #4]
 800551c:	685b      	ldr	r3, [r3, #4]
 800551e:	3b01      	subs	r3, #1
 8005520:	011b      	lsls	r3, r3, #4
 8005522:	430b      	orrs	r3, r1
 8005524:	4944      	ldr	r1, [pc, #272]	; (8005638 <RCCEx_PLLSAI1_Config+0x1e4>)
 8005526:	4313      	orrs	r3, r2
 8005528:	60cb      	str	r3, [r1, #12]
#endif
    }
  }

  if(status == HAL_OK)
 800552a:	7bfb      	ldrb	r3, [r7, #15]
 800552c:	2b00      	cmp	r3, #0
 800552e:	d17d      	bne.n	800562c <RCCEx_PLLSAI1_Config+0x1d8>
  {
    /* Disable the PLLSAI1 */
    __HAL_RCC_PLLSAI1_DISABLE();
 8005530:	4b41      	ldr	r3, [pc, #260]	; (8005638 <RCCEx_PLLSAI1_Config+0x1e4>)
 8005532:	681b      	ldr	r3, [r3, #0]
 8005534:	4a40      	ldr	r2, [pc, #256]	; (8005638 <RCCEx_PLLSAI1_Config+0x1e4>)
 8005536:	f023 6380 	bic.w	r3, r3, #67108864	; 0x4000000
 800553a:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 800553c:	f7fc fbd2 	bl	8001ce4 <HAL_GetTick>
 8005540:	60b8      	str	r0, [r7, #8]

    /* Wait till PLLSAI1 is ready to be updated */
    while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) != 0U)
 8005542:	e009      	b.n	8005558 <RCCEx_PLLSAI1_Config+0x104>
    {
      if((HAL_GetTick() - tickstart) > PLLSAI1_TIMEOUT_VALUE)
 8005544:	f7fc fbce 	bl	8001ce4 <HAL_GetTick>
 8005548:	4602      	mov	r2, r0
 800554a:	68bb      	ldr	r3, [r7, #8]
 800554c:	1ad3      	subs	r3, r2, r3
 800554e:	2b02      	cmp	r3, #2
 8005550:	d902      	bls.n	8005558 <RCCEx_PLLSAI1_Config+0x104>
      {
        status = HAL_TIMEOUT;
 8005552:	2303      	movs	r3, #3
 8005554:	73fb      	strb	r3, [r7, #15]
        break;
 8005556:	e005      	b.n	8005564 <RCCEx_PLLSAI1_Config+0x110>
    while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) != 0U)
 8005558:	4b37      	ldr	r3, [pc, #220]	; (8005638 <RCCEx_PLLSAI1_Config+0x1e4>)
 800555a:	681b      	ldr	r3, [r3, #0]
 800555c:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8005560:	2b00      	cmp	r3, #0
 8005562:	d1ef      	bne.n	8005544 <RCCEx_PLLSAI1_Config+0xf0>
      }
    }

    if(status == HAL_OK)
 8005564:	7bfb      	ldrb	r3, [r7, #15]
 8005566:	2b00      	cmp	r3, #0
 8005568:	d160      	bne.n	800562c <RCCEx_PLLSAI1_Config+0x1d8>
    {
      if(Divider == DIVIDER_P_UPDATE)
 800556a:	683b      	ldr	r3, [r7, #0]
 800556c:	2b00      	cmp	r3, #0
 800556e:	d111      	bne.n	8005594 <RCCEx_PLLSAI1_Config+0x140>
        MODIFY_REG(RCC->PLLSAI1CFGR,
                   RCC_PLLSAI1CFGR_PLLSAI1N | RCC_PLLSAI1CFGR_PLLSAI1PDIV,
                   (PllSai1->PLLSAI1N << RCC_PLLSAI1CFGR_PLLSAI1N_Pos) |
                   (PllSai1->PLLSAI1P << RCC_PLLSAI1CFGR_PLLSAI1PDIV_Pos));
#else
        MODIFY_REG(RCC->PLLSAI1CFGR,
 8005570:	4b31      	ldr	r3, [pc, #196]	; (8005638 <RCCEx_PLLSAI1_Config+0x1e4>)
 8005572:	691b      	ldr	r3, [r3, #16]
 8005574:	f423 331f 	bic.w	r3, r3, #162816	; 0x27c00
 8005578:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 800557c:	687a      	ldr	r2, [r7, #4]
 800557e:	6892      	ldr	r2, [r2, #8]
 8005580:	0211      	lsls	r1, r2, #8
 8005582:	687a      	ldr	r2, [r7, #4]
 8005584:	68d2      	ldr	r2, [r2, #12]
 8005586:	0912      	lsrs	r2, r2, #4
 8005588:	0452      	lsls	r2, r2, #17
 800558a:	430a      	orrs	r2, r1
 800558c:	492a      	ldr	r1, [pc, #168]	; (8005638 <RCCEx_PLLSAI1_Config+0x1e4>)
 800558e:	4313      	orrs	r3, r2
 8005590:	610b      	str	r3, [r1, #16]
 8005592:	e027      	b.n	80055e4 <RCCEx_PLLSAI1_Config+0x190>
                   ((PllSai1->PLLSAI1P >> 4U) << RCC_PLLSAI1CFGR_PLLSAI1P_Pos));
#endif /* RCC_PLLSAI1P_DIV_2_31_SUPPORT */

#endif /* RCC_PLLSAI1M_DIV_1_16_SUPPORT */
      }
      else if(Divider == DIVIDER_Q_UPDATE)
 8005594:	683b      	ldr	r3, [r7, #0]
 8005596:	2b01      	cmp	r3, #1
 8005598:	d112      	bne.n	80055c0 <RCCEx_PLLSAI1_Config+0x16c>
                   (PllSai1->PLLSAI1N << RCC_PLLSAI1CFGR_PLLSAI1N_Pos) |
                   (((PllSai1->PLLSAI1Q >> 1U) - 1U) << RCC_PLLSAI1CFGR_PLLSAI1Q_Pos) |
                   ((PllSai1->PLLSAI1M - 1U) << RCC_PLLSAI1CFGR_PLLSAI1M_Pos));
#else
        /* Configure the PLLSAI1 Division factor Q and Multiplication factor N*/
        MODIFY_REG(RCC->PLLSAI1CFGR,
 800559a:	4b27      	ldr	r3, [pc, #156]	; (8005638 <RCCEx_PLLSAI1_Config+0x1e4>)
 800559c:	691b      	ldr	r3, [r3, #16]
 800559e:	f423 03c0 	bic.w	r3, r3, #6291456	; 0x600000
 80055a2:	f423 43fe 	bic.w	r3, r3, #32512	; 0x7f00
 80055a6:	687a      	ldr	r2, [r7, #4]
 80055a8:	6892      	ldr	r2, [r2, #8]
 80055aa:	0211      	lsls	r1, r2, #8
 80055ac:	687a      	ldr	r2, [r7, #4]
 80055ae:	6912      	ldr	r2, [r2, #16]
 80055b0:	0852      	lsrs	r2, r2, #1
 80055b2:	3a01      	subs	r2, #1
 80055b4:	0552      	lsls	r2, r2, #21
 80055b6:	430a      	orrs	r2, r1
 80055b8:	491f      	ldr	r1, [pc, #124]	; (8005638 <RCCEx_PLLSAI1_Config+0x1e4>)
 80055ba:	4313      	orrs	r3, r2
 80055bc:	610b      	str	r3, [r1, #16]
 80055be:	e011      	b.n	80055e4 <RCCEx_PLLSAI1_Config+0x190>
                   (PllSai1->PLLSAI1N << RCC_PLLSAI1CFGR_PLLSAI1N_Pos) |
                   (((PllSai1->PLLSAI1R >> 1U) - 1U) << RCC_PLLSAI1CFGR_PLLSAI1R_Pos) |
                   ((PllSai1->PLLSAI1M - 1U) << RCC_PLLSAI1CFGR_PLLSAI1M_Pos));
#else
        /* Configure the PLLSAI1 Division factor R and Multiplication factor N*/
        MODIFY_REG(RCC->PLLSAI1CFGR,
 80055c0:	4b1d      	ldr	r3, [pc, #116]	; (8005638 <RCCEx_PLLSAI1_Config+0x1e4>)
 80055c2:	691b      	ldr	r3, [r3, #16]
 80055c4:	f023 63c0 	bic.w	r3, r3, #100663296	; 0x6000000
 80055c8:	f423 43fe 	bic.w	r3, r3, #32512	; 0x7f00
 80055cc:	687a      	ldr	r2, [r7, #4]
 80055ce:	6892      	ldr	r2, [r2, #8]
 80055d0:	0211      	lsls	r1, r2, #8
 80055d2:	687a      	ldr	r2, [r7, #4]
 80055d4:	6952      	ldr	r2, [r2, #20]
 80055d6:	0852      	lsrs	r2, r2, #1
 80055d8:	3a01      	subs	r2, #1
 80055da:	0652      	lsls	r2, r2, #25
 80055dc:	430a      	orrs	r2, r1
 80055de:	4916      	ldr	r1, [pc, #88]	; (8005638 <RCCEx_PLLSAI1_Config+0x1e4>)
 80055e0:	4313      	orrs	r3, r2
 80055e2:	610b      	str	r3, [r1, #16]
                   (((PllSai1->PLLSAI1R >> 1U) - 1U) << RCC_PLLSAI1CFGR_PLLSAI1R_Pos));
#endif /* RCC_PLLSAI1M_DIV_1_16_SUPPORT */
      }

      /* Enable the PLLSAI1 again by setting PLLSAI1ON to 1*/
      __HAL_RCC_PLLSAI1_ENABLE();
 80055e4:	4b14      	ldr	r3, [pc, #80]	; (8005638 <RCCEx_PLLSAI1_Config+0x1e4>)
 80055e6:	681b      	ldr	r3, [r3, #0]
 80055e8:	4a13      	ldr	r2, [pc, #76]	; (8005638 <RCCEx_PLLSAI1_Config+0x1e4>)
 80055ea:	f043 6380 	orr.w	r3, r3, #67108864	; 0x4000000
 80055ee:	6013      	str	r3, [r2, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80055f0:	f7fc fb78 	bl	8001ce4 <HAL_GetTick>
 80055f4:	60b8      	str	r0, [r7, #8]

      /* Wait till PLLSAI1 is ready */
      while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) == 0U)
 80055f6:	e009      	b.n	800560c <RCCEx_PLLSAI1_Config+0x1b8>
      {
        if((HAL_GetTick() - tickstart) > PLLSAI1_TIMEOUT_VALUE)
 80055f8:	f7fc fb74 	bl	8001ce4 <HAL_GetTick>
 80055fc:	4602      	mov	r2, r0
 80055fe:	68bb      	ldr	r3, [r7, #8]
 8005600:	1ad3      	subs	r3, r2, r3
 8005602:	2b02      	cmp	r3, #2
 8005604:	d902      	bls.n	800560c <RCCEx_PLLSAI1_Config+0x1b8>
        {
          status = HAL_TIMEOUT;
 8005606:	2303      	movs	r3, #3
 8005608:	73fb      	strb	r3, [r7, #15]
          break;
 800560a:	e005      	b.n	8005618 <RCCEx_PLLSAI1_Config+0x1c4>
      while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) == 0U)
 800560c:	4b0a      	ldr	r3, [pc, #40]	; (8005638 <RCCEx_PLLSAI1_Config+0x1e4>)
 800560e:	681b      	ldr	r3, [r3, #0]
 8005610:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8005614:	2b00      	cmp	r3, #0
 8005616:	d0ef      	beq.n	80055f8 <RCCEx_PLLSAI1_Config+0x1a4>
        }
      }

      if(status == HAL_OK)
 8005618:	7bfb      	ldrb	r3, [r7, #15]
 800561a:	2b00      	cmp	r3, #0
 800561c:	d106      	bne.n	800562c <RCCEx_PLLSAI1_Config+0x1d8>
      {
        /* Configure the PLLSAI1 Clock output(s) */
        __HAL_RCC_PLLSAI1CLKOUT_ENABLE(PllSai1->PLLSAI1ClockOut);
 800561e:	4b06      	ldr	r3, [pc, #24]	; (8005638 <RCCEx_PLLSAI1_Config+0x1e4>)
 8005620:	691a      	ldr	r2, [r3, #16]
 8005622:	687b      	ldr	r3, [r7, #4]
 8005624:	699b      	ldr	r3, [r3, #24]
 8005626:	4904      	ldr	r1, [pc, #16]	; (8005638 <RCCEx_PLLSAI1_Config+0x1e4>)
 8005628:	4313      	orrs	r3, r2
 800562a:	610b      	str	r3, [r1, #16]
      }
    }
  }

  return status;
 800562c:	7bfb      	ldrb	r3, [r7, #15]
}
 800562e:	4618      	mov	r0, r3
 8005630:	3710      	adds	r7, #16
 8005632:	46bd      	mov	sp, r7
 8005634:	bd80      	pop	{r7, pc}
 8005636:	bf00      	nop
 8005638:	40021000 	.word	0x40021000

0800563c <RCCEx_PLLSAI2_Config>:
  * @note   PLLSAI2 is temporary disable to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLLSAI2_Config(RCC_PLLSAI2InitTypeDef *PllSai2, uint32_t Divider)
{
 800563c:	b580      	push	{r7, lr}
 800563e:	b084      	sub	sp, #16
 8005640:	af00      	add	r7, sp, #0
 8005642:	6078      	str	r0, [r7, #4]
 8005644:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 8005646:	2300      	movs	r3, #0
 8005648:	73fb      	strb	r3, [r7, #15]
  assert_param(IS_RCC_PLLSAI2M_VALUE(PllSai2->PLLSAI2M));
  assert_param(IS_RCC_PLLSAI2N_VALUE(PllSai2->PLLSAI2N));
  assert_param(IS_RCC_PLLSAI2CLOCKOUT_VALUE(PllSai2->PLLSAI2ClockOut));

  /* Check that PLLSAI2 clock source and divider M can be applied */
  if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_NONE)
 800564a:	4b6a      	ldr	r3, [pc, #424]	; (80057f4 <RCCEx_PLLSAI2_Config+0x1b8>)
 800564c:	68db      	ldr	r3, [r3, #12]
 800564e:	f003 0303 	and.w	r3, r3, #3
 8005652:	2b00      	cmp	r3, #0
 8005654:	d018      	beq.n	8005688 <RCCEx_PLLSAI2_Config+0x4c>
  {
    /* PLL clock source and divider M already set, check that no request for change  */
    if((__HAL_RCC_GET_PLL_OSCSOURCE() != PllSai2->PLLSAI2Source)
 8005656:	4b67      	ldr	r3, [pc, #412]	; (80057f4 <RCCEx_PLLSAI2_Config+0x1b8>)
 8005658:	68db      	ldr	r3, [r3, #12]
 800565a:	f003 0203 	and.w	r2, r3, #3
 800565e:	687b      	ldr	r3, [r7, #4]
 8005660:	681b      	ldr	r3, [r3, #0]
 8005662:	429a      	cmp	r2, r3
 8005664:	d10d      	bne.n	8005682 <RCCEx_PLLSAI2_Config+0x46>
       ||
       (PllSai2->PLLSAI2Source == RCC_PLLSOURCE_NONE)
 8005666:	687b      	ldr	r3, [r7, #4]
 8005668:	681b      	ldr	r3, [r3, #0]
       ||
 800566a:	2b00      	cmp	r3, #0
 800566c:	d009      	beq.n	8005682 <RCCEx_PLLSAI2_Config+0x46>
#if !defined(RCC_PLLSAI2M_DIV_1_16_SUPPORT)
       ||
       (((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U) != PllSai2->PLLSAI2M)
 800566e:	4b61      	ldr	r3, [pc, #388]	; (80057f4 <RCCEx_PLLSAI2_Config+0x1b8>)
 8005670:	68db      	ldr	r3, [r3, #12]
 8005672:	091b      	lsrs	r3, r3, #4
 8005674:	f003 0307 	and.w	r3, r3, #7
 8005678:	1c5a      	adds	r2, r3, #1
 800567a:	687b      	ldr	r3, [r7, #4]
 800567c:	685b      	ldr	r3, [r3, #4]
       ||
 800567e:	429a      	cmp	r2, r3
 8005680:	d047      	beq.n	8005712 <RCCEx_PLLSAI2_Config+0xd6>
#endif
      )
    {
      status = HAL_ERROR;
 8005682:	2301      	movs	r3, #1
 8005684:	73fb      	strb	r3, [r7, #15]
 8005686:	e044      	b.n	8005712 <RCCEx_PLLSAI2_Config+0xd6>
    }
  }
  else
  {
    /* Check PLLSAI2 clock source availability */
    switch(PllSai2->PLLSAI2Source)
 8005688:	687b      	ldr	r3, [r7, #4]
 800568a:	681b      	ldr	r3, [r3, #0]
 800568c:	2b03      	cmp	r3, #3
 800568e:	d018      	beq.n	80056c2 <RCCEx_PLLSAI2_Config+0x86>
 8005690:	2b03      	cmp	r3, #3
 8005692:	d825      	bhi.n	80056e0 <RCCEx_PLLSAI2_Config+0xa4>
 8005694:	2b01      	cmp	r3, #1
 8005696:	d002      	beq.n	800569e <RCCEx_PLLSAI2_Config+0x62>
 8005698:	2b02      	cmp	r3, #2
 800569a:	d009      	beq.n	80056b0 <RCCEx_PLLSAI2_Config+0x74>
 800569c:	e020      	b.n	80056e0 <RCCEx_PLLSAI2_Config+0xa4>
    {
    case RCC_PLLSOURCE_MSI:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_MSIRDY))
 800569e:	4b55      	ldr	r3, [pc, #340]	; (80057f4 <RCCEx_PLLSAI2_Config+0x1b8>)
 80056a0:	681b      	ldr	r3, [r3, #0]
 80056a2:	f003 0302 	and.w	r3, r3, #2
 80056a6:	2b00      	cmp	r3, #0
 80056a8:	d11d      	bne.n	80056e6 <RCCEx_PLLSAI2_Config+0xaa>
      {
        status = HAL_ERROR;
 80056aa:	2301      	movs	r3, #1
 80056ac:	73fb      	strb	r3, [r7, #15]
      }
      break;
 80056ae:	e01a      	b.n	80056e6 <RCCEx_PLLSAI2_Config+0xaa>
    case RCC_PLLSOURCE_HSI:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSIRDY))
 80056b0:	4b50      	ldr	r3, [pc, #320]	; (80057f4 <RCCEx_PLLSAI2_Config+0x1b8>)
 80056b2:	681b      	ldr	r3, [r3, #0]
 80056b4:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80056b8:	2b00      	cmp	r3, #0
 80056ba:	d116      	bne.n	80056ea <RCCEx_PLLSAI2_Config+0xae>
      {
        status = HAL_ERROR;
 80056bc:	2301      	movs	r3, #1
 80056be:	73fb      	strb	r3, [r7, #15]
      }
      break;
 80056c0:	e013      	b.n	80056ea <RCCEx_PLLSAI2_Config+0xae>
    case RCC_PLLSOURCE_HSE:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSERDY))
 80056c2:	4b4c      	ldr	r3, [pc, #304]	; (80057f4 <RCCEx_PLLSAI2_Config+0x1b8>)
 80056c4:	681b      	ldr	r3, [r3, #0]
 80056c6:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80056ca:	2b00      	cmp	r3, #0
 80056cc:	d10f      	bne.n	80056ee <RCCEx_PLLSAI2_Config+0xb2>
      {
        if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSEBYP))
 80056ce:	4b49      	ldr	r3, [pc, #292]	; (80057f4 <RCCEx_PLLSAI2_Config+0x1b8>)
 80056d0:	681b      	ldr	r3, [r3, #0]
 80056d2:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 80056d6:	2b00      	cmp	r3, #0
 80056d8:	d109      	bne.n	80056ee <RCCEx_PLLSAI2_Config+0xb2>
        {
          status = HAL_ERROR;
 80056da:	2301      	movs	r3, #1
 80056dc:	73fb      	strb	r3, [r7, #15]
        }
      }
      break;
 80056de:	e006      	b.n	80056ee <RCCEx_PLLSAI2_Config+0xb2>
    default:
      status = HAL_ERROR;
 80056e0:	2301      	movs	r3, #1
 80056e2:	73fb      	strb	r3, [r7, #15]
      break;
 80056e4:	e004      	b.n	80056f0 <RCCEx_PLLSAI2_Config+0xb4>
      break;
 80056e6:	bf00      	nop
 80056e8:	e002      	b.n	80056f0 <RCCEx_PLLSAI2_Config+0xb4>
      break;
 80056ea:	bf00      	nop
 80056ec:	e000      	b.n	80056f0 <RCCEx_PLLSAI2_Config+0xb4>
      break;
 80056ee:	bf00      	nop
    }

    if(status == HAL_OK)
 80056f0:	7bfb      	ldrb	r3, [r7, #15]
 80056f2:	2b00      	cmp	r3, #0
 80056f4:	d10d      	bne.n	8005712 <RCCEx_PLLSAI2_Config+0xd6>
#if defined(RCC_PLLSAI2M_DIV_1_16_SUPPORT)
      /* Set PLLSAI2 clock source */
      MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC, PllSai2->PLLSAI2Source);
#else
      /* Set PLLSAI2 clock source and divider M */
      MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC | RCC_PLLCFGR_PLLM, PllSai2->PLLSAI2Source | (PllSai2->PLLSAI2M - 1U) << RCC_PLLCFGR_PLLM_Pos);
 80056f6:	4b3f      	ldr	r3, [pc, #252]	; (80057f4 <RCCEx_PLLSAI2_Config+0x1b8>)
 80056f8:	68db      	ldr	r3, [r3, #12]
 80056fa:	f023 0273 	bic.w	r2, r3, #115	; 0x73
 80056fe:	687b      	ldr	r3, [r7, #4]
 8005700:	6819      	ldr	r1, [r3, #0]
 8005702:	687b      	ldr	r3, [r7, #4]
 8005704:	685b      	ldr	r3, [r3, #4]
 8005706:	3b01      	subs	r3, #1
 8005708:	011b      	lsls	r3, r3, #4
 800570a:	430b      	orrs	r3, r1
 800570c:	4939      	ldr	r1, [pc, #228]	; (80057f4 <RCCEx_PLLSAI2_Config+0x1b8>)
 800570e:	4313      	orrs	r3, r2
 8005710:	60cb      	str	r3, [r1, #12]
#endif
    }
  }

  if(status == HAL_OK)
 8005712:	7bfb      	ldrb	r3, [r7, #15]
 8005714:	2b00      	cmp	r3, #0
 8005716:	d167      	bne.n	80057e8 <RCCEx_PLLSAI2_Config+0x1ac>
  {
    /* Disable the PLLSAI2 */
    __HAL_RCC_PLLSAI2_DISABLE();
 8005718:	4b36      	ldr	r3, [pc, #216]	; (80057f4 <RCCEx_PLLSAI2_Config+0x1b8>)
 800571a:	681b      	ldr	r3, [r3, #0]
 800571c:	4a35      	ldr	r2, [pc, #212]	; (80057f4 <RCCEx_PLLSAI2_Config+0x1b8>)
 800571e:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8005722:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8005724:	f7fc fade 	bl	8001ce4 <HAL_GetTick>
 8005728:	60b8      	str	r0, [r7, #8]

    /* Wait till PLLSAI2 is ready to be updated */
    while(READ_BIT(RCC->CR, RCC_CR_PLLSAI2RDY) != 0U)
 800572a:	e009      	b.n	8005740 <RCCEx_PLLSAI2_Config+0x104>
    {
      if((HAL_GetTick() - tickstart) > PLLSAI2_TIMEOUT_VALUE)
 800572c:	f7fc fada 	bl	8001ce4 <HAL_GetTick>
 8005730:	4602      	mov	r2, r0
 8005732:	68bb      	ldr	r3, [r7, #8]
 8005734:	1ad3      	subs	r3, r2, r3
 8005736:	2b02      	cmp	r3, #2
 8005738:	d902      	bls.n	8005740 <RCCEx_PLLSAI2_Config+0x104>
      {
        status = HAL_TIMEOUT;
 800573a:	2303      	movs	r3, #3
 800573c:	73fb      	strb	r3, [r7, #15]
        break;
 800573e:	e005      	b.n	800574c <RCCEx_PLLSAI2_Config+0x110>
    while(READ_BIT(RCC->CR, RCC_CR_PLLSAI2RDY) != 0U)
 8005740:	4b2c      	ldr	r3, [pc, #176]	; (80057f4 <RCCEx_PLLSAI2_Config+0x1b8>)
 8005742:	681b      	ldr	r3, [r3, #0]
 8005744:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 8005748:	2b00      	cmp	r3, #0
 800574a:	d1ef      	bne.n	800572c <RCCEx_PLLSAI2_Config+0xf0>
      }
    }

    if(status == HAL_OK)
 800574c:	7bfb      	ldrb	r3, [r7, #15]
 800574e:	2b00      	cmp	r3, #0
 8005750:	d14a      	bne.n	80057e8 <RCCEx_PLLSAI2_Config+0x1ac>
    {
      if(Divider == DIVIDER_P_UPDATE)
 8005752:	683b      	ldr	r3, [r7, #0]
 8005754:	2b00      	cmp	r3, #0
 8005756:	d111      	bne.n	800577c <RCCEx_PLLSAI2_Config+0x140>
        MODIFY_REG(RCC->PLLSAI2CFGR,
                   RCC_PLLSAI2CFGR_PLLSAI2N | RCC_PLLSAI2CFGR_PLLSAI2PDIV,
                   (PllSai2->PLLSAI2N << RCC_PLLSAI2CFGR_PLLSAI2N_Pos) |
                   (PllSai2->PLLSAI2P << RCC_PLLSAI2CFGR_PLLSAI2PDIV_Pos));
#else
        MODIFY_REG(RCC->PLLSAI2CFGR,
 8005758:	4b26      	ldr	r3, [pc, #152]	; (80057f4 <RCCEx_PLLSAI2_Config+0x1b8>)
 800575a:	695b      	ldr	r3, [r3, #20]
 800575c:	f423 331f 	bic.w	r3, r3, #162816	; 0x27c00
 8005760:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8005764:	687a      	ldr	r2, [r7, #4]
 8005766:	6892      	ldr	r2, [r2, #8]
 8005768:	0211      	lsls	r1, r2, #8
 800576a:	687a      	ldr	r2, [r7, #4]
 800576c:	68d2      	ldr	r2, [r2, #12]
 800576e:	0912      	lsrs	r2, r2, #4
 8005770:	0452      	lsls	r2, r2, #17
 8005772:	430a      	orrs	r2, r1
 8005774:	491f      	ldr	r1, [pc, #124]	; (80057f4 <RCCEx_PLLSAI2_Config+0x1b8>)
 8005776:	4313      	orrs	r3, r2
 8005778:	614b      	str	r3, [r1, #20]
 800577a:	e011      	b.n	80057a0 <RCCEx_PLLSAI2_Config+0x164>
                   (PllSai2->PLLSAI2N << RCC_PLLSAI2CFGR_PLLSAI2N_Pos) |
                   (((PllSai2->PLLSAI2R >> 1U) - 1U) << RCC_PLLSAI2CFGR_PLLSAI2R_Pos) |
                   ((PllSai2->PLLSAI2M - 1U) << RCC_PLLSAI2CFGR_PLLSAI2M_Pos));
#else
        /* Configure the PLLSAI2 Division factor R and Multiplication factor N*/
        MODIFY_REG(RCC->PLLSAI2CFGR,
 800577c:	4b1d      	ldr	r3, [pc, #116]	; (80057f4 <RCCEx_PLLSAI2_Config+0x1b8>)
 800577e:	695b      	ldr	r3, [r3, #20]
 8005780:	f023 63c0 	bic.w	r3, r3, #100663296	; 0x6000000
 8005784:	f423 43fe 	bic.w	r3, r3, #32512	; 0x7f00
 8005788:	687a      	ldr	r2, [r7, #4]
 800578a:	6892      	ldr	r2, [r2, #8]
 800578c:	0211      	lsls	r1, r2, #8
 800578e:	687a      	ldr	r2, [r7, #4]
 8005790:	6912      	ldr	r2, [r2, #16]
 8005792:	0852      	lsrs	r2, r2, #1
 8005794:	3a01      	subs	r2, #1
 8005796:	0652      	lsls	r2, r2, #25
 8005798:	430a      	orrs	r2, r1
 800579a:	4916      	ldr	r1, [pc, #88]	; (80057f4 <RCCEx_PLLSAI2_Config+0x1b8>)
 800579c:	4313      	orrs	r3, r2
 800579e:	614b      	str	r3, [r1, #20]
                   (((PllSai2->PLLSAI2R >> 1U) - 1U) << RCC_PLLSAI2CFGR_PLLSAI2R_Pos));
#endif /* RCC_PLLSAI2M_DIV_1_16_SUPPORT */
      }

      /* Enable the PLLSAI2 again by setting PLLSAI2ON to 1*/
      __HAL_RCC_PLLSAI2_ENABLE();
 80057a0:	4b14      	ldr	r3, [pc, #80]	; (80057f4 <RCCEx_PLLSAI2_Config+0x1b8>)
 80057a2:	681b      	ldr	r3, [r3, #0]
 80057a4:	4a13      	ldr	r2, [pc, #76]	; (80057f4 <RCCEx_PLLSAI2_Config+0x1b8>)
 80057a6:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80057aa:	6013      	str	r3, [r2, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80057ac:	f7fc fa9a 	bl	8001ce4 <HAL_GetTick>
 80057b0:	60b8      	str	r0, [r7, #8]

      /* Wait till PLLSAI2 is ready */
      while(READ_BIT(RCC->CR, RCC_CR_PLLSAI2RDY) == 0U)
 80057b2:	e009      	b.n	80057c8 <RCCEx_PLLSAI2_Config+0x18c>
      {
        if((HAL_GetTick() - tickstart) > PLLSAI2_TIMEOUT_VALUE)
 80057b4:	f7fc fa96 	bl	8001ce4 <HAL_GetTick>
 80057b8:	4602      	mov	r2, r0
 80057ba:	68bb      	ldr	r3, [r7, #8]
 80057bc:	1ad3      	subs	r3, r2, r3
 80057be:	2b02      	cmp	r3, #2
 80057c0:	d902      	bls.n	80057c8 <RCCEx_PLLSAI2_Config+0x18c>
        {
          status = HAL_TIMEOUT;
 80057c2:	2303      	movs	r3, #3
 80057c4:	73fb      	strb	r3, [r7, #15]
          break;
 80057c6:	e005      	b.n	80057d4 <RCCEx_PLLSAI2_Config+0x198>
      while(READ_BIT(RCC->CR, RCC_CR_PLLSAI2RDY) == 0U)
 80057c8:	4b0a      	ldr	r3, [pc, #40]	; (80057f4 <RCCEx_PLLSAI2_Config+0x1b8>)
 80057ca:	681b      	ldr	r3, [r3, #0]
 80057cc:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 80057d0:	2b00      	cmp	r3, #0
 80057d2:	d0ef      	beq.n	80057b4 <RCCEx_PLLSAI2_Config+0x178>
        }
      }

      if(status == HAL_OK)
 80057d4:	7bfb      	ldrb	r3, [r7, #15]
 80057d6:	2b00      	cmp	r3, #0
 80057d8:	d106      	bne.n	80057e8 <RCCEx_PLLSAI2_Config+0x1ac>
      {
        /* Configure the PLLSAI2 Clock output(s) */
        __HAL_RCC_PLLSAI2CLKOUT_ENABLE(PllSai2->PLLSAI2ClockOut);
 80057da:	4b06      	ldr	r3, [pc, #24]	; (80057f4 <RCCEx_PLLSAI2_Config+0x1b8>)
 80057dc:	695a      	ldr	r2, [r3, #20]
 80057de:	687b      	ldr	r3, [r7, #4]
 80057e0:	695b      	ldr	r3, [r3, #20]
 80057e2:	4904      	ldr	r1, [pc, #16]	; (80057f4 <RCCEx_PLLSAI2_Config+0x1b8>)
 80057e4:	4313      	orrs	r3, r2
 80057e6:	614b      	str	r3, [r1, #20]
      }
    }
  }

  return status;
 80057e8:	7bfb      	ldrb	r3, [r7, #15]
}
 80057ea:	4618      	mov	r0, r3
 80057ec:	3710      	adds	r7, #16
 80057ee:	46bd      	mov	sp, r7
 80057f0:	bd80      	pop	{r7, pc}
 80057f2:	bf00      	nop
 80057f4:	40021000 	.word	0x40021000

080057f8 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 80057f8:	b580      	push	{r7, lr}
 80057fa:	b082      	sub	sp, #8
 80057fc:	af00      	add	r7, sp, #0
 80057fe:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8005800:	687b      	ldr	r3, [r7, #4]
 8005802:	2b00      	cmp	r3, #0
 8005804:	d101      	bne.n	800580a <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 8005806:	2301      	movs	r3, #1
 8005808:	e049      	b.n	800589e <HAL_TIM_Base_Init+0xa6>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 800580a:	687b      	ldr	r3, [r7, #4]
 800580c:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8005810:	b2db      	uxtb	r3, r3
 8005812:	2b00      	cmp	r3, #0
 8005814:	d106      	bne.n	8005824 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8005816:	687b      	ldr	r3, [r7, #4]
 8005818:	2200      	movs	r2, #0
 800581a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 800581e:	6878      	ldr	r0, [r7, #4]
 8005820:	f7fb ffee 	bl	8001800 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8005824:	687b      	ldr	r3, [r7, #4]
 8005826:	2202      	movs	r2, #2
 8005828:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 800582c:	687b      	ldr	r3, [r7, #4]
 800582e:	681a      	ldr	r2, [r3, #0]
 8005830:	687b      	ldr	r3, [r7, #4]
 8005832:	3304      	adds	r3, #4
 8005834:	4619      	mov	r1, r3
 8005836:	4610      	mov	r0, r2
 8005838:	f000 f9ee 	bl	8005c18 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 800583c:	687b      	ldr	r3, [r7, #4]
 800583e:	2201      	movs	r2, #1
 8005840:	f883 2048 	strb.w	r2, [r3, #72]	; 0x48

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8005844:	687b      	ldr	r3, [r7, #4]
 8005846:	2201      	movs	r2, #1
 8005848:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 800584c:	687b      	ldr	r3, [r7, #4]
 800584e:	2201      	movs	r2, #1
 8005850:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8005854:	687b      	ldr	r3, [r7, #4]
 8005856:	2201      	movs	r2, #1
 8005858:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 800585c:	687b      	ldr	r3, [r7, #4]
 800585e:	2201      	movs	r2, #1
 8005860:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
 8005864:	687b      	ldr	r3, [r7, #4]
 8005866:	2201      	movs	r2, #1
 8005868:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 800586c:	687b      	ldr	r3, [r7, #4]
 800586e:	2201      	movs	r2, #1
 8005870:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8005874:	687b      	ldr	r3, [r7, #4]
 8005876:	2201      	movs	r2, #1
 8005878:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 800587c:	687b      	ldr	r3, [r7, #4]
 800587e:	2201      	movs	r2, #1
 8005880:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 8005884:	687b      	ldr	r3, [r7, #4]
 8005886:	2201      	movs	r2, #1
 8005888:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
 800588c:	687b      	ldr	r3, [r7, #4]
 800588e:	2201      	movs	r2, #1
 8005890:	f883 2047 	strb.w	r2, [r3, #71]	; 0x47

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8005894:	687b      	ldr	r3, [r7, #4]
 8005896:	2201      	movs	r2, #1
 8005898:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 800589c:	2300      	movs	r3, #0
}
 800589e:	4618      	mov	r0, r3
 80058a0:	3708      	adds	r7, #8
 80058a2:	46bd      	mov	sp, r7
 80058a4:	bd80      	pop	{r7, pc}
	...

080058a8 <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 80058a8:	b480      	push	{r7}
 80058aa:	b085      	sub	sp, #20
 80058ac:	af00      	add	r7, sp, #0
 80058ae:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 80058b0:	687b      	ldr	r3, [r7, #4]
 80058b2:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80058b6:	b2db      	uxtb	r3, r3
 80058b8:	2b01      	cmp	r3, #1
 80058ba:	d001      	beq.n	80058c0 <HAL_TIM_Base_Start_IT+0x18>
  {
    return HAL_ERROR;
 80058bc:	2301      	movs	r3, #1
 80058be:	e04f      	b.n	8005960 <HAL_TIM_Base_Start_IT+0xb8>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 80058c0:	687b      	ldr	r3, [r7, #4]
 80058c2:	2202      	movs	r2, #2
 80058c4:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 80058c8:	687b      	ldr	r3, [r7, #4]
 80058ca:	681b      	ldr	r3, [r3, #0]
 80058cc:	68da      	ldr	r2, [r3, #12]
 80058ce:	687b      	ldr	r3, [r7, #4]
 80058d0:	681b      	ldr	r3, [r3, #0]
 80058d2:	f042 0201 	orr.w	r2, r2, #1
 80058d6:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 80058d8:	687b      	ldr	r3, [r7, #4]
 80058da:	681b      	ldr	r3, [r3, #0]
 80058dc:	4a23      	ldr	r2, [pc, #140]	; (800596c <HAL_TIM_Base_Start_IT+0xc4>)
 80058de:	4293      	cmp	r3, r2
 80058e0:	d01d      	beq.n	800591e <HAL_TIM_Base_Start_IT+0x76>
 80058e2:	687b      	ldr	r3, [r7, #4]
 80058e4:	681b      	ldr	r3, [r3, #0]
 80058e6:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80058ea:	d018      	beq.n	800591e <HAL_TIM_Base_Start_IT+0x76>
 80058ec:	687b      	ldr	r3, [r7, #4]
 80058ee:	681b      	ldr	r3, [r3, #0]
 80058f0:	4a1f      	ldr	r2, [pc, #124]	; (8005970 <HAL_TIM_Base_Start_IT+0xc8>)
 80058f2:	4293      	cmp	r3, r2
 80058f4:	d013      	beq.n	800591e <HAL_TIM_Base_Start_IT+0x76>
 80058f6:	687b      	ldr	r3, [r7, #4]
 80058f8:	681b      	ldr	r3, [r3, #0]
 80058fa:	4a1e      	ldr	r2, [pc, #120]	; (8005974 <HAL_TIM_Base_Start_IT+0xcc>)
 80058fc:	4293      	cmp	r3, r2
 80058fe:	d00e      	beq.n	800591e <HAL_TIM_Base_Start_IT+0x76>
 8005900:	687b      	ldr	r3, [r7, #4]
 8005902:	681b      	ldr	r3, [r3, #0]
 8005904:	4a1c      	ldr	r2, [pc, #112]	; (8005978 <HAL_TIM_Base_Start_IT+0xd0>)
 8005906:	4293      	cmp	r3, r2
 8005908:	d009      	beq.n	800591e <HAL_TIM_Base_Start_IT+0x76>
 800590a:	687b      	ldr	r3, [r7, #4]
 800590c:	681b      	ldr	r3, [r3, #0]
 800590e:	4a1b      	ldr	r2, [pc, #108]	; (800597c <HAL_TIM_Base_Start_IT+0xd4>)
 8005910:	4293      	cmp	r3, r2
 8005912:	d004      	beq.n	800591e <HAL_TIM_Base_Start_IT+0x76>
 8005914:	687b      	ldr	r3, [r7, #4]
 8005916:	681b      	ldr	r3, [r3, #0]
 8005918:	4a19      	ldr	r2, [pc, #100]	; (8005980 <HAL_TIM_Base_Start_IT+0xd8>)
 800591a:	4293      	cmp	r3, r2
 800591c:	d115      	bne.n	800594a <HAL_TIM_Base_Start_IT+0xa2>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 800591e:	687b      	ldr	r3, [r7, #4]
 8005920:	681b      	ldr	r3, [r3, #0]
 8005922:	689a      	ldr	r2, [r3, #8]
 8005924:	4b17      	ldr	r3, [pc, #92]	; (8005984 <HAL_TIM_Base_Start_IT+0xdc>)
 8005926:	4013      	ands	r3, r2
 8005928:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800592a:	68fb      	ldr	r3, [r7, #12]
 800592c:	2b06      	cmp	r3, #6
 800592e:	d015      	beq.n	800595c <HAL_TIM_Base_Start_IT+0xb4>
 8005930:	68fb      	ldr	r3, [r7, #12]
 8005932:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8005936:	d011      	beq.n	800595c <HAL_TIM_Base_Start_IT+0xb4>
    {
      __HAL_TIM_ENABLE(htim);
 8005938:	687b      	ldr	r3, [r7, #4]
 800593a:	681b      	ldr	r3, [r3, #0]
 800593c:	681a      	ldr	r2, [r3, #0]
 800593e:	687b      	ldr	r3, [r7, #4]
 8005940:	681b      	ldr	r3, [r3, #0]
 8005942:	f042 0201 	orr.w	r2, r2, #1
 8005946:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8005948:	e008      	b.n	800595c <HAL_TIM_Base_Start_IT+0xb4>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 800594a:	687b      	ldr	r3, [r7, #4]
 800594c:	681b      	ldr	r3, [r3, #0]
 800594e:	681a      	ldr	r2, [r3, #0]
 8005950:	687b      	ldr	r3, [r7, #4]
 8005952:	681b      	ldr	r3, [r3, #0]
 8005954:	f042 0201 	orr.w	r2, r2, #1
 8005958:	601a      	str	r2, [r3, #0]
 800595a:	e000      	b.n	800595e <HAL_TIM_Base_Start_IT+0xb6>
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800595c:	bf00      	nop
  }

  /* Return function status */
  return HAL_OK;
 800595e:	2300      	movs	r3, #0
}
 8005960:	4618      	mov	r0, r3
 8005962:	3714      	adds	r7, #20
 8005964:	46bd      	mov	sp, r7
 8005966:	f85d 7b04 	ldr.w	r7, [sp], #4
 800596a:	4770      	bx	lr
 800596c:	40012c00 	.word	0x40012c00
 8005970:	40000400 	.word	0x40000400
 8005974:	40000800 	.word	0x40000800
 8005978:	40000c00 	.word	0x40000c00
 800597c:	40013400 	.word	0x40013400
 8005980:	40014000 	.word	0x40014000
 8005984:	00010007 	.word	0x00010007

08005988 <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 8005988:	b580      	push	{r7, lr}
 800598a:	b082      	sub	sp, #8
 800598c:	af00      	add	r7, sp, #0
 800598e:	6078      	str	r0, [r7, #4]
  /* Capture compare 1 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 8005990:	687b      	ldr	r3, [r7, #4]
 8005992:	681b      	ldr	r3, [r3, #0]
 8005994:	691b      	ldr	r3, [r3, #16]
 8005996:	f003 0302 	and.w	r3, r3, #2
 800599a:	2b02      	cmp	r3, #2
 800599c:	d122      	bne.n	80059e4 <HAL_TIM_IRQHandler+0x5c>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC1) != RESET)
 800599e:	687b      	ldr	r3, [r7, #4]
 80059a0:	681b      	ldr	r3, [r3, #0]
 80059a2:	68db      	ldr	r3, [r3, #12]
 80059a4:	f003 0302 	and.w	r3, r3, #2
 80059a8:	2b02      	cmp	r3, #2
 80059aa:	d11b      	bne.n	80059e4 <HAL_TIM_IRQHandler+0x5c>
    {
      {
        __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC1);
 80059ac:	687b      	ldr	r3, [r7, #4]
 80059ae:	681b      	ldr	r3, [r3, #0]
 80059b0:	f06f 0202 	mvn.w	r2, #2
 80059b4:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 80059b6:	687b      	ldr	r3, [r7, #4]
 80059b8:	2201      	movs	r2, #1
 80059ba:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 80059bc:	687b      	ldr	r3, [r7, #4]
 80059be:	681b      	ldr	r3, [r3, #0]
 80059c0:	699b      	ldr	r3, [r3, #24]
 80059c2:	f003 0303 	and.w	r3, r3, #3
 80059c6:	2b00      	cmp	r3, #0
 80059c8:	d003      	beq.n	80059d2 <HAL_TIM_IRQHandler+0x4a>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 80059ca:	6878      	ldr	r0, [r7, #4]
 80059cc:	f000 f905 	bl	8005bda <HAL_TIM_IC_CaptureCallback>
 80059d0:	e005      	b.n	80059de <HAL_TIM_IRQHandler+0x56>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 80059d2:	6878      	ldr	r0, [r7, #4]
 80059d4:	f000 f8f7 	bl	8005bc6 <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 80059d8:	6878      	ldr	r0, [r7, #4]
 80059da:	f000 f908 	bl	8005bee <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80059de:	687b      	ldr	r3, [r7, #4]
 80059e0:	2200      	movs	r2, #0
 80059e2:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC2) != RESET)
 80059e4:	687b      	ldr	r3, [r7, #4]
 80059e6:	681b      	ldr	r3, [r3, #0]
 80059e8:	691b      	ldr	r3, [r3, #16]
 80059ea:	f003 0304 	and.w	r3, r3, #4
 80059ee:	2b04      	cmp	r3, #4
 80059f0:	d122      	bne.n	8005a38 <HAL_TIM_IRQHandler+0xb0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC2) != RESET)
 80059f2:	687b      	ldr	r3, [r7, #4]
 80059f4:	681b      	ldr	r3, [r3, #0]
 80059f6:	68db      	ldr	r3, [r3, #12]
 80059f8:	f003 0304 	and.w	r3, r3, #4
 80059fc:	2b04      	cmp	r3, #4
 80059fe:	d11b      	bne.n	8005a38 <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC2);
 8005a00:	687b      	ldr	r3, [r7, #4]
 8005a02:	681b      	ldr	r3, [r3, #0]
 8005a04:	f06f 0204 	mvn.w	r2, #4
 8005a08:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 8005a0a:	687b      	ldr	r3, [r7, #4]
 8005a0c:	2202      	movs	r2, #2
 8005a0e:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 8005a10:	687b      	ldr	r3, [r7, #4]
 8005a12:	681b      	ldr	r3, [r3, #0]
 8005a14:	699b      	ldr	r3, [r3, #24]
 8005a16:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8005a1a:	2b00      	cmp	r3, #0
 8005a1c:	d003      	beq.n	8005a26 <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8005a1e:	6878      	ldr	r0, [r7, #4]
 8005a20:	f000 f8db 	bl	8005bda <HAL_TIM_IC_CaptureCallback>
 8005a24:	e005      	b.n	8005a32 <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8005a26:	6878      	ldr	r0, [r7, #4]
 8005a28:	f000 f8cd 	bl	8005bc6 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8005a2c:	6878      	ldr	r0, [r7, #4]
 8005a2e:	f000 f8de 	bl	8005bee <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8005a32:	687b      	ldr	r3, [r7, #4]
 8005a34:	2200      	movs	r2, #0
 8005a36:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC3) != RESET)
 8005a38:	687b      	ldr	r3, [r7, #4]
 8005a3a:	681b      	ldr	r3, [r3, #0]
 8005a3c:	691b      	ldr	r3, [r3, #16]
 8005a3e:	f003 0308 	and.w	r3, r3, #8
 8005a42:	2b08      	cmp	r3, #8
 8005a44:	d122      	bne.n	8005a8c <HAL_TIM_IRQHandler+0x104>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC3) != RESET)
 8005a46:	687b      	ldr	r3, [r7, #4]
 8005a48:	681b      	ldr	r3, [r3, #0]
 8005a4a:	68db      	ldr	r3, [r3, #12]
 8005a4c:	f003 0308 	and.w	r3, r3, #8
 8005a50:	2b08      	cmp	r3, #8
 8005a52:	d11b      	bne.n	8005a8c <HAL_TIM_IRQHandler+0x104>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC3);
 8005a54:	687b      	ldr	r3, [r7, #4]
 8005a56:	681b      	ldr	r3, [r3, #0]
 8005a58:	f06f 0208 	mvn.w	r2, #8
 8005a5c:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 8005a5e:	687b      	ldr	r3, [r7, #4]
 8005a60:	2204      	movs	r2, #4
 8005a62:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 8005a64:	687b      	ldr	r3, [r7, #4]
 8005a66:	681b      	ldr	r3, [r3, #0]
 8005a68:	69db      	ldr	r3, [r3, #28]
 8005a6a:	f003 0303 	and.w	r3, r3, #3
 8005a6e:	2b00      	cmp	r3, #0
 8005a70:	d003      	beq.n	8005a7a <HAL_TIM_IRQHandler+0xf2>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8005a72:	6878      	ldr	r0, [r7, #4]
 8005a74:	f000 f8b1 	bl	8005bda <HAL_TIM_IC_CaptureCallback>
 8005a78:	e005      	b.n	8005a86 <HAL_TIM_IRQHandler+0xfe>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8005a7a:	6878      	ldr	r0, [r7, #4]
 8005a7c:	f000 f8a3 	bl	8005bc6 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8005a80:	6878      	ldr	r0, [r7, #4]
 8005a82:	f000 f8b4 	bl	8005bee <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8005a86:	687b      	ldr	r3, [r7, #4]
 8005a88:	2200      	movs	r2, #0
 8005a8a:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC4) != RESET)
 8005a8c:	687b      	ldr	r3, [r7, #4]
 8005a8e:	681b      	ldr	r3, [r3, #0]
 8005a90:	691b      	ldr	r3, [r3, #16]
 8005a92:	f003 0310 	and.w	r3, r3, #16
 8005a96:	2b10      	cmp	r3, #16
 8005a98:	d122      	bne.n	8005ae0 <HAL_TIM_IRQHandler+0x158>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC4) != RESET)
 8005a9a:	687b      	ldr	r3, [r7, #4]
 8005a9c:	681b      	ldr	r3, [r3, #0]
 8005a9e:	68db      	ldr	r3, [r3, #12]
 8005aa0:	f003 0310 	and.w	r3, r3, #16
 8005aa4:	2b10      	cmp	r3, #16
 8005aa6:	d11b      	bne.n	8005ae0 <HAL_TIM_IRQHandler+0x158>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC4);
 8005aa8:	687b      	ldr	r3, [r7, #4]
 8005aaa:	681b      	ldr	r3, [r3, #0]
 8005aac:	f06f 0210 	mvn.w	r2, #16
 8005ab0:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 8005ab2:	687b      	ldr	r3, [r7, #4]
 8005ab4:	2208      	movs	r2, #8
 8005ab6:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 8005ab8:	687b      	ldr	r3, [r7, #4]
 8005aba:	681b      	ldr	r3, [r3, #0]
 8005abc:	69db      	ldr	r3, [r3, #28]
 8005abe:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8005ac2:	2b00      	cmp	r3, #0
 8005ac4:	d003      	beq.n	8005ace <HAL_TIM_IRQHandler+0x146>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8005ac6:	6878      	ldr	r0, [r7, #4]
 8005ac8:	f000 f887 	bl	8005bda <HAL_TIM_IC_CaptureCallback>
 8005acc:	e005      	b.n	8005ada <HAL_TIM_IRQHandler+0x152>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8005ace:	6878      	ldr	r0, [r7, #4]
 8005ad0:	f000 f879 	bl	8005bc6 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8005ad4:	6878      	ldr	r0, [r7, #4]
 8005ad6:	f000 f88a 	bl	8005bee <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8005ada:	687b      	ldr	r3, [r7, #4]
 8005adc:	2200      	movs	r2, #0
 8005ade:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_UPDATE) != RESET)
 8005ae0:	687b      	ldr	r3, [r7, #4]
 8005ae2:	681b      	ldr	r3, [r3, #0]
 8005ae4:	691b      	ldr	r3, [r3, #16]
 8005ae6:	f003 0301 	and.w	r3, r3, #1
 8005aea:	2b01      	cmp	r3, #1
 8005aec:	d10e      	bne.n	8005b0c <HAL_TIM_IRQHandler+0x184>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_UPDATE) != RESET)
 8005aee:	687b      	ldr	r3, [r7, #4]
 8005af0:	681b      	ldr	r3, [r3, #0]
 8005af2:	68db      	ldr	r3, [r3, #12]
 8005af4:	f003 0301 	and.w	r3, r3, #1
 8005af8:	2b01      	cmp	r3, #1
 8005afa:	d107      	bne.n	8005b0c <HAL_TIM_IRQHandler+0x184>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_UPDATE);
 8005afc:	687b      	ldr	r3, [r7, #4]
 8005afe:	681b      	ldr	r3, [r3, #0]
 8005b00:	f06f 0201 	mvn.w	r2, #1
 8005b04:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 8005b06:	6878      	ldr	r0, [r7, #4]
 8005b08:	f7fb fa76 	bl	8000ff8 <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK) != RESET)
 8005b0c:	687b      	ldr	r3, [r7, #4]
 8005b0e:	681b      	ldr	r3, [r3, #0]
 8005b10:	691b      	ldr	r3, [r3, #16]
 8005b12:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8005b16:	2b80      	cmp	r3, #128	; 0x80
 8005b18:	d10e      	bne.n	8005b38 <HAL_TIM_IRQHandler+0x1b0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 8005b1a:	687b      	ldr	r3, [r7, #4]
 8005b1c:	681b      	ldr	r3, [r3, #0]
 8005b1e:	68db      	ldr	r3, [r3, #12]
 8005b20:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8005b24:	2b80      	cmp	r3, #128	; 0x80
 8005b26:	d107      	bne.n	8005b38 <HAL_TIM_IRQHandler+0x1b0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_BREAK);
 8005b28:	687b      	ldr	r3, [r7, #4]
 8005b2a:	681b      	ldr	r3, [r3, #0]
 8005b2c:	f06f 0280 	mvn.w	r2, #128	; 0x80
 8005b30:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 8005b32:	6878      	ldr	r0, [r7, #4]
 8005b34:	f000 f914 	bl	8005d60 <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break2 input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK2) != RESET)
 8005b38:	687b      	ldr	r3, [r7, #4]
 8005b3a:	681b      	ldr	r3, [r3, #0]
 8005b3c:	691b      	ldr	r3, [r3, #16]
 8005b3e:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8005b42:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8005b46:	d10e      	bne.n	8005b66 <HAL_TIM_IRQHandler+0x1de>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 8005b48:	687b      	ldr	r3, [r7, #4]
 8005b4a:	681b      	ldr	r3, [r3, #0]
 8005b4c:	68db      	ldr	r3, [r3, #12]
 8005b4e:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8005b52:	2b80      	cmp	r3, #128	; 0x80
 8005b54:	d107      	bne.n	8005b66 <HAL_TIM_IRQHandler+0x1de>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_BREAK2);
 8005b56:	687b      	ldr	r3, [r7, #4]
 8005b58:	681b      	ldr	r3, [r3, #0]
 8005b5a:	f46f 7280 	mvn.w	r2, #256	; 0x100
 8005b5e:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->Break2Callback(htim);
#else
      HAL_TIMEx_Break2Callback(htim);
 8005b60:	6878      	ldr	r0, [r7, #4]
 8005b62:	f000 f907 	bl	8005d74 <HAL_TIMEx_Break2Callback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_TRIGGER) != RESET)
 8005b66:	687b      	ldr	r3, [r7, #4]
 8005b68:	681b      	ldr	r3, [r3, #0]
 8005b6a:	691b      	ldr	r3, [r3, #16]
 8005b6c:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8005b70:	2b40      	cmp	r3, #64	; 0x40
 8005b72:	d10e      	bne.n	8005b92 <HAL_TIM_IRQHandler+0x20a>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_TRIGGER) != RESET)
 8005b74:	687b      	ldr	r3, [r7, #4]
 8005b76:	681b      	ldr	r3, [r3, #0]
 8005b78:	68db      	ldr	r3, [r3, #12]
 8005b7a:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8005b7e:	2b40      	cmp	r3, #64	; 0x40
 8005b80:	d107      	bne.n	8005b92 <HAL_TIM_IRQHandler+0x20a>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_TRIGGER);
 8005b82:	687b      	ldr	r3, [r7, #4]
 8005b84:	681b      	ldr	r3, [r3, #0]
 8005b86:	f06f 0240 	mvn.w	r2, #64	; 0x40
 8005b8a:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 8005b8c:	6878      	ldr	r0, [r7, #4]
 8005b8e:	f000 f838 	bl	8005c02 <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_COM) != RESET)
 8005b92:	687b      	ldr	r3, [r7, #4]
 8005b94:	681b      	ldr	r3, [r3, #0]
 8005b96:	691b      	ldr	r3, [r3, #16]
 8005b98:	f003 0320 	and.w	r3, r3, #32
 8005b9c:	2b20      	cmp	r3, #32
 8005b9e:	d10e      	bne.n	8005bbe <HAL_TIM_IRQHandler+0x236>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_COM) != RESET)
 8005ba0:	687b      	ldr	r3, [r7, #4]
 8005ba2:	681b      	ldr	r3, [r3, #0]
 8005ba4:	68db      	ldr	r3, [r3, #12]
 8005ba6:	f003 0320 	and.w	r3, r3, #32
 8005baa:	2b20      	cmp	r3, #32
 8005bac:	d107      	bne.n	8005bbe <HAL_TIM_IRQHandler+0x236>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_COM);
 8005bae:	687b      	ldr	r3, [r7, #4]
 8005bb0:	681b      	ldr	r3, [r3, #0]
 8005bb2:	f06f 0220 	mvn.w	r2, #32
 8005bb6:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 8005bb8:	6878      	ldr	r0, [r7, #4]
 8005bba:	f000 f8c7 	bl	8005d4c <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 8005bbe:	bf00      	nop
 8005bc0:	3708      	adds	r7, #8
 8005bc2:	46bd      	mov	sp, r7
 8005bc4:	bd80      	pop	{r7, pc}

08005bc6 <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 8005bc6:	b480      	push	{r7}
 8005bc8:	b083      	sub	sp, #12
 8005bca:	af00      	add	r7, sp, #0
 8005bcc:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 8005bce:	bf00      	nop
 8005bd0:	370c      	adds	r7, #12
 8005bd2:	46bd      	mov	sp, r7
 8005bd4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005bd8:	4770      	bx	lr

08005bda <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 8005bda:	b480      	push	{r7}
 8005bdc:	b083      	sub	sp, #12
 8005bde:	af00      	add	r7, sp, #0
 8005be0:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 8005be2:	bf00      	nop
 8005be4:	370c      	adds	r7, #12
 8005be6:	46bd      	mov	sp, r7
 8005be8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005bec:	4770      	bx	lr

08005bee <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 8005bee:	b480      	push	{r7}
 8005bf0:	b083      	sub	sp, #12
 8005bf2:	af00      	add	r7, sp, #0
 8005bf4:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 8005bf6:	bf00      	nop
 8005bf8:	370c      	adds	r7, #12
 8005bfa:	46bd      	mov	sp, r7
 8005bfc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005c00:	4770      	bx	lr

08005c02 <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 8005c02:	b480      	push	{r7}
 8005c04:	b083      	sub	sp, #12
 8005c06:	af00      	add	r7, sp, #0
 8005c08:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 8005c0a:	bf00      	nop
 8005c0c:	370c      	adds	r7, #12
 8005c0e:	46bd      	mov	sp, r7
 8005c10:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005c14:	4770      	bx	lr
	...

08005c18 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, const TIM_Base_InitTypeDef *Structure)
{
 8005c18:	b480      	push	{r7}
 8005c1a:	b085      	sub	sp, #20
 8005c1c:	af00      	add	r7, sp, #0
 8005c1e:	6078      	str	r0, [r7, #4]
 8005c20:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 8005c22:	687b      	ldr	r3, [r7, #4]
 8005c24:	681b      	ldr	r3, [r3, #0]
 8005c26:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8005c28:	687b      	ldr	r3, [r7, #4]
 8005c2a:	4a40      	ldr	r2, [pc, #256]	; (8005d2c <TIM_Base_SetConfig+0x114>)
 8005c2c:	4293      	cmp	r3, r2
 8005c2e:	d013      	beq.n	8005c58 <TIM_Base_SetConfig+0x40>
 8005c30:	687b      	ldr	r3, [r7, #4]
 8005c32:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8005c36:	d00f      	beq.n	8005c58 <TIM_Base_SetConfig+0x40>
 8005c38:	687b      	ldr	r3, [r7, #4]
 8005c3a:	4a3d      	ldr	r2, [pc, #244]	; (8005d30 <TIM_Base_SetConfig+0x118>)
 8005c3c:	4293      	cmp	r3, r2
 8005c3e:	d00b      	beq.n	8005c58 <TIM_Base_SetConfig+0x40>
 8005c40:	687b      	ldr	r3, [r7, #4]
 8005c42:	4a3c      	ldr	r2, [pc, #240]	; (8005d34 <TIM_Base_SetConfig+0x11c>)
 8005c44:	4293      	cmp	r3, r2
 8005c46:	d007      	beq.n	8005c58 <TIM_Base_SetConfig+0x40>
 8005c48:	687b      	ldr	r3, [r7, #4]
 8005c4a:	4a3b      	ldr	r2, [pc, #236]	; (8005d38 <TIM_Base_SetConfig+0x120>)
 8005c4c:	4293      	cmp	r3, r2
 8005c4e:	d003      	beq.n	8005c58 <TIM_Base_SetConfig+0x40>
 8005c50:	687b      	ldr	r3, [r7, #4]
 8005c52:	4a3a      	ldr	r2, [pc, #232]	; (8005d3c <TIM_Base_SetConfig+0x124>)
 8005c54:	4293      	cmp	r3, r2
 8005c56:	d108      	bne.n	8005c6a <TIM_Base_SetConfig+0x52>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8005c58:	68fb      	ldr	r3, [r7, #12]
 8005c5a:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8005c5e:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8005c60:	683b      	ldr	r3, [r7, #0]
 8005c62:	685b      	ldr	r3, [r3, #4]
 8005c64:	68fa      	ldr	r2, [r7, #12]
 8005c66:	4313      	orrs	r3, r2
 8005c68:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 8005c6a:	687b      	ldr	r3, [r7, #4]
 8005c6c:	4a2f      	ldr	r2, [pc, #188]	; (8005d2c <TIM_Base_SetConfig+0x114>)
 8005c6e:	4293      	cmp	r3, r2
 8005c70:	d01f      	beq.n	8005cb2 <TIM_Base_SetConfig+0x9a>
 8005c72:	687b      	ldr	r3, [r7, #4]
 8005c74:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8005c78:	d01b      	beq.n	8005cb2 <TIM_Base_SetConfig+0x9a>
 8005c7a:	687b      	ldr	r3, [r7, #4]
 8005c7c:	4a2c      	ldr	r2, [pc, #176]	; (8005d30 <TIM_Base_SetConfig+0x118>)
 8005c7e:	4293      	cmp	r3, r2
 8005c80:	d017      	beq.n	8005cb2 <TIM_Base_SetConfig+0x9a>
 8005c82:	687b      	ldr	r3, [r7, #4]
 8005c84:	4a2b      	ldr	r2, [pc, #172]	; (8005d34 <TIM_Base_SetConfig+0x11c>)
 8005c86:	4293      	cmp	r3, r2
 8005c88:	d013      	beq.n	8005cb2 <TIM_Base_SetConfig+0x9a>
 8005c8a:	687b      	ldr	r3, [r7, #4]
 8005c8c:	4a2a      	ldr	r2, [pc, #168]	; (8005d38 <TIM_Base_SetConfig+0x120>)
 8005c8e:	4293      	cmp	r3, r2
 8005c90:	d00f      	beq.n	8005cb2 <TIM_Base_SetConfig+0x9a>
 8005c92:	687b      	ldr	r3, [r7, #4]
 8005c94:	4a29      	ldr	r2, [pc, #164]	; (8005d3c <TIM_Base_SetConfig+0x124>)
 8005c96:	4293      	cmp	r3, r2
 8005c98:	d00b      	beq.n	8005cb2 <TIM_Base_SetConfig+0x9a>
 8005c9a:	687b      	ldr	r3, [r7, #4]
 8005c9c:	4a28      	ldr	r2, [pc, #160]	; (8005d40 <TIM_Base_SetConfig+0x128>)
 8005c9e:	4293      	cmp	r3, r2
 8005ca0:	d007      	beq.n	8005cb2 <TIM_Base_SetConfig+0x9a>
 8005ca2:	687b      	ldr	r3, [r7, #4]
 8005ca4:	4a27      	ldr	r2, [pc, #156]	; (8005d44 <TIM_Base_SetConfig+0x12c>)
 8005ca6:	4293      	cmp	r3, r2
 8005ca8:	d003      	beq.n	8005cb2 <TIM_Base_SetConfig+0x9a>
 8005caa:	687b      	ldr	r3, [r7, #4]
 8005cac:	4a26      	ldr	r2, [pc, #152]	; (8005d48 <TIM_Base_SetConfig+0x130>)
 8005cae:	4293      	cmp	r3, r2
 8005cb0:	d108      	bne.n	8005cc4 <TIM_Base_SetConfig+0xac>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 8005cb2:	68fb      	ldr	r3, [r7, #12]
 8005cb4:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8005cb8:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8005cba:	683b      	ldr	r3, [r7, #0]
 8005cbc:	68db      	ldr	r3, [r3, #12]
 8005cbe:	68fa      	ldr	r2, [r7, #12]
 8005cc0:	4313      	orrs	r3, r2
 8005cc2:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8005cc4:	68fb      	ldr	r3, [r7, #12]
 8005cc6:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 8005cca:	683b      	ldr	r3, [r7, #0]
 8005ccc:	695b      	ldr	r3, [r3, #20]
 8005cce:	4313      	orrs	r3, r2
 8005cd0:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 8005cd2:	687b      	ldr	r3, [r7, #4]
 8005cd4:	68fa      	ldr	r2, [r7, #12]
 8005cd6:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8005cd8:	683b      	ldr	r3, [r7, #0]
 8005cda:	689a      	ldr	r2, [r3, #8]
 8005cdc:	687b      	ldr	r3, [r7, #4]
 8005cde:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8005ce0:	683b      	ldr	r3, [r7, #0]
 8005ce2:	681a      	ldr	r2, [r3, #0]
 8005ce4:	687b      	ldr	r3, [r7, #4]
 8005ce6:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8005ce8:	687b      	ldr	r3, [r7, #4]
 8005cea:	4a10      	ldr	r2, [pc, #64]	; (8005d2c <TIM_Base_SetConfig+0x114>)
 8005cec:	4293      	cmp	r3, r2
 8005cee:	d00f      	beq.n	8005d10 <TIM_Base_SetConfig+0xf8>
 8005cf0:	687b      	ldr	r3, [r7, #4]
 8005cf2:	4a12      	ldr	r2, [pc, #72]	; (8005d3c <TIM_Base_SetConfig+0x124>)
 8005cf4:	4293      	cmp	r3, r2
 8005cf6:	d00b      	beq.n	8005d10 <TIM_Base_SetConfig+0xf8>
 8005cf8:	687b      	ldr	r3, [r7, #4]
 8005cfa:	4a11      	ldr	r2, [pc, #68]	; (8005d40 <TIM_Base_SetConfig+0x128>)
 8005cfc:	4293      	cmp	r3, r2
 8005cfe:	d007      	beq.n	8005d10 <TIM_Base_SetConfig+0xf8>
 8005d00:	687b      	ldr	r3, [r7, #4]
 8005d02:	4a10      	ldr	r2, [pc, #64]	; (8005d44 <TIM_Base_SetConfig+0x12c>)
 8005d04:	4293      	cmp	r3, r2
 8005d06:	d003      	beq.n	8005d10 <TIM_Base_SetConfig+0xf8>
 8005d08:	687b      	ldr	r3, [r7, #4]
 8005d0a:	4a0f      	ldr	r2, [pc, #60]	; (8005d48 <TIM_Base_SetConfig+0x130>)
 8005d0c:	4293      	cmp	r3, r2
 8005d0e:	d103      	bne.n	8005d18 <TIM_Base_SetConfig+0x100>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 8005d10:	683b      	ldr	r3, [r7, #0]
 8005d12:	691a      	ldr	r2, [r3, #16]
 8005d14:	687b      	ldr	r3, [r7, #4]
 8005d16:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8005d18:	687b      	ldr	r3, [r7, #4]
 8005d1a:	2201      	movs	r2, #1
 8005d1c:	615a      	str	r2, [r3, #20]
}
 8005d1e:	bf00      	nop
 8005d20:	3714      	adds	r7, #20
 8005d22:	46bd      	mov	sp, r7
 8005d24:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005d28:	4770      	bx	lr
 8005d2a:	bf00      	nop
 8005d2c:	40012c00 	.word	0x40012c00
 8005d30:	40000400 	.word	0x40000400
 8005d34:	40000800 	.word	0x40000800
 8005d38:	40000c00 	.word	0x40000c00
 8005d3c:	40013400 	.word	0x40013400
 8005d40:	40014000 	.word	0x40014000
 8005d44:	40014400 	.word	0x40014400
 8005d48:	40014800 	.word	0x40014800

08005d4c <HAL_TIMEx_CommutCallback>:
  * @brief  Hall commutation changed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 8005d4c:	b480      	push	{r7}
 8005d4e:	b083      	sub	sp, #12
 8005d50:	af00      	add	r7, sp, #0
 8005d52:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 8005d54:	bf00      	nop
 8005d56:	370c      	adds	r7, #12
 8005d58:	46bd      	mov	sp, r7
 8005d5a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005d5e:	4770      	bx	lr

08005d60 <HAL_TIMEx_BreakCallback>:
  * @brief  Hall Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 8005d60:	b480      	push	{r7}
 8005d62:	b083      	sub	sp, #12
 8005d64:	af00      	add	r7, sp, #0
 8005d66:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 8005d68:	bf00      	nop
 8005d6a:	370c      	adds	r7, #12
 8005d6c:	46bd      	mov	sp, r7
 8005d6e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005d72:	4770      	bx	lr

08005d74 <HAL_TIMEx_Break2Callback>:
  * @brief  Hall Break2 detection callback in non blocking mode
  * @param  htim: TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_Break2Callback(TIM_HandleTypeDef *htim)
{
 8005d74:	b480      	push	{r7}
 8005d76:	b083      	sub	sp, #12
 8005d78:	af00      	add	r7, sp, #0
 8005d7a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_TIMEx_Break2Callback could be implemented in the user file
   */
}
 8005d7c:	bf00      	nop
 8005d7e:	370c      	adds	r7, #12
 8005d80:	46bd      	mov	sp, r7
 8005d82:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005d86:	4770      	bx	lr

08005d88 <HAL_UART_Init>:
  *        parameters in the UART_InitTypeDef and initialize the associated handle.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8005d88:	b580      	push	{r7, lr}
 8005d8a:	b082      	sub	sp, #8
 8005d8c:	af00      	add	r7, sp, #0
 8005d8e:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8005d90:	687b      	ldr	r3, [r7, #4]
 8005d92:	2b00      	cmp	r3, #0
 8005d94:	d101      	bne.n	8005d9a <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 8005d96:	2301      	movs	r3, #1
 8005d98:	e040      	b.n	8005e1c <HAL_UART_Init+0x94>
  {
    /* Check the parameters */
    assert_param((IS_UART_INSTANCE(huart->Instance)) || (IS_LPUART_INSTANCE(huart->Instance)));
  }

  if (huart->gState == HAL_UART_STATE_RESET)
 8005d9a:	687b      	ldr	r3, [r7, #4]
 8005d9c:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8005d9e:	2b00      	cmp	r3, #0
 8005da0:	d106      	bne.n	8005db0 <HAL_UART_Init+0x28>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8005da2:	687b      	ldr	r3, [r7, #4]
 8005da4:	2200      	movs	r2, #0
 8005da6:	f883 2074 	strb.w	r2, [r3, #116]	; 0x74

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8005daa:	6878      	ldr	r0, [r7, #4]
 8005dac:	f7fb fd6a 	bl	8001884 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8005db0:	687b      	ldr	r3, [r7, #4]
 8005db2:	2224      	movs	r2, #36	; 0x24
 8005db4:	679a      	str	r2, [r3, #120]	; 0x78

  __HAL_UART_DISABLE(huart);
 8005db6:	687b      	ldr	r3, [r7, #4]
 8005db8:	681b      	ldr	r3, [r3, #0]
 8005dba:	681a      	ldr	r2, [r3, #0]
 8005dbc:	687b      	ldr	r3, [r7, #4]
 8005dbe:	681b      	ldr	r3, [r3, #0]
 8005dc0:	f022 0201 	bic.w	r2, r2, #1
 8005dc4:	601a      	str	r2, [r3, #0]

  /* Set the UART Communication parameters */
  if (UART_SetConfig(huart) == HAL_ERROR)
 8005dc6:	6878      	ldr	r0, [r7, #4]
 8005dc8:	f000 fbc2 	bl	8006550 <UART_SetConfig>
 8005dcc:	4603      	mov	r3, r0
 8005dce:	2b01      	cmp	r3, #1
 8005dd0:	d101      	bne.n	8005dd6 <HAL_UART_Init+0x4e>
  {
    return HAL_ERROR;
 8005dd2:	2301      	movs	r3, #1
 8005dd4:	e022      	b.n	8005e1c <HAL_UART_Init+0x94>
  }

  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 8005dd6:	687b      	ldr	r3, [r7, #4]
 8005dd8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005dda:	2b00      	cmp	r3, #0
 8005ddc:	d002      	beq.n	8005de4 <HAL_UART_Init+0x5c>
  {
    UART_AdvFeatureConfig(huart);
 8005dde:	6878      	ldr	r0, [r7, #4]
 8005de0:	f000 fe6e 	bl	8006ac0 <UART_AdvFeatureConfig>
  }

  /* In asynchronous mode, the following bits must be kept cleared:
  - LINEN and CLKEN bits in the USART_CR2 register,
  - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8005de4:	687b      	ldr	r3, [r7, #4]
 8005de6:	681b      	ldr	r3, [r3, #0]
 8005de8:	685a      	ldr	r2, [r3, #4]
 8005dea:	687b      	ldr	r3, [r7, #4]
 8005dec:	681b      	ldr	r3, [r3, #0]
 8005dee:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 8005df2:	605a      	str	r2, [r3, #4]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8005df4:	687b      	ldr	r3, [r7, #4]
 8005df6:	681b      	ldr	r3, [r3, #0]
 8005df8:	689a      	ldr	r2, [r3, #8]
 8005dfa:	687b      	ldr	r3, [r7, #4]
 8005dfc:	681b      	ldr	r3, [r3, #0]
 8005dfe:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 8005e02:	609a      	str	r2, [r3, #8]

  __HAL_UART_ENABLE(huart);
 8005e04:	687b      	ldr	r3, [r7, #4]
 8005e06:	681b      	ldr	r3, [r3, #0]
 8005e08:	681a      	ldr	r2, [r3, #0]
 8005e0a:	687b      	ldr	r3, [r7, #4]
 8005e0c:	681b      	ldr	r3, [r3, #0]
 8005e0e:	f042 0201 	orr.w	r2, r2, #1
 8005e12:	601a      	str	r2, [r3, #0]

  /* TEACK and/or REACK to check before moving huart->gState and huart->RxState to Ready */
  return (UART_CheckIdleState(huart));
 8005e14:	6878      	ldr	r0, [r7, #4]
 8005e16:	f000 fef5 	bl	8006c04 <UART_CheckIdleState>
 8005e1a:	4603      	mov	r3, r0
}
 8005e1c:	4618      	mov	r0, r3
 8005e1e:	3708      	adds	r7, #8
 8005e20:	46bd      	mov	sp, r7
 8005e22:	bd80      	pop	{r7, pc}

08005e24 <HAL_UART_Transmit>:
  * @param Size    Amount of data elements (u8 or u16) to be sent.
  * @param Timeout Timeout duration.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, const uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8005e24:	b580      	push	{r7, lr}
 8005e26:	b08a      	sub	sp, #40	; 0x28
 8005e28:	af02      	add	r7, sp, #8
 8005e2a:	60f8      	str	r0, [r7, #12]
 8005e2c:	60b9      	str	r1, [r7, #8]
 8005e2e:	603b      	str	r3, [r7, #0]
 8005e30:	4613      	mov	r3, r2
 8005e32:	80fb      	strh	r3, [r7, #6]
  const uint8_t  *pdata8bits;
  const uint16_t *pdata16bits;
  uint32_t tickstart;

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 8005e34:	68fb      	ldr	r3, [r7, #12]
 8005e36:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8005e38:	2b20      	cmp	r3, #32
 8005e3a:	f040 8082 	bne.w	8005f42 <HAL_UART_Transmit+0x11e>
  {
    if ((pData == NULL) || (Size == 0U))
 8005e3e:	68bb      	ldr	r3, [r7, #8]
 8005e40:	2b00      	cmp	r3, #0
 8005e42:	d002      	beq.n	8005e4a <HAL_UART_Transmit+0x26>
 8005e44:	88fb      	ldrh	r3, [r7, #6]
 8005e46:	2b00      	cmp	r3, #0
 8005e48:	d101      	bne.n	8005e4e <HAL_UART_Transmit+0x2a>
    {
      return  HAL_ERROR;
 8005e4a:	2301      	movs	r3, #1
 8005e4c:	e07a      	b.n	8005f44 <HAL_UART_Transmit+0x120>
    }

    __HAL_LOCK(huart);
 8005e4e:	68fb      	ldr	r3, [r7, #12]
 8005e50:	f893 3074 	ldrb.w	r3, [r3, #116]	; 0x74
 8005e54:	2b01      	cmp	r3, #1
 8005e56:	d101      	bne.n	8005e5c <HAL_UART_Transmit+0x38>
 8005e58:	2302      	movs	r3, #2
 8005e5a:	e073      	b.n	8005f44 <HAL_UART_Transmit+0x120>
 8005e5c:	68fb      	ldr	r3, [r7, #12]
 8005e5e:	2201      	movs	r2, #1
 8005e60:	f883 2074 	strb.w	r2, [r3, #116]	; 0x74

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8005e64:	68fb      	ldr	r3, [r7, #12]
 8005e66:	2200      	movs	r2, #0
 8005e68:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
    huart->gState = HAL_UART_STATE_BUSY_TX;
 8005e6c:	68fb      	ldr	r3, [r7, #12]
 8005e6e:	2221      	movs	r2, #33	; 0x21
 8005e70:	679a      	str	r2, [r3, #120]	; 0x78

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 8005e72:	f7fb ff37 	bl	8001ce4 <HAL_GetTick>
 8005e76:	6178      	str	r0, [r7, #20]

    huart->TxXferSize  = Size;
 8005e78:	68fb      	ldr	r3, [r7, #12]
 8005e7a:	88fa      	ldrh	r2, [r7, #6]
 8005e7c:	f8a3 2050 	strh.w	r2, [r3, #80]	; 0x50
    huart->TxXferCount = Size;
 8005e80:	68fb      	ldr	r3, [r7, #12]
 8005e82:	88fa      	ldrh	r2, [r7, #6]
 8005e84:	f8a3 2052 	strh.w	r2, [r3, #82]	; 0x52

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8005e88:	68fb      	ldr	r3, [r7, #12]
 8005e8a:	689b      	ldr	r3, [r3, #8]
 8005e8c:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8005e90:	d108      	bne.n	8005ea4 <HAL_UART_Transmit+0x80>
 8005e92:	68fb      	ldr	r3, [r7, #12]
 8005e94:	691b      	ldr	r3, [r3, #16]
 8005e96:	2b00      	cmp	r3, #0
 8005e98:	d104      	bne.n	8005ea4 <HAL_UART_Transmit+0x80>
    {
      pdata8bits  = NULL;
 8005e9a:	2300      	movs	r3, #0
 8005e9c:	61fb      	str	r3, [r7, #28]
      pdata16bits = (const uint16_t *) pData;
 8005e9e:	68bb      	ldr	r3, [r7, #8]
 8005ea0:	61bb      	str	r3, [r7, #24]
 8005ea2:	e003      	b.n	8005eac <HAL_UART_Transmit+0x88>
    }
    else
    {
      pdata8bits  = pData;
 8005ea4:	68bb      	ldr	r3, [r7, #8]
 8005ea6:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 8005ea8:	2300      	movs	r3, #0
 8005eaa:	61bb      	str	r3, [r7, #24]
    }

    __HAL_UNLOCK(huart);
 8005eac:	68fb      	ldr	r3, [r7, #12]
 8005eae:	2200      	movs	r2, #0
 8005eb0:	f883 2074 	strb.w	r2, [r3, #116]	; 0x74

    while (huart->TxXferCount > 0U)
 8005eb4:	e02d      	b.n	8005f12 <HAL_UART_Transmit+0xee>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 8005eb6:	683b      	ldr	r3, [r7, #0]
 8005eb8:	9300      	str	r3, [sp, #0]
 8005eba:	697b      	ldr	r3, [r7, #20]
 8005ebc:	2200      	movs	r2, #0
 8005ebe:	2180      	movs	r1, #128	; 0x80
 8005ec0:	68f8      	ldr	r0, [r7, #12]
 8005ec2:	f000 fee8 	bl	8006c96 <UART_WaitOnFlagUntilTimeout>
 8005ec6:	4603      	mov	r3, r0
 8005ec8:	2b00      	cmp	r3, #0
 8005eca:	d001      	beq.n	8005ed0 <HAL_UART_Transmit+0xac>
      {
        return HAL_TIMEOUT;
 8005ecc:	2303      	movs	r3, #3
 8005ece:	e039      	b.n	8005f44 <HAL_UART_Transmit+0x120>
      }
      if (pdata8bits == NULL)
 8005ed0:	69fb      	ldr	r3, [r7, #28]
 8005ed2:	2b00      	cmp	r3, #0
 8005ed4:	d10b      	bne.n	8005eee <HAL_UART_Transmit+0xca>
      {
        huart->Instance->TDR = (uint16_t)(*pdata16bits & 0x01FFU);
 8005ed6:	69bb      	ldr	r3, [r7, #24]
 8005ed8:	881a      	ldrh	r2, [r3, #0]
 8005eda:	68fb      	ldr	r3, [r7, #12]
 8005edc:	681b      	ldr	r3, [r3, #0]
 8005ede:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8005ee2:	b292      	uxth	r2, r2
 8005ee4:	851a      	strh	r2, [r3, #40]	; 0x28
        pdata16bits++;
 8005ee6:	69bb      	ldr	r3, [r7, #24]
 8005ee8:	3302      	adds	r3, #2
 8005eea:	61bb      	str	r3, [r7, #24]
 8005eec:	e008      	b.n	8005f00 <HAL_UART_Transmit+0xdc>
      }
      else
      {
        huart->Instance->TDR = (uint8_t)(*pdata8bits & 0xFFU);
 8005eee:	69fb      	ldr	r3, [r7, #28]
 8005ef0:	781a      	ldrb	r2, [r3, #0]
 8005ef2:	68fb      	ldr	r3, [r7, #12]
 8005ef4:	681b      	ldr	r3, [r3, #0]
 8005ef6:	b292      	uxth	r2, r2
 8005ef8:	851a      	strh	r2, [r3, #40]	; 0x28
        pdata8bits++;
 8005efa:	69fb      	ldr	r3, [r7, #28]
 8005efc:	3301      	adds	r3, #1
 8005efe:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 8005f00:	68fb      	ldr	r3, [r7, #12]
 8005f02:	f8b3 3052 	ldrh.w	r3, [r3, #82]	; 0x52
 8005f06:	b29b      	uxth	r3, r3
 8005f08:	3b01      	subs	r3, #1
 8005f0a:	b29a      	uxth	r2, r3
 8005f0c:	68fb      	ldr	r3, [r7, #12]
 8005f0e:	f8a3 2052 	strh.w	r2, [r3, #82]	; 0x52
    while (huart->TxXferCount > 0U)
 8005f12:	68fb      	ldr	r3, [r7, #12]
 8005f14:	f8b3 3052 	ldrh.w	r3, [r3, #82]	; 0x52
 8005f18:	b29b      	uxth	r3, r3
 8005f1a:	2b00      	cmp	r3, #0
 8005f1c:	d1cb      	bne.n	8005eb6 <HAL_UART_Transmit+0x92>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 8005f1e:	683b      	ldr	r3, [r7, #0]
 8005f20:	9300      	str	r3, [sp, #0]
 8005f22:	697b      	ldr	r3, [r7, #20]
 8005f24:	2200      	movs	r2, #0
 8005f26:	2140      	movs	r1, #64	; 0x40
 8005f28:	68f8      	ldr	r0, [r7, #12]
 8005f2a:	f000 feb4 	bl	8006c96 <UART_WaitOnFlagUntilTimeout>
 8005f2e:	4603      	mov	r3, r0
 8005f30:	2b00      	cmp	r3, #0
 8005f32:	d001      	beq.n	8005f38 <HAL_UART_Transmit+0x114>
    {
      return HAL_TIMEOUT;
 8005f34:	2303      	movs	r3, #3
 8005f36:	e005      	b.n	8005f44 <HAL_UART_Transmit+0x120>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 8005f38:	68fb      	ldr	r3, [r7, #12]
 8005f3a:	2220      	movs	r2, #32
 8005f3c:	679a      	str	r2, [r3, #120]	; 0x78

    return HAL_OK;
 8005f3e:	2300      	movs	r3, #0
 8005f40:	e000      	b.n	8005f44 <HAL_UART_Transmit+0x120>
  }
  else
  {
    return HAL_BUSY;
 8005f42:	2302      	movs	r3, #2
  }
}
 8005f44:	4618      	mov	r0, r3
 8005f46:	3720      	adds	r7, #32
 8005f48:	46bd      	mov	sp, r7
 8005f4a:	bd80      	pop	{r7, pc}

08005f4c <HAL_UART_IRQHandler>:
  * @brief Handle UART interrupt request.
  * @param huart UART handle.
  * @retval None
  */
void HAL_UART_IRQHandler(UART_HandleTypeDef *huart)
{
 8005f4c:	b580      	push	{r7, lr}
 8005f4e:	b0ba      	sub	sp, #232	; 0xe8
 8005f50:	af00      	add	r7, sp, #0
 8005f52:	6078      	str	r0, [r7, #4]
  uint32_t isrflags   = READ_REG(huart->Instance->ISR);
 8005f54:	687b      	ldr	r3, [r7, #4]
 8005f56:	681b      	ldr	r3, [r3, #0]
 8005f58:	69db      	ldr	r3, [r3, #28]
 8005f5a:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
  uint32_t cr1its     = READ_REG(huart->Instance->CR1);
 8005f5e:	687b      	ldr	r3, [r7, #4]
 8005f60:	681b      	ldr	r3, [r3, #0]
 8005f62:	681b      	ldr	r3, [r3, #0]
 8005f64:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
  uint32_t cr3its     = READ_REG(huart->Instance->CR3);
 8005f68:	687b      	ldr	r3, [r7, #4]
 8005f6a:	681b      	ldr	r3, [r3, #0]
 8005f6c:	689b      	ldr	r3, [r3, #8]
 8005f6e:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc

  uint32_t errorflags;
  uint32_t errorcode;

  /* If no error occurs */
  errorflags = (isrflags & (uint32_t)(USART_ISR_PE | USART_ISR_FE | USART_ISR_ORE | USART_ISR_NE | USART_ISR_RTOF));
 8005f72:	f8d7 20e4 	ldr.w	r2, [r7, #228]	; 0xe4
 8005f76:	f640 030f 	movw	r3, #2063	; 0x80f
 8005f7a:	4013      	ands	r3, r2
 8005f7c:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
  if (errorflags == 0U)
 8005f80:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 8005f84:	2b00      	cmp	r3, #0
 8005f86:	d115      	bne.n	8005fb4 <HAL_UART_IRQHandler+0x68>
#if defined(USART_CR1_FIFOEN)
    if (((isrflags & USART_ISR_RXNE_RXFNE) != 0U)
        && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U)
            || ((cr3its & USART_CR3_RXFTIE) != 0U)))
#else
    if (((isrflags & USART_ISR_RXNE) != 0U)
 8005f88:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8005f8c:	f003 0320 	and.w	r3, r3, #32
 8005f90:	2b00      	cmp	r3, #0
 8005f92:	d00f      	beq.n	8005fb4 <HAL_UART_IRQHandler+0x68>
        && ((cr1its & USART_CR1_RXNEIE) != 0U))
 8005f94:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8005f98:	f003 0320 	and.w	r3, r3, #32
 8005f9c:	2b00      	cmp	r3, #0
 8005f9e:	d009      	beq.n	8005fb4 <HAL_UART_IRQHandler+0x68>
#endif /* USART_CR1_FIFOEN */
    {
      if (huart->RxISR != NULL)
 8005fa0:	687b      	ldr	r3, [r7, #4]
 8005fa2:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8005fa4:	2b00      	cmp	r3, #0
 8005fa6:	f000 82a6 	beq.w	80064f6 <HAL_UART_IRQHandler+0x5aa>
      {
        huart->RxISR(huart);
 8005faa:	687b      	ldr	r3, [r7, #4]
 8005fac:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8005fae:	6878      	ldr	r0, [r7, #4]
 8005fb0:	4798      	blx	r3
      }
      return;
 8005fb2:	e2a0      	b.n	80064f6 <HAL_UART_IRQHandler+0x5aa>
#if defined(USART_CR1_FIFOEN)
  if ((errorflags != 0U)
      && ((((cr3its & (USART_CR3_RXFTIE | USART_CR3_EIE)) != 0U)
           || ((cr1its & (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE | USART_CR1_RTOIE)) != 0U))))
#else
  if ((errorflags != 0U)
 8005fb4:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 8005fb8:	2b00      	cmp	r3, #0
 8005fba:	f000 8117 	beq.w	80061ec <HAL_UART_IRQHandler+0x2a0>
      && (((cr3its & USART_CR3_EIE) != 0U)
 8005fbe:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8005fc2:	f003 0301 	and.w	r3, r3, #1
 8005fc6:	2b00      	cmp	r3, #0
 8005fc8:	d106      	bne.n	8005fd8 <HAL_UART_IRQHandler+0x8c>
          || ((cr1its & (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_RTOIE)) != 0U)))
 8005fca:	f8d7 20e0 	ldr.w	r2, [r7, #224]	; 0xe0
 8005fce:	4b85      	ldr	r3, [pc, #532]	; (80061e4 <HAL_UART_IRQHandler+0x298>)
 8005fd0:	4013      	ands	r3, r2
 8005fd2:	2b00      	cmp	r3, #0
 8005fd4:	f000 810a 	beq.w	80061ec <HAL_UART_IRQHandler+0x2a0>
#endif /* USART_CR1_FIFOEN */
  {
    /* UART parity error interrupt occurred -------------------------------------*/
    if (((isrflags & USART_ISR_PE) != 0U) && ((cr1its & USART_CR1_PEIE) != 0U))
 8005fd8:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8005fdc:	f003 0301 	and.w	r3, r3, #1
 8005fe0:	2b00      	cmp	r3, #0
 8005fe2:	d011      	beq.n	8006008 <HAL_UART_IRQHandler+0xbc>
 8005fe4:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8005fe8:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8005fec:	2b00      	cmp	r3, #0
 8005fee:	d00b      	beq.n	8006008 <HAL_UART_IRQHandler+0xbc>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_PEF);
 8005ff0:	687b      	ldr	r3, [r7, #4]
 8005ff2:	681b      	ldr	r3, [r3, #0]
 8005ff4:	2201      	movs	r2, #1
 8005ff6:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_PE;
 8005ff8:	687b      	ldr	r3, [r7, #4]
 8005ffa:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8005ffe:	f043 0201 	orr.w	r2, r3, #1
 8006002:	687b      	ldr	r3, [r7, #4]
 8006004:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
    }

    /* UART frame error interrupt occurred --------------------------------------*/
    if (((isrflags & USART_ISR_FE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 8006008:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800600c:	f003 0302 	and.w	r3, r3, #2
 8006010:	2b00      	cmp	r3, #0
 8006012:	d011      	beq.n	8006038 <HAL_UART_IRQHandler+0xec>
 8006014:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8006018:	f003 0301 	and.w	r3, r3, #1
 800601c:	2b00      	cmp	r3, #0
 800601e:	d00b      	beq.n	8006038 <HAL_UART_IRQHandler+0xec>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_FEF);
 8006020:	687b      	ldr	r3, [r7, #4]
 8006022:	681b      	ldr	r3, [r3, #0]
 8006024:	2202      	movs	r2, #2
 8006026:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_FE;
 8006028:	687b      	ldr	r3, [r7, #4]
 800602a:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 800602e:	f043 0204 	orr.w	r2, r3, #4
 8006032:	687b      	ldr	r3, [r7, #4]
 8006034:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
    }

    /* UART noise error interrupt occurred --------------------------------------*/
    if (((isrflags & USART_ISR_NE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 8006038:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800603c:	f003 0304 	and.w	r3, r3, #4
 8006040:	2b00      	cmp	r3, #0
 8006042:	d011      	beq.n	8006068 <HAL_UART_IRQHandler+0x11c>
 8006044:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8006048:	f003 0301 	and.w	r3, r3, #1
 800604c:	2b00      	cmp	r3, #0
 800604e:	d00b      	beq.n	8006068 <HAL_UART_IRQHandler+0x11c>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_NEF);
 8006050:	687b      	ldr	r3, [r7, #4]
 8006052:	681b      	ldr	r3, [r3, #0]
 8006054:	2204      	movs	r2, #4
 8006056:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_NE;
 8006058:	687b      	ldr	r3, [r7, #4]
 800605a:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 800605e:	f043 0202 	orr.w	r2, r3, #2
 8006062:	687b      	ldr	r3, [r7, #4]
 8006064:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
#if defined(USART_CR1_FIFOEN)
    if (((isrflags & USART_ISR_ORE) != 0U)
        && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U) ||
            ((cr3its & (USART_CR3_RXFTIE | USART_CR3_EIE)) != 0U)))
#else
    if (((isrflags & USART_ISR_ORE) != 0U)
 8006068:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800606c:	f003 0308 	and.w	r3, r3, #8
 8006070:	2b00      	cmp	r3, #0
 8006072:	d017      	beq.n	80060a4 <HAL_UART_IRQHandler+0x158>
        && (((cr1its & USART_CR1_RXNEIE) != 0U) ||
 8006074:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8006078:	f003 0320 	and.w	r3, r3, #32
 800607c:	2b00      	cmp	r3, #0
 800607e:	d105      	bne.n	800608c <HAL_UART_IRQHandler+0x140>
            ((cr3its & USART_CR3_EIE) != 0U)))
 8006080:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8006084:	f003 0301 	and.w	r3, r3, #1
        && (((cr1its & USART_CR1_RXNEIE) != 0U) ||
 8006088:	2b00      	cmp	r3, #0
 800608a:	d00b      	beq.n	80060a4 <HAL_UART_IRQHandler+0x158>
#endif /* USART_CR1_FIFOEN */
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_OREF);
 800608c:	687b      	ldr	r3, [r7, #4]
 800608e:	681b      	ldr	r3, [r3, #0]
 8006090:	2208      	movs	r2, #8
 8006092:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_ORE;
 8006094:	687b      	ldr	r3, [r7, #4]
 8006096:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 800609a:	f043 0208 	orr.w	r2, r3, #8
 800609e:	687b      	ldr	r3, [r7, #4]
 80060a0:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
    }

    /* UART Receiver Timeout interrupt occurred ---------------------------------*/
    if (((isrflags & USART_ISR_RTOF) != 0U) && ((cr1its & USART_CR1_RTOIE) != 0U))
 80060a4:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 80060a8:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 80060ac:	2b00      	cmp	r3, #0
 80060ae:	d012      	beq.n	80060d6 <HAL_UART_IRQHandler+0x18a>
 80060b0:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 80060b4:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
 80060b8:	2b00      	cmp	r3, #0
 80060ba:	d00c      	beq.n	80060d6 <HAL_UART_IRQHandler+0x18a>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 80060bc:	687b      	ldr	r3, [r7, #4]
 80060be:	681b      	ldr	r3, [r3, #0]
 80060c0:	f44f 6200 	mov.w	r2, #2048	; 0x800
 80060c4:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_RTO;
 80060c6:	687b      	ldr	r3, [r7, #4]
 80060c8:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 80060cc:	f043 0220 	orr.w	r2, r3, #32
 80060d0:	687b      	ldr	r3, [r7, #4]
 80060d2:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
    }

    /* Call UART Error Call back function if need be ----------------------------*/
    if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 80060d6:	687b      	ldr	r3, [r7, #4]
 80060d8:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 80060dc:	2b00      	cmp	r3, #0
 80060de:	f000 820c 	beq.w	80064fa <HAL_UART_IRQHandler+0x5ae>
#if defined(USART_CR1_FIFOEN)
      if (((isrflags & USART_ISR_RXNE_RXFNE) != 0U)
          && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U)
              || ((cr3its & USART_CR3_RXFTIE) != 0U)))
#else
      if (((isrflags & USART_ISR_RXNE) != 0U)
 80060e2:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 80060e6:	f003 0320 	and.w	r3, r3, #32
 80060ea:	2b00      	cmp	r3, #0
 80060ec:	d00d      	beq.n	800610a <HAL_UART_IRQHandler+0x1be>
          && ((cr1its & USART_CR1_RXNEIE) != 0U))
 80060ee:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 80060f2:	f003 0320 	and.w	r3, r3, #32
 80060f6:	2b00      	cmp	r3, #0
 80060f8:	d007      	beq.n	800610a <HAL_UART_IRQHandler+0x1be>
#endif /* USART_CR1_FIFOEN */
      {
        if (huart->RxISR != NULL)
 80060fa:	687b      	ldr	r3, [r7, #4]
 80060fc:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 80060fe:	2b00      	cmp	r3, #0
 8006100:	d003      	beq.n	800610a <HAL_UART_IRQHandler+0x1be>
        {
          huart->RxISR(huart);
 8006102:	687b      	ldr	r3, [r7, #4]
 8006104:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8006106:	6878      	ldr	r0, [r7, #4]
 8006108:	4798      	blx	r3
      /* If Error is to be considered as blocking :
          - Receiver Timeout error in Reception
          - Overrun error in Reception
          - any error occurs in DMA mode reception
      */
      errorcode = huart->ErrorCode;
 800610a:	687b      	ldr	r3, [r7, #4]
 800610c:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8006110:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
      if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) ||
 8006114:	687b      	ldr	r3, [r7, #4]
 8006116:	681b      	ldr	r3, [r3, #0]
 8006118:	689b      	ldr	r3, [r3, #8]
 800611a:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800611e:	2b40      	cmp	r3, #64	; 0x40
 8006120:	d005      	beq.n	800612e <HAL_UART_IRQHandler+0x1e2>
          ((errorcode & (HAL_UART_ERROR_RTO | HAL_UART_ERROR_ORE)) != 0U))
 8006122:	f8d7 30d4 	ldr.w	r3, [r7, #212]	; 0xd4
 8006126:	f003 0328 	and.w	r3, r3, #40	; 0x28
      if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) ||
 800612a:	2b00      	cmp	r3, #0
 800612c:	d04f      	beq.n	80061ce <HAL_UART_IRQHandler+0x282>
      {
        /* Blocking error : transfer is aborted
           Set the UART state ready to be able to start again the process,
           Disable Rx Interrupts, and disable Rx DMA request, if ongoing */
        UART_EndRxTransfer(huart);
 800612e:	6878      	ldr	r0, [r7, #4]
 8006130:	f000 fe75 	bl	8006e1e <UART_EndRxTransfer>

        /* Abort the UART DMA Rx channel if enabled */
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8006134:	687b      	ldr	r3, [r7, #4]
 8006136:	681b      	ldr	r3, [r3, #0]
 8006138:	689b      	ldr	r3, [r3, #8]
 800613a:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800613e:	2b40      	cmp	r3, #64	; 0x40
 8006140:	d141      	bne.n	80061c6 <HAL_UART_IRQHandler+0x27a>
        {
          /* Disable the UART DMA Rx request if enabled */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8006142:	687b      	ldr	r3, [r7, #4]
 8006144:	681b      	ldr	r3, [r3, #0]
 8006146:	3308      	adds	r3, #8
 8006148:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800614c:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 8006150:	e853 3f00 	ldrex	r3, [r3]
 8006154:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
   return(result);
 8006158:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 800615c:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8006160:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
 8006164:	687b      	ldr	r3, [r7, #4]
 8006166:	681b      	ldr	r3, [r3, #0]
 8006168:	3308      	adds	r3, #8
 800616a:	f8d7 20d0 	ldr.w	r2, [r7, #208]	; 0xd0
 800616e:	f8c7 20a8 	str.w	r2, [r7, #168]	; 0xa8
 8006172:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006176:	f8d7 10a4 	ldr.w	r1, [r7, #164]	; 0xa4
 800617a:	f8d7 20a8 	ldr.w	r2, [r7, #168]	; 0xa8
 800617e:	e841 2300 	strex	r3, r2, [r1]
 8006182:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
   return(result);
 8006186:	f8d7 30a0 	ldr.w	r3, [r7, #160]	; 0xa0
 800618a:	2b00      	cmp	r3, #0
 800618c:	d1d9      	bne.n	8006142 <HAL_UART_IRQHandler+0x1f6>

          /* Abort the UART DMA Rx channel */
          if (huart->hdmarx != NULL)
 800618e:	687b      	ldr	r3, [r7, #4]
 8006190:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8006192:	2b00      	cmp	r3, #0
 8006194:	d013      	beq.n	80061be <HAL_UART_IRQHandler+0x272>
          {
            /* Set the UART DMA Abort callback :
               will lead to call HAL_UART_ErrorCallback() at end of DMA abort procedure */
            huart->hdmarx->XferAbortCallback = UART_DMAAbortOnError;
 8006196:	687b      	ldr	r3, [r7, #4]
 8006198:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800619a:	4a13      	ldr	r2, [pc, #76]	; (80061e8 <HAL_UART_IRQHandler+0x29c>)
 800619c:	639a      	str	r2, [r3, #56]	; 0x38

            /* Abort DMA RX */
            if (HAL_DMA_Abort_IT(huart->hdmarx) != HAL_OK)
 800619e:	687b      	ldr	r3, [r7, #4]
 80061a0:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80061a2:	4618      	mov	r0, r3
 80061a4:	f7fb fef9 	bl	8001f9a <HAL_DMA_Abort_IT>
 80061a8:	4603      	mov	r3, r0
 80061aa:	2b00      	cmp	r3, #0
 80061ac:	d017      	beq.n	80061de <HAL_UART_IRQHandler+0x292>
            {
              /* Call Directly huart->hdmarx->XferAbortCallback function in case of error */
              huart->hdmarx->XferAbortCallback(huart->hdmarx);
 80061ae:	687b      	ldr	r3, [r7, #4]
 80061b0:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80061b2:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80061b4:	687a      	ldr	r2, [r7, #4]
 80061b6:	6f12      	ldr	r2, [r2, #112]	; 0x70
 80061b8:	4610      	mov	r0, r2
 80061ba:	4798      	blx	r3
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80061bc:	e00f      	b.n	80061de <HAL_UART_IRQHandler+0x292>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
            /*Call registered error callback*/
            huart->ErrorCallback(huart);
#else
            /*Call legacy weak error callback*/
            HAL_UART_ErrorCallback(huart);
 80061be:	6878      	ldr	r0, [r7, #4]
 80061c0:	f000 f9b0 	bl	8006524 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80061c4:	e00b      	b.n	80061de <HAL_UART_IRQHandler+0x292>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
#else
          /*Call legacy weak error callback*/
          HAL_UART_ErrorCallback(huart);
 80061c6:	6878      	ldr	r0, [r7, #4]
 80061c8:	f000 f9ac 	bl	8006524 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80061cc:	e007      	b.n	80061de <HAL_UART_IRQHandler+0x292>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered error callback*/
        huart->ErrorCallback(huart);
#else
        /*Call legacy weak error callback*/
        HAL_UART_ErrorCallback(huart);
 80061ce:	6878      	ldr	r0, [r7, #4]
 80061d0:	f000 f9a8 	bl	8006524 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
        huart->ErrorCode = HAL_UART_ERROR_NONE;
 80061d4:	687b      	ldr	r3, [r7, #4]
 80061d6:	2200      	movs	r2, #0
 80061d8:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
      }
    }
    return;
 80061dc:	e18d      	b.n	80064fa <HAL_UART_IRQHandler+0x5ae>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80061de:	bf00      	nop
    return;
 80061e0:	e18b      	b.n	80064fa <HAL_UART_IRQHandler+0x5ae>
 80061e2:	bf00      	nop
 80061e4:	04000120 	.word	0x04000120
 80061e8:	08006ee5 	.word	0x08006ee5

  } /* End if some error occurs */

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : */
  if ((huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 80061ec:	687b      	ldr	r3, [r7, #4]
 80061ee:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80061f0:	2b01      	cmp	r3, #1
 80061f2:	f040 8146 	bne.w	8006482 <HAL_UART_IRQHandler+0x536>
      && ((isrflags & USART_ISR_IDLE) != 0U)
 80061f6:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 80061fa:	f003 0310 	and.w	r3, r3, #16
 80061fe:	2b00      	cmp	r3, #0
 8006200:	f000 813f 	beq.w	8006482 <HAL_UART_IRQHandler+0x536>
      && ((cr1its & USART_ISR_IDLE) != 0U))
 8006204:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8006208:	f003 0310 	and.w	r3, r3, #16
 800620c:	2b00      	cmp	r3, #0
 800620e:	f000 8138 	beq.w	8006482 <HAL_UART_IRQHandler+0x536>
  {
    __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_IDLEF);
 8006212:	687b      	ldr	r3, [r7, #4]
 8006214:	681b      	ldr	r3, [r3, #0]
 8006216:	2210      	movs	r2, #16
 8006218:	621a      	str	r2, [r3, #32]

    /* Check if DMA mode is enabled in UART */
    if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800621a:	687b      	ldr	r3, [r7, #4]
 800621c:	681b      	ldr	r3, [r3, #0]
 800621e:	689b      	ldr	r3, [r3, #8]
 8006220:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8006224:	2b40      	cmp	r3, #64	; 0x40
 8006226:	f040 80b4 	bne.w	8006392 <HAL_UART_IRQHandler+0x446>
    {
      /* DMA mode enabled */
      /* Check received length : If all expected data are received, do nothing,
         (DMA cplt callback will be called).
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_remaining_rx_data = (uint16_t) __HAL_DMA_GET_COUNTER(huart->hdmarx);
 800622a:	687b      	ldr	r3, [r7, #4]
 800622c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800622e:	681b      	ldr	r3, [r3, #0]
 8006230:	685b      	ldr	r3, [r3, #4]
 8006232:	f8a7 30be 	strh.w	r3, [r7, #190]	; 0xbe
      if ((nb_remaining_rx_data > 0U)
 8006236:	f8b7 30be 	ldrh.w	r3, [r7, #190]	; 0xbe
 800623a:	2b00      	cmp	r3, #0
 800623c:	f000 815f 	beq.w	80064fe <HAL_UART_IRQHandler+0x5b2>
          && (nb_remaining_rx_data < huart->RxXferSize))
 8006240:	687b      	ldr	r3, [r7, #4]
 8006242:	f8b3 3058 	ldrh.w	r3, [r3, #88]	; 0x58
 8006246:	f8b7 20be 	ldrh.w	r2, [r7, #190]	; 0xbe
 800624a:	429a      	cmp	r2, r3
 800624c:	f080 8157 	bcs.w	80064fe <HAL_UART_IRQHandler+0x5b2>
      {
        /* Reception is not complete */
        huart->RxXferCount = nb_remaining_rx_data;
 8006250:	687b      	ldr	r3, [r7, #4]
 8006252:	f8b7 20be 	ldrh.w	r2, [r7, #190]	; 0xbe
 8006256:	f8a3 205a 	strh.w	r2, [r3, #90]	; 0x5a

        /* In Normal mode, end DMA xfer and HAL UART Rx process*/
        if (HAL_IS_BIT_CLR(huart->hdmarx->Instance->CCR, DMA_CCR_CIRC))
 800625a:	687b      	ldr	r3, [r7, #4]
 800625c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800625e:	681b      	ldr	r3, [r3, #0]
 8006260:	681b      	ldr	r3, [r3, #0]
 8006262:	f003 0320 	and.w	r3, r3, #32
 8006266:	2b00      	cmp	r3, #0
 8006268:	f040 8085 	bne.w	8006376 <HAL_UART_IRQHandler+0x42a>
        {
          /* Disable PE and ERR (Frame error, noise error, overrun error) interrupts */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 800626c:	687b      	ldr	r3, [r7, #4]
 800626e:	681b      	ldr	r3, [r3, #0]
 8006270:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006274:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 8006278:	e853 3f00 	ldrex	r3, [r3]
 800627c:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
   return(result);
 8006280:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 8006284:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8006288:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
 800628c:	687b      	ldr	r3, [r7, #4]
 800628e:	681b      	ldr	r3, [r3, #0]
 8006290:	461a      	mov	r2, r3
 8006292:	f8d7 30b8 	ldr.w	r3, [r7, #184]	; 0xb8
 8006296:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94
 800629a:	f8c7 2090 	str.w	r2, [r7, #144]	; 0x90
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800629e:	f8d7 1090 	ldr.w	r1, [r7, #144]	; 0x90
 80062a2:	f8d7 2094 	ldr.w	r2, [r7, #148]	; 0x94
 80062a6:	e841 2300 	strex	r3, r2, [r1]
 80062aa:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
   return(result);
 80062ae:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 80062b2:	2b00      	cmp	r3, #0
 80062b4:	d1da      	bne.n	800626c <HAL_UART_IRQHandler+0x320>
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80062b6:	687b      	ldr	r3, [r7, #4]
 80062b8:	681b      	ldr	r3, [r3, #0]
 80062ba:	3308      	adds	r3, #8
 80062bc:	677b      	str	r3, [r7, #116]	; 0x74
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80062be:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 80062c0:	e853 3f00 	ldrex	r3, [r3]
 80062c4:	673b      	str	r3, [r7, #112]	; 0x70
   return(result);
 80062c6:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 80062c8:	f023 0301 	bic.w	r3, r3, #1
 80062cc:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
 80062d0:	687b      	ldr	r3, [r7, #4]
 80062d2:	681b      	ldr	r3, [r3, #0]
 80062d4:	3308      	adds	r3, #8
 80062d6:	f8d7 20b4 	ldr.w	r2, [r7, #180]	; 0xb4
 80062da:	f8c7 2080 	str.w	r2, [r7, #128]	; 0x80
 80062de:	67fb      	str	r3, [r7, #124]	; 0x7c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80062e0:	6ff9      	ldr	r1, [r7, #124]	; 0x7c
 80062e2:	f8d7 2080 	ldr.w	r2, [r7, #128]	; 0x80
 80062e6:	e841 2300 	strex	r3, r2, [r1]
 80062ea:	67bb      	str	r3, [r7, #120]	; 0x78
   return(result);
 80062ec:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 80062ee:	2b00      	cmp	r3, #0
 80062f0:	d1e1      	bne.n	80062b6 <HAL_UART_IRQHandler+0x36a>

          /* Disable the DMA transfer for the receiver request by resetting the DMAR bit
             in the UART CR3 register */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 80062f2:	687b      	ldr	r3, [r7, #4]
 80062f4:	681b      	ldr	r3, [r3, #0]
 80062f6:	3308      	adds	r3, #8
 80062f8:	663b      	str	r3, [r7, #96]	; 0x60
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80062fa:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 80062fc:	e853 3f00 	ldrex	r3, [r3]
 8006300:	65fb      	str	r3, [r7, #92]	; 0x5c
   return(result);
 8006302:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8006304:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8006308:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
 800630c:	687b      	ldr	r3, [r7, #4]
 800630e:	681b      	ldr	r3, [r3, #0]
 8006310:	3308      	adds	r3, #8
 8006312:	f8d7 20b0 	ldr.w	r2, [r7, #176]	; 0xb0
 8006316:	66fa      	str	r2, [r7, #108]	; 0x6c
 8006318:	66bb      	str	r3, [r7, #104]	; 0x68
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800631a:	6eb9      	ldr	r1, [r7, #104]	; 0x68
 800631c:	6efa      	ldr	r2, [r7, #108]	; 0x6c
 800631e:	e841 2300 	strex	r3, r2, [r1]
 8006322:	667b      	str	r3, [r7, #100]	; 0x64
   return(result);
 8006324:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8006326:	2b00      	cmp	r3, #0
 8006328:	d1e3      	bne.n	80062f2 <HAL_UART_IRQHandler+0x3a6>

          /* At end of Rx process, restore huart->RxState to Ready */
          huart->RxState = HAL_UART_STATE_READY;
 800632a:	687b      	ldr	r3, [r7, #4]
 800632c:	2220      	movs	r2, #32
 800632e:	67da      	str	r2, [r3, #124]	; 0x7c
          huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8006330:	687b      	ldr	r3, [r7, #4]
 8006332:	2200      	movs	r2, #0
 8006334:	661a      	str	r2, [r3, #96]	; 0x60

          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8006336:	687b      	ldr	r3, [r7, #4]
 8006338:	681b      	ldr	r3, [r3, #0]
 800633a:	64fb      	str	r3, [r7, #76]	; 0x4c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800633c:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800633e:	e853 3f00 	ldrex	r3, [r3]
 8006342:	64bb      	str	r3, [r7, #72]	; 0x48
   return(result);
 8006344:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8006346:	f023 0310 	bic.w	r3, r3, #16
 800634a:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
 800634e:	687b      	ldr	r3, [r7, #4]
 8006350:	681b      	ldr	r3, [r3, #0]
 8006352:	461a      	mov	r2, r3
 8006354:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 8006358:	65bb      	str	r3, [r7, #88]	; 0x58
 800635a:	657a      	str	r2, [r7, #84]	; 0x54
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800635c:	6d79      	ldr	r1, [r7, #84]	; 0x54
 800635e:	6dba      	ldr	r2, [r7, #88]	; 0x58
 8006360:	e841 2300 	strex	r3, r2, [r1]
 8006364:	653b      	str	r3, [r7, #80]	; 0x50
   return(result);
 8006366:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8006368:	2b00      	cmp	r3, #0
 800636a:	d1e4      	bne.n	8006336 <HAL_UART_IRQHandler+0x3ea>

          /* Last bytes received, so no need as the abort is immediate */
          (void)HAL_DMA_Abort(huart->hdmarx);
 800636c:	687b      	ldr	r3, [r7, #4]
 800636e:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8006370:	4618      	mov	r0, r3
 8006372:	f7fb fdd4 	bl	8001f1e <HAL_DMA_Abort>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
 8006376:	687b      	ldr	r3, [r7, #4]
 8006378:	f8b3 2058 	ldrh.w	r2, [r3, #88]	; 0x58
 800637c:	687b      	ldr	r3, [r7, #4]
 800637e:	f8b3 305a 	ldrh.w	r3, [r3, #90]	; 0x5a
 8006382:	b29b      	uxth	r3, r3
 8006384:	1ad3      	subs	r3, r2, r3
 8006386:	b29b      	uxth	r3, r3
 8006388:	4619      	mov	r1, r3
 800638a:	6878      	ldr	r0, [r7, #4]
 800638c:	f000 f8d4 	bl	8006538 <HAL_UARTEx_RxEventCallback>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
      }
      return;
 8006390:	e0b5      	b.n	80064fe <HAL_UART_IRQHandler+0x5b2>
    else
    {
      /* DMA mode not enabled */
      /* Check received length : If all expected data are received, do nothing.
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_rx_data = huart->RxXferSize - huart->RxXferCount;
 8006392:	687b      	ldr	r3, [r7, #4]
 8006394:	f8b3 2058 	ldrh.w	r2, [r3, #88]	; 0x58
 8006398:	687b      	ldr	r3, [r7, #4]
 800639a:	f8b3 305a 	ldrh.w	r3, [r3, #90]	; 0x5a
 800639e:	b29b      	uxth	r3, r3
 80063a0:	1ad3      	subs	r3, r2, r3
 80063a2:	f8a7 30ce 	strh.w	r3, [r7, #206]	; 0xce
      if ((huart->RxXferCount > 0U)
 80063a6:	687b      	ldr	r3, [r7, #4]
 80063a8:	f8b3 305a 	ldrh.w	r3, [r3, #90]	; 0x5a
 80063ac:	b29b      	uxth	r3, r3
 80063ae:	2b00      	cmp	r3, #0
 80063b0:	f000 80a7 	beq.w	8006502 <HAL_UART_IRQHandler+0x5b6>
          && (nb_rx_data > 0U))
 80063b4:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	; 0xce
 80063b8:	2b00      	cmp	r3, #0
 80063ba:	f000 80a2 	beq.w	8006502 <HAL_UART_IRQHandler+0x5b6>

        /* Disable the UART Error Interrupt:(Frame error, noise error, overrun error) and RX FIFO Threshold interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, (USART_CR3_EIE | USART_CR3_RXFTIE));
#else
        /* Disable the UART Parity Error Interrupt and RXNE interrupts */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 80063be:	687b      	ldr	r3, [r7, #4]
 80063c0:	681b      	ldr	r3, [r3, #0]
 80063c2:	63bb      	str	r3, [r7, #56]	; 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80063c4:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80063c6:	e853 3f00 	ldrex	r3, [r3]
 80063ca:	637b      	str	r3, [r7, #52]	; 0x34
   return(result);
 80063cc:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80063ce:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 80063d2:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
 80063d6:	687b      	ldr	r3, [r7, #4]
 80063d8:	681b      	ldr	r3, [r3, #0]
 80063da:	461a      	mov	r2, r3
 80063dc:	f8d7 30c8 	ldr.w	r3, [r7, #200]	; 0xc8
 80063e0:	647b      	str	r3, [r7, #68]	; 0x44
 80063e2:	643a      	str	r2, [r7, #64]	; 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80063e4:	6c39      	ldr	r1, [r7, #64]	; 0x40
 80063e6:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 80063e8:	e841 2300 	strex	r3, r2, [r1]
 80063ec:	63fb      	str	r3, [r7, #60]	; 0x3c
   return(result);
 80063ee:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80063f0:	2b00      	cmp	r3, #0
 80063f2:	d1e4      	bne.n	80063be <HAL_UART_IRQHandler+0x472>

        /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80063f4:	687b      	ldr	r3, [r7, #4]
 80063f6:	681b      	ldr	r3, [r3, #0]
 80063f8:	3308      	adds	r3, #8
 80063fa:	627b      	str	r3, [r7, #36]	; 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80063fc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80063fe:	e853 3f00 	ldrex	r3, [r3]
 8006402:	623b      	str	r3, [r7, #32]
   return(result);
 8006404:	6a3b      	ldr	r3, [r7, #32]
 8006406:	f023 0301 	bic.w	r3, r3, #1
 800640a:	f8c7 30c4 	str.w	r3, [r7, #196]	; 0xc4
 800640e:	687b      	ldr	r3, [r7, #4]
 8006410:	681b      	ldr	r3, [r3, #0]
 8006412:	3308      	adds	r3, #8
 8006414:	f8d7 20c4 	ldr.w	r2, [r7, #196]	; 0xc4
 8006418:	633a      	str	r2, [r7, #48]	; 0x30
 800641a:	62fb      	str	r3, [r7, #44]	; 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800641c:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 800641e:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8006420:	e841 2300 	strex	r3, r2, [r1]
 8006424:	62bb      	str	r3, [r7, #40]	; 0x28
   return(result);
 8006426:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006428:	2b00      	cmp	r3, #0
 800642a:	d1e3      	bne.n	80063f4 <HAL_UART_IRQHandler+0x4a8>
#endif /* USART_CR1_FIFOEN */

        /* Rx process is completed, restore huart->RxState to Ready */
        huart->RxState = HAL_UART_STATE_READY;
 800642c:	687b      	ldr	r3, [r7, #4]
 800642e:	2220      	movs	r2, #32
 8006430:	67da      	str	r2, [r3, #124]	; 0x7c
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8006432:	687b      	ldr	r3, [r7, #4]
 8006434:	2200      	movs	r2, #0
 8006436:	661a      	str	r2, [r3, #96]	; 0x60

        /* Clear RxISR function pointer */
        huart->RxISR = NULL;
 8006438:	687b      	ldr	r3, [r7, #4]
 800643a:	2200      	movs	r2, #0
 800643c:	665a      	str	r2, [r3, #100]	; 0x64

        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800643e:	687b      	ldr	r3, [r7, #4]
 8006440:	681b      	ldr	r3, [r3, #0]
 8006442:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006444:	693b      	ldr	r3, [r7, #16]
 8006446:	e853 3f00 	ldrex	r3, [r3]
 800644a:	60fb      	str	r3, [r7, #12]
   return(result);
 800644c:	68fb      	ldr	r3, [r7, #12]
 800644e:	f023 0310 	bic.w	r3, r3, #16
 8006452:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
 8006456:	687b      	ldr	r3, [r7, #4]
 8006458:	681b      	ldr	r3, [r3, #0]
 800645a:	461a      	mov	r2, r3
 800645c:	f8d7 30c0 	ldr.w	r3, [r7, #192]	; 0xc0
 8006460:	61fb      	str	r3, [r7, #28]
 8006462:	61ba      	str	r2, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006464:	69b9      	ldr	r1, [r7, #24]
 8006466:	69fa      	ldr	r2, [r7, #28]
 8006468:	e841 2300 	strex	r3, r2, [r1]
 800646c:	617b      	str	r3, [r7, #20]
   return(result);
 800646e:	697b      	ldr	r3, [r7, #20]
 8006470:	2b00      	cmp	r3, #0
 8006472:	d1e4      	bne.n	800643e <HAL_UART_IRQHandler+0x4f2>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxEventCallback(huart, nb_rx_data);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, nb_rx_data);
 8006474:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	; 0xce
 8006478:	4619      	mov	r1, r3
 800647a:	6878      	ldr	r0, [r7, #4]
 800647c:	f000 f85c 	bl	8006538 <HAL_UARTEx_RxEventCallback>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
      }
      return;
 8006480:	e03f      	b.n	8006502 <HAL_UART_IRQHandler+0x5b6>
    }
  }

  /* UART wakeup from Stop mode interrupt occurred ---------------------------*/
  if (((isrflags & USART_ISR_WUF) != 0U) && ((cr3its & USART_CR3_WUFIE) != 0U))
 8006482:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8006486:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 800648a:	2b00      	cmp	r3, #0
 800648c:	d00e      	beq.n	80064ac <HAL_UART_IRQHandler+0x560>
 800648e:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8006492:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8006496:	2b00      	cmp	r3, #0
 8006498:	d008      	beq.n	80064ac <HAL_UART_IRQHandler+0x560>
  {
    __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_WUF);
 800649a:	687b      	ldr	r3, [r7, #4]
 800649c:	681b      	ldr	r3, [r3, #0]
 800649e:	f44f 1280 	mov.w	r2, #1048576	; 0x100000
 80064a2:	621a      	str	r2, [r3, #32]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /* Call registered Wakeup Callback */
    huart->WakeupCallback(huart);
#else
    /* Call legacy weak Wakeup Callback */
    HAL_UARTEx_WakeupCallback(huart);
 80064a4:	6878      	ldr	r0, [r7, #4]
 80064a6:	f000 fd5d 	bl	8006f64 <HAL_UARTEx_WakeupCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
    return;
 80064aa:	e02d      	b.n	8006508 <HAL_UART_IRQHandler+0x5bc>
#if defined(USART_CR1_FIFOEN)
  if (((isrflags & USART_ISR_TXE_TXFNF) != 0U)
      && (((cr1its & USART_CR1_TXEIE_TXFNFIE) != 0U)
          || ((cr3its & USART_CR3_TXFTIE) != 0U)))
#else
  if (((isrflags & USART_ISR_TXE) != 0U)
 80064ac:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 80064b0:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80064b4:	2b00      	cmp	r3, #0
 80064b6:	d00e      	beq.n	80064d6 <HAL_UART_IRQHandler+0x58a>
      && ((cr1its & USART_CR1_TXEIE) != 0U))
 80064b8:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 80064bc:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80064c0:	2b00      	cmp	r3, #0
 80064c2:	d008      	beq.n	80064d6 <HAL_UART_IRQHandler+0x58a>
#endif /* USART_CR1_FIFOEN */
  {
    if (huart->TxISR != NULL)
 80064c4:	687b      	ldr	r3, [r7, #4]
 80064c6:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 80064c8:	2b00      	cmp	r3, #0
 80064ca:	d01c      	beq.n	8006506 <HAL_UART_IRQHandler+0x5ba>
    {
      huart->TxISR(huart);
 80064cc:	687b      	ldr	r3, [r7, #4]
 80064ce:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 80064d0:	6878      	ldr	r0, [r7, #4]
 80064d2:	4798      	blx	r3
    }
    return;
 80064d4:	e017      	b.n	8006506 <HAL_UART_IRQHandler+0x5ba>
  }

  /* UART in mode Transmitter (transmission end) -----------------------------*/
  if (((isrflags & USART_ISR_TC) != 0U) && ((cr1its & USART_CR1_TCIE) != 0U))
 80064d6:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 80064da:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80064de:	2b00      	cmp	r3, #0
 80064e0:	d012      	beq.n	8006508 <HAL_UART_IRQHandler+0x5bc>
 80064e2:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 80064e6:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80064ea:	2b00      	cmp	r3, #0
 80064ec:	d00c      	beq.n	8006508 <HAL_UART_IRQHandler+0x5bc>
  {
    UART_EndTransmit_IT(huart);
 80064ee:	6878      	ldr	r0, [r7, #4]
 80064f0:	f000 fd0e 	bl	8006f10 <UART_EndTransmit_IT>
    return;
 80064f4:	e008      	b.n	8006508 <HAL_UART_IRQHandler+0x5bc>
      return;
 80064f6:	bf00      	nop
 80064f8:	e006      	b.n	8006508 <HAL_UART_IRQHandler+0x5bc>
    return;
 80064fa:	bf00      	nop
 80064fc:	e004      	b.n	8006508 <HAL_UART_IRQHandler+0x5bc>
      return;
 80064fe:	bf00      	nop
 8006500:	e002      	b.n	8006508 <HAL_UART_IRQHandler+0x5bc>
      return;
 8006502:	bf00      	nop
 8006504:	e000      	b.n	8006508 <HAL_UART_IRQHandler+0x5bc>
    return;
 8006506:	bf00      	nop
    HAL_UARTEx_RxFifoFullCallback(huart);
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
    return;
  }
#endif /* USART_CR1_FIFOEN */
}
 8006508:	37e8      	adds	r7, #232	; 0xe8
 800650a:	46bd      	mov	sp, r7
 800650c:	bd80      	pop	{r7, pc}
 800650e:	bf00      	nop

08006510 <HAL_UART_TxCpltCallback>:
  * @brief Tx Transfer completed callback.
  * @param huart UART handle.
  * @retval None
  */
__weak void HAL_UART_TxCpltCallback(UART_HandleTypeDef *huart)
{
 8006510:	b480      	push	{r7}
 8006512:	b083      	sub	sp, #12
 8006514:	af00      	add	r7, sp, #0
 8006516:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UART_TxCpltCallback can be implemented in the user file.
   */
}
 8006518:	bf00      	nop
 800651a:	370c      	adds	r7, #12
 800651c:	46bd      	mov	sp, r7
 800651e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006522:	4770      	bx	lr

08006524 <HAL_UART_ErrorCallback>:
  * @brief  UART error callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UART_ErrorCallback(UART_HandleTypeDef *huart)
{
 8006524:	b480      	push	{r7}
 8006526:	b083      	sub	sp, #12
 8006528:	af00      	add	r7, sp, #0
 800652a:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UART_ErrorCallback can be implemented in the user file.
   */
}
 800652c:	bf00      	nop
 800652e:	370c      	adds	r7, #12
 8006530:	46bd      	mov	sp, r7
 8006532:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006536:	4770      	bx	lr

08006538 <HAL_UARTEx_RxEventCallback>:
  * @param  Size  Number of data available in application reception buffer (indicates a position in
  *               reception buffer until which, data are available)
  * @retval None
  */
__weak void HAL_UARTEx_RxEventCallback(UART_HandleTypeDef *huart, uint16_t Size)
{
 8006538:	b480      	push	{r7}
 800653a:	b083      	sub	sp, #12
 800653c:	af00      	add	r7, sp, #0
 800653e:	6078      	str	r0, [r7, #4]
 8006540:	460b      	mov	r3, r1
 8006542:	807b      	strh	r3, [r7, #2]
  UNUSED(Size);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_RxEventCallback can be implemented in the user file.
   */
}
 8006544:	bf00      	nop
 8006546:	370c      	adds	r7, #12
 8006548:	46bd      	mov	sp, r7
 800654a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800654e:	4770      	bx	lr

08006550 <UART_SetConfig>:
  * @brief Configure the UART peripheral.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_SetConfig(UART_HandleTypeDef *huart)
{
 8006550:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8006554:	b08a      	sub	sp, #40	; 0x28
 8006556:	af00      	add	r7, sp, #0
 8006558:	60f8      	str	r0, [r7, #12]
  uint32_t tmpreg;
  uint16_t brrtemp;
  UART_ClockSourceTypeDef clocksource;
  uint32_t usartdiv;
  HAL_StatusTypeDef ret               = HAL_OK;
 800655a:	2300      	movs	r3, #0
 800655c:	f887 3022 	strb.w	r3, [r7, #34]	; 0x22
  *  the UART Word Length, Parity, Mode and oversampling:
  *  set the M bits according to huart->Init.WordLength value
  *  set PCE and PS bits according to huart->Init.Parity value
  *  set TE and RE bits according to huart->Init.Mode value
  *  set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 8006560:	68fb      	ldr	r3, [r7, #12]
 8006562:	689a      	ldr	r2, [r3, #8]
 8006564:	68fb      	ldr	r3, [r7, #12]
 8006566:	691b      	ldr	r3, [r3, #16]
 8006568:	431a      	orrs	r2, r3
 800656a:	68fb      	ldr	r3, [r7, #12]
 800656c:	695b      	ldr	r3, [r3, #20]
 800656e:	431a      	orrs	r2, r3
 8006570:	68fb      	ldr	r3, [r7, #12]
 8006572:	69db      	ldr	r3, [r3, #28]
 8006574:	4313      	orrs	r3, r2
 8006576:	627b      	str	r3, [r7, #36]	; 0x24
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 8006578:	68fb      	ldr	r3, [r7, #12]
 800657a:	681b      	ldr	r3, [r3, #0]
 800657c:	681a      	ldr	r2, [r3, #0]
 800657e:	4ba4      	ldr	r3, [pc, #656]	; (8006810 <UART_SetConfig+0x2c0>)
 8006580:	4013      	ands	r3, r2
 8006582:	68fa      	ldr	r2, [r7, #12]
 8006584:	6812      	ldr	r2, [r2, #0]
 8006586:	6a79      	ldr	r1, [r7, #36]	; 0x24
 8006588:	430b      	orrs	r3, r1
 800658a:	6013      	str	r3, [r2, #0]

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits according
  * to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 800658c:	68fb      	ldr	r3, [r7, #12]
 800658e:	681b      	ldr	r3, [r3, #0]
 8006590:	685b      	ldr	r3, [r3, #4]
 8006592:	f423 5140 	bic.w	r1, r3, #12288	; 0x3000
 8006596:	68fb      	ldr	r3, [r7, #12]
 8006598:	68da      	ldr	r2, [r3, #12]
 800659a:	68fb      	ldr	r3, [r7, #12]
 800659c:	681b      	ldr	r3, [r3, #0]
 800659e:	430a      	orrs	r2, r1
 80065a0:	605a      	str	r2, [r3, #4]
  /* Configure
  * - UART HardWare Flow Control: set CTSE and RTSE bits according
  *   to huart->Init.HwFlowCtl value
  * - one-bit sampling method versus three samples' majority rule according
  *   to huart->Init.OneBitSampling (not applicable to LPUART) */
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
 80065a2:	68fb      	ldr	r3, [r7, #12]
 80065a4:	699b      	ldr	r3, [r3, #24]
 80065a6:	627b      	str	r3, [r7, #36]	; 0x24

  if (!(UART_INSTANCE_LOWPOWER(huart)))
 80065a8:	68fb      	ldr	r3, [r7, #12]
 80065aa:	681b      	ldr	r3, [r3, #0]
 80065ac:	4a99      	ldr	r2, [pc, #612]	; (8006814 <UART_SetConfig+0x2c4>)
 80065ae:	4293      	cmp	r3, r2
 80065b0:	d004      	beq.n	80065bc <UART_SetConfig+0x6c>
  {
    tmpreg |= huart->Init.OneBitSampling;
 80065b2:	68fb      	ldr	r3, [r7, #12]
 80065b4:	6a1b      	ldr	r3, [r3, #32]
 80065b6:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80065b8:	4313      	orrs	r3, r2
 80065ba:	627b      	str	r3, [r7, #36]	; 0x24
  }
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 80065bc:	68fb      	ldr	r3, [r7, #12]
 80065be:	681b      	ldr	r3, [r3, #0]
 80065c0:	689b      	ldr	r3, [r3, #8]
 80065c2:	f423 6130 	bic.w	r1, r3, #2816	; 0xb00
 80065c6:	68fb      	ldr	r3, [r7, #12]
 80065c8:	681b      	ldr	r3, [r3, #0]
 80065ca:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80065cc:	430a      	orrs	r2, r1
 80065ce:	609a      	str	r2, [r3, #8]
  * - UART Clock Prescaler : set PRESCALER according to huart->Init.ClockPrescaler value */
  MODIFY_REG(huart->Instance->PRESC, USART_PRESC_PRESCALER, huart->Init.ClockPrescaler);
#endif /* USART_PRESC_PRESCALER */

  /*-------------------------- USART BRR Configuration -----------------------*/
  UART_GETCLOCKSOURCE(huart, clocksource);
 80065d0:	68fb      	ldr	r3, [r7, #12]
 80065d2:	681b      	ldr	r3, [r3, #0]
 80065d4:	4a90      	ldr	r2, [pc, #576]	; (8006818 <UART_SetConfig+0x2c8>)
 80065d6:	4293      	cmp	r3, r2
 80065d8:	d126      	bne.n	8006628 <UART_SetConfig+0xd8>
 80065da:	4b90      	ldr	r3, [pc, #576]	; (800681c <UART_SetConfig+0x2cc>)
 80065dc:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80065e0:	f003 0303 	and.w	r3, r3, #3
 80065e4:	2b03      	cmp	r3, #3
 80065e6:	d81b      	bhi.n	8006620 <UART_SetConfig+0xd0>
 80065e8:	a201      	add	r2, pc, #4	; (adr r2, 80065f0 <UART_SetConfig+0xa0>)
 80065ea:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80065ee:	bf00      	nop
 80065f0:	08006601 	.word	0x08006601
 80065f4:	08006611 	.word	0x08006611
 80065f8:	08006609 	.word	0x08006609
 80065fc:	08006619 	.word	0x08006619
 8006600:	2301      	movs	r3, #1
 8006602:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8006606:	e116      	b.n	8006836 <UART_SetConfig+0x2e6>
 8006608:	2302      	movs	r3, #2
 800660a:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 800660e:	e112      	b.n	8006836 <UART_SetConfig+0x2e6>
 8006610:	2304      	movs	r3, #4
 8006612:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8006616:	e10e      	b.n	8006836 <UART_SetConfig+0x2e6>
 8006618:	2308      	movs	r3, #8
 800661a:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 800661e:	e10a      	b.n	8006836 <UART_SetConfig+0x2e6>
 8006620:	2310      	movs	r3, #16
 8006622:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8006626:	e106      	b.n	8006836 <UART_SetConfig+0x2e6>
 8006628:	68fb      	ldr	r3, [r7, #12]
 800662a:	681b      	ldr	r3, [r3, #0]
 800662c:	4a7c      	ldr	r2, [pc, #496]	; (8006820 <UART_SetConfig+0x2d0>)
 800662e:	4293      	cmp	r3, r2
 8006630:	d138      	bne.n	80066a4 <UART_SetConfig+0x154>
 8006632:	4b7a      	ldr	r3, [pc, #488]	; (800681c <UART_SetConfig+0x2cc>)
 8006634:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8006638:	f003 030c 	and.w	r3, r3, #12
 800663c:	2b0c      	cmp	r3, #12
 800663e:	d82d      	bhi.n	800669c <UART_SetConfig+0x14c>
 8006640:	a201      	add	r2, pc, #4	; (adr r2, 8006648 <UART_SetConfig+0xf8>)
 8006642:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8006646:	bf00      	nop
 8006648:	0800667d 	.word	0x0800667d
 800664c:	0800669d 	.word	0x0800669d
 8006650:	0800669d 	.word	0x0800669d
 8006654:	0800669d 	.word	0x0800669d
 8006658:	0800668d 	.word	0x0800668d
 800665c:	0800669d 	.word	0x0800669d
 8006660:	0800669d 	.word	0x0800669d
 8006664:	0800669d 	.word	0x0800669d
 8006668:	08006685 	.word	0x08006685
 800666c:	0800669d 	.word	0x0800669d
 8006670:	0800669d 	.word	0x0800669d
 8006674:	0800669d 	.word	0x0800669d
 8006678:	08006695 	.word	0x08006695
 800667c:	2300      	movs	r3, #0
 800667e:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8006682:	e0d8      	b.n	8006836 <UART_SetConfig+0x2e6>
 8006684:	2302      	movs	r3, #2
 8006686:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 800668a:	e0d4      	b.n	8006836 <UART_SetConfig+0x2e6>
 800668c:	2304      	movs	r3, #4
 800668e:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8006692:	e0d0      	b.n	8006836 <UART_SetConfig+0x2e6>
 8006694:	2308      	movs	r3, #8
 8006696:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 800669a:	e0cc      	b.n	8006836 <UART_SetConfig+0x2e6>
 800669c:	2310      	movs	r3, #16
 800669e:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 80066a2:	e0c8      	b.n	8006836 <UART_SetConfig+0x2e6>
 80066a4:	68fb      	ldr	r3, [r7, #12]
 80066a6:	681b      	ldr	r3, [r3, #0]
 80066a8:	4a5e      	ldr	r2, [pc, #376]	; (8006824 <UART_SetConfig+0x2d4>)
 80066aa:	4293      	cmp	r3, r2
 80066ac:	d125      	bne.n	80066fa <UART_SetConfig+0x1aa>
 80066ae:	4b5b      	ldr	r3, [pc, #364]	; (800681c <UART_SetConfig+0x2cc>)
 80066b0:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80066b4:	f003 0330 	and.w	r3, r3, #48	; 0x30
 80066b8:	2b30      	cmp	r3, #48	; 0x30
 80066ba:	d016      	beq.n	80066ea <UART_SetConfig+0x19a>
 80066bc:	2b30      	cmp	r3, #48	; 0x30
 80066be:	d818      	bhi.n	80066f2 <UART_SetConfig+0x1a2>
 80066c0:	2b20      	cmp	r3, #32
 80066c2:	d00a      	beq.n	80066da <UART_SetConfig+0x18a>
 80066c4:	2b20      	cmp	r3, #32
 80066c6:	d814      	bhi.n	80066f2 <UART_SetConfig+0x1a2>
 80066c8:	2b00      	cmp	r3, #0
 80066ca:	d002      	beq.n	80066d2 <UART_SetConfig+0x182>
 80066cc:	2b10      	cmp	r3, #16
 80066ce:	d008      	beq.n	80066e2 <UART_SetConfig+0x192>
 80066d0:	e00f      	b.n	80066f2 <UART_SetConfig+0x1a2>
 80066d2:	2300      	movs	r3, #0
 80066d4:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 80066d8:	e0ad      	b.n	8006836 <UART_SetConfig+0x2e6>
 80066da:	2302      	movs	r3, #2
 80066dc:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 80066e0:	e0a9      	b.n	8006836 <UART_SetConfig+0x2e6>
 80066e2:	2304      	movs	r3, #4
 80066e4:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 80066e8:	e0a5      	b.n	8006836 <UART_SetConfig+0x2e6>
 80066ea:	2308      	movs	r3, #8
 80066ec:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 80066f0:	e0a1      	b.n	8006836 <UART_SetConfig+0x2e6>
 80066f2:	2310      	movs	r3, #16
 80066f4:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 80066f8:	e09d      	b.n	8006836 <UART_SetConfig+0x2e6>
 80066fa:	68fb      	ldr	r3, [r7, #12]
 80066fc:	681b      	ldr	r3, [r3, #0]
 80066fe:	4a4a      	ldr	r2, [pc, #296]	; (8006828 <UART_SetConfig+0x2d8>)
 8006700:	4293      	cmp	r3, r2
 8006702:	d125      	bne.n	8006750 <UART_SetConfig+0x200>
 8006704:	4b45      	ldr	r3, [pc, #276]	; (800681c <UART_SetConfig+0x2cc>)
 8006706:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800670a:	f003 03c0 	and.w	r3, r3, #192	; 0xc0
 800670e:	2bc0      	cmp	r3, #192	; 0xc0
 8006710:	d016      	beq.n	8006740 <UART_SetConfig+0x1f0>
 8006712:	2bc0      	cmp	r3, #192	; 0xc0
 8006714:	d818      	bhi.n	8006748 <UART_SetConfig+0x1f8>
 8006716:	2b80      	cmp	r3, #128	; 0x80
 8006718:	d00a      	beq.n	8006730 <UART_SetConfig+0x1e0>
 800671a:	2b80      	cmp	r3, #128	; 0x80
 800671c:	d814      	bhi.n	8006748 <UART_SetConfig+0x1f8>
 800671e:	2b00      	cmp	r3, #0
 8006720:	d002      	beq.n	8006728 <UART_SetConfig+0x1d8>
 8006722:	2b40      	cmp	r3, #64	; 0x40
 8006724:	d008      	beq.n	8006738 <UART_SetConfig+0x1e8>
 8006726:	e00f      	b.n	8006748 <UART_SetConfig+0x1f8>
 8006728:	2300      	movs	r3, #0
 800672a:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 800672e:	e082      	b.n	8006836 <UART_SetConfig+0x2e6>
 8006730:	2302      	movs	r3, #2
 8006732:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8006736:	e07e      	b.n	8006836 <UART_SetConfig+0x2e6>
 8006738:	2304      	movs	r3, #4
 800673a:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 800673e:	e07a      	b.n	8006836 <UART_SetConfig+0x2e6>
 8006740:	2308      	movs	r3, #8
 8006742:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8006746:	e076      	b.n	8006836 <UART_SetConfig+0x2e6>
 8006748:	2310      	movs	r3, #16
 800674a:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 800674e:	e072      	b.n	8006836 <UART_SetConfig+0x2e6>
 8006750:	68fb      	ldr	r3, [r7, #12]
 8006752:	681b      	ldr	r3, [r3, #0]
 8006754:	4a35      	ldr	r2, [pc, #212]	; (800682c <UART_SetConfig+0x2dc>)
 8006756:	4293      	cmp	r3, r2
 8006758:	d12a      	bne.n	80067b0 <UART_SetConfig+0x260>
 800675a:	4b30      	ldr	r3, [pc, #192]	; (800681c <UART_SetConfig+0x2cc>)
 800675c:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8006760:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8006764:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8006768:	d01a      	beq.n	80067a0 <UART_SetConfig+0x250>
 800676a:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 800676e:	d81b      	bhi.n	80067a8 <UART_SetConfig+0x258>
 8006770:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8006774:	d00c      	beq.n	8006790 <UART_SetConfig+0x240>
 8006776:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 800677a:	d815      	bhi.n	80067a8 <UART_SetConfig+0x258>
 800677c:	2b00      	cmp	r3, #0
 800677e:	d003      	beq.n	8006788 <UART_SetConfig+0x238>
 8006780:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8006784:	d008      	beq.n	8006798 <UART_SetConfig+0x248>
 8006786:	e00f      	b.n	80067a8 <UART_SetConfig+0x258>
 8006788:	2300      	movs	r3, #0
 800678a:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 800678e:	e052      	b.n	8006836 <UART_SetConfig+0x2e6>
 8006790:	2302      	movs	r3, #2
 8006792:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8006796:	e04e      	b.n	8006836 <UART_SetConfig+0x2e6>
 8006798:	2304      	movs	r3, #4
 800679a:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 800679e:	e04a      	b.n	8006836 <UART_SetConfig+0x2e6>
 80067a0:	2308      	movs	r3, #8
 80067a2:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 80067a6:	e046      	b.n	8006836 <UART_SetConfig+0x2e6>
 80067a8:	2310      	movs	r3, #16
 80067aa:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 80067ae:	e042      	b.n	8006836 <UART_SetConfig+0x2e6>
 80067b0:	68fb      	ldr	r3, [r7, #12]
 80067b2:	681b      	ldr	r3, [r3, #0]
 80067b4:	4a17      	ldr	r2, [pc, #92]	; (8006814 <UART_SetConfig+0x2c4>)
 80067b6:	4293      	cmp	r3, r2
 80067b8:	d13a      	bne.n	8006830 <UART_SetConfig+0x2e0>
 80067ba:	4b18      	ldr	r3, [pc, #96]	; (800681c <UART_SetConfig+0x2cc>)
 80067bc:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80067c0:	f403 6340 	and.w	r3, r3, #3072	; 0xc00
 80067c4:	f5b3 6f40 	cmp.w	r3, #3072	; 0xc00
 80067c8:	d01a      	beq.n	8006800 <UART_SetConfig+0x2b0>
 80067ca:	f5b3 6f40 	cmp.w	r3, #3072	; 0xc00
 80067ce:	d81b      	bhi.n	8006808 <UART_SetConfig+0x2b8>
 80067d0:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 80067d4:	d00c      	beq.n	80067f0 <UART_SetConfig+0x2a0>
 80067d6:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 80067da:	d815      	bhi.n	8006808 <UART_SetConfig+0x2b8>
 80067dc:	2b00      	cmp	r3, #0
 80067de:	d003      	beq.n	80067e8 <UART_SetConfig+0x298>
 80067e0:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80067e4:	d008      	beq.n	80067f8 <UART_SetConfig+0x2a8>
 80067e6:	e00f      	b.n	8006808 <UART_SetConfig+0x2b8>
 80067e8:	2300      	movs	r3, #0
 80067ea:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 80067ee:	e022      	b.n	8006836 <UART_SetConfig+0x2e6>
 80067f0:	2302      	movs	r3, #2
 80067f2:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 80067f6:	e01e      	b.n	8006836 <UART_SetConfig+0x2e6>
 80067f8:	2304      	movs	r3, #4
 80067fa:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 80067fe:	e01a      	b.n	8006836 <UART_SetConfig+0x2e6>
 8006800:	2308      	movs	r3, #8
 8006802:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8006806:	e016      	b.n	8006836 <UART_SetConfig+0x2e6>
 8006808:	2310      	movs	r3, #16
 800680a:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 800680e:	e012      	b.n	8006836 <UART_SetConfig+0x2e6>
 8006810:	efff69f3 	.word	0xefff69f3
 8006814:	40008000 	.word	0x40008000
 8006818:	40013800 	.word	0x40013800
 800681c:	40021000 	.word	0x40021000
 8006820:	40004400 	.word	0x40004400
 8006824:	40004800 	.word	0x40004800
 8006828:	40004c00 	.word	0x40004c00
 800682c:	40005000 	.word	0x40005000
 8006830:	2310      	movs	r3, #16
 8006832:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23

  /* Check LPUART instance */
  if (UART_INSTANCE_LOWPOWER(huart))
 8006836:	68fb      	ldr	r3, [r7, #12]
 8006838:	681b      	ldr	r3, [r3, #0]
 800683a:	4a9f      	ldr	r2, [pc, #636]	; (8006ab8 <UART_SetConfig+0x568>)
 800683c:	4293      	cmp	r3, r2
 800683e:	d17a      	bne.n	8006936 <UART_SetConfig+0x3e6>
  {
    /* Retrieve frequency clock */
    switch (clocksource)
 8006840:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 8006844:	2b08      	cmp	r3, #8
 8006846:	d824      	bhi.n	8006892 <UART_SetConfig+0x342>
 8006848:	a201      	add	r2, pc, #4	; (adr r2, 8006850 <UART_SetConfig+0x300>)
 800684a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800684e:	bf00      	nop
 8006850:	08006875 	.word	0x08006875
 8006854:	08006893 	.word	0x08006893
 8006858:	0800687d 	.word	0x0800687d
 800685c:	08006893 	.word	0x08006893
 8006860:	08006883 	.word	0x08006883
 8006864:	08006893 	.word	0x08006893
 8006868:	08006893 	.word	0x08006893
 800686c:	08006893 	.word	0x08006893
 8006870:	0800688b 	.word	0x0800688b
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8006874:	f7fe fa78 	bl	8004d68 <HAL_RCC_GetPCLK1Freq>
 8006878:	61f8      	str	r0, [r7, #28]
        break;
 800687a:	e010      	b.n	800689e <UART_SetConfig+0x34e>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 800687c:	4b8f      	ldr	r3, [pc, #572]	; (8006abc <UART_SetConfig+0x56c>)
 800687e:	61fb      	str	r3, [r7, #28]
        break;
 8006880:	e00d      	b.n	800689e <UART_SetConfig+0x34e>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8006882:	f7fe f9d9 	bl	8004c38 <HAL_RCC_GetSysClockFreq>
 8006886:	61f8      	str	r0, [r7, #28]
        break;
 8006888:	e009      	b.n	800689e <UART_SetConfig+0x34e>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 800688a:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 800688e:	61fb      	str	r3, [r7, #28]
        break;
 8006890:	e005      	b.n	800689e <UART_SetConfig+0x34e>
      default:
        pclk = 0U;
 8006892:	2300      	movs	r3, #0
 8006894:	61fb      	str	r3, [r7, #28]
        ret = HAL_ERROR;
 8006896:	2301      	movs	r3, #1
 8006898:	f887 3022 	strb.w	r3, [r7, #34]	; 0x22
        break;
 800689c:	bf00      	nop
    }

    /* If proper clock source reported */
    if (pclk != 0U)
 800689e:	69fb      	ldr	r3, [r7, #28]
 80068a0:	2b00      	cmp	r3, #0
 80068a2:	f000 80fb 	beq.w	8006a9c <UART_SetConfig+0x54c>
      } /* if ( (lpuart_ker_ck_pres < (3 * huart->Init.BaudRate) ) ||
                (lpuart_ker_ck_pres > (4096 * huart->Init.BaudRate) )) */
#else
      /* No Prescaler applicable */
      /* Ensure that Frequency clock is in the range [3 * baudrate, 4096 * baudrate] */
      if ((pclk < (3U * huart->Init.BaudRate)) ||
 80068a6:	68fb      	ldr	r3, [r7, #12]
 80068a8:	685a      	ldr	r2, [r3, #4]
 80068aa:	4613      	mov	r3, r2
 80068ac:	005b      	lsls	r3, r3, #1
 80068ae:	4413      	add	r3, r2
 80068b0:	69fa      	ldr	r2, [r7, #28]
 80068b2:	429a      	cmp	r2, r3
 80068b4:	d305      	bcc.n	80068c2 <UART_SetConfig+0x372>
          (pclk > (4096U * huart->Init.BaudRate)))
 80068b6:	68fb      	ldr	r3, [r7, #12]
 80068b8:	685b      	ldr	r3, [r3, #4]
 80068ba:	031b      	lsls	r3, r3, #12
      if ((pclk < (3U * huart->Init.BaudRate)) ||
 80068bc:	69fa      	ldr	r2, [r7, #28]
 80068be:	429a      	cmp	r2, r3
 80068c0:	d903      	bls.n	80068ca <UART_SetConfig+0x37a>
      {
        ret = HAL_ERROR;
 80068c2:	2301      	movs	r3, #1
 80068c4:	f887 3022 	strb.w	r3, [r7, #34]	; 0x22
 80068c8:	e0e8      	b.n	8006a9c <UART_SetConfig+0x54c>
      }
      else
      {
        usartdiv = (uint32_t)(UART_DIV_LPUART(pclk, huart->Init.BaudRate));
 80068ca:	69fb      	ldr	r3, [r7, #28]
 80068cc:	2200      	movs	r2, #0
 80068ce:	461c      	mov	r4, r3
 80068d0:	4615      	mov	r5, r2
 80068d2:	f04f 0200 	mov.w	r2, #0
 80068d6:	f04f 0300 	mov.w	r3, #0
 80068da:	022b      	lsls	r3, r5, #8
 80068dc:	ea43 6314 	orr.w	r3, r3, r4, lsr #24
 80068e0:	0222      	lsls	r2, r4, #8
 80068e2:	68f9      	ldr	r1, [r7, #12]
 80068e4:	6849      	ldr	r1, [r1, #4]
 80068e6:	0849      	lsrs	r1, r1, #1
 80068e8:	2000      	movs	r0, #0
 80068ea:	4688      	mov	r8, r1
 80068ec:	4681      	mov	r9, r0
 80068ee:	eb12 0a08 	adds.w	sl, r2, r8
 80068f2:	eb43 0b09 	adc.w	fp, r3, r9
 80068f6:	68fb      	ldr	r3, [r7, #12]
 80068f8:	685b      	ldr	r3, [r3, #4]
 80068fa:	2200      	movs	r2, #0
 80068fc:	603b      	str	r3, [r7, #0]
 80068fe:	607a      	str	r2, [r7, #4]
 8006900:	e9d7 2300 	ldrd	r2, r3, [r7]
 8006904:	4650      	mov	r0, sl
 8006906:	4659      	mov	r1, fp
 8006908:	f7fa f9be 	bl	8000c88 <__aeabi_uldivmod>
 800690c:	4602      	mov	r2, r0
 800690e:	460b      	mov	r3, r1
 8006910:	4613      	mov	r3, r2
 8006912:	61bb      	str	r3, [r7, #24]
        if ((usartdiv >= LPUART_BRR_MIN) && (usartdiv <= LPUART_BRR_MAX))
 8006914:	69bb      	ldr	r3, [r7, #24]
 8006916:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 800691a:	d308      	bcc.n	800692e <UART_SetConfig+0x3de>
 800691c:	69bb      	ldr	r3, [r7, #24]
 800691e:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8006922:	d204      	bcs.n	800692e <UART_SetConfig+0x3de>
        {
          huart->Instance->BRR = usartdiv;
 8006924:	68fb      	ldr	r3, [r7, #12]
 8006926:	681b      	ldr	r3, [r3, #0]
 8006928:	69ba      	ldr	r2, [r7, #24]
 800692a:	60da      	str	r2, [r3, #12]
 800692c:	e0b6      	b.n	8006a9c <UART_SetConfig+0x54c>
        }
        else
        {
          ret = HAL_ERROR;
 800692e:	2301      	movs	r3, #1
 8006930:	f887 3022 	strb.w	r3, [r7, #34]	; 0x22
 8006934:	e0b2      	b.n	8006a9c <UART_SetConfig+0x54c>
      } /* if ( (pclk < (3 * huart->Init.BaudRate) ) || (pclk > (4096 * huart->Init.BaudRate) )) */
#endif /* USART_PRESC_PRESCALER */
    } /* if (pclk != 0) */
  }
  /* Check UART Over Sampling to set Baud Rate Register */
  else if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8006936:	68fb      	ldr	r3, [r7, #12]
 8006938:	69db      	ldr	r3, [r3, #28]
 800693a:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 800693e:	d15e      	bne.n	80069fe <UART_SetConfig+0x4ae>
  {
    switch (clocksource)
 8006940:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 8006944:	2b08      	cmp	r3, #8
 8006946:	d828      	bhi.n	800699a <UART_SetConfig+0x44a>
 8006948:	a201      	add	r2, pc, #4	; (adr r2, 8006950 <UART_SetConfig+0x400>)
 800694a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800694e:	bf00      	nop
 8006950:	08006975 	.word	0x08006975
 8006954:	0800697d 	.word	0x0800697d
 8006958:	08006985 	.word	0x08006985
 800695c:	0800699b 	.word	0x0800699b
 8006960:	0800698b 	.word	0x0800698b
 8006964:	0800699b 	.word	0x0800699b
 8006968:	0800699b 	.word	0x0800699b
 800696c:	0800699b 	.word	0x0800699b
 8006970:	08006993 	.word	0x08006993
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8006974:	f7fe f9f8 	bl	8004d68 <HAL_RCC_GetPCLK1Freq>
 8006978:	61f8      	str	r0, [r7, #28]
        break;
 800697a:	e014      	b.n	80069a6 <UART_SetConfig+0x456>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 800697c:	f7fe fa0a 	bl	8004d94 <HAL_RCC_GetPCLK2Freq>
 8006980:	61f8      	str	r0, [r7, #28]
        break;
 8006982:	e010      	b.n	80069a6 <UART_SetConfig+0x456>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8006984:	4b4d      	ldr	r3, [pc, #308]	; (8006abc <UART_SetConfig+0x56c>)
 8006986:	61fb      	str	r3, [r7, #28]
        break;
 8006988:	e00d      	b.n	80069a6 <UART_SetConfig+0x456>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 800698a:	f7fe f955 	bl	8004c38 <HAL_RCC_GetSysClockFreq>
 800698e:	61f8      	str	r0, [r7, #28]
        break;
 8006990:	e009      	b.n	80069a6 <UART_SetConfig+0x456>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8006992:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8006996:	61fb      	str	r3, [r7, #28]
        break;
 8006998:	e005      	b.n	80069a6 <UART_SetConfig+0x456>
      default:
        pclk = 0U;
 800699a:	2300      	movs	r3, #0
 800699c:	61fb      	str	r3, [r7, #28]
        ret = HAL_ERROR;
 800699e:	2301      	movs	r3, #1
 80069a0:	f887 3022 	strb.w	r3, [r7, #34]	; 0x22
        break;
 80069a4:	bf00      	nop
    }

    /* USARTDIV must be greater than or equal to 0d16 */
    if (pclk != 0U)
 80069a6:	69fb      	ldr	r3, [r7, #28]
 80069a8:	2b00      	cmp	r3, #0
 80069aa:	d077      	beq.n	8006a9c <UART_SetConfig+0x54c>
    {
#if defined(USART_PRESC_PRESCALER)
      usartdiv = (uint32_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
#else
      usartdiv = (uint32_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate));
 80069ac:	69fb      	ldr	r3, [r7, #28]
 80069ae:	005a      	lsls	r2, r3, #1
 80069b0:	68fb      	ldr	r3, [r7, #12]
 80069b2:	685b      	ldr	r3, [r3, #4]
 80069b4:	085b      	lsrs	r3, r3, #1
 80069b6:	441a      	add	r2, r3
 80069b8:	68fb      	ldr	r3, [r7, #12]
 80069ba:	685b      	ldr	r3, [r3, #4]
 80069bc:	fbb2 f3f3 	udiv	r3, r2, r3
 80069c0:	61bb      	str	r3, [r7, #24]
#endif /* USART_PRESC_PRESCALER */
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 80069c2:	69bb      	ldr	r3, [r7, #24]
 80069c4:	2b0f      	cmp	r3, #15
 80069c6:	d916      	bls.n	80069f6 <UART_SetConfig+0x4a6>
 80069c8:	69bb      	ldr	r3, [r7, #24]
 80069ca:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80069ce:	d212      	bcs.n	80069f6 <UART_SetConfig+0x4a6>
      {
        brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 80069d0:	69bb      	ldr	r3, [r7, #24]
 80069d2:	b29b      	uxth	r3, r3
 80069d4:	f023 030f 	bic.w	r3, r3, #15
 80069d8:	82fb      	strh	r3, [r7, #22]
        brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 80069da:	69bb      	ldr	r3, [r7, #24]
 80069dc:	085b      	lsrs	r3, r3, #1
 80069de:	b29b      	uxth	r3, r3
 80069e0:	f003 0307 	and.w	r3, r3, #7
 80069e4:	b29a      	uxth	r2, r3
 80069e6:	8afb      	ldrh	r3, [r7, #22]
 80069e8:	4313      	orrs	r3, r2
 80069ea:	82fb      	strh	r3, [r7, #22]
        huart->Instance->BRR = brrtemp;
 80069ec:	68fb      	ldr	r3, [r7, #12]
 80069ee:	681b      	ldr	r3, [r3, #0]
 80069f0:	8afa      	ldrh	r2, [r7, #22]
 80069f2:	60da      	str	r2, [r3, #12]
 80069f4:	e052      	b.n	8006a9c <UART_SetConfig+0x54c>
      }
      else
      {
        ret = HAL_ERROR;
 80069f6:	2301      	movs	r3, #1
 80069f8:	f887 3022 	strb.w	r3, [r7, #34]	; 0x22
 80069fc:	e04e      	b.n	8006a9c <UART_SetConfig+0x54c>
      }
    }
  }
  else
  {
    switch (clocksource)
 80069fe:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 8006a02:	2b08      	cmp	r3, #8
 8006a04:	d827      	bhi.n	8006a56 <UART_SetConfig+0x506>
 8006a06:	a201      	add	r2, pc, #4	; (adr r2, 8006a0c <UART_SetConfig+0x4bc>)
 8006a08:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8006a0c:	08006a31 	.word	0x08006a31
 8006a10:	08006a39 	.word	0x08006a39
 8006a14:	08006a41 	.word	0x08006a41
 8006a18:	08006a57 	.word	0x08006a57
 8006a1c:	08006a47 	.word	0x08006a47
 8006a20:	08006a57 	.word	0x08006a57
 8006a24:	08006a57 	.word	0x08006a57
 8006a28:	08006a57 	.word	0x08006a57
 8006a2c:	08006a4f 	.word	0x08006a4f
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8006a30:	f7fe f99a 	bl	8004d68 <HAL_RCC_GetPCLK1Freq>
 8006a34:	61f8      	str	r0, [r7, #28]
        break;
 8006a36:	e014      	b.n	8006a62 <UART_SetConfig+0x512>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 8006a38:	f7fe f9ac 	bl	8004d94 <HAL_RCC_GetPCLK2Freq>
 8006a3c:	61f8      	str	r0, [r7, #28]
        break;
 8006a3e:	e010      	b.n	8006a62 <UART_SetConfig+0x512>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8006a40:	4b1e      	ldr	r3, [pc, #120]	; (8006abc <UART_SetConfig+0x56c>)
 8006a42:	61fb      	str	r3, [r7, #28]
        break;
 8006a44:	e00d      	b.n	8006a62 <UART_SetConfig+0x512>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8006a46:	f7fe f8f7 	bl	8004c38 <HAL_RCC_GetSysClockFreq>
 8006a4a:	61f8      	str	r0, [r7, #28]
        break;
 8006a4c:	e009      	b.n	8006a62 <UART_SetConfig+0x512>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8006a4e:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8006a52:	61fb      	str	r3, [r7, #28]
        break;
 8006a54:	e005      	b.n	8006a62 <UART_SetConfig+0x512>
      default:
        pclk = 0U;
 8006a56:	2300      	movs	r3, #0
 8006a58:	61fb      	str	r3, [r7, #28]
        ret = HAL_ERROR;
 8006a5a:	2301      	movs	r3, #1
 8006a5c:	f887 3022 	strb.w	r3, [r7, #34]	; 0x22
        break;
 8006a60:	bf00      	nop
    }

    if (pclk != 0U)
 8006a62:	69fb      	ldr	r3, [r7, #28]
 8006a64:	2b00      	cmp	r3, #0
 8006a66:	d019      	beq.n	8006a9c <UART_SetConfig+0x54c>
    {
      /* USARTDIV must be greater than or equal to 0d16 */
#if defined(USART_PRESC_PRESCALER)
      usartdiv = (uint32_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
#else
      usartdiv = (uint32_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate));
 8006a68:	68fb      	ldr	r3, [r7, #12]
 8006a6a:	685b      	ldr	r3, [r3, #4]
 8006a6c:	085a      	lsrs	r2, r3, #1
 8006a6e:	69fb      	ldr	r3, [r7, #28]
 8006a70:	441a      	add	r2, r3
 8006a72:	68fb      	ldr	r3, [r7, #12]
 8006a74:	685b      	ldr	r3, [r3, #4]
 8006a76:	fbb2 f3f3 	udiv	r3, r2, r3
 8006a7a:	61bb      	str	r3, [r7, #24]
#endif /* USART_PRESC_PRESCALER */
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8006a7c:	69bb      	ldr	r3, [r7, #24]
 8006a7e:	2b0f      	cmp	r3, #15
 8006a80:	d909      	bls.n	8006a96 <UART_SetConfig+0x546>
 8006a82:	69bb      	ldr	r3, [r7, #24]
 8006a84:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8006a88:	d205      	bcs.n	8006a96 <UART_SetConfig+0x546>
      {
        huart->Instance->BRR = (uint16_t)usartdiv;
 8006a8a:	69bb      	ldr	r3, [r7, #24]
 8006a8c:	b29a      	uxth	r2, r3
 8006a8e:	68fb      	ldr	r3, [r7, #12]
 8006a90:	681b      	ldr	r3, [r3, #0]
 8006a92:	60da      	str	r2, [r3, #12]
 8006a94:	e002      	b.n	8006a9c <UART_SetConfig+0x54c>
      }
      else
      {
        ret = HAL_ERROR;
 8006a96:	2301      	movs	r3, #1
 8006a98:	f887 3022 	strb.w	r3, [r7, #34]	; 0x22
  huart->NbTxDataToProcess = 1;
  huart->NbRxDataToProcess = 1;
#endif /* USART_CR1_FIFOEN */

  /* Clear ISR function pointers */
  huart->RxISR = NULL;
 8006a9c:	68fb      	ldr	r3, [r7, #12]
 8006a9e:	2200      	movs	r2, #0
 8006aa0:	665a      	str	r2, [r3, #100]	; 0x64
  huart->TxISR = NULL;
 8006aa2:	68fb      	ldr	r3, [r7, #12]
 8006aa4:	2200      	movs	r2, #0
 8006aa6:	669a      	str	r2, [r3, #104]	; 0x68

  return ret;
 8006aa8:	f897 3022 	ldrb.w	r3, [r7, #34]	; 0x22
}
 8006aac:	4618      	mov	r0, r3
 8006aae:	3728      	adds	r7, #40	; 0x28
 8006ab0:	46bd      	mov	sp, r7
 8006ab2:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8006ab6:	bf00      	nop
 8006ab8:	40008000 	.word	0x40008000
 8006abc:	00f42400 	.word	0x00f42400

08006ac0 <UART_AdvFeatureConfig>:
  * @brief Configure the UART peripheral advanced features.
  * @param huart UART handle.
  * @retval None
  */
void UART_AdvFeatureConfig(UART_HandleTypeDef *huart)
{
 8006ac0:	b480      	push	{r7}
 8006ac2:	b083      	sub	sp, #12
 8006ac4:	af00      	add	r7, sp, #0
 8006ac6:	6078      	str	r0, [r7, #4]
  /* Check whether the set of advanced features to configure is properly set */
  assert_param(IS_UART_ADVFEATURE_INIT(huart->AdvancedInit.AdvFeatureInit));

  /* if required, configure TX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 8006ac8:	687b      	ldr	r3, [r7, #4]
 8006aca:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006acc:	f003 0301 	and.w	r3, r3, #1
 8006ad0:	2b00      	cmp	r3, #0
 8006ad2:	d00a      	beq.n	8006aea <UART_AdvFeatureConfig+0x2a>
  {
    assert_param(IS_UART_ADVFEATURE_TXINV(huart->AdvancedInit.TxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 8006ad4:	687b      	ldr	r3, [r7, #4]
 8006ad6:	681b      	ldr	r3, [r3, #0]
 8006ad8:	685b      	ldr	r3, [r3, #4]
 8006ada:	f423 3100 	bic.w	r1, r3, #131072	; 0x20000
 8006ade:	687b      	ldr	r3, [r7, #4]
 8006ae0:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8006ae2:	687b      	ldr	r3, [r7, #4]
 8006ae4:	681b      	ldr	r3, [r3, #0]
 8006ae6:	430a      	orrs	r2, r1
 8006ae8:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 8006aea:	687b      	ldr	r3, [r7, #4]
 8006aec:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006aee:	f003 0302 	and.w	r3, r3, #2
 8006af2:	2b00      	cmp	r3, #0
 8006af4:	d00a      	beq.n	8006b0c <UART_AdvFeatureConfig+0x4c>
  {
    assert_param(IS_UART_ADVFEATURE_RXINV(huart->AdvancedInit.RxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 8006af6:	687b      	ldr	r3, [r7, #4]
 8006af8:	681b      	ldr	r3, [r3, #0]
 8006afa:	685b      	ldr	r3, [r3, #4]
 8006afc:	f423 3180 	bic.w	r1, r3, #65536	; 0x10000
 8006b00:	687b      	ldr	r3, [r7, #4]
 8006b02:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8006b04:	687b      	ldr	r3, [r7, #4]
 8006b06:	681b      	ldr	r3, [r3, #0]
 8006b08:	430a      	orrs	r2, r1
 8006b0a:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure data inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 8006b0c:	687b      	ldr	r3, [r7, #4]
 8006b0e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006b10:	f003 0304 	and.w	r3, r3, #4
 8006b14:	2b00      	cmp	r3, #0
 8006b16:	d00a      	beq.n	8006b2e <UART_AdvFeatureConfig+0x6e>
  {
    assert_param(IS_UART_ADVFEATURE_DATAINV(huart->AdvancedInit.DataInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 8006b18:	687b      	ldr	r3, [r7, #4]
 8006b1a:	681b      	ldr	r3, [r3, #0]
 8006b1c:	685b      	ldr	r3, [r3, #4]
 8006b1e:	f423 2180 	bic.w	r1, r3, #262144	; 0x40000
 8006b22:	687b      	ldr	r3, [r7, #4]
 8006b24:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8006b26:	687b      	ldr	r3, [r7, #4]
 8006b28:	681b      	ldr	r3, [r3, #0]
 8006b2a:	430a      	orrs	r2, r1
 8006b2c:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX/TX pins swap */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 8006b2e:	687b      	ldr	r3, [r7, #4]
 8006b30:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006b32:	f003 0308 	and.w	r3, r3, #8
 8006b36:	2b00      	cmp	r3, #0
 8006b38:	d00a      	beq.n	8006b50 <UART_AdvFeatureConfig+0x90>
  {
    assert_param(IS_UART_ADVFEATURE_SWAP(huart->AdvancedInit.Swap));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 8006b3a:	687b      	ldr	r3, [r7, #4]
 8006b3c:	681b      	ldr	r3, [r3, #0]
 8006b3e:	685b      	ldr	r3, [r3, #4]
 8006b40:	f423 4100 	bic.w	r1, r3, #32768	; 0x8000
 8006b44:	687b      	ldr	r3, [r7, #4]
 8006b46:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8006b48:	687b      	ldr	r3, [r7, #4]
 8006b4a:	681b      	ldr	r3, [r3, #0]
 8006b4c:	430a      	orrs	r2, r1
 8006b4e:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX overrun detection disabling */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 8006b50:	687b      	ldr	r3, [r7, #4]
 8006b52:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006b54:	f003 0310 	and.w	r3, r3, #16
 8006b58:	2b00      	cmp	r3, #0
 8006b5a:	d00a      	beq.n	8006b72 <UART_AdvFeatureConfig+0xb2>
  {
    assert_param(IS_UART_OVERRUN(huart->AdvancedInit.OverrunDisable));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 8006b5c:	687b      	ldr	r3, [r7, #4]
 8006b5e:	681b      	ldr	r3, [r3, #0]
 8006b60:	689b      	ldr	r3, [r3, #8]
 8006b62:	f423 5180 	bic.w	r1, r3, #4096	; 0x1000
 8006b66:	687b      	ldr	r3, [r7, #4]
 8006b68:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8006b6a:	687b      	ldr	r3, [r7, #4]
 8006b6c:	681b      	ldr	r3, [r3, #0]
 8006b6e:	430a      	orrs	r2, r1
 8006b70:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure DMA disabling on reception error */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 8006b72:	687b      	ldr	r3, [r7, #4]
 8006b74:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006b76:	f003 0320 	and.w	r3, r3, #32
 8006b7a:	2b00      	cmp	r3, #0
 8006b7c:	d00a      	beq.n	8006b94 <UART_AdvFeatureConfig+0xd4>
  {
    assert_param(IS_UART_ADVFEATURE_DMAONRXERROR(huart->AdvancedInit.DMADisableonRxError));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 8006b7e:	687b      	ldr	r3, [r7, #4]
 8006b80:	681b      	ldr	r3, [r3, #0]
 8006b82:	689b      	ldr	r3, [r3, #8]
 8006b84:	f423 5100 	bic.w	r1, r3, #8192	; 0x2000
 8006b88:	687b      	ldr	r3, [r7, #4]
 8006b8a:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8006b8c:	687b      	ldr	r3, [r7, #4]
 8006b8e:	681b      	ldr	r3, [r3, #0]
 8006b90:	430a      	orrs	r2, r1
 8006b92:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure auto Baud rate detection scheme */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 8006b94:	687b      	ldr	r3, [r7, #4]
 8006b96:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006b98:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8006b9c:	2b00      	cmp	r3, #0
 8006b9e:	d01a      	beq.n	8006bd6 <UART_AdvFeatureConfig+0x116>
  {
    assert_param(IS_USART_AUTOBAUDRATE_DETECTION_INSTANCE(huart->Instance));
    assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATE(huart->AdvancedInit.AutoBaudRateEnable));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 8006ba0:	687b      	ldr	r3, [r7, #4]
 8006ba2:	681b      	ldr	r3, [r3, #0]
 8006ba4:	685b      	ldr	r3, [r3, #4]
 8006ba6:	f423 1180 	bic.w	r1, r3, #1048576	; 0x100000
 8006baa:	687b      	ldr	r3, [r7, #4]
 8006bac:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8006bae:	687b      	ldr	r3, [r7, #4]
 8006bb0:	681b      	ldr	r3, [r3, #0]
 8006bb2:	430a      	orrs	r2, r1
 8006bb4:	605a      	str	r2, [r3, #4]
    /* set auto Baudrate detection parameters if detection is enabled */
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 8006bb6:	687b      	ldr	r3, [r7, #4]
 8006bb8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006bba:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8006bbe:	d10a      	bne.n	8006bd6 <UART_AdvFeatureConfig+0x116>
    {
      assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATEMODE(huart->AdvancedInit.AutoBaudRateMode));
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 8006bc0:	687b      	ldr	r3, [r7, #4]
 8006bc2:	681b      	ldr	r3, [r3, #0]
 8006bc4:	685b      	ldr	r3, [r3, #4]
 8006bc6:	f423 01c0 	bic.w	r1, r3, #6291456	; 0x600000
 8006bca:	687b      	ldr	r3, [r7, #4]
 8006bcc:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8006bce:	687b      	ldr	r3, [r7, #4]
 8006bd0:	681b      	ldr	r3, [r3, #0]
 8006bd2:	430a      	orrs	r2, r1
 8006bd4:	605a      	str	r2, [r3, #4]
    }
  }

  /* if required, configure MSB first on communication line */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 8006bd6:	687b      	ldr	r3, [r7, #4]
 8006bd8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006bda:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8006bde:	2b00      	cmp	r3, #0
 8006be0:	d00a      	beq.n	8006bf8 <UART_AdvFeatureConfig+0x138>
  {
    assert_param(IS_UART_ADVFEATURE_MSBFIRST(huart->AdvancedInit.MSBFirst));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 8006be2:	687b      	ldr	r3, [r7, #4]
 8006be4:	681b      	ldr	r3, [r3, #0]
 8006be6:	685b      	ldr	r3, [r3, #4]
 8006be8:	f423 2100 	bic.w	r1, r3, #524288	; 0x80000
 8006bec:	687b      	ldr	r3, [r7, #4]
 8006bee:	6c9a      	ldr	r2, [r3, #72]	; 0x48
 8006bf0:	687b      	ldr	r3, [r7, #4]
 8006bf2:	681b      	ldr	r3, [r3, #0]
 8006bf4:	430a      	orrs	r2, r1
 8006bf6:	605a      	str	r2, [r3, #4]
  }
}
 8006bf8:	bf00      	nop
 8006bfa:	370c      	adds	r7, #12
 8006bfc:	46bd      	mov	sp, r7
 8006bfe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006c02:	4770      	bx	lr

08006c04 <UART_CheckIdleState>:
  * @brief Check the UART Idle State.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_CheckIdleState(UART_HandleTypeDef *huart)
{
 8006c04:	b580      	push	{r7, lr}
 8006c06:	b086      	sub	sp, #24
 8006c08:	af02      	add	r7, sp, #8
 8006c0a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Initialize the UART ErrorCode */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8006c0c:	687b      	ldr	r3, [r7, #4]
 8006c0e:	2200      	movs	r2, #0
 8006c10:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80

  /* Init tickstart for timeout management */
  tickstart = HAL_GetTick();
 8006c14:	f7fb f866 	bl	8001ce4 <HAL_GetTick>
 8006c18:	60f8      	str	r0, [r7, #12]

  /* Check if the Transmitter is enabled */
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 8006c1a:	687b      	ldr	r3, [r7, #4]
 8006c1c:	681b      	ldr	r3, [r3, #0]
 8006c1e:	681b      	ldr	r3, [r3, #0]
 8006c20:	f003 0308 	and.w	r3, r3, #8
 8006c24:	2b08      	cmp	r3, #8
 8006c26:	d10e      	bne.n	8006c46 <UART_CheckIdleState+0x42>
  {
    /* Wait until TEACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8006c28:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 8006c2c:	9300      	str	r3, [sp, #0]
 8006c2e:	68fb      	ldr	r3, [r7, #12]
 8006c30:	2200      	movs	r2, #0
 8006c32:	f44f 1100 	mov.w	r1, #2097152	; 0x200000
 8006c36:	6878      	ldr	r0, [r7, #4]
 8006c38:	f000 f82d 	bl	8006c96 <UART_WaitOnFlagUntilTimeout>
 8006c3c:	4603      	mov	r3, r0
 8006c3e:	2b00      	cmp	r3, #0
 8006c40:	d001      	beq.n	8006c46 <UART_CheckIdleState+0x42>
    {
      /* Timeout occurred */
      return HAL_TIMEOUT;
 8006c42:	2303      	movs	r3, #3
 8006c44:	e023      	b.n	8006c8e <UART_CheckIdleState+0x8a>
    }
  }

  /* Check if the Receiver is enabled */
  if ((huart->Instance->CR1 & USART_CR1_RE) == USART_CR1_RE)
 8006c46:	687b      	ldr	r3, [r7, #4]
 8006c48:	681b      	ldr	r3, [r3, #0]
 8006c4a:	681b      	ldr	r3, [r3, #0]
 8006c4c:	f003 0304 	and.w	r3, r3, #4
 8006c50:	2b04      	cmp	r3, #4
 8006c52:	d10e      	bne.n	8006c72 <UART_CheckIdleState+0x6e>
  {
    /* Wait until REACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_REACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8006c54:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 8006c58:	9300      	str	r3, [sp, #0]
 8006c5a:	68fb      	ldr	r3, [r7, #12]
 8006c5c:	2200      	movs	r2, #0
 8006c5e:	f44f 0180 	mov.w	r1, #4194304	; 0x400000
 8006c62:	6878      	ldr	r0, [r7, #4]
 8006c64:	f000 f817 	bl	8006c96 <UART_WaitOnFlagUntilTimeout>
 8006c68:	4603      	mov	r3, r0
 8006c6a:	2b00      	cmp	r3, #0
 8006c6c:	d001      	beq.n	8006c72 <UART_CheckIdleState+0x6e>
    {
      /* Timeout occurred */
      return HAL_TIMEOUT;
 8006c6e:	2303      	movs	r3, #3
 8006c70:	e00d      	b.n	8006c8e <UART_CheckIdleState+0x8a>
    }
  }

  /* Initialize the UART State */
  huart->gState = HAL_UART_STATE_READY;
 8006c72:	687b      	ldr	r3, [r7, #4]
 8006c74:	2220      	movs	r2, #32
 8006c76:	679a      	str	r2, [r3, #120]	; 0x78
  huart->RxState = HAL_UART_STATE_READY;
 8006c78:	687b      	ldr	r3, [r7, #4]
 8006c7a:	2220      	movs	r2, #32
 8006c7c:	67da      	str	r2, [r3, #124]	; 0x7c
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8006c7e:	687b      	ldr	r3, [r7, #4]
 8006c80:	2200      	movs	r2, #0
 8006c82:	661a      	str	r2, [r3, #96]	; 0x60

  __HAL_UNLOCK(huart);
 8006c84:	687b      	ldr	r3, [r7, #4]
 8006c86:	2200      	movs	r2, #0
 8006c88:	f883 2074 	strb.w	r2, [r3, #116]	; 0x74

  return HAL_OK;
 8006c8c:	2300      	movs	r3, #0
}
 8006c8e:	4618      	mov	r0, r3
 8006c90:	3710      	adds	r7, #16
 8006c92:	46bd      	mov	sp, r7
 8006c94:	bd80      	pop	{r7, pc}

08006c96 <UART_WaitOnFlagUntilTimeout>:
  * @param Timeout   Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                              uint32_t Tickstart, uint32_t Timeout)
{
 8006c96:	b580      	push	{r7, lr}
 8006c98:	b09c      	sub	sp, #112	; 0x70
 8006c9a:	af00      	add	r7, sp, #0
 8006c9c:	60f8      	str	r0, [r7, #12]
 8006c9e:	60b9      	str	r1, [r7, #8]
 8006ca0:	603b      	str	r3, [r7, #0]
 8006ca2:	4613      	mov	r3, r2
 8006ca4:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8006ca6:	e0a5      	b.n	8006df4 <UART_WaitOnFlagUntilTimeout+0x15e>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8006ca8:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8006caa:	f1b3 3fff 	cmp.w	r3, #4294967295
 8006cae:	f000 80a1 	beq.w	8006df4 <UART_WaitOnFlagUntilTimeout+0x15e>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8006cb2:	f7fb f817 	bl	8001ce4 <HAL_GetTick>
 8006cb6:	4602      	mov	r2, r0
 8006cb8:	683b      	ldr	r3, [r7, #0]
 8006cba:	1ad3      	subs	r3, r2, r3
 8006cbc:	6fba      	ldr	r2, [r7, #120]	; 0x78
 8006cbe:	429a      	cmp	r2, r3
 8006cc0:	d302      	bcc.n	8006cc8 <UART_WaitOnFlagUntilTimeout+0x32>
 8006cc2:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8006cc4:	2b00      	cmp	r3, #0
 8006cc6:	d13e      	bne.n	8006d46 <UART_WaitOnFlagUntilTimeout+0xb0>
           interrupts for the interrupt process */
#if defined(USART_CR1_FIFOEN)
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE |
                                                USART_CR1_TXEIE_TXFNFIE));
#else
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 8006cc8:	68fb      	ldr	r3, [r7, #12]
 8006cca:	681b      	ldr	r3, [r3, #0]
 8006ccc:	653b      	str	r3, [r7, #80]	; 0x50
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006cce:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8006cd0:	e853 3f00 	ldrex	r3, [r3]
 8006cd4:	64fb      	str	r3, [r7, #76]	; 0x4c
   return(result);
 8006cd6:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8006cd8:	f423 73d0 	bic.w	r3, r3, #416	; 0x1a0
 8006cdc:	667b      	str	r3, [r7, #100]	; 0x64
 8006cde:	68fb      	ldr	r3, [r7, #12]
 8006ce0:	681b      	ldr	r3, [r3, #0]
 8006ce2:	461a      	mov	r2, r3
 8006ce4:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8006ce6:	65fb      	str	r3, [r7, #92]	; 0x5c
 8006ce8:	65ba      	str	r2, [r7, #88]	; 0x58
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006cea:	6db9      	ldr	r1, [r7, #88]	; 0x58
 8006cec:	6dfa      	ldr	r2, [r7, #92]	; 0x5c
 8006cee:	e841 2300 	strex	r3, r2, [r1]
 8006cf2:	657b      	str	r3, [r7, #84]	; 0x54
   return(result);
 8006cf4:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8006cf6:	2b00      	cmp	r3, #0
 8006cf8:	d1e6      	bne.n	8006cc8 <UART_WaitOnFlagUntilTimeout+0x32>
#endif /* USART_CR1_FIFOEN */
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8006cfa:	68fb      	ldr	r3, [r7, #12]
 8006cfc:	681b      	ldr	r3, [r3, #0]
 8006cfe:	3308      	adds	r3, #8
 8006d00:	63fb      	str	r3, [r7, #60]	; 0x3c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006d02:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8006d04:	e853 3f00 	ldrex	r3, [r3]
 8006d08:	63bb      	str	r3, [r7, #56]	; 0x38
   return(result);
 8006d0a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8006d0c:	f023 0301 	bic.w	r3, r3, #1
 8006d10:	663b      	str	r3, [r7, #96]	; 0x60
 8006d12:	68fb      	ldr	r3, [r7, #12]
 8006d14:	681b      	ldr	r3, [r3, #0]
 8006d16:	3308      	adds	r3, #8
 8006d18:	6e3a      	ldr	r2, [r7, #96]	; 0x60
 8006d1a:	64ba      	str	r2, [r7, #72]	; 0x48
 8006d1c:	647b      	str	r3, [r7, #68]	; 0x44
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006d1e:	6c79      	ldr	r1, [r7, #68]	; 0x44
 8006d20:	6cba      	ldr	r2, [r7, #72]	; 0x48
 8006d22:	e841 2300 	strex	r3, r2, [r1]
 8006d26:	643b      	str	r3, [r7, #64]	; 0x40
   return(result);
 8006d28:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8006d2a:	2b00      	cmp	r3, #0
 8006d2c:	d1e5      	bne.n	8006cfa <UART_WaitOnFlagUntilTimeout+0x64>

        huart->gState = HAL_UART_STATE_READY;
 8006d2e:	68fb      	ldr	r3, [r7, #12]
 8006d30:	2220      	movs	r2, #32
 8006d32:	679a      	str	r2, [r3, #120]	; 0x78
        huart->RxState = HAL_UART_STATE_READY;
 8006d34:	68fb      	ldr	r3, [r7, #12]
 8006d36:	2220      	movs	r2, #32
 8006d38:	67da      	str	r2, [r3, #124]	; 0x7c

        __HAL_UNLOCK(huart);
 8006d3a:	68fb      	ldr	r3, [r7, #12]
 8006d3c:	2200      	movs	r2, #0
 8006d3e:	f883 2074 	strb.w	r2, [r3, #116]	; 0x74

        return HAL_TIMEOUT;
 8006d42:	2303      	movs	r3, #3
 8006d44:	e067      	b.n	8006e16 <UART_WaitOnFlagUntilTimeout+0x180>
      }

      if (READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U)
 8006d46:	68fb      	ldr	r3, [r7, #12]
 8006d48:	681b      	ldr	r3, [r3, #0]
 8006d4a:	681b      	ldr	r3, [r3, #0]
 8006d4c:	f003 0304 	and.w	r3, r3, #4
 8006d50:	2b00      	cmp	r3, #0
 8006d52:	d04f      	beq.n	8006df4 <UART_WaitOnFlagUntilTimeout+0x15e>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RTOF) == SET)
 8006d54:	68fb      	ldr	r3, [r7, #12]
 8006d56:	681b      	ldr	r3, [r3, #0]
 8006d58:	69db      	ldr	r3, [r3, #28]
 8006d5a:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8006d5e:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8006d62:	d147      	bne.n	8006df4 <UART_WaitOnFlagUntilTimeout+0x15e>
        {
          /* Clear Receiver Timeout flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 8006d64:	68fb      	ldr	r3, [r7, #12]
 8006d66:	681b      	ldr	r3, [r3, #0]
 8006d68:	f44f 6200 	mov.w	r2, #2048	; 0x800
 8006d6c:	621a      	str	r2, [r3, #32]
             interrupts for the interrupt process */
#if defined(USART_CR1_FIFOEN)
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE |
                                                  USART_CR1_TXEIE_TXFNFIE));
#else
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 8006d6e:	68fb      	ldr	r3, [r7, #12]
 8006d70:	681b      	ldr	r3, [r3, #0]
 8006d72:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006d74:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006d76:	e853 3f00 	ldrex	r3, [r3]
 8006d7a:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 8006d7c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006d7e:	f423 73d0 	bic.w	r3, r3, #416	; 0x1a0
 8006d82:	66fb      	str	r3, [r7, #108]	; 0x6c
 8006d84:	68fb      	ldr	r3, [r7, #12]
 8006d86:	681b      	ldr	r3, [r3, #0]
 8006d88:	461a      	mov	r2, r3
 8006d8a:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8006d8c:	637b      	str	r3, [r7, #52]	; 0x34
 8006d8e:	633a      	str	r2, [r7, #48]	; 0x30
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006d90:	6b39      	ldr	r1, [r7, #48]	; 0x30
 8006d92:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8006d94:	e841 2300 	strex	r3, r2, [r1]
 8006d98:	62fb      	str	r3, [r7, #44]	; 0x2c
   return(result);
 8006d9a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8006d9c:	2b00      	cmp	r3, #0
 8006d9e:	d1e6      	bne.n	8006d6e <UART_WaitOnFlagUntilTimeout+0xd8>
#endif /* USART_CR1_FIFOEN */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8006da0:	68fb      	ldr	r3, [r7, #12]
 8006da2:	681b      	ldr	r3, [r3, #0]
 8006da4:	3308      	adds	r3, #8
 8006da6:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006da8:	697b      	ldr	r3, [r7, #20]
 8006daa:	e853 3f00 	ldrex	r3, [r3]
 8006dae:	613b      	str	r3, [r7, #16]
   return(result);
 8006db0:	693b      	ldr	r3, [r7, #16]
 8006db2:	f023 0301 	bic.w	r3, r3, #1
 8006db6:	66bb      	str	r3, [r7, #104]	; 0x68
 8006db8:	68fb      	ldr	r3, [r7, #12]
 8006dba:	681b      	ldr	r3, [r3, #0]
 8006dbc:	3308      	adds	r3, #8
 8006dbe:	6eba      	ldr	r2, [r7, #104]	; 0x68
 8006dc0:	623a      	str	r2, [r7, #32]
 8006dc2:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006dc4:	69f9      	ldr	r1, [r7, #28]
 8006dc6:	6a3a      	ldr	r2, [r7, #32]
 8006dc8:	e841 2300 	strex	r3, r2, [r1]
 8006dcc:	61bb      	str	r3, [r7, #24]
   return(result);
 8006dce:	69bb      	ldr	r3, [r7, #24]
 8006dd0:	2b00      	cmp	r3, #0
 8006dd2:	d1e5      	bne.n	8006da0 <UART_WaitOnFlagUntilTimeout+0x10a>

          huart->gState = HAL_UART_STATE_READY;
 8006dd4:	68fb      	ldr	r3, [r7, #12]
 8006dd6:	2220      	movs	r2, #32
 8006dd8:	679a      	str	r2, [r3, #120]	; 0x78
          huart->RxState = HAL_UART_STATE_READY;
 8006dda:	68fb      	ldr	r3, [r7, #12]
 8006ddc:	2220      	movs	r2, #32
 8006dde:	67da      	str	r2, [r3, #124]	; 0x7c
          huart->ErrorCode = HAL_UART_ERROR_RTO;
 8006de0:	68fb      	ldr	r3, [r7, #12]
 8006de2:	2220      	movs	r2, #32
 8006de4:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 8006de8:	68fb      	ldr	r3, [r7, #12]
 8006dea:	2200      	movs	r2, #0
 8006dec:	f883 2074 	strb.w	r2, [r3, #116]	; 0x74

          return HAL_TIMEOUT;
 8006df0:	2303      	movs	r3, #3
 8006df2:	e010      	b.n	8006e16 <UART_WaitOnFlagUntilTimeout+0x180>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8006df4:	68fb      	ldr	r3, [r7, #12]
 8006df6:	681b      	ldr	r3, [r3, #0]
 8006df8:	69da      	ldr	r2, [r3, #28]
 8006dfa:	68bb      	ldr	r3, [r7, #8]
 8006dfc:	4013      	ands	r3, r2
 8006dfe:	68ba      	ldr	r2, [r7, #8]
 8006e00:	429a      	cmp	r2, r3
 8006e02:	bf0c      	ite	eq
 8006e04:	2301      	moveq	r3, #1
 8006e06:	2300      	movne	r3, #0
 8006e08:	b2db      	uxtb	r3, r3
 8006e0a:	461a      	mov	r2, r3
 8006e0c:	79fb      	ldrb	r3, [r7, #7]
 8006e0e:	429a      	cmp	r2, r3
 8006e10:	f43f af4a 	beq.w	8006ca8 <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 8006e14:	2300      	movs	r3, #0
}
 8006e16:	4618      	mov	r0, r3
 8006e18:	3770      	adds	r7, #112	; 0x70
 8006e1a:	46bd      	mov	sp, r7
 8006e1c:	bd80      	pop	{r7, pc}

08006e1e <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 8006e1e:	b480      	push	{r7}
 8006e20:	b095      	sub	sp, #84	; 0x54
 8006e22:	af00      	add	r7, sp, #0
 8006e24:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
#if defined(USART_CR1_FIFOEN)
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, (USART_CR3_EIE | USART_CR3_RXFTIE));
#else
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8006e26:	687b      	ldr	r3, [r7, #4]
 8006e28:	681b      	ldr	r3, [r3, #0]
 8006e2a:	637b      	str	r3, [r7, #52]	; 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006e2c:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8006e2e:	e853 3f00 	ldrex	r3, [r3]
 8006e32:	633b      	str	r3, [r7, #48]	; 0x30
   return(result);
 8006e34:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006e36:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 8006e3a:	64fb      	str	r3, [r7, #76]	; 0x4c
 8006e3c:	687b      	ldr	r3, [r7, #4]
 8006e3e:	681b      	ldr	r3, [r3, #0]
 8006e40:	461a      	mov	r2, r3
 8006e42:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8006e44:	643b      	str	r3, [r7, #64]	; 0x40
 8006e46:	63fa      	str	r2, [r7, #60]	; 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006e48:	6bf9      	ldr	r1, [r7, #60]	; 0x3c
 8006e4a:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 8006e4c:	e841 2300 	strex	r3, r2, [r1]
 8006e50:	63bb      	str	r3, [r7, #56]	; 0x38
   return(result);
 8006e52:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8006e54:	2b00      	cmp	r3, #0
 8006e56:	d1e6      	bne.n	8006e26 <UART_EndRxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8006e58:	687b      	ldr	r3, [r7, #4]
 8006e5a:	681b      	ldr	r3, [r3, #0]
 8006e5c:	3308      	adds	r3, #8
 8006e5e:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006e60:	6a3b      	ldr	r3, [r7, #32]
 8006e62:	e853 3f00 	ldrex	r3, [r3]
 8006e66:	61fb      	str	r3, [r7, #28]
   return(result);
 8006e68:	69fb      	ldr	r3, [r7, #28]
 8006e6a:	f023 0301 	bic.w	r3, r3, #1
 8006e6e:	64bb      	str	r3, [r7, #72]	; 0x48
 8006e70:	687b      	ldr	r3, [r7, #4]
 8006e72:	681b      	ldr	r3, [r3, #0]
 8006e74:	3308      	adds	r3, #8
 8006e76:	6cba      	ldr	r2, [r7, #72]	; 0x48
 8006e78:	62fa      	str	r2, [r7, #44]	; 0x2c
 8006e7a:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006e7c:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 8006e7e:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8006e80:	e841 2300 	strex	r3, r2, [r1]
 8006e84:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 8006e86:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006e88:	2b00      	cmp	r3, #0
 8006e8a:	d1e5      	bne.n	8006e58 <UART_EndRxTransfer+0x3a>
#endif /* USART_CR1_FIFOEN */

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8006e8c:	687b      	ldr	r3, [r7, #4]
 8006e8e:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8006e90:	2b01      	cmp	r3, #1
 8006e92:	d118      	bne.n	8006ec6 <UART_EndRxTransfer+0xa8>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8006e94:	687b      	ldr	r3, [r7, #4]
 8006e96:	681b      	ldr	r3, [r3, #0]
 8006e98:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006e9a:	68fb      	ldr	r3, [r7, #12]
 8006e9c:	e853 3f00 	ldrex	r3, [r3]
 8006ea0:	60bb      	str	r3, [r7, #8]
   return(result);
 8006ea2:	68bb      	ldr	r3, [r7, #8]
 8006ea4:	f023 0310 	bic.w	r3, r3, #16
 8006ea8:	647b      	str	r3, [r7, #68]	; 0x44
 8006eaa:	687b      	ldr	r3, [r7, #4]
 8006eac:	681b      	ldr	r3, [r3, #0]
 8006eae:	461a      	mov	r2, r3
 8006eb0:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8006eb2:	61bb      	str	r3, [r7, #24]
 8006eb4:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006eb6:	6979      	ldr	r1, [r7, #20]
 8006eb8:	69ba      	ldr	r2, [r7, #24]
 8006eba:	e841 2300 	strex	r3, r2, [r1]
 8006ebe:	613b      	str	r3, [r7, #16]
   return(result);
 8006ec0:	693b      	ldr	r3, [r7, #16]
 8006ec2:	2b00      	cmp	r3, #0
 8006ec4:	d1e6      	bne.n	8006e94 <UART_EndRxTransfer+0x76>
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 8006ec6:	687b      	ldr	r3, [r7, #4]
 8006ec8:	2220      	movs	r2, #32
 8006eca:	67da      	str	r2, [r3, #124]	; 0x7c
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8006ecc:	687b      	ldr	r3, [r7, #4]
 8006ece:	2200      	movs	r2, #0
 8006ed0:	661a      	str	r2, [r3, #96]	; 0x60

  /* Reset RxIsr function pointer */
  huart->RxISR = NULL;
 8006ed2:	687b      	ldr	r3, [r7, #4]
 8006ed4:	2200      	movs	r2, #0
 8006ed6:	665a      	str	r2, [r3, #100]	; 0x64
}
 8006ed8:	bf00      	nop
 8006eda:	3754      	adds	r7, #84	; 0x54
 8006edc:	46bd      	mov	sp, r7
 8006ede:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006ee2:	4770      	bx	lr

08006ee4 <UART_DMAAbortOnError>:
  *         (To be called at end of DMA Abort procedure following error occurrence).
  * @param  hdma DMA handle.
  * @retval None
  */
static void UART_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 8006ee4:	b580      	push	{r7, lr}
 8006ee6:	b084      	sub	sp, #16
 8006ee8:	af00      	add	r7, sp, #0
 8006eea:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)(hdma->Parent);
 8006eec:	687b      	ldr	r3, [r7, #4]
 8006eee:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8006ef0:	60fb      	str	r3, [r7, #12]
  huart->RxXferCount = 0U;
 8006ef2:	68fb      	ldr	r3, [r7, #12]
 8006ef4:	2200      	movs	r2, #0
 8006ef6:	f8a3 205a 	strh.w	r2, [r3, #90]	; 0x5a
  huart->TxXferCount = 0U;
 8006efa:	68fb      	ldr	r3, [r7, #12]
 8006efc:	2200      	movs	r2, #0
 8006efe:	f8a3 2052 	strh.w	r2, [r3, #82]	; 0x52
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 8006f02:	68f8      	ldr	r0, [r7, #12]
 8006f04:	f7ff fb0e 	bl	8006524 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 8006f08:	bf00      	nop
 8006f0a:	3710      	adds	r7, #16
 8006f0c:	46bd      	mov	sp, r7
 8006f0e:	bd80      	pop	{r7, pc}

08006f10 <UART_EndTransmit_IT>:
  * @param  huart pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_EndTransmit_IT(UART_HandleTypeDef *huart)
{
 8006f10:	b580      	push	{r7, lr}
 8006f12:	b088      	sub	sp, #32
 8006f14:	af00      	add	r7, sp, #0
 8006f16:	6078      	str	r0, [r7, #4]
  /* Disable the UART Transmit Complete Interrupt */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_TCIE);
 8006f18:	687b      	ldr	r3, [r7, #4]
 8006f1a:	681b      	ldr	r3, [r3, #0]
 8006f1c:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006f1e:	68fb      	ldr	r3, [r7, #12]
 8006f20:	e853 3f00 	ldrex	r3, [r3]
 8006f24:	60bb      	str	r3, [r7, #8]
   return(result);
 8006f26:	68bb      	ldr	r3, [r7, #8]
 8006f28:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8006f2c:	61fb      	str	r3, [r7, #28]
 8006f2e:	687b      	ldr	r3, [r7, #4]
 8006f30:	681b      	ldr	r3, [r3, #0]
 8006f32:	461a      	mov	r2, r3
 8006f34:	69fb      	ldr	r3, [r7, #28]
 8006f36:	61bb      	str	r3, [r7, #24]
 8006f38:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006f3a:	6979      	ldr	r1, [r7, #20]
 8006f3c:	69ba      	ldr	r2, [r7, #24]
 8006f3e:	e841 2300 	strex	r3, r2, [r1]
 8006f42:	613b      	str	r3, [r7, #16]
   return(result);
 8006f44:	693b      	ldr	r3, [r7, #16]
 8006f46:	2b00      	cmp	r3, #0
 8006f48:	d1e6      	bne.n	8006f18 <UART_EndTransmit_IT+0x8>

  /* Tx process is ended, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 8006f4a:	687b      	ldr	r3, [r7, #4]
 8006f4c:	2220      	movs	r2, #32
 8006f4e:	679a      	str	r2, [r3, #120]	; 0x78

  /* Cleat TxISR function pointer */
  huart->TxISR = NULL;
 8006f50:	687b      	ldr	r3, [r7, #4]
 8006f52:	2200      	movs	r2, #0
 8006f54:	669a      	str	r2, [r3, #104]	; 0x68
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx complete callback*/
  huart->TxCpltCallback(huart);
#else
  /*Call legacy weak Tx complete callback*/
  HAL_UART_TxCpltCallback(huart);
 8006f56:	6878      	ldr	r0, [r7, #4]
 8006f58:	f7ff fada 	bl	8006510 <HAL_UART_TxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 8006f5c:	bf00      	nop
 8006f5e:	3720      	adds	r7, #32
 8006f60:	46bd      	mov	sp, r7
 8006f62:	bd80      	pop	{r7, pc}

08006f64 <HAL_UARTEx_WakeupCallback>:
  * @brief UART wakeup from Stop mode callback.
  * @param huart UART handle.
  * @retval None
  */
__weak void HAL_UARTEx_WakeupCallback(UART_HandleTypeDef *huart)
{
 8006f64:	b480      	push	{r7}
 8006f66:	b083      	sub	sp, #12
 8006f68:	af00      	add	r7, sp, #0
 8006f6a:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_WakeupCallback can be implemented in the user file.
   */
}
 8006f6c:	bf00      	nop
 8006f6e:	370c      	adds	r7, #12
 8006f70:	46bd      	mov	sp, r7
 8006f72:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006f76:	4770      	bx	lr

08006f78 <__errno>:
 8006f78:	4b01      	ldr	r3, [pc, #4]	; (8006f80 <__errno+0x8>)
 8006f7a:	6818      	ldr	r0, [r3, #0]
 8006f7c:	4770      	bx	lr
 8006f7e:	bf00      	nop
 8006f80:	2000000c 	.word	0x2000000c

08006f84 <__libc_init_array>:
 8006f84:	b570      	push	{r4, r5, r6, lr}
 8006f86:	4d0d      	ldr	r5, [pc, #52]	; (8006fbc <__libc_init_array+0x38>)
 8006f88:	4c0d      	ldr	r4, [pc, #52]	; (8006fc0 <__libc_init_array+0x3c>)
 8006f8a:	1b64      	subs	r4, r4, r5
 8006f8c:	10a4      	asrs	r4, r4, #2
 8006f8e:	2600      	movs	r6, #0
 8006f90:	42a6      	cmp	r6, r4
 8006f92:	d109      	bne.n	8006fa8 <__libc_init_array+0x24>
 8006f94:	4d0b      	ldr	r5, [pc, #44]	; (8006fc4 <__libc_init_array+0x40>)
 8006f96:	4c0c      	ldr	r4, [pc, #48]	; (8006fc8 <__libc_init_array+0x44>)
 8006f98:	f004 fcc6 	bl	800b928 <_init>
 8006f9c:	1b64      	subs	r4, r4, r5
 8006f9e:	10a4      	asrs	r4, r4, #2
 8006fa0:	2600      	movs	r6, #0
 8006fa2:	42a6      	cmp	r6, r4
 8006fa4:	d105      	bne.n	8006fb2 <__libc_init_array+0x2e>
 8006fa6:	bd70      	pop	{r4, r5, r6, pc}
 8006fa8:	f855 3b04 	ldr.w	r3, [r5], #4
 8006fac:	4798      	blx	r3
 8006fae:	3601      	adds	r6, #1
 8006fb0:	e7ee      	b.n	8006f90 <__libc_init_array+0xc>
 8006fb2:	f855 3b04 	ldr.w	r3, [r5], #4
 8006fb6:	4798      	blx	r3
 8006fb8:	3601      	adds	r6, #1
 8006fba:	e7f2      	b.n	8006fa2 <__libc_init_array+0x1e>
 8006fbc:	0800beac 	.word	0x0800beac
 8006fc0:	0800beac 	.word	0x0800beac
 8006fc4:	0800beac 	.word	0x0800beac
 8006fc8:	0800beb0 	.word	0x0800beb0

08006fcc <memset>:
 8006fcc:	4402      	add	r2, r0
 8006fce:	4603      	mov	r3, r0
 8006fd0:	4293      	cmp	r3, r2
 8006fd2:	d100      	bne.n	8006fd6 <memset+0xa>
 8006fd4:	4770      	bx	lr
 8006fd6:	f803 1b01 	strb.w	r1, [r3], #1
 8006fda:	e7f9      	b.n	8006fd0 <memset+0x4>

08006fdc <__cvt>:
 8006fdc:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 8006fe0:	ec55 4b10 	vmov	r4, r5, d0
 8006fe4:	2d00      	cmp	r5, #0
 8006fe6:	460e      	mov	r6, r1
 8006fe8:	4619      	mov	r1, r3
 8006fea:	462b      	mov	r3, r5
 8006fec:	bfbb      	ittet	lt
 8006fee:	f105 4300 	addlt.w	r3, r5, #2147483648	; 0x80000000
 8006ff2:	461d      	movlt	r5, r3
 8006ff4:	2300      	movge	r3, #0
 8006ff6:	232d      	movlt	r3, #45	; 0x2d
 8006ff8:	700b      	strb	r3, [r1, #0]
 8006ffa:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 8006ffc:	f8dd a030 	ldr.w	sl, [sp, #48]	; 0x30
 8007000:	4691      	mov	r9, r2
 8007002:	f023 0820 	bic.w	r8, r3, #32
 8007006:	bfbc      	itt	lt
 8007008:	4622      	movlt	r2, r4
 800700a:	4614      	movlt	r4, r2
 800700c:	f1b8 0f46 	cmp.w	r8, #70	; 0x46
 8007010:	d005      	beq.n	800701e <__cvt+0x42>
 8007012:	f1b8 0f45 	cmp.w	r8, #69	; 0x45
 8007016:	d100      	bne.n	800701a <__cvt+0x3e>
 8007018:	3601      	adds	r6, #1
 800701a:	2102      	movs	r1, #2
 800701c:	e000      	b.n	8007020 <__cvt+0x44>
 800701e:	2103      	movs	r1, #3
 8007020:	ab03      	add	r3, sp, #12
 8007022:	9301      	str	r3, [sp, #4]
 8007024:	ab02      	add	r3, sp, #8
 8007026:	9300      	str	r3, [sp, #0]
 8007028:	ec45 4b10 	vmov	d0, r4, r5
 800702c:	4653      	mov	r3, sl
 800702e:	4632      	mov	r2, r6
 8007030:	f001 fde2 	bl	8008bf8 <_dtoa_r>
 8007034:	f1b8 0f47 	cmp.w	r8, #71	; 0x47
 8007038:	4607      	mov	r7, r0
 800703a:	d102      	bne.n	8007042 <__cvt+0x66>
 800703c:	f019 0f01 	tst.w	r9, #1
 8007040:	d022      	beq.n	8007088 <__cvt+0xac>
 8007042:	f1b8 0f46 	cmp.w	r8, #70	; 0x46
 8007046:	eb07 0906 	add.w	r9, r7, r6
 800704a:	d110      	bne.n	800706e <__cvt+0x92>
 800704c:	783b      	ldrb	r3, [r7, #0]
 800704e:	2b30      	cmp	r3, #48	; 0x30
 8007050:	d10a      	bne.n	8007068 <__cvt+0x8c>
 8007052:	2200      	movs	r2, #0
 8007054:	2300      	movs	r3, #0
 8007056:	4620      	mov	r0, r4
 8007058:	4629      	mov	r1, r5
 800705a:	f7f9 fd35 	bl	8000ac8 <__aeabi_dcmpeq>
 800705e:	b918      	cbnz	r0, 8007068 <__cvt+0x8c>
 8007060:	f1c6 0601 	rsb	r6, r6, #1
 8007064:	f8ca 6000 	str.w	r6, [sl]
 8007068:	f8da 3000 	ldr.w	r3, [sl]
 800706c:	4499      	add	r9, r3
 800706e:	2200      	movs	r2, #0
 8007070:	2300      	movs	r3, #0
 8007072:	4620      	mov	r0, r4
 8007074:	4629      	mov	r1, r5
 8007076:	f7f9 fd27 	bl	8000ac8 <__aeabi_dcmpeq>
 800707a:	b108      	cbz	r0, 8007080 <__cvt+0xa4>
 800707c:	f8cd 900c 	str.w	r9, [sp, #12]
 8007080:	2230      	movs	r2, #48	; 0x30
 8007082:	9b03      	ldr	r3, [sp, #12]
 8007084:	454b      	cmp	r3, r9
 8007086:	d307      	bcc.n	8007098 <__cvt+0xbc>
 8007088:	9b03      	ldr	r3, [sp, #12]
 800708a:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 800708c:	1bdb      	subs	r3, r3, r7
 800708e:	4638      	mov	r0, r7
 8007090:	6013      	str	r3, [r2, #0]
 8007092:	b004      	add	sp, #16
 8007094:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8007098:	1c59      	adds	r1, r3, #1
 800709a:	9103      	str	r1, [sp, #12]
 800709c:	701a      	strb	r2, [r3, #0]
 800709e:	e7f0      	b.n	8007082 <__cvt+0xa6>

080070a0 <__exponent>:
 80070a0:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 80070a2:	4603      	mov	r3, r0
 80070a4:	2900      	cmp	r1, #0
 80070a6:	bfb8      	it	lt
 80070a8:	4249      	neglt	r1, r1
 80070aa:	f803 2b02 	strb.w	r2, [r3], #2
 80070ae:	bfb4      	ite	lt
 80070b0:	222d      	movlt	r2, #45	; 0x2d
 80070b2:	222b      	movge	r2, #43	; 0x2b
 80070b4:	2909      	cmp	r1, #9
 80070b6:	7042      	strb	r2, [r0, #1]
 80070b8:	dd2a      	ble.n	8007110 <__exponent+0x70>
 80070ba:	f10d 0407 	add.w	r4, sp, #7
 80070be:	46a4      	mov	ip, r4
 80070c0:	270a      	movs	r7, #10
 80070c2:	46a6      	mov	lr, r4
 80070c4:	460a      	mov	r2, r1
 80070c6:	fb91 f6f7 	sdiv	r6, r1, r7
 80070ca:	fb07 1516 	mls	r5, r7, r6, r1
 80070ce:	3530      	adds	r5, #48	; 0x30
 80070d0:	2a63      	cmp	r2, #99	; 0x63
 80070d2:	f104 34ff 	add.w	r4, r4, #4294967295
 80070d6:	f80e 5c01 	strb.w	r5, [lr, #-1]
 80070da:	4631      	mov	r1, r6
 80070dc:	dcf1      	bgt.n	80070c2 <__exponent+0x22>
 80070de:	3130      	adds	r1, #48	; 0x30
 80070e0:	f1ae 0502 	sub.w	r5, lr, #2
 80070e4:	f804 1c01 	strb.w	r1, [r4, #-1]
 80070e8:	1c44      	adds	r4, r0, #1
 80070ea:	4629      	mov	r1, r5
 80070ec:	4561      	cmp	r1, ip
 80070ee:	d30a      	bcc.n	8007106 <__exponent+0x66>
 80070f0:	f10d 0209 	add.w	r2, sp, #9
 80070f4:	eba2 020e 	sub.w	r2, r2, lr
 80070f8:	4565      	cmp	r5, ip
 80070fa:	bf88      	it	hi
 80070fc:	2200      	movhi	r2, #0
 80070fe:	4413      	add	r3, r2
 8007100:	1a18      	subs	r0, r3, r0
 8007102:	b003      	add	sp, #12
 8007104:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8007106:	f811 2b01 	ldrb.w	r2, [r1], #1
 800710a:	f804 2f01 	strb.w	r2, [r4, #1]!
 800710e:	e7ed      	b.n	80070ec <__exponent+0x4c>
 8007110:	2330      	movs	r3, #48	; 0x30
 8007112:	3130      	adds	r1, #48	; 0x30
 8007114:	7083      	strb	r3, [r0, #2]
 8007116:	70c1      	strb	r1, [r0, #3]
 8007118:	1d03      	adds	r3, r0, #4
 800711a:	e7f1      	b.n	8007100 <__exponent+0x60>

0800711c <_printf_float>:
 800711c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8007120:	ed2d 8b02 	vpush	{d8}
 8007124:	b08d      	sub	sp, #52	; 0x34
 8007126:	460c      	mov	r4, r1
 8007128:	f8dd 8060 	ldr.w	r8, [sp, #96]	; 0x60
 800712c:	4616      	mov	r6, r2
 800712e:	461f      	mov	r7, r3
 8007130:	4605      	mov	r5, r0
 8007132:	f002 febf 	bl	8009eb4 <_localeconv_r>
 8007136:	f8d0 a000 	ldr.w	sl, [r0]
 800713a:	4650      	mov	r0, sl
 800713c:	f7f9 f848 	bl	80001d0 <strlen>
 8007140:	2300      	movs	r3, #0
 8007142:	930a      	str	r3, [sp, #40]	; 0x28
 8007144:	6823      	ldr	r3, [r4, #0]
 8007146:	9305      	str	r3, [sp, #20]
 8007148:	f8d8 3000 	ldr.w	r3, [r8]
 800714c:	f894 b018 	ldrb.w	fp, [r4, #24]
 8007150:	3307      	adds	r3, #7
 8007152:	f023 0307 	bic.w	r3, r3, #7
 8007156:	f103 0208 	add.w	r2, r3, #8
 800715a:	f8c8 2000 	str.w	r2, [r8]
 800715e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007162:	e9c4 2312 	strd	r2, r3, [r4, #72]	; 0x48
 8007166:	e9d4 8912 	ldrd	r8, r9, [r4, #72]	; 0x48
 800716a:	f029 4300 	bic.w	r3, r9, #2147483648	; 0x80000000
 800716e:	9307      	str	r3, [sp, #28]
 8007170:	f8cd 8018 	str.w	r8, [sp, #24]
 8007174:	ee08 0a10 	vmov	s16, r0
 8007178:	4b9f      	ldr	r3, [pc, #636]	; (80073f8 <_printf_float+0x2dc>)
 800717a:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 800717e:	f04f 32ff 	mov.w	r2, #4294967295
 8007182:	f7f9 fcd3 	bl	8000b2c <__aeabi_dcmpun>
 8007186:	bb88      	cbnz	r0, 80071ec <_printf_float+0xd0>
 8007188:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 800718c:	4b9a      	ldr	r3, [pc, #616]	; (80073f8 <_printf_float+0x2dc>)
 800718e:	f04f 32ff 	mov.w	r2, #4294967295
 8007192:	f7f9 fcad 	bl	8000af0 <__aeabi_dcmple>
 8007196:	bb48      	cbnz	r0, 80071ec <_printf_float+0xd0>
 8007198:	2200      	movs	r2, #0
 800719a:	2300      	movs	r3, #0
 800719c:	4640      	mov	r0, r8
 800719e:	4649      	mov	r1, r9
 80071a0:	f7f9 fc9c 	bl	8000adc <__aeabi_dcmplt>
 80071a4:	b110      	cbz	r0, 80071ac <_printf_float+0x90>
 80071a6:	232d      	movs	r3, #45	; 0x2d
 80071a8:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 80071ac:	4b93      	ldr	r3, [pc, #588]	; (80073fc <_printf_float+0x2e0>)
 80071ae:	4894      	ldr	r0, [pc, #592]	; (8007400 <_printf_float+0x2e4>)
 80071b0:	f1bb 0f47 	cmp.w	fp, #71	; 0x47
 80071b4:	bf94      	ite	ls
 80071b6:	4698      	movls	r8, r3
 80071b8:	4680      	movhi	r8, r0
 80071ba:	2303      	movs	r3, #3
 80071bc:	6123      	str	r3, [r4, #16]
 80071be:	9b05      	ldr	r3, [sp, #20]
 80071c0:	f023 0204 	bic.w	r2, r3, #4
 80071c4:	6022      	str	r2, [r4, #0]
 80071c6:	f04f 0900 	mov.w	r9, #0
 80071ca:	9700      	str	r7, [sp, #0]
 80071cc:	4633      	mov	r3, r6
 80071ce:	aa0b      	add	r2, sp, #44	; 0x2c
 80071d0:	4621      	mov	r1, r4
 80071d2:	4628      	mov	r0, r5
 80071d4:	f000 f9d8 	bl	8007588 <_printf_common>
 80071d8:	3001      	adds	r0, #1
 80071da:	f040 8090 	bne.w	80072fe <_printf_float+0x1e2>
 80071de:	f04f 30ff 	mov.w	r0, #4294967295
 80071e2:	b00d      	add	sp, #52	; 0x34
 80071e4:	ecbd 8b02 	vpop	{d8}
 80071e8:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80071ec:	4642      	mov	r2, r8
 80071ee:	464b      	mov	r3, r9
 80071f0:	4640      	mov	r0, r8
 80071f2:	4649      	mov	r1, r9
 80071f4:	f7f9 fc9a 	bl	8000b2c <__aeabi_dcmpun>
 80071f8:	b140      	cbz	r0, 800720c <_printf_float+0xf0>
 80071fa:	464b      	mov	r3, r9
 80071fc:	2b00      	cmp	r3, #0
 80071fe:	bfbc      	itt	lt
 8007200:	232d      	movlt	r3, #45	; 0x2d
 8007202:	f884 3043 	strblt.w	r3, [r4, #67]	; 0x43
 8007206:	487f      	ldr	r0, [pc, #508]	; (8007404 <_printf_float+0x2e8>)
 8007208:	4b7f      	ldr	r3, [pc, #508]	; (8007408 <_printf_float+0x2ec>)
 800720a:	e7d1      	b.n	80071b0 <_printf_float+0x94>
 800720c:	6863      	ldr	r3, [r4, #4]
 800720e:	f00b 02df 	and.w	r2, fp, #223	; 0xdf
 8007212:	9206      	str	r2, [sp, #24]
 8007214:	1c5a      	adds	r2, r3, #1
 8007216:	d13f      	bne.n	8007298 <_printf_float+0x17c>
 8007218:	2306      	movs	r3, #6
 800721a:	6063      	str	r3, [r4, #4]
 800721c:	9b05      	ldr	r3, [sp, #20]
 800721e:	6861      	ldr	r1, [r4, #4]
 8007220:	f443 6280 	orr.w	r2, r3, #1024	; 0x400
 8007224:	2300      	movs	r3, #0
 8007226:	9303      	str	r3, [sp, #12]
 8007228:	ab0a      	add	r3, sp, #40	; 0x28
 800722a:	e9cd b301 	strd	fp, r3, [sp, #4]
 800722e:	ab09      	add	r3, sp, #36	; 0x24
 8007230:	ec49 8b10 	vmov	d0, r8, r9
 8007234:	9300      	str	r3, [sp, #0]
 8007236:	6022      	str	r2, [r4, #0]
 8007238:	f10d 0323 	add.w	r3, sp, #35	; 0x23
 800723c:	4628      	mov	r0, r5
 800723e:	f7ff fecd 	bl	8006fdc <__cvt>
 8007242:	9b06      	ldr	r3, [sp, #24]
 8007244:	9909      	ldr	r1, [sp, #36]	; 0x24
 8007246:	2b47      	cmp	r3, #71	; 0x47
 8007248:	4680      	mov	r8, r0
 800724a:	d108      	bne.n	800725e <_printf_float+0x142>
 800724c:	1cc8      	adds	r0, r1, #3
 800724e:	db02      	blt.n	8007256 <_printf_float+0x13a>
 8007250:	6863      	ldr	r3, [r4, #4]
 8007252:	4299      	cmp	r1, r3
 8007254:	dd41      	ble.n	80072da <_printf_float+0x1be>
 8007256:	f1ab 0b02 	sub.w	fp, fp, #2
 800725a:	fa5f fb8b 	uxtb.w	fp, fp
 800725e:	f1bb 0f65 	cmp.w	fp, #101	; 0x65
 8007262:	d820      	bhi.n	80072a6 <_printf_float+0x18a>
 8007264:	3901      	subs	r1, #1
 8007266:	465a      	mov	r2, fp
 8007268:	f104 0050 	add.w	r0, r4, #80	; 0x50
 800726c:	9109      	str	r1, [sp, #36]	; 0x24
 800726e:	f7ff ff17 	bl	80070a0 <__exponent>
 8007272:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 8007274:	1813      	adds	r3, r2, r0
 8007276:	2a01      	cmp	r2, #1
 8007278:	4681      	mov	r9, r0
 800727a:	6123      	str	r3, [r4, #16]
 800727c:	dc02      	bgt.n	8007284 <_printf_float+0x168>
 800727e:	6822      	ldr	r2, [r4, #0]
 8007280:	07d2      	lsls	r2, r2, #31
 8007282:	d501      	bpl.n	8007288 <_printf_float+0x16c>
 8007284:	3301      	adds	r3, #1
 8007286:	6123      	str	r3, [r4, #16]
 8007288:	f89d 3023 	ldrb.w	r3, [sp, #35]	; 0x23
 800728c:	2b00      	cmp	r3, #0
 800728e:	d09c      	beq.n	80071ca <_printf_float+0xae>
 8007290:	232d      	movs	r3, #45	; 0x2d
 8007292:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8007296:	e798      	b.n	80071ca <_printf_float+0xae>
 8007298:	9a06      	ldr	r2, [sp, #24]
 800729a:	2a47      	cmp	r2, #71	; 0x47
 800729c:	d1be      	bne.n	800721c <_printf_float+0x100>
 800729e:	2b00      	cmp	r3, #0
 80072a0:	d1bc      	bne.n	800721c <_printf_float+0x100>
 80072a2:	2301      	movs	r3, #1
 80072a4:	e7b9      	b.n	800721a <_printf_float+0xfe>
 80072a6:	f1bb 0f66 	cmp.w	fp, #102	; 0x66
 80072aa:	d118      	bne.n	80072de <_printf_float+0x1c2>
 80072ac:	2900      	cmp	r1, #0
 80072ae:	6863      	ldr	r3, [r4, #4]
 80072b0:	dd0b      	ble.n	80072ca <_printf_float+0x1ae>
 80072b2:	6121      	str	r1, [r4, #16]
 80072b4:	b913      	cbnz	r3, 80072bc <_printf_float+0x1a0>
 80072b6:	6822      	ldr	r2, [r4, #0]
 80072b8:	07d0      	lsls	r0, r2, #31
 80072ba:	d502      	bpl.n	80072c2 <_printf_float+0x1a6>
 80072bc:	3301      	adds	r3, #1
 80072be:	440b      	add	r3, r1
 80072c0:	6123      	str	r3, [r4, #16]
 80072c2:	65a1      	str	r1, [r4, #88]	; 0x58
 80072c4:	f04f 0900 	mov.w	r9, #0
 80072c8:	e7de      	b.n	8007288 <_printf_float+0x16c>
 80072ca:	b913      	cbnz	r3, 80072d2 <_printf_float+0x1b6>
 80072cc:	6822      	ldr	r2, [r4, #0]
 80072ce:	07d2      	lsls	r2, r2, #31
 80072d0:	d501      	bpl.n	80072d6 <_printf_float+0x1ba>
 80072d2:	3302      	adds	r3, #2
 80072d4:	e7f4      	b.n	80072c0 <_printf_float+0x1a4>
 80072d6:	2301      	movs	r3, #1
 80072d8:	e7f2      	b.n	80072c0 <_printf_float+0x1a4>
 80072da:	f04f 0b67 	mov.w	fp, #103	; 0x67
 80072de:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 80072e0:	4299      	cmp	r1, r3
 80072e2:	db05      	blt.n	80072f0 <_printf_float+0x1d4>
 80072e4:	6823      	ldr	r3, [r4, #0]
 80072e6:	6121      	str	r1, [r4, #16]
 80072e8:	07d8      	lsls	r0, r3, #31
 80072ea:	d5ea      	bpl.n	80072c2 <_printf_float+0x1a6>
 80072ec:	1c4b      	adds	r3, r1, #1
 80072ee:	e7e7      	b.n	80072c0 <_printf_float+0x1a4>
 80072f0:	2900      	cmp	r1, #0
 80072f2:	bfd4      	ite	le
 80072f4:	f1c1 0202 	rsble	r2, r1, #2
 80072f8:	2201      	movgt	r2, #1
 80072fa:	4413      	add	r3, r2
 80072fc:	e7e0      	b.n	80072c0 <_printf_float+0x1a4>
 80072fe:	6823      	ldr	r3, [r4, #0]
 8007300:	055a      	lsls	r2, r3, #21
 8007302:	d407      	bmi.n	8007314 <_printf_float+0x1f8>
 8007304:	6923      	ldr	r3, [r4, #16]
 8007306:	4642      	mov	r2, r8
 8007308:	4631      	mov	r1, r6
 800730a:	4628      	mov	r0, r5
 800730c:	47b8      	blx	r7
 800730e:	3001      	adds	r0, #1
 8007310:	d12c      	bne.n	800736c <_printf_float+0x250>
 8007312:	e764      	b.n	80071de <_printf_float+0xc2>
 8007314:	f1bb 0f65 	cmp.w	fp, #101	; 0x65
 8007318:	f240 80e0 	bls.w	80074dc <_printf_float+0x3c0>
 800731c:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	; 0x48
 8007320:	2200      	movs	r2, #0
 8007322:	2300      	movs	r3, #0
 8007324:	f7f9 fbd0 	bl	8000ac8 <__aeabi_dcmpeq>
 8007328:	2800      	cmp	r0, #0
 800732a:	d034      	beq.n	8007396 <_printf_float+0x27a>
 800732c:	4a37      	ldr	r2, [pc, #220]	; (800740c <_printf_float+0x2f0>)
 800732e:	2301      	movs	r3, #1
 8007330:	4631      	mov	r1, r6
 8007332:	4628      	mov	r0, r5
 8007334:	47b8      	blx	r7
 8007336:	3001      	adds	r0, #1
 8007338:	f43f af51 	beq.w	80071de <_printf_float+0xc2>
 800733c:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 8007340:	429a      	cmp	r2, r3
 8007342:	db02      	blt.n	800734a <_printf_float+0x22e>
 8007344:	6823      	ldr	r3, [r4, #0]
 8007346:	07d8      	lsls	r0, r3, #31
 8007348:	d510      	bpl.n	800736c <_printf_float+0x250>
 800734a:	ee18 3a10 	vmov	r3, s16
 800734e:	4652      	mov	r2, sl
 8007350:	4631      	mov	r1, r6
 8007352:	4628      	mov	r0, r5
 8007354:	47b8      	blx	r7
 8007356:	3001      	adds	r0, #1
 8007358:	f43f af41 	beq.w	80071de <_printf_float+0xc2>
 800735c:	f04f 0800 	mov.w	r8, #0
 8007360:	f104 091a 	add.w	r9, r4, #26
 8007364:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8007366:	3b01      	subs	r3, #1
 8007368:	4543      	cmp	r3, r8
 800736a:	dc09      	bgt.n	8007380 <_printf_float+0x264>
 800736c:	6823      	ldr	r3, [r4, #0]
 800736e:	079b      	lsls	r3, r3, #30
 8007370:	f100 8105 	bmi.w	800757e <_printf_float+0x462>
 8007374:	68e0      	ldr	r0, [r4, #12]
 8007376:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8007378:	4298      	cmp	r0, r3
 800737a:	bfb8      	it	lt
 800737c:	4618      	movlt	r0, r3
 800737e:	e730      	b.n	80071e2 <_printf_float+0xc6>
 8007380:	2301      	movs	r3, #1
 8007382:	464a      	mov	r2, r9
 8007384:	4631      	mov	r1, r6
 8007386:	4628      	mov	r0, r5
 8007388:	47b8      	blx	r7
 800738a:	3001      	adds	r0, #1
 800738c:	f43f af27 	beq.w	80071de <_printf_float+0xc2>
 8007390:	f108 0801 	add.w	r8, r8, #1
 8007394:	e7e6      	b.n	8007364 <_printf_float+0x248>
 8007396:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8007398:	2b00      	cmp	r3, #0
 800739a:	dc39      	bgt.n	8007410 <_printf_float+0x2f4>
 800739c:	4a1b      	ldr	r2, [pc, #108]	; (800740c <_printf_float+0x2f0>)
 800739e:	2301      	movs	r3, #1
 80073a0:	4631      	mov	r1, r6
 80073a2:	4628      	mov	r0, r5
 80073a4:	47b8      	blx	r7
 80073a6:	3001      	adds	r0, #1
 80073a8:	f43f af19 	beq.w	80071de <_printf_float+0xc2>
 80073ac:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 80073b0:	4313      	orrs	r3, r2
 80073b2:	d102      	bne.n	80073ba <_printf_float+0x29e>
 80073b4:	6823      	ldr	r3, [r4, #0]
 80073b6:	07d9      	lsls	r1, r3, #31
 80073b8:	d5d8      	bpl.n	800736c <_printf_float+0x250>
 80073ba:	ee18 3a10 	vmov	r3, s16
 80073be:	4652      	mov	r2, sl
 80073c0:	4631      	mov	r1, r6
 80073c2:	4628      	mov	r0, r5
 80073c4:	47b8      	blx	r7
 80073c6:	3001      	adds	r0, #1
 80073c8:	f43f af09 	beq.w	80071de <_printf_float+0xc2>
 80073cc:	f04f 0900 	mov.w	r9, #0
 80073d0:	f104 0a1a 	add.w	sl, r4, #26
 80073d4:	9b09      	ldr	r3, [sp, #36]	; 0x24
 80073d6:	425b      	negs	r3, r3
 80073d8:	454b      	cmp	r3, r9
 80073da:	dc01      	bgt.n	80073e0 <_printf_float+0x2c4>
 80073dc:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 80073de:	e792      	b.n	8007306 <_printf_float+0x1ea>
 80073e0:	2301      	movs	r3, #1
 80073e2:	4652      	mov	r2, sl
 80073e4:	4631      	mov	r1, r6
 80073e6:	4628      	mov	r0, r5
 80073e8:	47b8      	blx	r7
 80073ea:	3001      	adds	r0, #1
 80073ec:	f43f aef7 	beq.w	80071de <_printf_float+0xc2>
 80073f0:	f109 0901 	add.w	r9, r9, #1
 80073f4:	e7ee      	b.n	80073d4 <_printf_float+0x2b8>
 80073f6:	bf00      	nop
 80073f8:	7fefffff 	.word	0x7fefffff
 80073fc:	0800ba00 	.word	0x0800ba00
 8007400:	0800ba04 	.word	0x0800ba04
 8007404:	0800ba0c 	.word	0x0800ba0c
 8007408:	0800ba08 	.word	0x0800ba08
 800740c:	0800ba10 	.word	0x0800ba10
 8007410:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 8007412:	6da3      	ldr	r3, [r4, #88]	; 0x58
 8007414:	429a      	cmp	r2, r3
 8007416:	bfa8      	it	ge
 8007418:	461a      	movge	r2, r3
 800741a:	2a00      	cmp	r2, #0
 800741c:	4691      	mov	r9, r2
 800741e:	dc37      	bgt.n	8007490 <_printf_float+0x374>
 8007420:	f04f 0b00 	mov.w	fp, #0
 8007424:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 8007428:	f104 021a 	add.w	r2, r4, #26
 800742c:	6da3      	ldr	r3, [r4, #88]	; 0x58
 800742e:	9305      	str	r3, [sp, #20]
 8007430:	eba3 0309 	sub.w	r3, r3, r9
 8007434:	455b      	cmp	r3, fp
 8007436:	dc33      	bgt.n	80074a0 <_printf_float+0x384>
 8007438:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 800743c:	429a      	cmp	r2, r3
 800743e:	db3b      	blt.n	80074b8 <_printf_float+0x39c>
 8007440:	6823      	ldr	r3, [r4, #0]
 8007442:	07da      	lsls	r2, r3, #31
 8007444:	d438      	bmi.n	80074b8 <_printf_float+0x39c>
 8007446:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8007448:	9a05      	ldr	r2, [sp, #20]
 800744a:	9909      	ldr	r1, [sp, #36]	; 0x24
 800744c:	1a9a      	subs	r2, r3, r2
 800744e:	eba3 0901 	sub.w	r9, r3, r1
 8007452:	4591      	cmp	r9, r2
 8007454:	bfa8      	it	ge
 8007456:	4691      	movge	r9, r2
 8007458:	f1b9 0f00 	cmp.w	r9, #0
 800745c:	dc35      	bgt.n	80074ca <_printf_float+0x3ae>
 800745e:	f04f 0800 	mov.w	r8, #0
 8007462:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 8007466:	f104 0a1a 	add.w	sl, r4, #26
 800746a:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 800746e:	1a9b      	subs	r3, r3, r2
 8007470:	eba3 0309 	sub.w	r3, r3, r9
 8007474:	4543      	cmp	r3, r8
 8007476:	f77f af79 	ble.w	800736c <_printf_float+0x250>
 800747a:	2301      	movs	r3, #1
 800747c:	4652      	mov	r2, sl
 800747e:	4631      	mov	r1, r6
 8007480:	4628      	mov	r0, r5
 8007482:	47b8      	blx	r7
 8007484:	3001      	adds	r0, #1
 8007486:	f43f aeaa 	beq.w	80071de <_printf_float+0xc2>
 800748a:	f108 0801 	add.w	r8, r8, #1
 800748e:	e7ec      	b.n	800746a <_printf_float+0x34e>
 8007490:	4613      	mov	r3, r2
 8007492:	4631      	mov	r1, r6
 8007494:	4642      	mov	r2, r8
 8007496:	4628      	mov	r0, r5
 8007498:	47b8      	blx	r7
 800749a:	3001      	adds	r0, #1
 800749c:	d1c0      	bne.n	8007420 <_printf_float+0x304>
 800749e:	e69e      	b.n	80071de <_printf_float+0xc2>
 80074a0:	2301      	movs	r3, #1
 80074a2:	4631      	mov	r1, r6
 80074a4:	4628      	mov	r0, r5
 80074a6:	9205      	str	r2, [sp, #20]
 80074a8:	47b8      	blx	r7
 80074aa:	3001      	adds	r0, #1
 80074ac:	f43f ae97 	beq.w	80071de <_printf_float+0xc2>
 80074b0:	9a05      	ldr	r2, [sp, #20]
 80074b2:	f10b 0b01 	add.w	fp, fp, #1
 80074b6:	e7b9      	b.n	800742c <_printf_float+0x310>
 80074b8:	ee18 3a10 	vmov	r3, s16
 80074bc:	4652      	mov	r2, sl
 80074be:	4631      	mov	r1, r6
 80074c0:	4628      	mov	r0, r5
 80074c2:	47b8      	blx	r7
 80074c4:	3001      	adds	r0, #1
 80074c6:	d1be      	bne.n	8007446 <_printf_float+0x32a>
 80074c8:	e689      	b.n	80071de <_printf_float+0xc2>
 80074ca:	9a05      	ldr	r2, [sp, #20]
 80074cc:	464b      	mov	r3, r9
 80074ce:	4442      	add	r2, r8
 80074d0:	4631      	mov	r1, r6
 80074d2:	4628      	mov	r0, r5
 80074d4:	47b8      	blx	r7
 80074d6:	3001      	adds	r0, #1
 80074d8:	d1c1      	bne.n	800745e <_printf_float+0x342>
 80074da:	e680      	b.n	80071de <_printf_float+0xc2>
 80074dc:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 80074de:	2a01      	cmp	r2, #1
 80074e0:	dc01      	bgt.n	80074e6 <_printf_float+0x3ca>
 80074e2:	07db      	lsls	r3, r3, #31
 80074e4:	d538      	bpl.n	8007558 <_printf_float+0x43c>
 80074e6:	2301      	movs	r3, #1
 80074e8:	4642      	mov	r2, r8
 80074ea:	4631      	mov	r1, r6
 80074ec:	4628      	mov	r0, r5
 80074ee:	47b8      	blx	r7
 80074f0:	3001      	adds	r0, #1
 80074f2:	f43f ae74 	beq.w	80071de <_printf_float+0xc2>
 80074f6:	ee18 3a10 	vmov	r3, s16
 80074fa:	4652      	mov	r2, sl
 80074fc:	4631      	mov	r1, r6
 80074fe:	4628      	mov	r0, r5
 8007500:	47b8      	blx	r7
 8007502:	3001      	adds	r0, #1
 8007504:	f43f ae6b 	beq.w	80071de <_printf_float+0xc2>
 8007508:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	; 0x48
 800750c:	2200      	movs	r2, #0
 800750e:	2300      	movs	r3, #0
 8007510:	f7f9 fada 	bl	8000ac8 <__aeabi_dcmpeq>
 8007514:	b9d8      	cbnz	r0, 800754e <_printf_float+0x432>
 8007516:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8007518:	f108 0201 	add.w	r2, r8, #1
 800751c:	3b01      	subs	r3, #1
 800751e:	4631      	mov	r1, r6
 8007520:	4628      	mov	r0, r5
 8007522:	47b8      	blx	r7
 8007524:	3001      	adds	r0, #1
 8007526:	d10e      	bne.n	8007546 <_printf_float+0x42a>
 8007528:	e659      	b.n	80071de <_printf_float+0xc2>
 800752a:	2301      	movs	r3, #1
 800752c:	4652      	mov	r2, sl
 800752e:	4631      	mov	r1, r6
 8007530:	4628      	mov	r0, r5
 8007532:	47b8      	blx	r7
 8007534:	3001      	adds	r0, #1
 8007536:	f43f ae52 	beq.w	80071de <_printf_float+0xc2>
 800753a:	f108 0801 	add.w	r8, r8, #1
 800753e:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8007540:	3b01      	subs	r3, #1
 8007542:	4543      	cmp	r3, r8
 8007544:	dcf1      	bgt.n	800752a <_printf_float+0x40e>
 8007546:	464b      	mov	r3, r9
 8007548:	f104 0250 	add.w	r2, r4, #80	; 0x50
 800754c:	e6dc      	b.n	8007308 <_printf_float+0x1ec>
 800754e:	f04f 0800 	mov.w	r8, #0
 8007552:	f104 0a1a 	add.w	sl, r4, #26
 8007556:	e7f2      	b.n	800753e <_printf_float+0x422>
 8007558:	2301      	movs	r3, #1
 800755a:	4642      	mov	r2, r8
 800755c:	e7df      	b.n	800751e <_printf_float+0x402>
 800755e:	2301      	movs	r3, #1
 8007560:	464a      	mov	r2, r9
 8007562:	4631      	mov	r1, r6
 8007564:	4628      	mov	r0, r5
 8007566:	47b8      	blx	r7
 8007568:	3001      	adds	r0, #1
 800756a:	f43f ae38 	beq.w	80071de <_printf_float+0xc2>
 800756e:	f108 0801 	add.w	r8, r8, #1
 8007572:	68e3      	ldr	r3, [r4, #12]
 8007574:	990b      	ldr	r1, [sp, #44]	; 0x2c
 8007576:	1a5b      	subs	r3, r3, r1
 8007578:	4543      	cmp	r3, r8
 800757a:	dcf0      	bgt.n	800755e <_printf_float+0x442>
 800757c:	e6fa      	b.n	8007374 <_printf_float+0x258>
 800757e:	f04f 0800 	mov.w	r8, #0
 8007582:	f104 0919 	add.w	r9, r4, #25
 8007586:	e7f4      	b.n	8007572 <_printf_float+0x456>

08007588 <_printf_common>:
 8007588:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800758c:	4616      	mov	r6, r2
 800758e:	4699      	mov	r9, r3
 8007590:	688a      	ldr	r2, [r1, #8]
 8007592:	690b      	ldr	r3, [r1, #16]
 8007594:	f8dd 8020 	ldr.w	r8, [sp, #32]
 8007598:	4293      	cmp	r3, r2
 800759a:	bfb8      	it	lt
 800759c:	4613      	movlt	r3, r2
 800759e:	6033      	str	r3, [r6, #0]
 80075a0:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 80075a4:	4607      	mov	r7, r0
 80075a6:	460c      	mov	r4, r1
 80075a8:	b10a      	cbz	r2, 80075ae <_printf_common+0x26>
 80075aa:	3301      	adds	r3, #1
 80075ac:	6033      	str	r3, [r6, #0]
 80075ae:	6823      	ldr	r3, [r4, #0]
 80075b0:	0699      	lsls	r1, r3, #26
 80075b2:	bf42      	ittt	mi
 80075b4:	6833      	ldrmi	r3, [r6, #0]
 80075b6:	3302      	addmi	r3, #2
 80075b8:	6033      	strmi	r3, [r6, #0]
 80075ba:	6825      	ldr	r5, [r4, #0]
 80075bc:	f015 0506 	ands.w	r5, r5, #6
 80075c0:	d106      	bne.n	80075d0 <_printf_common+0x48>
 80075c2:	f104 0a19 	add.w	sl, r4, #25
 80075c6:	68e3      	ldr	r3, [r4, #12]
 80075c8:	6832      	ldr	r2, [r6, #0]
 80075ca:	1a9b      	subs	r3, r3, r2
 80075cc:	42ab      	cmp	r3, r5
 80075ce:	dc26      	bgt.n	800761e <_printf_common+0x96>
 80075d0:	f894 2043 	ldrb.w	r2, [r4, #67]	; 0x43
 80075d4:	1e13      	subs	r3, r2, #0
 80075d6:	6822      	ldr	r2, [r4, #0]
 80075d8:	bf18      	it	ne
 80075da:	2301      	movne	r3, #1
 80075dc:	0692      	lsls	r2, r2, #26
 80075de:	d42b      	bmi.n	8007638 <_printf_common+0xb0>
 80075e0:	f104 0243 	add.w	r2, r4, #67	; 0x43
 80075e4:	4649      	mov	r1, r9
 80075e6:	4638      	mov	r0, r7
 80075e8:	47c0      	blx	r8
 80075ea:	3001      	adds	r0, #1
 80075ec:	d01e      	beq.n	800762c <_printf_common+0xa4>
 80075ee:	6823      	ldr	r3, [r4, #0]
 80075f0:	68e5      	ldr	r5, [r4, #12]
 80075f2:	6832      	ldr	r2, [r6, #0]
 80075f4:	f003 0306 	and.w	r3, r3, #6
 80075f8:	2b04      	cmp	r3, #4
 80075fa:	bf08      	it	eq
 80075fc:	1aad      	subeq	r5, r5, r2
 80075fe:	68a3      	ldr	r3, [r4, #8]
 8007600:	6922      	ldr	r2, [r4, #16]
 8007602:	bf0c      	ite	eq
 8007604:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 8007608:	2500      	movne	r5, #0
 800760a:	4293      	cmp	r3, r2
 800760c:	bfc4      	itt	gt
 800760e:	1a9b      	subgt	r3, r3, r2
 8007610:	18ed      	addgt	r5, r5, r3
 8007612:	2600      	movs	r6, #0
 8007614:	341a      	adds	r4, #26
 8007616:	42b5      	cmp	r5, r6
 8007618:	d11a      	bne.n	8007650 <_printf_common+0xc8>
 800761a:	2000      	movs	r0, #0
 800761c:	e008      	b.n	8007630 <_printf_common+0xa8>
 800761e:	2301      	movs	r3, #1
 8007620:	4652      	mov	r2, sl
 8007622:	4649      	mov	r1, r9
 8007624:	4638      	mov	r0, r7
 8007626:	47c0      	blx	r8
 8007628:	3001      	adds	r0, #1
 800762a:	d103      	bne.n	8007634 <_printf_common+0xac>
 800762c:	f04f 30ff 	mov.w	r0, #4294967295
 8007630:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8007634:	3501      	adds	r5, #1
 8007636:	e7c6      	b.n	80075c6 <_printf_common+0x3e>
 8007638:	18e1      	adds	r1, r4, r3
 800763a:	1c5a      	adds	r2, r3, #1
 800763c:	2030      	movs	r0, #48	; 0x30
 800763e:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 8007642:	4422      	add	r2, r4
 8007644:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 8007648:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 800764c:	3302      	adds	r3, #2
 800764e:	e7c7      	b.n	80075e0 <_printf_common+0x58>
 8007650:	2301      	movs	r3, #1
 8007652:	4622      	mov	r2, r4
 8007654:	4649      	mov	r1, r9
 8007656:	4638      	mov	r0, r7
 8007658:	47c0      	blx	r8
 800765a:	3001      	adds	r0, #1
 800765c:	d0e6      	beq.n	800762c <_printf_common+0xa4>
 800765e:	3601      	adds	r6, #1
 8007660:	e7d9      	b.n	8007616 <_printf_common+0x8e>
	...

08007664 <_printf_i>:
 8007664:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 8007668:	7e0f      	ldrb	r7, [r1, #24]
 800766a:	9d0c      	ldr	r5, [sp, #48]	; 0x30
 800766c:	2f78      	cmp	r7, #120	; 0x78
 800766e:	4691      	mov	r9, r2
 8007670:	4680      	mov	r8, r0
 8007672:	460c      	mov	r4, r1
 8007674:	469a      	mov	sl, r3
 8007676:	f101 0243 	add.w	r2, r1, #67	; 0x43
 800767a:	d807      	bhi.n	800768c <_printf_i+0x28>
 800767c:	2f62      	cmp	r7, #98	; 0x62
 800767e:	d80a      	bhi.n	8007696 <_printf_i+0x32>
 8007680:	2f00      	cmp	r7, #0
 8007682:	f000 80d8 	beq.w	8007836 <_printf_i+0x1d2>
 8007686:	2f58      	cmp	r7, #88	; 0x58
 8007688:	f000 80a3 	beq.w	80077d2 <_printf_i+0x16e>
 800768c:	f104 0542 	add.w	r5, r4, #66	; 0x42
 8007690:	f884 7042 	strb.w	r7, [r4, #66]	; 0x42
 8007694:	e03a      	b.n	800770c <_printf_i+0xa8>
 8007696:	f1a7 0363 	sub.w	r3, r7, #99	; 0x63
 800769a:	2b15      	cmp	r3, #21
 800769c:	d8f6      	bhi.n	800768c <_printf_i+0x28>
 800769e:	a101      	add	r1, pc, #4	; (adr r1, 80076a4 <_printf_i+0x40>)
 80076a0:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 80076a4:	080076fd 	.word	0x080076fd
 80076a8:	08007711 	.word	0x08007711
 80076ac:	0800768d 	.word	0x0800768d
 80076b0:	0800768d 	.word	0x0800768d
 80076b4:	0800768d 	.word	0x0800768d
 80076b8:	0800768d 	.word	0x0800768d
 80076bc:	08007711 	.word	0x08007711
 80076c0:	0800768d 	.word	0x0800768d
 80076c4:	0800768d 	.word	0x0800768d
 80076c8:	0800768d 	.word	0x0800768d
 80076cc:	0800768d 	.word	0x0800768d
 80076d0:	0800781d 	.word	0x0800781d
 80076d4:	08007741 	.word	0x08007741
 80076d8:	080077ff 	.word	0x080077ff
 80076dc:	0800768d 	.word	0x0800768d
 80076e0:	0800768d 	.word	0x0800768d
 80076e4:	0800783f 	.word	0x0800783f
 80076e8:	0800768d 	.word	0x0800768d
 80076ec:	08007741 	.word	0x08007741
 80076f0:	0800768d 	.word	0x0800768d
 80076f4:	0800768d 	.word	0x0800768d
 80076f8:	08007807 	.word	0x08007807
 80076fc:	682b      	ldr	r3, [r5, #0]
 80076fe:	1d1a      	adds	r2, r3, #4
 8007700:	681b      	ldr	r3, [r3, #0]
 8007702:	602a      	str	r2, [r5, #0]
 8007704:	f104 0542 	add.w	r5, r4, #66	; 0x42
 8007708:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 800770c:	2301      	movs	r3, #1
 800770e:	e0a3      	b.n	8007858 <_printf_i+0x1f4>
 8007710:	6820      	ldr	r0, [r4, #0]
 8007712:	6829      	ldr	r1, [r5, #0]
 8007714:	0606      	lsls	r6, r0, #24
 8007716:	f101 0304 	add.w	r3, r1, #4
 800771a:	d50a      	bpl.n	8007732 <_printf_i+0xce>
 800771c:	680e      	ldr	r6, [r1, #0]
 800771e:	602b      	str	r3, [r5, #0]
 8007720:	2e00      	cmp	r6, #0
 8007722:	da03      	bge.n	800772c <_printf_i+0xc8>
 8007724:	232d      	movs	r3, #45	; 0x2d
 8007726:	4276      	negs	r6, r6
 8007728:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 800772c:	485e      	ldr	r0, [pc, #376]	; (80078a8 <_printf_i+0x244>)
 800772e:	230a      	movs	r3, #10
 8007730:	e019      	b.n	8007766 <_printf_i+0x102>
 8007732:	680e      	ldr	r6, [r1, #0]
 8007734:	602b      	str	r3, [r5, #0]
 8007736:	f010 0f40 	tst.w	r0, #64	; 0x40
 800773a:	bf18      	it	ne
 800773c:	b236      	sxthne	r6, r6
 800773e:	e7ef      	b.n	8007720 <_printf_i+0xbc>
 8007740:	682b      	ldr	r3, [r5, #0]
 8007742:	6820      	ldr	r0, [r4, #0]
 8007744:	1d19      	adds	r1, r3, #4
 8007746:	6029      	str	r1, [r5, #0]
 8007748:	0601      	lsls	r1, r0, #24
 800774a:	d501      	bpl.n	8007750 <_printf_i+0xec>
 800774c:	681e      	ldr	r6, [r3, #0]
 800774e:	e002      	b.n	8007756 <_printf_i+0xf2>
 8007750:	0646      	lsls	r6, r0, #25
 8007752:	d5fb      	bpl.n	800774c <_printf_i+0xe8>
 8007754:	881e      	ldrh	r6, [r3, #0]
 8007756:	4854      	ldr	r0, [pc, #336]	; (80078a8 <_printf_i+0x244>)
 8007758:	2f6f      	cmp	r7, #111	; 0x6f
 800775a:	bf0c      	ite	eq
 800775c:	2308      	moveq	r3, #8
 800775e:	230a      	movne	r3, #10
 8007760:	2100      	movs	r1, #0
 8007762:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 8007766:	6865      	ldr	r5, [r4, #4]
 8007768:	60a5      	str	r5, [r4, #8]
 800776a:	2d00      	cmp	r5, #0
 800776c:	bfa2      	ittt	ge
 800776e:	6821      	ldrge	r1, [r4, #0]
 8007770:	f021 0104 	bicge.w	r1, r1, #4
 8007774:	6021      	strge	r1, [r4, #0]
 8007776:	b90e      	cbnz	r6, 800777c <_printf_i+0x118>
 8007778:	2d00      	cmp	r5, #0
 800777a:	d04d      	beq.n	8007818 <_printf_i+0x1b4>
 800777c:	4615      	mov	r5, r2
 800777e:	fbb6 f1f3 	udiv	r1, r6, r3
 8007782:	fb03 6711 	mls	r7, r3, r1, r6
 8007786:	5dc7      	ldrb	r7, [r0, r7]
 8007788:	f805 7d01 	strb.w	r7, [r5, #-1]!
 800778c:	4637      	mov	r7, r6
 800778e:	42bb      	cmp	r3, r7
 8007790:	460e      	mov	r6, r1
 8007792:	d9f4      	bls.n	800777e <_printf_i+0x11a>
 8007794:	2b08      	cmp	r3, #8
 8007796:	d10b      	bne.n	80077b0 <_printf_i+0x14c>
 8007798:	6823      	ldr	r3, [r4, #0]
 800779a:	07de      	lsls	r6, r3, #31
 800779c:	d508      	bpl.n	80077b0 <_printf_i+0x14c>
 800779e:	6923      	ldr	r3, [r4, #16]
 80077a0:	6861      	ldr	r1, [r4, #4]
 80077a2:	4299      	cmp	r1, r3
 80077a4:	bfde      	ittt	le
 80077a6:	2330      	movle	r3, #48	; 0x30
 80077a8:	f805 3c01 	strble.w	r3, [r5, #-1]
 80077ac:	f105 35ff 	addle.w	r5, r5, #4294967295
 80077b0:	1b52      	subs	r2, r2, r5
 80077b2:	6122      	str	r2, [r4, #16]
 80077b4:	f8cd a000 	str.w	sl, [sp]
 80077b8:	464b      	mov	r3, r9
 80077ba:	aa03      	add	r2, sp, #12
 80077bc:	4621      	mov	r1, r4
 80077be:	4640      	mov	r0, r8
 80077c0:	f7ff fee2 	bl	8007588 <_printf_common>
 80077c4:	3001      	adds	r0, #1
 80077c6:	d14c      	bne.n	8007862 <_printf_i+0x1fe>
 80077c8:	f04f 30ff 	mov.w	r0, #4294967295
 80077cc:	b004      	add	sp, #16
 80077ce:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80077d2:	4835      	ldr	r0, [pc, #212]	; (80078a8 <_printf_i+0x244>)
 80077d4:	f881 7045 	strb.w	r7, [r1, #69]	; 0x45
 80077d8:	6829      	ldr	r1, [r5, #0]
 80077da:	6823      	ldr	r3, [r4, #0]
 80077dc:	f851 6b04 	ldr.w	r6, [r1], #4
 80077e0:	6029      	str	r1, [r5, #0]
 80077e2:	061d      	lsls	r5, r3, #24
 80077e4:	d514      	bpl.n	8007810 <_printf_i+0x1ac>
 80077e6:	07df      	lsls	r7, r3, #31
 80077e8:	bf44      	itt	mi
 80077ea:	f043 0320 	orrmi.w	r3, r3, #32
 80077ee:	6023      	strmi	r3, [r4, #0]
 80077f0:	b91e      	cbnz	r6, 80077fa <_printf_i+0x196>
 80077f2:	6823      	ldr	r3, [r4, #0]
 80077f4:	f023 0320 	bic.w	r3, r3, #32
 80077f8:	6023      	str	r3, [r4, #0]
 80077fa:	2310      	movs	r3, #16
 80077fc:	e7b0      	b.n	8007760 <_printf_i+0xfc>
 80077fe:	6823      	ldr	r3, [r4, #0]
 8007800:	f043 0320 	orr.w	r3, r3, #32
 8007804:	6023      	str	r3, [r4, #0]
 8007806:	2378      	movs	r3, #120	; 0x78
 8007808:	4828      	ldr	r0, [pc, #160]	; (80078ac <_printf_i+0x248>)
 800780a:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
 800780e:	e7e3      	b.n	80077d8 <_printf_i+0x174>
 8007810:	0659      	lsls	r1, r3, #25
 8007812:	bf48      	it	mi
 8007814:	b2b6      	uxthmi	r6, r6
 8007816:	e7e6      	b.n	80077e6 <_printf_i+0x182>
 8007818:	4615      	mov	r5, r2
 800781a:	e7bb      	b.n	8007794 <_printf_i+0x130>
 800781c:	682b      	ldr	r3, [r5, #0]
 800781e:	6826      	ldr	r6, [r4, #0]
 8007820:	6961      	ldr	r1, [r4, #20]
 8007822:	1d18      	adds	r0, r3, #4
 8007824:	6028      	str	r0, [r5, #0]
 8007826:	0635      	lsls	r5, r6, #24
 8007828:	681b      	ldr	r3, [r3, #0]
 800782a:	d501      	bpl.n	8007830 <_printf_i+0x1cc>
 800782c:	6019      	str	r1, [r3, #0]
 800782e:	e002      	b.n	8007836 <_printf_i+0x1d2>
 8007830:	0670      	lsls	r0, r6, #25
 8007832:	d5fb      	bpl.n	800782c <_printf_i+0x1c8>
 8007834:	8019      	strh	r1, [r3, #0]
 8007836:	2300      	movs	r3, #0
 8007838:	6123      	str	r3, [r4, #16]
 800783a:	4615      	mov	r5, r2
 800783c:	e7ba      	b.n	80077b4 <_printf_i+0x150>
 800783e:	682b      	ldr	r3, [r5, #0]
 8007840:	1d1a      	adds	r2, r3, #4
 8007842:	602a      	str	r2, [r5, #0]
 8007844:	681d      	ldr	r5, [r3, #0]
 8007846:	6862      	ldr	r2, [r4, #4]
 8007848:	2100      	movs	r1, #0
 800784a:	4628      	mov	r0, r5
 800784c:	f7f8 fcc8 	bl	80001e0 <memchr>
 8007850:	b108      	cbz	r0, 8007856 <_printf_i+0x1f2>
 8007852:	1b40      	subs	r0, r0, r5
 8007854:	6060      	str	r0, [r4, #4]
 8007856:	6863      	ldr	r3, [r4, #4]
 8007858:	6123      	str	r3, [r4, #16]
 800785a:	2300      	movs	r3, #0
 800785c:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8007860:	e7a8      	b.n	80077b4 <_printf_i+0x150>
 8007862:	6923      	ldr	r3, [r4, #16]
 8007864:	462a      	mov	r2, r5
 8007866:	4649      	mov	r1, r9
 8007868:	4640      	mov	r0, r8
 800786a:	47d0      	blx	sl
 800786c:	3001      	adds	r0, #1
 800786e:	d0ab      	beq.n	80077c8 <_printf_i+0x164>
 8007870:	6823      	ldr	r3, [r4, #0]
 8007872:	079b      	lsls	r3, r3, #30
 8007874:	d413      	bmi.n	800789e <_printf_i+0x23a>
 8007876:	68e0      	ldr	r0, [r4, #12]
 8007878:	9b03      	ldr	r3, [sp, #12]
 800787a:	4298      	cmp	r0, r3
 800787c:	bfb8      	it	lt
 800787e:	4618      	movlt	r0, r3
 8007880:	e7a4      	b.n	80077cc <_printf_i+0x168>
 8007882:	2301      	movs	r3, #1
 8007884:	4632      	mov	r2, r6
 8007886:	4649      	mov	r1, r9
 8007888:	4640      	mov	r0, r8
 800788a:	47d0      	blx	sl
 800788c:	3001      	adds	r0, #1
 800788e:	d09b      	beq.n	80077c8 <_printf_i+0x164>
 8007890:	3501      	adds	r5, #1
 8007892:	68e3      	ldr	r3, [r4, #12]
 8007894:	9903      	ldr	r1, [sp, #12]
 8007896:	1a5b      	subs	r3, r3, r1
 8007898:	42ab      	cmp	r3, r5
 800789a:	dcf2      	bgt.n	8007882 <_printf_i+0x21e>
 800789c:	e7eb      	b.n	8007876 <_printf_i+0x212>
 800789e:	2500      	movs	r5, #0
 80078a0:	f104 0619 	add.w	r6, r4, #25
 80078a4:	e7f5      	b.n	8007892 <_printf_i+0x22e>
 80078a6:	bf00      	nop
 80078a8:	0800ba12 	.word	0x0800ba12
 80078ac:	0800ba23 	.word	0x0800ba23

080078b0 <_scanf_float>:
 80078b0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80078b4:	b087      	sub	sp, #28
 80078b6:	4617      	mov	r7, r2
 80078b8:	9303      	str	r3, [sp, #12]
 80078ba:	688b      	ldr	r3, [r1, #8]
 80078bc:	1e5a      	subs	r2, r3, #1
 80078be:	f5b2 7fae 	cmp.w	r2, #348	; 0x15c
 80078c2:	bf83      	ittte	hi
 80078c4:	f46f 75ae 	mvnhi.w	r5, #348	; 0x15c
 80078c8:	195b      	addhi	r3, r3, r5
 80078ca:	9302      	strhi	r3, [sp, #8]
 80078cc:	2300      	movls	r3, #0
 80078ce:	bf86      	itte	hi
 80078d0:	f240 135d 	movwhi	r3, #349	; 0x15d
 80078d4:	608b      	strhi	r3, [r1, #8]
 80078d6:	9302      	strls	r3, [sp, #8]
 80078d8:	680b      	ldr	r3, [r1, #0]
 80078da:	468b      	mov	fp, r1
 80078dc:	2500      	movs	r5, #0
 80078de:	f443 63f0 	orr.w	r3, r3, #1920	; 0x780
 80078e2:	f84b 3b1c 	str.w	r3, [fp], #28
 80078e6:	e9cd 5504 	strd	r5, r5, [sp, #16]
 80078ea:	4680      	mov	r8, r0
 80078ec:	460c      	mov	r4, r1
 80078ee:	465e      	mov	r6, fp
 80078f0:	46aa      	mov	sl, r5
 80078f2:	46a9      	mov	r9, r5
 80078f4:	9501      	str	r5, [sp, #4]
 80078f6:	68a2      	ldr	r2, [r4, #8]
 80078f8:	b152      	cbz	r2, 8007910 <_scanf_float+0x60>
 80078fa:	683b      	ldr	r3, [r7, #0]
 80078fc:	781b      	ldrb	r3, [r3, #0]
 80078fe:	2b4e      	cmp	r3, #78	; 0x4e
 8007900:	d864      	bhi.n	80079cc <_scanf_float+0x11c>
 8007902:	2b40      	cmp	r3, #64	; 0x40
 8007904:	d83c      	bhi.n	8007980 <_scanf_float+0xd0>
 8007906:	f1a3 012b 	sub.w	r1, r3, #43	; 0x2b
 800790a:	b2c8      	uxtb	r0, r1
 800790c:	280e      	cmp	r0, #14
 800790e:	d93a      	bls.n	8007986 <_scanf_float+0xd6>
 8007910:	f1b9 0f00 	cmp.w	r9, #0
 8007914:	d003      	beq.n	800791e <_scanf_float+0x6e>
 8007916:	6823      	ldr	r3, [r4, #0]
 8007918:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 800791c:	6023      	str	r3, [r4, #0]
 800791e:	f10a 3aff 	add.w	sl, sl, #4294967295
 8007922:	f1ba 0f01 	cmp.w	sl, #1
 8007926:	f200 8113 	bhi.w	8007b50 <_scanf_float+0x2a0>
 800792a:	455e      	cmp	r6, fp
 800792c:	f200 8105 	bhi.w	8007b3a <_scanf_float+0x28a>
 8007930:	2501      	movs	r5, #1
 8007932:	4628      	mov	r0, r5
 8007934:	b007      	add	sp, #28
 8007936:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800793a:	f1a3 0261 	sub.w	r2, r3, #97	; 0x61
 800793e:	2a0d      	cmp	r2, #13
 8007940:	d8e6      	bhi.n	8007910 <_scanf_float+0x60>
 8007942:	a101      	add	r1, pc, #4	; (adr r1, 8007948 <_scanf_float+0x98>)
 8007944:	f851 f022 	ldr.w	pc, [r1, r2, lsl #2]
 8007948:	08007a87 	.word	0x08007a87
 800794c:	08007911 	.word	0x08007911
 8007950:	08007911 	.word	0x08007911
 8007954:	08007911 	.word	0x08007911
 8007958:	08007ae7 	.word	0x08007ae7
 800795c:	08007abf 	.word	0x08007abf
 8007960:	08007911 	.word	0x08007911
 8007964:	08007911 	.word	0x08007911
 8007968:	08007a95 	.word	0x08007a95
 800796c:	08007911 	.word	0x08007911
 8007970:	08007911 	.word	0x08007911
 8007974:	08007911 	.word	0x08007911
 8007978:	08007911 	.word	0x08007911
 800797c:	08007a4d 	.word	0x08007a4d
 8007980:	f1a3 0241 	sub.w	r2, r3, #65	; 0x41
 8007984:	e7db      	b.n	800793e <_scanf_float+0x8e>
 8007986:	290e      	cmp	r1, #14
 8007988:	d8c2      	bhi.n	8007910 <_scanf_float+0x60>
 800798a:	a001      	add	r0, pc, #4	; (adr r0, 8007990 <_scanf_float+0xe0>)
 800798c:	f850 f021 	ldr.w	pc, [r0, r1, lsl #2]
 8007990:	08007a3f 	.word	0x08007a3f
 8007994:	08007911 	.word	0x08007911
 8007998:	08007a3f 	.word	0x08007a3f
 800799c:	08007ad3 	.word	0x08007ad3
 80079a0:	08007911 	.word	0x08007911
 80079a4:	080079ed 	.word	0x080079ed
 80079a8:	08007a29 	.word	0x08007a29
 80079ac:	08007a29 	.word	0x08007a29
 80079b0:	08007a29 	.word	0x08007a29
 80079b4:	08007a29 	.word	0x08007a29
 80079b8:	08007a29 	.word	0x08007a29
 80079bc:	08007a29 	.word	0x08007a29
 80079c0:	08007a29 	.word	0x08007a29
 80079c4:	08007a29 	.word	0x08007a29
 80079c8:	08007a29 	.word	0x08007a29
 80079cc:	2b6e      	cmp	r3, #110	; 0x6e
 80079ce:	d809      	bhi.n	80079e4 <_scanf_float+0x134>
 80079d0:	2b60      	cmp	r3, #96	; 0x60
 80079d2:	d8b2      	bhi.n	800793a <_scanf_float+0x8a>
 80079d4:	2b54      	cmp	r3, #84	; 0x54
 80079d6:	d077      	beq.n	8007ac8 <_scanf_float+0x218>
 80079d8:	2b59      	cmp	r3, #89	; 0x59
 80079da:	d199      	bne.n	8007910 <_scanf_float+0x60>
 80079dc:	2d07      	cmp	r5, #7
 80079de:	d197      	bne.n	8007910 <_scanf_float+0x60>
 80079e0:	2508      	movs	r5, #8
 80079e2:	e029      	b.n	8007a38 <_scanf_float+0x188>
 80079e4:	2b74      	cmp	r3, #116	; 0x74
 80079e6:	d06f      	beq.n	8007ac8 <_scanf_float+0x218>
 80079e8:	2b79      	cmp	r3, #121	; 0x79
 80079ea:	e7f6      	b.n	80079da <_scanf_float+0x12a>
 80079ec:	6821      	ldr	r1, [r4, #0]
 80079ee:	05c8      	lsls	r0, r1, #23
 80079f0:	d51a      	bpl.n	8007a28 <_scanf_float+0x178>
 80079f2:	9b02      	ldr	r3, [sp, #8]
 80079f4:	f021 0180 	bic.w	r1, r1, #128	; 0x80
 80079f8:	6021      	str	r1, [r4, #0]
 80079fa:	f109 0901 	add.w	r9, r9, #1
 80079fe:	b11b      	cbz	r3, 8007a08 <_scanf_float+0x158>
 8007a00:	3b01      	subs	r3, #1
 8007a02:	3201      	adds	r2, #1
 8007a04:	9302      	str	r3, [sp, #8]
 8007a06:	60a2      	str	r2, [r4, #8]
 8007a08:	68a3      	ldr	r3, [r4, #8]
 8007a0a:	3b01      	subs	r3, #1
 8007a0c:	60a3      	str	r3, [r4, #8]
 8007a0e:	6923      	ldr	r3, [r4, #16]
 8007a10:	3301      	adds	r3, #1
 8007a12:	6123      	str	r3, [r4, #16]
 8007a14:	687b      	ldr	r3, [r7, #4]
 8007a16:	3b01      	subs	r3, #1
 8007a18:	2b00      	cmp	r3, #0
 8007a1a:	607b      	str	r3, [r7, #4]
 8007a1c:	f340 8084 	ble.w	8007b28 <_scanf_float+0x278>
 8007a20:	683b      	ldr	r3, [r7, #0]
 8007a22:	3301      	adds	r3, #1
 8007a24:	603b      	str	r3, [r7, #0]
 8007a26:	e766      	b.n	80078f6 <_scanf_float+0x46>
 8007a28:	eb1a 0f05 	cmn.w	sl, r5
 8007a2c:	f47f af70 	bne.w	8007910 <_scanf_float+0x60>
 8007a30:	6822      	ldr	r2, [r4, #0]
 8007a32:	f422 72c0 	bic.w	r2, r2, #384	; 0x180
 8007a36:	6022      	str	r2, [r4, #0]
 8007a38:	f806 3b01 	strb.w	r3, [r6], #1
 8007a3c:	e7e4      	b.n	8007a08 <_scanf_float+0x158>
 8007a3e:	6822      	ldr	r2, [r4, #0]
 8007a40:	0610      	lsls	r0, r2, #24
 8007a42:	f57f af65 	bpl.w	8007910 <_scanf_float+0x60>
 8007a46:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 8007a4a:	e7f4      	b.n	8007a36 <_scanf_float+0x186>
 8007a4c:	f1ba 0f00 	cmp.w	sl, #0
 8007a50:	d10e      	bne.n	8007a70 <_scanf_float+0x1c0>
 8007a52:	f1b9 0f00 	cmp.w	r9, #0
 8007a56:	d10e      	bne.n	8007a76 <_scanf_float+0x1c6>
 8007a58:	6822      	ldr	r2, [r4, #0]
 8007a5a:	f402 61e0 	and.w	r1, r2, #1792	; 0x700
 8007a5e:	f5b1 6fe0 	cmp.w	r1, #1792	; 0x700
 8007a62:	d108      	bne.n	8007a76 <_scanf_float+0x1c6>
 8007a64:	f422 62f0 	bic.w	r2, r2, #1920	; 0x780
 8007a68:	6022      	str	r2, [r4, #0]
 8007a6a:	f04f 0a01 	mov.w	sl, #1
 8007a6e:	e7e3      	b.n	8007a38 <_scanf_float+0x188>
 8007a70:	f1ba 0f02 	cmp.w	sl, #2
 8007a74:	d055      	beq.n	8007b22 <_scanf_float+0x272>
 8007a76:	2d01      	cmp	r5, #1
 8007a78:	d002      	beq.n	8007a80 <_scanf_float+0x1d0>
 8007a7a:	2d04      	cmp	r5, #4
 8007a7c:	f47f af48 	bne.w	8007910 <_scanf_float+0x60>
 8007a80:	3501      	adds	r5, #1
 8007a82:	b2ed      	uxtb	r5, r5
 8007a84:	e7d8      	b.n	8007a38 <_scanf_float+0x188>
 8007a86:	f1ba 0f01 	cmp.w	sl, #1
 8007a8a:	f47f af41 	bne.w	8007910 <_scanf_float+0x60>
 8007a8e:	f04f 0a02 	mov.w	sl, #2
 8007a92:	e7d1      	b.n	8007a38 <_scanf_float+0x188>
 8007a94:	b97d      	cbnz	r5, 8007ab6 <_scanf_float+0x206>
 8007a96:	f1b9 0f00 	cmp.w	r9, #0
 8007a9a:	f47f af3c 	bne.w	8007916 <_scanf_float+0x66>
 8007a9e:	6822      	ldr	r2, [r4, #0]
 8007aa0:	f402 61e0 	and.w	r1, r2, #1792	; 0x700
 8007aa4:	f5b1 6fe0 	cmp.w	r1, #1792	; 0x700
 8007aa8:	f47f af39 	bne.w	800791e <_scanf_float+0x6e>
 8007aac:	f422 62f0 	bic.w	r2, r2, #1920	; 0x780
 8007ab0:	6022      	str	r2, [r4, #0]
 8007ab2:	2501      	movs	r5, #1
 8007ab4:	e7c0      	b.n	8007a38 <_scanf_float+0x188>
 8007ab6:	2d03      	cmp	r5, #3
 8007ab8:	d0e2      	beq.n	8007a80 <_scanf_float+0x1d0>
 8007aba:	2d05      	cmp	r5, #5
 8007abc:	e7de      	b.n	8007a7c <_scanf_float+0x1cc>
 8007abe:	2d02      	cmp	r5, #2
 8007ac0:	f47f af26 	bne.w	8007910 <_scanf_float+0x60>
 8007ac4:	2503      	movs	r5, #3
 8007ac6:	e7b7      	b.n	8007a38 <_scanf_float+0x188>
 8007ac8:	2d06      	cmp	r5, #6
 8007aca:	f47f af21 	bne.w	8007910 <_scanf_float+0x60>
 8007ace:	2507      	movs	r5, #7
 8007ad0:	e7b2      	b.n	8007a38 <_scanf_float+0x188>
 8007ad2:	6822      	ldr	r2, [r4, #0]
 8007ad4:	0591      	lsls	r1, r2, #22
 8007ad6:	f57f af1b 	bpl.w	8007910 <_scanf_float+0x60>
 8007ada:	f422 7220 	bic.w	r2, r2, #640	; 0x280
 8007ade:	6022      	str	r2, [r4, #0]
 8007ae0:	f8cd 9004 	str.w	r9, [sp, #4]
 8007ae4:	e7a8      	b.n	8007a38 <_scanf_float+0x188>
 8007ae6:	6822      	ldr	r2, [r4, #0]
 8007ae8:	f402 61a0 	and.w	r1, r2, #1280	; 0x500
 8007aec:	f5b1 6f80 	cmp.w	r1, #1024	; 0x400
 8007af0:	d006      	beq.n	8007b00 <_scanf_float+0x250>
 8007af2:	0550      	lsls	r0, r2, #21
 8007af4:	f57f af0c 	bpl.w	8007910 <_scanf_float+0x60>
 8007af8:	f1b9 0f00 	cmp.w	r9, #0
 8007afc:	f43f af0f 	beq.w	800791e <_scanf_float+0x6e>
 8007b00:	0591      	lsls	r1, r2, #22
 8007b02:	bf58      	it	pl
 8007b04:	9901      	ldrpl	r1, [sp, #4]
 8007b06:	f422 62f0 	bic.w	r2, r2, #1920	; 0x780
 8007b0a:	bf58      	it	pl
 8007b0c:	eba9 0101 	subpl.w	r1, r9, r1
 8007b10:	f442 72c0 	orr.w	r2, r2, #384	; 0x180
 8007b14:	bf58      	it	pl
 8007b16:	e9cd 1604 	strdpl	r1, r6, [sp, #16]
 8007b1a:	6022      	str	r2, [r4, #0]
 8007b1c:	f04f 0900 	mov.w	r9, #0
 8007b20:	e78a      	b.n	8007a38 <_scanf_float+0x188>
 8007b22:	f04f 0a03 	mov.w	sl, #3
 8007b26:	e787      	b.n	8007a38 <_scanf_float+0x188>
 8007b28:	f8d4 3180 	ldr.w	r3, [r4, #384]	; 0x180
 8007b2c:	4639      	mov	r1, r7
 8007b2e:	4640      	mov	r0, r8
 8007b30:	4798      	blx	r3
 8007b32:	2800      	cmp	r0, #0
 8007b34:	f43f aedf 	beq.w	80078f6 <_scanf_float+0x46>
 8007b38:	e6ea      	b.n	8007910 <_scanf_float+0x60>
 8007b3a:	f8d4 317c 	ldr.w	r3, [r4, #380]	; 0x17c
 8007b3e:	f816 1d01 	ldrb.w	r1, [r6, #-1]!
 8007b42:	463a      	mov	r2, r7
 8007b44:	4640      	mov	r0, r8
 8007b46:	4798      	blx	r3
 8007b48:	6923      	ldr	r3, [r4, #16]
 8007b4a:	3b01      	subs	r3, #1
 8007b4c:	6123      	str	r3, [r4, #16]
 8007b4e:	e6ec      	b.n	800792a <_scanf_float+0x7a>
 8007b50:	1e6b      	subs	r3, r5, #1
 8007b52:	2b06      	cmp	r3, #6
 8007b54:	d825      	bhi.n	8007ba2 <_scanf_float+0x2f2>
 8007b56:	2d02      	cmp	r5, #2
 8007b58:	d836      	bhi.n	8007bc8 <_scanf_float+0x318>
 8007b5a:	455e      	cmp	r6, fp
 8007b5c:	f67f aee8 	bls.w	8007930 <_scanf_float+0x80>
 8007b60:	f8d4 317c 	ldr.w	r3, [r4, #380]	; 0x17c
 8007b64:	f816 1d01 	ldrb.w	r1, [r6, #-1]!
 8007b68:	463a      	mov	r2, r7
 8007b6a:	4640      	mov	r0, r8
 8007b6c:	4798      	blx	r3
 8007b6e:	6923      	ldr	r3, [r4, #16]
 8007b70:	3b01      	subs	r3, #1
 8007b72:	6123      	str	r3, [r4, #16]
 8007b74:	e7f1      	b.n	8007b5a <_scanf_float+0x2aa>
 8007b76:	9802      	ldr	r0, [sp, #8]
 8007b78:	f8d4 317c 	ldr.w	r3, [r4, #380]	; 0x17c
 8007b7c:	f810 1d01 	ldrb.w	r1, [r0, #-1]!
 8007b80:	9002      	str	r0, [sp, #8]
 8007b82:	463a      	mov	r2, r7
 8007b84:	4640      	mov	r0, r8
 8007b86:	4798      	blx	r3
 8007b88:	6923      	ldr	r3, [r4, #16]
 8007b8a:	3b01      	subs	r3, #1
 8007b8c:	6123      	str	r3, [r4, #16]
 8007b8e:	f10a 3aff 	add.w	sl, sl, #4294967295
 8007b92:	fa5f fa8a 	uxtb.w	sl, sl
 8007b96:	f1ba 0f02 	cmp.w	sl, #2
 8007b9a:	d1ec      	bne.n	8007b76 <_scanf_float+0x2c6>
 8007b9c:	3d03      	subs	r5, #3
 8007b9e:	b2ed      	uxtb	r5, r5
 8007ba0:	1b76      	subs	r6, r6, r5
 8007ba2:	6823      	ldr	r3, [r4, #0]
 8007ba4:	05da      	lsls	r2, r3, #23
 8007ba6:	d52f      	bpl.n	8007c08 <_scanf_float+0x358>
 8007ba8:	055b      	lsls	r3, r3, #21
 8007baa:	d510      	bpl.n	8007bce <_scanf_float+0x31e>
 8007bac:	455e      	cmp	r6, fp
 8007bae:	f67f aebf 	bls.w	8007930 <_scanf_float+0x80>
 8007bb2:	f8d4 317c 	ldr.w	r3, [r4, #380]	; 0x17c
 8007bb6:	f816 1d01 	ldrb.w	r1, [r6, #-1]!
 8007bba:	463a      	mov	r2, r7
 8007bbc:	4640      	mov	r0, r8
 8007bbe:	4798      	blx	r3
 8007bc0:	6923      	ldr	r3, [r4, #16]
 8007bc2:	3b01      	subs	r3, #1
 8007bc4:	6123      	str	r3, [r4, #16]
 8007bc6:	e7f1      	b.n	8007bac <_scanf_float+0x2fc>
 8007bc8:	46aa      	mov	sl, r5
 8007bca:	9602      	str	r6, [sp, #8]
 8007bcc:	e7df      	b.n	8007b8e <_scanf_float+0x2de>
 8007bce:	f816 1c01 	ldrb.w	r1, [r6, #-1]
 8007bd2:	6923      	ldr	r3, [r4, #16]
 8007bd4:	2965      	cmp	r1, #101	; 0x65
 8007bd6:	f103 33ff 	add.w	r3, r3, #4294967295
 8007bda:	f106 35ff 	add.w	r5, r6, #4294967295
 8007bde:	6123      	str	r3, [r4, #16]
 8007be0:	d00c      	beq.n	8007bfc <_scanf_float+0x34c>
 8007be2:	2945      	cmp	r1, #69	; 0x45
 8007be4:	d00a      	beq.n	8007bfc <_scanf_float+0x34c>
 8007be6:	f8d4 317c 	ldr.w	r3, [r4, #380]	; 0x17c
 8007bea:	463a      	mov	r2, r7
 8007bec:	4640      	mov	r0, r8
 8007bee:	4798      	blx	r3
 8007bf0:	6923      	ldr	r3, [r4, #16]
 8007bf2:	f816 1c02 	ldrb.w	r1, [r6, #-2]
 8007bf6:	3b01      	subs	r3, #1
 8007bf8:	1eb5      	subs	r5, r6, #2
 8007bfa:	6123      	str	r3, [r4, #16]
 8007bfc:	f8d4 317c 	ldr.w	r3, [r4, #380]	; 0x17c
 8007c00:	463a      	mov	r2, r7
 8007c02:	4640      	mov	r0, r8
 8007c04:	4798      	blx	r3
 8007c06:	462e      	mov	r6, r5
 8007c08:	6825      	ldr	r5, [r4, #0]
 8007c0a:	f015 0510 	ands.w	r5, r5, #16
 8007c0e:	d159      	bne.n	8007cc4 <_scanf_float+0x414>
 8007c10:	7035      	strb	r5, [r6, #0]
 8007c12:	6823      	ldr	r3, [r4, #0]
 8007c14:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
 8007c18:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8007c1c:	d11b      	bne.n	8007c56 <_scanf_float+0x3a6>
 8007c1e:	9b01      	ldr	r3, [sp, #4]
 8007c20:	454b      	cmp	r3, r9
 8007c22:	eba3 0209 	sub.w	r2, r3, r9
 8007c26:	d123      	bne.n	8007c70 <_scanf_float+0x3c0>
 8007c28:	2200      	movs	r2, #0
 8007c2a:	4659      	mov	r1, fp
 8007c2c:	4640      	mov	r0, r8
 8007c2e:	f000 fecd 	bl	80089cc <_strtod_r>
 8007c32:	6822      	ldr	r2, [r4, #0]
 8007c34:	9b03      	ldr	r3, [sp, #12]
 8007c36:	f012 0f02 	tst.w	r2, #2
 8007c3a:	ec57 6b10 	vmov	r6, r7, d0
 8007c3e:	681b      	ldr	r3, [r3, #0]
 8007c40:	d021      	beq.n	8007c86 <_scanf_float+0x3d6>
 8007c42:	9903      	ldr	r1, [sp, #12]
 8007c44:	1d1a      	adds	r2, r3, #4
 8007c46:	600a      	str	r2, [r1, #0]
 8007c48:	681b      	ldr	r3, [r3, #0]
 8007c4a:	e9c3 6700 	strd	r6, r7, [r3]
 8007c4e:	68e3      	ldr	r3, [r4, #12]
 8007c50:	3301      	adds	r3, #1
 8007c52:	60e3      	str	r3, [r4, #12]
 8007c54:	e66d      	b.n	8007932 <_scanf_float+0x82>
 8007c56:	9b04      	ldr	r3, [sp, #16]
 8007c58:	2b00      	cmp	r3, #0
 8007c5a:	d0e5      	beq.n	8007c28 <_scanf_float+0x378>
 8007c5c:	9905      	ldr	r1, [sp, #20]
 8007c5e:	230a      	movs	r3, #10
 8007c60:	462a      	mov	r2, r5
 8007c62:	3101      	adds	r1, #1
 8007c64:	4640      	mov	r0, r8
 8007c66:	f000 ff39 	bl	8008adc <_strtol_r>
 8007c6a:	9b04      	ldr	r3, [sp, #16]
 8007c6c:	9e05      	ldr	r6, [sp, #20]
 8007c6e:	1ac2      	subs	r2, r0, r3
 8007c70:	f204 136f 	addw	r3, r4, #367	; 0x16f
 8007c74:	429e      	cmp	r6, r3
 8007c76:	bf28      	it	cs
 8007c78:	f504 76b7 	addcs.w	r6, r4, #366	; 0x16e
 8007c7c:	4912      	ldr	r1, [pc, #72]	; (8007cc8 <_scanf_float+0x418>)
 8007c7e:	4630      	mov	r0, r6
 8007c80:	f000 f860 	bl	8007d44 <siprintf>
 8007c84:	e7d0      	b.n	8007c28 <_scanf_float+0x378>
 8007c86:	9903      	ldr	r1, [sp, #12]
 8007c88:	f012 0f04 	tst.w	r2, #4
 8007c8c:	f103 0204 	add.w	r2, r3, #4
 8007c90:	600a      	str	r2, [r1, #0]
 8007c92:	d1d9      	bne.n	8007c48 <_scanf_float+0x398>
 8007c94:	f8d3 8000 	ldr.w	r8, [r3]
 8007c98:	ee10 2a10 	vmov	r2, s0
 8007c9c:	ee10 0a10 	vmov	r0, s0
 8007ca0:	463b      	mov	r3, r7
 8007ca2:	4639      	mov	r1, r7
 8007ca4:	f7f8 ff42 	bl	8000b2c <__aeabi_dcmpun>
 8007ca8:	b128      	cbz	r0, 8007cb6 <_scanf_float+0x406>
 8007caa:	4808      	ldr	r0, [pc, #32]	; (8007ccc <_scanf_float+0x41c>)
 8007cac:	f000 f810 	bl	8007cd0 <nanf>
 8007cb0:	ed88 0a00 	vstr	s0, [r8]
 8007cb4:	e7cb      	b.n	8007c4e <_scanf_float+0x39e>
 8007cb6:	4630      	mov	r0, r6
 8007cb8:	4639      	mov	r1, r7
 8007cba:	f7f8 ff95 	bl	8000be8 <__aeabi_d2f>
 8007cbe:	f8c8 0000 	str.w	r0, [r8]
 8007cc2:	e7c4      	b.n	8007c4e <_scanf_float+0x39e>
 8007cc4:	2500      	movs	r5, #0
 8007cc6:	e634      	b.n	8007932 <_scanf_float+0x82>
 8007cc8:	0800ba34 	.word	0x0800ba34
 8007ccc:	0800be40 	.word	0x0800be40

08007cd0 <nanf>:
 8007cd0:	ed9f 0a01 	vldr	s0, [pc, #4]	; 8007cd8 <nanf+0x8>
 8007cd4:	4770      	bx	lr
 8007cd6:	bf00      	nop
 8007cd8:	7fc00000 	.word	0x7fc00000

08007cdc <sniprintf>:
 8007cdc:	b40c      	push	{r2, r3}
 8007cde:	b530      	push	{r4, r5, lr}
 8007ce0:	4b17      	ldr	r3, [pc, #92]	; (8007d40 <sniprintf+0x64>)
 8007ce2:	1e0c      	subs	r4, r1, #0
 8007ce4:	681d      	ldr	r5, [r3, #0]
 8007ce6:	b09d      	sub	sp, #116	; 0x74
 8007ce8:	da08      	bge.n	8007cfc <sniprintf+0x20>
 8007cea:	238b      	movs	r3, #139	; 0x8b
 8007cec:	602b      	str	r3, [r5, #0]
 8007cee:	f04f 30ff 	mov.w	r0, #4294967295
 8007cf2:	b01d      	add	sp, #116	; 0x74
 8007cf4:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 8007cf8:	b002      	add	sp, #8
 8007cfa:	4770      	bx	lr
 8007cfc:	f44f 7302 	mov.w	r3, #520	; 0x208
 8007d00:	f8ad 3014 	strh.w	r3, [sp, #20]
 8007d04:	bf14      	ite	ne
 8007d06:	f104 33ff 	addne.w	r3, r4, #4294967295
 8007d0a:	4623      	moveq	r3, r4
 8007d0c:	9304      	str	r3, [sp, #16]
 8007d0e:	9307      	str	r3, [sp, #28]
 8007d10:	f64f 73ff 	movw	r3, #65535	; 0xffff
 8007d14:	9002      	str	r0, [sp, #8]
 8007d16:	9006      	str	r0, [sp, #24]
 8007d18:	f8ad 3016 	strh.w	r3, [sp, #22]
 8007d1c:	9a20      	ldr	r2, [sp, #128]	; 0x80
 8007d1e:	ab21      	add	r3, sp, #132	; 0x84
 8007d20:	a902      	add	r1, sp, #8
 8007d22:	4628      	mov	r0, r5
 8007d24:	9301      	str	r3, [sp, #4]
 8007d26:	f002 ff05 	bl	800ab34 <_svfiprintf_r>
 8007d2a:	1c43      	adds	r3, r0, #1
 8007d2c:	bfbc      	itt	lt
 8007d2e:	238b      	movlt	r3, #139	; 0x8b
 8007d30:	602b      	strlt	r3, [r5, #0]
 8007d32:	2c00      	cmp	r4, #0
 8007d34:	d0dd      	beq.n	8007cf2 <sniprintf+0x16>
 8007d36:	9b02      	ldr	r3, [sp, #8]
 8007d38:	2200      	movs	r2, #0
 8007d3a:	701a      	strb	r2, [r3, #0]
 8007d3c:	e7d9      	b.n	8007cf2 <sniprintf+0x16>
 8007d3e:	bf00      	nop
 8007d40:	2000000c 	.word	0x2000000c

08007d44 <siprintf>:
 8007d44:	b40e      	push	{r1, r2, r3}
 8007d46:	b500      	push	{lr}
 8007d48:	b09c      	sub	sp, #112	; 0x70
 8007d4a:	ab1d      	add	r3, sp, #116	; 0x74
 8007d4c:	9002      	str	r0, [sp, #8]
 8007d4e:	9006      	str	r0, [sp, #24]
 8007d50:	f06f 4100 	mvn.w	r1, #2147483648	; 0x80000000
 8007d54:	4809      	ldr	r0, [pc, #36]	; (8007d7c <siprintf+0x38>)
 8007d56:	9107      	str	r1, [sp, #28]
 8007d58:	9104      	str	r1, [sp, #16]
 8007d5a:	4909      	ldr	r1, [pc, #36]	; (8007d80 <siprintf+0x3c>)
 8007d5c:	f853 2b04 	ldr.w	r2, [r3], #4
 8007d60:	9105      	str	r1, [sp, #20]
 8007d62:	6800      	ldr	r0, [r0, #0]
 8007d64:	9301      	str	r3, [sp, #4]
 8007d66:	a902      	add	r1, sp, #8
 8007d68:	f002 fee4 	bl	800ab34 <_svfiprintf_r>
 8007d6c:	9b02      	ldr	r3, [sp, #8]
 8007d6e:	2200      	movs	r2, #0
 8007d70:	701a      	strb	r2, [r3, #0]
 8007d72:	b01c      	add	sp, #112	; 0x70
 8007d74:	f85d eb04 	ldr.w	lr, [sp], #4
 8007d78:	b003      	add	sp, #12
 8007d7a:	4770      	bx	lr
 8007d7c:	2000000c 	.word	0x2000000c
 8007d80:	ffff0208 	.word	0xffff0208

08007d84 <sulp>:
 8007d84:	b570      	push	{r4, r5, r6, lr}
 8007d86:	4604      	mov	r4, r0
 8007d88:	460d      	mov	r5, r1
 8007d8a:	ec45 4b10 	vmov	d0, r4, r5
 8007d8e:	4616      	mov	r6, r2
 8007d90:	f002 fc2e 	bl	800a5f0 <__ulp>
 8007d94:	ec51 0b10 	vmov	r0, r1, d0
 8007d98:	b17e      	cbz	r6, 8007dba <sulp+0x36>
 8007d9a:	f3c5 530a 	ubfx	r3, r5, #20, #11
 8007d9e:	f1c3 036b 	rsb	r3, r3, #107	; 0x6b
 8007da2:	2b00      	cmp	r3, #0
 8007da4:	dd09      	ble.n	8007dba <sulp+0x36>
 8007da6:	051b      	lsls	r3, r3, #20
 8007da8:	f103 557f 	add.w	r5, r3, #1069547520	; 0x3fc00000
 8007dac:	2400      	movs	r4, #0
 8007dae:	f505 1540 	add.w	r5, r5, #3145728	; 0x300000
 8007db2:	4622      	mov	r2, r4
 8007db4:	462b      	mov	r3, r5
 8007db6:	f7f8 fc1f 	bl	80005f8 <__aeabi_dmul>
 8007dba:	bd70      	pop	{r4, r5, r6, pc}
 8007dbc:	0000      	movs	r0, r0
	...

08007dc0 <_strtod_l>:
 8007dc0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8007dc4:	ed2d 8b02 	vpush	{d8}
 8007dc8:	b09d      	sub	sp, #116	; 0x74
 8007dca:	461f      	mov	r7, r3
 8007dcc:	2300      	movs	r3, #0
 8007dce:	9318      	str	r3, [sp, #96]	; 0x60
 8007dd0:	4ba2      	ldr	r3, [pc, #648]	; (800805c <_strtod_l+0x29c>)
 8007dd2:	9213      	str	r2, [sp, #76]	; 0x4c
 8007dd4:	681b      	ldr	r3, [r3, #0]
 8007dd6:	9305      	str	r3, [sp, #20]
 8007dd8:	4604      	mov	r4, r0
 8007dda:	4618      	mov	r0, r3
 8007ddc:	4688      	mov	r8, r1
 8007dde:	f7f8 f9f7 	bl	80001d0 <strlen>
 8007de2:	f04f 0a00 	mov.w	sl, #0
 8007de6:	4605      	mov	r5, r0
 8007de8:	f04f 0b00 	mov.w	fp, #0
 8007dec:	f8cd 805c 	str.w	r8, [sp, #92]	; 0x5c
 8007df0:	9b17      	ldr	r3, [sp, #92]	; 0x5c
 8007df2:	781a      	ldrb	r2, [r3, #0]
 8007df4:	2a2b      	cmp	r2, #43	; 0x2b
 8007df6:	d04e      	beq.n	8007e96 <_strtod_l+0xd6>
 8007df8:	d83b      	bhi.n	8007e72 <_strtod_l+0xb2>
 8007dfa:	2a0d      	cmp	r2, #13
 8007dfc:	d834      	bhi.n	8007e68 <_strtod_l+0xa8>
 8007dfe:	2a08      	cmp	r2, #8
 8007e00:	d834      	bhi.n	8007e6c <_strtod_l+0xac>
 8007e02:	2a00      	cmp	r2, #0
 8007e04:	d03e      	beq.n	8007e84 <_strtod_l+0xc4>
 8007e06:	2300      	movs	r3, #0
 8007e08:	930a      	str	r3, [sp, #40]	; 0x28
 8007e0a:	9e17      	ldr	r6, [sp, #92]	; 0x5c
 8007e0c:	7833      	ldrb	r3, [r6, #0]
 8007e0e:	2b30      	cmp	r3, #48	; 0x30
 8007e10:	f040 80b0 	bne.w	8007f74 <_strtod_l+0x1b4>
 8007e14:	7873      	ldrb	r3, [r6, #1]
 8007e16:	f003 03df 	and.w	r3, r3, #223	; 0xdf
 8007e1a:	2b58      	cmp	r3, #88	; 0x58
 8007e1c:	d168      	bne.n	8007ef0 <_strtod_l+0x130>
 8007e1e:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8007e20:	9301      	str	r3, [sp, #4]
 8007e22:	ab18      	add	r3, sp, #96	; 0x60
 8007e24:	9702      	str	r7, [sp, #8]
 8007e26:	9300      	str	r3, [sp, #0]
 8007e28:	4a8d      	ldr	r2, [pc, #564]	; (8008060 <_strtod_l+0x2a0>)
 8007e2a:	ab19      	add	r3, sp, #100	; 0x64
 8007e2c:	a917      	add	r1, sp, #92	; 0x5c
 8007e2e:	4620      	mov	r0, r4
 8007e30:	f001 fd38 	bl	80098a4 <__gethex>
 8007e34:	f010 0707 	ands.w	r7, r0, #7
 8007e38:	4605      	mov	r5, r0
 8007e3a:	d005      	beq.n	8007e48 <_strtod_l+0x88>
 8007e3c:	2f06      	cmp	r7, #6
 8007e3e:	d12c      	bne.n	8007e9a <_strtod_l+0xda>
 8007e40:	3601      	adds	r6, #1
 8007e42:	2300      	movs	r3, #0
 8007e44:	9617      	str	r6, [sp, #92]	; 0x5c
 8007e46:	930a      	str	r3, [sp, #40]	; 0x28
 8007e48:	9b13      	ldr	r3, [sp, #76]	; 0x4c
 8007e4a:	2b00      	cmp	r3, #0
 8007e4c:	f040 8590 	bne.w	8008970 <_strtod_l+0xbb0>
 8007e50:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8007e52:	b1eb      	cbz	r3, 8007e90 <_strtod_l+0xd0>
 8007e54:	4652      	mov	r2, sl
 8007e56:	f10b 4300 	add.w	r3, fp, #2147483648	; 0x80000000
 8007e5a:	ec43 2b10 	vmov	d0, r2, r3
 8007e5e:	b01d      	add	sp, #116	; 0x74
 8007e60:	ecbd 8b02 	vpop	{d8}
 8007e64:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8007e68:	2a20      	cmp	r2, #32
 8007e6a:	d1cc      	bne.n	8007e06 <_strtod_l+0x46>
 8007e6c:	3301      	adds	r3, #1
 8007e6e:	9317      	str	r3, [sp, #92]	; 0x5c
 8007e70:	e7be      	b.n	8007df0 <_strtod_l+0x30>
 8007e72:	2a2d      	cmp	r2, #45	; 0x2d
 8007e74:	d1c7      	bne.n	8007e06 <_strtod_l+0x46>
 8007e76:	2201      	movs	r2, #1
 8007e78:	920a      	str	r2, [sp, #40]	; 0x28
 8007e7a:	1c5a      	adds	r2, r3, #1
 8007e7c:	9217      	str	r2, [sp, #92]	; 0x5c
 8007e7e:	785b      	ldrb	r3, [r3, #1]
 8007e80:	2b00      	cmp	r3, #0
 8007e82:	d1c2      	bne.n	8007e0a <_strtod_l+0x4a>
 8007e84:	9b13      	ldr	r3, [sp, #76]	; 0x4c
 8007e86:	f8cd 805c 	str.w	r8, [sp, #92]	; 0x5c
 8007e8a:	2b00      	cmp	r3, #0
 8007e8c:	f040 856e 	bne.w	800896c <_strtod_l+0xbac>
 8007e90:	4652      	mov	r2, sl
 8007e92:	465b      	mov	r3, fp
 8007e94:	e7e1      	b.n	8007e5a <_strtod_l+0x9a>
 8007e96:	2200      	movs	r2, #0
 8007e98:	e7ee      	b.n	8007e78 <_strtod_l+0xb8>
 8007e9a:	9a18      	ldr	r2, [sp, #96]	; 0x60
 8007e9c:	b13a      	cbz	r2, 8007eae <_strtod_l+0xee>
 8007e9e:	2135      	movs	r1, #53	; 0x35
 8007ea0:	a81a      	add	r0, sp, #104	; 0x68
 8007ea2:	f002 fcb0 	bl	800a806 <__copybits>
 8007ea6:	9918      	ldr	r1, [sp, #96]	; 0x60
 8007ea8:	4620      	mov	r0, r4
 8007eaa:	f002 f86f 	bl	8009f8c <_Bfree>
 8007eae:	3f01      	subs	r7, #1
 8007eb0:	2f04      	cmp	r7, #4
 8007eb2:	d806      	bhi.n	8007ec2 <_strtod_l+0x102>
 8007eb4:	e8df f007 	tbb	[pc, r7]
 8007eb8:	1714030a 	.word	0x1714030a
 8007ebc:	0a          	.byte	0x0a
 8007ebd:	00          	.byte	0x00
 8007ebe:	e9dd ab1a 	ldrd	sl, fp, [sp, #104]	; 0x68
 8007ec2:	0728      	lsls	r0, r5, #28
 8007ec4:	d5c0      	bpl.n	8007e48 <_strtod_l+0x88>
 8007ec6:	f04b 4b00 	orr.w	fp, fp, #2147483648	; 0x80000000
 8007eca:	e7bd      	b.n	8007e48 <_strtod_l+0x88>
 8007ecc:	e9dd a31a 	ldrd	sl, r3, [sp, #104]	; 0x68
 8007ed0:	9a19      	ldr	r2, [sp, #100]	; 0x64
 8007ed2:	f423 1380 	bic.w	r3, r3, #1048576	; 0x100000
 8007ed6:	f202 4233 	addw	r2, r2, #1075	; 0x433
 8007eda:	ea43 5b02 	orr.w	fp, r3, r2, lsl #20
 8007ede:	e7f0      	b.n	8007ec2 <_strtod_l+0x102>
 8007ee0:	f8df b180 	ldr.w	fp, [pc, #384]	; 8008064 <_strtod_l+0x2a4>
 8007ee4:	e7ed      	b.n	8007ec2 <_strtod_l+0x102>
 8007ee6:	f06f 4b00 	mvn.w	fp, #2147483648	; 0x80000000
 8007eea:	f04f 3aff 	mov.w	sl, #4294967295
 8007eee:	e7e8      	b.n	8007ec2 <_strtod_l+0x102>
 8007ef0:	9b17      	ldr	r3, [sp, #92]	; 0x5c
 8007ef2:	1c5a      	adds	r2, r3, #1
 8007ef4:	9217      	str	r2, [sp, #92]	; 0x5c
 8007ef6:	785b      	ldrb	r3, [r3, #1]
 8007ef8:	2b30      	cmp	r3, #48	; 0x30
 8007efa:	d0f9      	beq.n	8007ef0 <_strtod_l+0x130>
 8007efc:	2b00      	cmp	r3, #0
 8007efe:	d0a3      	beq.n	8007e48 <_strtod_l+0x88>
 8007f00:	2301      	movs	r3, #1
 8007f02:	f04f 0900 	mov.w	r9, #0
 8007f06:	9304      	str	r3, [sp, #16]
 8007f08:	9b17      	ldr	r3, [sp, #92]	; 0x5c
 8007f0a:	9308      	str	r3, [sp, #32]
 8007f0c:	f8cd 901c 	str.w	r9, [sp, #28]
 8007f10:	464f      	mov	r7, r9
 8007f12:	220a      	movs	r2, #10
 8007f14:	9817      	ldr	r0, [sp, #92]	; 0x5c
 8007f16:	7806      	ldrb	r6, [r0, #0]
 8007f18:	f1a6 0330 	sub.w	r3, r6, #48	; 0x30
 8007f1c:	b2d9      	uxtb	r1, r3
 8007f1e:	2909      	cmp	r1, #9
 8007f20:	d92a      	bls.n	8007f78 <_strtod_l+0x1b8>
 8007f22:	9905      	ldr	r1, [sp, #20]
 8007f24:	462a      	mov	r2, r5
 8007f26:	f002 ff1f 	bl	800ad68 <strncmp>
 8007f2a:	b398      	cbz	r0, 8007f94 <_strtod_l+0x1d4>
 8007f2c:	2000      	movs	r0, #0
 8007f2e:	4632      	mov	r2, r6
 8007f30:	463d      	mov	r5, r7
 8007f32:	9005      	str	r0, [sp, #20]
 8007f34:	4603      	mov	r3, r0
 8007f36:	2a65      	cmp	r2, #101	; 0x65
 8007f38:	d001      	beq.n	8007f3e <_strtod_l+0x17e>
 8007f3a:	2a45      	cmp	r2, #69	; 0x45
 8007f3c:	d118      	bne.n	8007f70 <_strtod_l+0x1b0>
 8007f3e:	b91d      	cbnz	r5, 8007f48 <_strtod_l+0x188>
 8007f40:	9a04      	ldr	r2, [sp, #16]
 8007f42:	4302      	orrs	r2, r0
 8007f44:	d09e      	beq.n	8007e84 <_strtod_l+0xc4>
 8007f46:	2500      	movs	r5, #0
 8007f48:	f8dd 805c 	ldr.w	r8, [sp, #92]	; 0x5c
 8007f4c:	f108 0201 	add.w	r2, r8, #1
 8007f50:	9217      	str	r2, [sp, #92]	; 0x5c
 8007f52:	f898 2001 	ldrb.w	r2, [r8, #1]
 8007f56:	2a2b      	cmp	r2, #43	; 0x2b
 8007f58:	d075      	beq.n	8008046 <_strtod_l+0x286>
 8007f5a:	2a2d      	cmp	r2, #45	; 0x2d
 8007f5c:	d07b      	beq.n	8008056 <_strtod_l+0x296>
 8007f5e:	f04f 0c00 	mov.w	ip, #0
 8007f62:	f1a2 0130 	sub.w	r1, r2, #48	; 0x30
 8007f66:	2909      	cmp	r1, #9
 8007f68:	f240 8082 	bls.w	8008070 <_strtod_l+0x2b0>
 8007f6c:	f8cd 805c 	str.w	r8, [sp, #92]	; 0x5c
 8007f70:	2600      	movs	r6, #0
 8007f72:	e09d      	b.n	80080b0 <_strtod_l+0x2f0>
 8007f74:	2300      	movs	r3, #0
 8007f76:	e7c4      	b.n	8007f02 <_strtod_l+0x142>
 8007f78:	2f08      	cmp	r7, #8
 8007f7a:	bfd8      	it	le
 8007f7c:	9907      	ldrle	r1, [sp, #28]
 8007f7e:	f100 0001 	add.w	r0, r0, #1
 8007f82:	bfda      	itte	le
 8007f84:	fb02 3301 	mlale	r3, r2, r1, r3
 8007f88:	9307      	strle	r3, [sp, #28]
 8007f8a:	fb02 3909 	mlagt	r9, r2, r9, r3
 8007f8e:	3701      	adds	r7, #1
 8007f90:	9017      	str	r0, [sp, #92]	; 0x5c
 8007f92:	e7bf      	b.n	8007f14 <_strtod_l+0x154>
 8007f94:	9b17      	ldr	r3, [sp, #92]	; 0x5c
 8007f96:	195a      	adds	r2, r3, r5
 8007f98:	9217      	str	r2, [sp, #92]	; 0x5c
 8007f9a:	5d5a      	ldrb	r2, [r3, r5]
 8007f9c:	2f00      	cmp	r7, #0
 8007f9e:	d037      	beq.n	8008010 <_strtod_l+0x250>
 8007fa0:	9005      	str	r0, [sp, #20]
 8007fa2:	463d      	mov	r5, r7
 8007fa4:	f1a2 0330 	sub.w	r3, r2, #48	; 0x30
 8007fa8:	2b09      	cmp	r3, #9
 8007faa:	d912      	bls.n	8007fd2 <_strtod_l+0x212>
 8007fac:	2301      	movs	r3, #1
 8007fae:	e7c2      	b.n	8007f36 <_strtod_l+0x176>
 8007fb0:	9b17      	ldr	r3, [sp, #92]	; 0x5c
 8007fb2:	1c5a      	adds	r2, r3, #1
 8007fb4:	9217      	str	r2, [sp, #92]	; 0x5c
 8007fb6:	785a      	ldrb	r2, [r3, #1]
 8007fb8:	3001      	adds	r0, #1
 8007fba:	2a30      	cmp	r2, #48	; 0x30
 8007fbc:	d0f8      	beq.n	8007fb0 <_strtod_l+0x1f0>
 8007fbe:	f1a2 0331 	sub.w	r3, r2, #49	; 0x31
 8007fc2:	2b08      	cmp	r3, #8
 8007fc4:	f200 84d9 	bhi.w	800897a <_strtod_l+0xbba>
 8007fc8:	9b17      	ldr	r3, [sp, #92]	; 0x5c
 8007fca:	9005      	str	r0, [sp, #20]
 8007fcc:	2000      	movs	r0, #0
 8007fce:	9308      	str	r3, [sp, #32]
 8007fd0:	4605      	mov	r5, r0
 8007fd2:	3a30      	subs	r2, #48	; 0x30
 8007fd4:	f100 0301 	add.w	r3, r0, #1
 8007fd8:	d014      	beq.n	8008004 <_strtod_l+0x244>
 8007fda:	9905      	ldr	r1, [sp, #20]
 8007fdc:	4419      	add	r1, r3
 8007fde:	9105      	str	r1, [sp, #20]
 8007fe0:	462b      	mov	r3, r5
 8007fe2:	eb00 0e05 	add.w	lr, r0, r5
 8007fe6:	210a      	movs	r1, #10
 8007fe8:	4573      	cmp	r3, lr
 8007fea:	d113      	bne.n	8008014 <_strtod_l+0x254>
 8007fec:	182b      	adds	r3, r5, r0
 8007fee:	2b08      	cmp	r3, #8
 8007ff0:	f105 0501 	add.w	r5, r5, #1
 8007ff4:	4405      	add	r5, r0
 8007ff6:	dc1c      	bgt.n	8008032 <_strtod_l+0x272>
 8007ff8:	9907      	ldr	r1, [sp, #28]
 8007ffa:	230a      	movs	r3, #10
 8007ffc:	fb03 2301 	mla	r3, r3, r1, r2
 8008000:	9307      	str	r3, [sp, #28]
 8008002:	2300      	movs	r3, #0
 8008004:	9a17      	ldr	r2, [sp, #92]	; 0x5c
 8008006:	1c51      	adds	r1, r2, #1
 8008008:	9117      	str	r1, [sp, #92]	; 0x5c
 800800a:	7852      	ldrb	r2, [r2, #1]
 800800c:	4618      	mov	r0, r3
 800800e:	e7c9      	b.n	8007fa4 <_strtod_l+0x1e4>
 8008010:	4638      	mov	r0, r7
 8008012:	e7d2      	b.n	8007fba <_strtod_l+0x1fa>
 8008014:	2b08      	cmp	r3, #8
 8008016:	dc04      	bgt.n	8008022 <_strtod_l+0x262>
 8008018:	9e07      	ldr	r6, [sp, #28]
 800801a:	434e      	muls	r6, r1
 800801c:	9607      	str	r6, [sp, #28]
 800801e:	3301      	adds	r3, #1
 8008020:	e7e2      	b.n	8007fe8 <_strtod_l+0x228>
 8008022:	f103 0c01 	add.w	ip, r3, #1
 8008026:	f1bc 0f10 	cmp.w	ip, #16
 800802a:	bfd8      	it	le
 800802c:	fb01 f909 	mulle.w	r9, r1, r9
 8008030:	e7f5      	b.n	800801e <_strtod_l+0x25e>
 8008032:	2d10      	cmp	r5, #16
 8008034:	bfdc      	itt	le
 8008036:	230a      	movle	r3, #10
 8008038:	fb03 2909 	mlale	r9, r3, r9, r2
 800803c:	e7e1      	b.n	8008002 <_strtod_l+0x242>
 800803e:	2300      	movs	r3, #0
 8008040:	9305      	str	r3, [sp, #20]
 8008042:	2301      	movs	r3, #1
 8008044:	e77c      	b.n	8007f40 <_strtod_l+0x180>
 8008046:	f04f 0c00 	mov.w	ip, #0
 800804a:	f108 0202 	add.w	r2, r8, #2
 800804e:	9217      	str	r2, [sp, #92]	; 0x5c
 8008050:	f898 2002 	ldrb.w	r2, [r8, #2]
 8008054:	e785      	b.n	8007f62 <_strtod_l+0x1a2>
 8008056:	f04f 0c01 	mov.w	ip, #1
 800805a:	e7f6      	b.n	800804a <_strtod_l+0x28a>
 800805c:	0800bc88 	.word	0x0800bc88
 8008060:	0800ba3c 	.word	0x0800ba3c
 8008064:	7ff00000 	.word	0x7ff00000
 8008068:	9a17      	ldr	r2, [sp, #92]	; 0x5c
 800806a:	1c51      	adds	r1, r2, #1
 800806c:	9117      	str	r1, [sp, #92]	; 0x5c
 800806e:	7852      	ldrb	r2, [r2, #1]
 8008070:	2a30      	cmp	r2, #48	; 0x30
 8008072:	d0f9      	beq.n	8008068 <_strtod_l+0x2a8>
 8008074:	f1a2 0131 	sub.w	r1, r2, #49	; 0x31
 8008078:	2908      	cmp	r1, #8
 800807a:	f63f af79 	bhi.w	8007f70 <_strtod_l+0x1b0>
 800807e:	f1a2 0e30 	sub.w	lr, r2, #48	; 0x30
 8008082:	9a17      	ldr	r2, [sp, #92]	; 0x5c
 8008084:	9206      	str	r2, [sp, #24]
 8008086:	9a17      	ldr	r2, [sp, #92]	; 0x5c
 8008088:	1c51      	adds	r1, r2, #1
 800808a:	9117      	str	r1, [sp, #92]	; 0x5c
 800808c:	7852      	ldrb	r2, [r2, #1]
 800808e:	f1a2 0630 	sub.w	r6, r2, #48	; 0x30
 8008092:	2e09      	cmp	r6, #9
 8008094:	d937      	bls.n	8008106 <_strtod_l+0x346>
 8008096:	9e06      	ldr	r6, [sp, #24]
 8008098:	1b89      	subs	r1, r1, r6
 800809a:	2908      	cmp	r1, #8
 800809c:	f644 661f 	movw	r6, #19999	; 0x4e1f
 80080a0:	dc02      	bgt.n	80080a8 <_strtod_l+0x2e8>
 80080a2:	4576      	cmp	r6, lr
 80080a4:	bfa8      	it	ge
 80080a6:	4676      	movge	r6, lr
 80080a8:	f1bc 0f00 	cmp.w	ip, #0
 80080ac:	d000      	beq.n	80080b0 <_strtod_l+0x2f0>
 80080ae:	4276      	negs	r6, r6
 80080b0:	2d00      	cmp	r5, #0
 80080b2:	d14d      	bne.n	8008150 <_strtod_l+0x390>
 80080b4:	9904      	ldr	r1, [sp, #16]
 80080b6:	4301      	orrs	r1, r0
 80080b8:	f47f aec6 	bne.w	8007e48 <_strtod_l+0x88>
 80080bc:	2b00      	cmp	r3, #0
 80080be:	f47f aee1 	bne.w	8007e84 <_strtod_l+0xc4>
 80080c2:	2a69      	cmp	r2, #105	; 0x69
 80080c4:	d027      	beq.n	8008116 <_strtod_l+0x356>
 80080c6:	dc24      	bgt.n	8008112 <_strtod_l+0x352>
 80080c8:	2a49      	cmp	r2, #73	; 0x49
 80080ca:	d024      	beq.n	8008116 <_strtod_l+0x356>
 80080cc:	2a4e      	cmp	r2, #78	; 0x4e
 80080ce:	f47f aed9 	bne.w	8007e84 <_strtod_l+0xc4>
 80080d2:	499f      	ldr	r1, [pc, #636]	; (8008350 <_strtod_l+0x590>)
 80080d4:	a817      	add	r0, sp, #92	; 0x5c
 80080d6:	f001 fe3d 	bl	8009d54 <__match>
 80080da:	2800      	cmp	r0, #0
 80080dc:	f43f aed2 	beq.w	8007e84 <_strtod_l+0xc4>
 80080e0:	9b17      	ldr	r3, [sp, #92]	; 0x5c
 80080e2:	781b      	ldrb	r3, [r3, #0]
 80080e4:	2b28      	cmp	r3, #40	; 0x28
 80080e6:	d12d      	bne.n	8008144 <_strtod_l+0x384>
 80080e8:	499a      	ldr	r1, [pc, #616]	; (8008354 <_strtod_l+0x594>)
 80080ea:	aa1a      	add	r2, sp, #104	; 0x68
 80080ec:	a817      	add	r0, sp, #92	; 0x5c
 80080ee:	f001 fe45 	bl	8009d7c <__hexnan>
 80080f2:	2805      	cmp	r0, #5
 80080f4:	d126      	bne.n	8008144 <_strtod_l+0x384>
 80080f6:	9b1b      	ldr	r3, [sp, #108]	; 0x6c
 80080f8:	f8dd a068 	ldr.w	sl, [sp, #104]	; 0x68
 80080fc:	f043 4bff 	orr.w	fp, r3, #2139095040	; 0x7f800000
 8008100:	f44b 0be0 	orr.w	fp, fp, #7340032	; 0x700000
 8008104:	e6a0      	b.n	8007e48 <_strtod_l+0x88>
 8008106:	210a      	movs	r1, #10
 8008108:	fb01 2e0e 	mla	lr, r1, lr, r2
 800810c:	f1ae 0e30 	sub.w	lr, lr, #48	; 0x30
 8008110:	e7b9      	b.n	8008086 <_strtod_l+0x2c6>
 8008112:	2a6e      	cmp	r2, #110	; 0x6e
 8008114:	e7db      	b.n	80080ce <_strtod_l+0x30e>
 8008116:	4990      	ldr	r1, [pc, #576]	; (8008358 <_strtod_l+0x598>)
 8008118:	a817      	add	r0, sp, #92	; 0x5c
 800811a:	f001 fe1b 	bl	8009d54 <__match>
 800811e:	2800      	cmp	r0, #0
 8008120:	f43f aeb0 	beq.w	8007e84 <_strtod_l+0xc4>
 8008124:	9b17      	ldr	r3, [sp, #92]	; 0x5c
 8008126:	498d      	ldr	r1, [pc, #564]	; (800835c <_strtod_l+0x59c>)
 8008128:	3b01      	subs	r3, #1
 800812a:	a817      	add	r0, sp, #92	; 0x5c
 800812c:	9317      	str	r3, [sp, #92]	; 0x5c
 800812e:	f001 fe11 	bl	8009d54 <__match>
 8008132:	b910      	cbnz	r0, 800813a <_strtod_l+0x37a>
 8008134:	9b17      	ldr	r3, [sp, #92]	; 0x5c
 8008136:	3301      	adds	r3, #1
 8008138:	9317      	str	r3, [sp, #92]	; 0x5c
 800813a:	f8df b230 	ldr.w	fp, [pc, #560]	; 800836c <_strtod_l+0x5ac>
 800813e:	f04f 0a00 	mov.w	sl, #0
 8008142:	e681      	b.n	8007e48 <_strtod_l+0x88>
 8008144:	4886      	ldr	r0, [pc, #536]	; (8008360 <_strtod_l+0x5a0>)
 8008146:	f002 fdf7 	bl	800ad38 <nan>
 800814a:	ec5b ab10 	vmov	sl, fp, d0
 800814e:	e67b      	b.n	8007e48 <_strtod_l+0x88>
 8008150:	9b05      	ldr	r3, [sp, #20]
 8008152:	9807      	ldr	r0, [sp, #28]
 8008154:	1af3      	subs	r3, r6, r3
 8008156:	2f00      	cmp	r7, #0
 8008158:	bf08      	it	eq
 800815a:	462f      	moveq	r7, r5
 800815c:	2d10      	cmp	r5, #16
 800815e:	9306      	str	r3, [sp, #24]
 8008160:	46a8      	mov	r8, r5
 8008162:	bfa8      	it	ge
 8008164:	f04f 0810 	movge.w	r8, #16
 8008168:	f7f8 f9cc 	bl	8000504 <__aeabi_ui2d>
 800816c:	2d09      	cmp	r5, #9
 800816e:	4682      	mov	sl, r0
 8008170:	468b      	mov	fp, r1
 8008172:	dd13      	ble.n	800819c <_strtod_l+0x3dc>
 8008174:	4b7b      	ldr	r3, [pc, #492]	; (8008364 <_strtod_l+0x5a4>)
 8008176:	eb03 03c8 	add.w	r3, r3, r8, lsl #3
 800817a:	e953 2312 	ldrd	r2, r3, [r3, #-72]	; 0x48
 800817e:	f7f8 fa3b 	bl	80005f8 <__aeabi_dmul>
 8008182:	4682      	mov	sl, r0
 8008184:	4648      	mov	r0, r9
 8008186:	468b      	mov	fp, r1
 8008188:	f7f8 f9bc 	bl	8000504 <__aeabi_ui2d>
 800818c:	4602      	mov	r2, r0
 800818e:	460b      	mov	r3, r1
 8008190:	4650      	mov	r0, sl
 8008192:	4659      	mov	r1, fp
 8008194:	f7f8 f87a 	bl	800028c <__adddf3>
 8008198:	4682      	mov	sl, r0
 800819a:	468b      	mov	fp, r1
 800819c:	2d0f      	cmp	r5, #15
 800819e:	dc38      	bgt.n	8008212 <_strtod_l+0x452>
 80081a0:	9b06      	ldr	r3, [sp, #24]
 80081a2:	2b00      	cmp	r3, #0
 80081a4:	f43f ae50 	beq.w	8007e48 <_strtod_l+0x88>
 80081a8:	dd24      	ble.n	80081f4 <_strtod_l+0x434>
 80081aa:	2b16      	cmp	r3, #22
 80081ac:	dc0b      	bgt.n	80081c6 <_strtod_l+0x406>
 80081ae:	496d      	ldr	r1, [pc, #436]	; (8008364 <_strtod_l+0x5a4>)
 80081b0:	eb01 01c3 	add.w	r1, r1, r3, lsl #3
 80081b4:	e9d1 0100 	ldrd	r0, r1, [r1]
 80081b8:	4652      	mov	r2, sl
 80081ba:	465b      	mov	r3, fp
 80081bc:	f7f8 fa1c 	bl	80005f8 <__aeabi_dmul>
 80081c0:	4682      	mov	sl, r0
 80081c2:	468b      	mov	fp, r1
 80081c4:	e640      	b.n	8007e48 <_strtod_l+0x88>
 80081c6:	9a06      	ldr	r2, [sp, #24]
 80081c8:	f1c5 0325 	rsb	r3, r5, #37	; 0x25
 80081cc:	4293      	cmp	r3, r2
 80081ce:	db20      	blt.n	8008212 <_strtod_l+0x452>
 80081d0:	4c64      	ldr	r4, [pc, #400]	; (8008364 <_strtod_l+0x5a4>)
 80081d2:	f1c5 050f 	rsb	r5, r5, #15
 80081d6:	eb04 01c5 	add.w	r1, r4, r5, lsl #3
 80081da:	4652      	mov	r2, sl
 80081dc:	465b      	mov	r3, fp
 80081de:	e9d1 0100 	ldrd	r0, r1, [r1]
 80081e2:	f7f8 fa09 	bl	80005f8 <__aeabi_dmul>
 80081e6:	9b06      	ldr	r3, [sp, #24]
 80081e8:	1b5d      	subs	r5, r3, r5
 80081ea:	eb04 04c5 	add.w	r4, r4, r5, lsl #3
 80081ee:	e9d4 2300 	ldrd	r2, r3, [r4]
 80081f2:	e7e3      	b.n	80081bc <_strtod_l+0x3fc>
 80081f4:	9b06      	ldr	r3, [sp, #24]
 80081f6:	3316      	adds	r3, #22
 80081f8:	db0b      	blt.n	8008212 <_strtod_l+0x452>
 80081fa:	9b05      	ldr	r3, [sp, #20]
 80081fc:	1b9e      	subs	r6, r3, r6
 80081fe:	4b59      	ldr	r3, [pc, #356]	; (8008364 <_strtod_l+0x5a4>)
 8008200:	eb03 06c6 	add.w	r6, r3, r6, lsl #3
 8008204:	e9d6 2300 	ldrd	r2, r3, [r6]
 8008208:	4650      	mov	r0, sl
 800820a:	4659      	mov	r1, fp
 800820c:	f7f8 fb1e 	bl	800084c <__aeabi_ddiv>
 8008210:	e7d6      	b.n	80081c0 <_strtod_l+0x400>
 8008212:	9b06      	ldr	r3, [sp, #24]
 8008214:	eba5 0808 	sub.w	r8, r5, r8
 8008218:	4498      	add	r8, r3
 800821a:	f1b8 0f00 	cmp.w	r8, #0
 800821e:	dd74      	ble.n	800830a <_strtod_l+0x54a>
 8008220:	f018 030f 	ands.w	r3, r8, #15
 8008224:	d00a      	beq.n	800823c <_strtod_l+0x47c>
 8008226:	494f      	ldr	r1, [pc, #316]	; (8008364 <_strtod_l+0x5a4>)
 8008228:	eb01 01c3 	add.w	r1, r1, r3, lsl #3
 800822c:	4652      	mov	r2, sl
 800822e:	465b      	mov	r3, fp
 8008230:	e9d1 0100 	ldrd	r0, r1, [r1]
 8008234:	f7f8 f9e0 	bl	80005f8 <__aeabi_dmul>
 8008238:	4682      	mov	sl, r0
 800823a:	468b      	mov	fp, r1
 800823c:	f038 080f 	bics.w	r8, r8, #15
 8008240:	d04f      	beq.n	80082e2 <_strtod_l+0x522>
 8008242:	f5b8 7f9a 	cmp.w	r8, #308	; 0x134
 8008246:	dd22      	ble.n	800828e <_strtod_l+0x4ce>
 8008248:	2500      	movs	r5, #0
 800824a:	462e      	mov	r6, r5
 800824c:	9507      	str	r5, [sp, #28]
 800824e:	9505      	str	r5, [sp, #20]
 8008250:	2322      	movs	r3, #34	; 0x22
 8008252:	f8df b118 	ldr.w	fp, [pc, #280]	; 800836c <_strtod_l+0x5ac>
 8008256:	6023      	str	r3, [r4, #0]
 8008258:	f04f 0a00 	mov.w	sl, #0
 800825c:	9b07      	ldr	r3, [sp, #28]
 800825e:	2b00      	cmp	r3, #0
 8008260:	f43f adf2 	beq.w	8007e48 <_strtod_l+0x88>
 8008264:	9918      	ldr	r1, [sp, #96]	; 0x60
 8008266:	4620      	mov	r0, r4
 8008268:	f001 fe90 	bl	8009f8c <_Bfree>
 800826c:	9905      	ldr	r1, [sp, #20]
 800826e:	4620      	mov	r0, r4
 8008270:	f001 fe8c 	bl	8009f8c <_Bfree>
 8008274:	4631      	mov	r1, r6
 8008276:	4620      	mov	r0, r4
 8008278:	f001 fe88 	bl	8009f8c <_Bfree>
 800827c:	9907      	ldr	r1, [sp, #28]
 800827e:	4620      	mov	r0, r4
 8008280:	f001 fe84 	bl	8009f8c <_Bfree>
 8008284:	4629      	mov	r1, r5
 8008286:	4620      	mov	r0, r4
 8008288:	f001 fe80 	bl	8009f8c <_Bfree>
 800828c:	e5dc      	b.n	8007e48 <_strtod_l+0x88>
 800828e:	4b36      	ldr	r3, [pc, #216]	; (8008368 <_strtod_l+0x5a8>)
 8008290:	9304      	str	r3, [sp, #16]
 8008292:	2300      	movs	r3, #0
 8008294:	ea4f 1828 	mov.w	r8, r8, asr #4
 8008298:	4650      	mov	r0, sl
 800829a:	4659      	mov	r1, fp
 800829c:	4699      	mov	r9, r3
 800829e:	f1b8 0f01 	cmp.w	r8, #1
 80082a2:	dc21      	bgt.n	80082e8 <_strtod_l+0x528>
 80082a4:	b10b      	cbz	r3, 80082aa <_strtod_l+0x4ea>
 80082a6:	4682      	mov	sl, r0
 80082a8:	468b      	mov	fp, r1
 80082aa:	4b2f      	ldr	r3, [pc, #188]	; (8008368 <_strtod_l+0x5a8>)
 80082ac:	f1ab 7b54 	sub.w	fp, fp, #55574528	; 0x3500000
 80082b0:	eb03 09c9 	add.w	r9, r3, r9, lsl #3
 80082b4:	4652      	mov	r2, sl
 80082b6:	465b      	mov	r3, fp
 80082b8:	e9d9 0100 	ldrd	r0, r1, [r9]
 80082bc:	f7f8 f99c 	bl	80005f8 <__aeabi_dmul>
 80082c0:	4b2a      	ldr	r3, [pc, #168]	; (800836c <_strtod_l+0x5ac>)
 80082c2:	460a      	mov	r2, r1
 80082c4:	400b      	ands	r3, r1
 80082c6:	492a      	ldr	r1, [pc, #168]	; (8008370 <_strtod_l+0x5b0>)
 80082c8:	428b      	cmp	r3, r1
 80082ca:	4682      	mov	sl, r0
 80082cc:	d8bc      	bhi.n	8008248 <_strtod_l+0x488>
 80082ce:	f5a1 1180 	sub.w	r1, r1, #1048576	; 0x100000
 80082d2:	428b      	cmp	r3, r1
 80082d4:	bf86      	itte	hi
 80082d6:	f8df b09c 	ldrhi.w	fp, [pc, #156]	; 8008374 <_strtod_l+0x5b4>
 80082da:	f04f 3aff 	movhi.w	sl, #4294967295
 80082de:	f102 7b54 	addls.w	fp, r2, #55574528	; 0x3500000
 80082e2:	2300      	movs	r3, #0
 80082e4:	9304      	str	r3, [sp, #16]
 80082e6:	e084      	b.n	80083f2 <_strtod_l+0x632>
 80082e8:	f018 0f01 	tst.w	r8, #1
 80082ec:	d005      	beq.n	80082fa <_strtod_l+0x53a>
 80082ee:	9b04      	ldr	r3, [sp, #16]
 80082f0:	e9d3 2300 	ldrd	r2, r3, [r3]
 80082f4:	f7f8 f980 	bl	80005f8 <__aeabi_dmul>
 80082f8:	2301      	movs	r3, #1
 80082fa:	9a04      	ldr	r2, [sp, #16]
 80082fc:	3208      	adds	r2, #8
 80082fe:	f109 0901 	add.w	r9, r9, #1
 8008302:	ea4f 0868 	mov.w	r8, r8, asr #1
 8008306:	9204      	str	r2, [sp, #16]
 8008308:	e7c9      	b.n	800829e <_strtod_l+0x4de>
 800830a:	d0ea      	beq.n	80082e2 <_strtod_l+0x522>
 800830c:	f1c8 0800 	rsb	r8, r8, #0
 8008310:	f018 020f 	ands.w	r2, r8, #15
 8008314:	d00a      	beq.n	800832c <_strtod_l+0x56c>
 8008316:	4b13      	ldr	r3, [pc, #76]	; (8008364 <_strtod_l+0x5a4>)
 8008318:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 800831c:	4650      	mov	r0, sl
 800831e:	4659      	mov	r1, fp
 8008320:	e9d3 2300 	ldrd	r2, r3, [r3]
 8008324:	f7f8 fa92 	bl	800084c <__aeabi_ddiv>
 8008328:	4682      	mov	sl, r0
 800832a:	468b      	mov	fp, r1
 800832c:	ea5f 1828 	movs.w	r8, r8, asr #4
 8008330:	d0d7      	beq.n	80082e2 <_strtod_l+0x522>
 8008332:	f1b8 0f1f 	cmp.w	r8, #31
 8008336:	dd1f      	ble.n	8008378 <_strtod_l+0x5b8>
 8008338:	2500      	movs	r5, #0
 800833a:	462e      	mov	r6, r5
 800833c:	9507      	str	r5, [sp, #28]
 800833e:	9505      	str	r5, [sp, #20]
 8008340:	2322      	movs	r3, #34	; 0x22
 8008342:	f04f 0a00 	mov.w	sl, #0
 8008346:	f04f 0b00 	mov.w	fp, #0
 800834a:	6023      	str	r3, [r4, #0]
 800834c:	e786      	b.n	800825c <_strtod_l+0x49c>
 800834e:	bf00      	nop
 8008350:	0800ba0d 	.word	0x0800ba0d
 8008354:	0800ba50 	.word	0x0800ba50
 8008358:	0800ba05 	.word	0x0800ba05
 800835c:	0800bb94 	.word	0x0800bb94
 8008360:	0800be40 	.word	0x0800be40
 8008364:	0800bd20 	.word	0x0800bd20
 8008368:	0800bcf8 	.word	0x0800bcf8
 800836c:	7ff00000 	.word	0x7ff00000
 8008370:	7ca00000 	.word	0x7ca00000
 8008374:	7fefffff 	.word	0x7fefffff
 8008378:	f018 0310 	ands.w	r3, r8, #16
 800837c:	bf18      	it	ne
 800837e:	236a      	movne	r3, #106	; 0x6a
 8008380:	f8df 93ac 	ldr.w	r9, [pc, #940]	; 8008730 <_strtod_l+0x970>
 8008384:	9304      	str	r3, [sp, #16]
 8008386:	4650      	mov	r0, sl
 8008388:	4659      	mov	r1, fp
 800838a:	2300      	movs	r3, #0
 800838c:	f018 0f01 	tst.w	r8, #1
 8008390:	d004      	beq.n	800839c <_strtod_l+0x5dc>
 8008392:	e9d9 2300 	ldrd	r2, r3, [r9]
 8008396:	f7f8 f92f 	bl	80005f8 <__aeabi_dmul>
 800839a:	2301      	movs	r3, #1
 800839c:	ea5f 0868 	movs.w	r8, r8, asr #1
 80083a0:	f109 0908 	add.w	r9, r9, #8
 80083a4:	d1f2      	bne.n	800838c <_strtod_l+0x5cc>
 80083a6:	b10b      	cbz	r3, 80083ac <_strtod_l+0x5ec>
 80083a8:	4682      	mov	sl, r0
 80083aa:	468b      	mov	fp, r1
 80083ac:	9b04      	ldr	r3, [sp, #16]
 80083ae:	b1c3      	cbz	r3, 80083e2 <_strtod_l+0x622>
 80083b0:	f3cb 520a 	ubfx	r2, fp, #20, #11
 80083b4:	f1c2 036b 	rsb	r3, r2, #107	; 0x6b
 80083b8:	2b00      	cmp	r3, #0
 80083ba:	4659      	mov	r1, fp
 80083bc:	dd11      	ble.n	80083e2 <_strtod_l+0x622>
 80083be:	2b1f      	cmp	r3, #31
 80083c0:	f340 8124 	ble.w	800860c <_strtod_l+0x84c>
 80083c4:	2b34      	cmp	r3, #52	; 0x34
 80083c6:	bfde      	ittt	le
 80083c8:	f1c2 024b 	rsble	r2, r2, #75	; 0x4b
 80083cc:	f04f 33ff 	movle.w	r3, #4294967295
 80083d0:	fa03 f202 	lslle.w	r2, r3, r2
 80083d4:	f04f 0a00 	mov.w	sl, #0
 80083d8:	bfcc      	ite	gt
 80083da:	f04f 7b5c 	movgt.w	fp, #57671680	; 0x3700000
 80083de:	ea02 0b01 	andle.w	fp, r2, r1
 80083e2:	2200      	movs	r2, #0
 80083e4:	2300      	movs	r3, #0
 80083e6:	4650      	mov	r0, sl
 80083e8:	4659      	mov	r1, fp
 80083ea:	f7f8 fb6d 	bl	8000ac8 <__aeabi_dcmpeq>
 80083ee:	2800      	cmp	r0, #0
 80083f0:	d1a2      	bne.n	8008338 <_strtod_l+0x578>
 80083f2:	9b07      	ldr	r3, [sp, #28]
 80083f4:	9300      	str	r3, [sp, #0]
 80083f6:	9908      	ldr	r1, [sp, #32]
 80083f8:	462b      	mov	r3, r5
 80083fa:	463a      	mov	r2, r7
 80083fc:	4620      	mov	r0, r4
 80083fe:	f001 fe2d 	bl	800a05c <__s2b>
 8008402:	9007      	str	r0, [sp, #28]
 8008404:	2800      	cmp	r0, #0
 8008406:	f43f af1f 	beq.w	8008248 <_strtod_l+0x488>
 800840a:	9b05      	ldr	r3, [sp, #20]
 800840c:	1b9e      	subs	r6, r3, r6
 800840e:	9b06      	ldr	r3, [sp, #24]
 8008410:	2b00      	cmp	r3, #0
 8008412:	bfb4      	ite	lt
 8008414:	4633      	movlt	r3, r6
 8008416:	2300      	movge	r3, #0
 8008418:	930c      	str	r3, [sp, #48]	; 0x30
 800841a:	9b06      	ldr	r3, [sp, #24]
 800841c:	2500      	movs	r5, #0
 800841e:	ea23 73e3 	bic.w	r3, r3, r3, asr #31
 8008422:	9312      	str	r3, [sp, #72]	; 0x48
 8008424:	462e      	mov	r6, r5
 8008426:	9b07      	ldr	r3, [sp, #28]
 8008428:	4620      	mov	r0, r4
 800842a:	6859      	ldr	r1, [r3, #4]
 800842c:	f001 fd6e 	bl	8009f0c <_Balloc>
 8008430:	9005      	str	r0, [sp, #20]
 8008432:	2800      	cmp	r0, #0
 8008434:	f43f af0c 	beq.w	8008250 <_strtod_l+0x490>
 8008438:	9b07      	ldr	r3, [sp, #28]
 800843a:	691a      	ldr	r2, [r3, #16]
 800843c:	3202      	adds	r2, #2
 800843e:	f103 010c 	add.w	r1, r3, #12
 8008442:	0092      	lsls	r2, r2, #2
 8008444:	300c      	adds	r0, #12
 8008446:	f001 fd53 	bl	8009ef0 <memcpy>
 800844a:	ec4b ab10 	vmov	d0, sl, fp
 800844e:	aa1a      	add	r2, sp, #104	; 0x68
 8008450:	a919      	add	r1, sp, #100	; 0x64
 8008452:	4620      	mov	r0, r4
 8008454:	f002 f948 	bl	800a6e8 <__d2b>
 8008458:	ec4b ab18 	vmov	d8, sl, fp
 800845c:	9018      	str	r0, [sp, #96]	; 0x60
 800845e:	2800      	cmp	r0, #0
 8008460:	f43f aef6 	beq.w	8008250 <_strtod_l+0x490>
 8008464:	2101      	movs	r1, #1
 8008466:	4620      	mov	r0, r4
 8008468:	f001 fe92 	bl	800a190 <__i2b>
 800846c:	4606      	mov	r6, r0
 800846e:	2800      	cmp	r0, #0
 8008470:	f43f aeee 	beq.w	8008250 <_strtod_l+0x490>
 8008474:	9b19      	ldr	r3, [sp, #100]	; 0x64
 8008476:	9904      	ldr	r1, [sp, #16]
 8008478:	2b00      	cmp	r3, #0
 800847a:	bfab      	itete	ge
 800847c:	9a0c      	ldrge	r2, [sp, #48]	; 0x30
 800847e:	9a12      	ldrlt	r2, [sp, #72]	; 0x48
 8008480:	9f12      	ldrge	r7, [sp, #72]	; 0x48
 8008482:	f8dd 9030 	ldrlt.w	r9, [sp, #48]	; 0x30
 8008486:	bfac      	ite	ge
 8008488:	eb03 0902 	addge.w	r9, r3, r2
 800848c:	1ad7      	sublt	r7, r2, r3
 800848e:	9a1a      	ldr	r2, [sp, #104]	; 0x68
 8008490:	eba3 0801 	sub.w	r8, r3, r1
 8008494:	4490      	add	r8, r2
 8008496:	4ba1      	ldr	r3, [pc, #644]	; (800871c <_strtod_l+0x95c>)
 8008498:	f108 38ff 	add.w	r8, r8, #4294967295
 800849c:	4598      	cmp	r8, r3
 800849e:	f1c2 0236 	rsb	r2, r2, #54	; 0x36
 80084a2:	f280 80c7 	bge.w	8008634 <_strtod_l+0x874>
 80084a6:	eba3 0308 	sub.w	r3, r3, r8
 80084aa:	2b1f      	cmp	r3, #31
 80084ac:	eba2 0203 	sub.w	r2, r2, r3
 80084b0:	f04f 0101 	mov.w	r1, #1
 80084b4:	f300 80b1 	bgt.w	800861a <_strtod_l+0x85a>
 80084b8:	fa01 f303 	lsl.w	r3, r1, r3
 80084bc:	930d      	str	r3, [sp, #52]	; 0x34
 80084be:	2300      	movs	r3, #0
 80084c0:	9308      	str	r3, [sp, #32]
 80084c2:	eb09 0802 	add.w	r8, r9, r2
 80084c6:	9b04      	ldr	r3, [sp, #16]
 80084c8:	45c1      	cmp	r9, r8
 80084ca:	4417      	add	r7, r2
 80084cc:	441f      	add	r7, r3
 80084ce:	464b      	mov	r3, r9
 80084d0:	bfa8      	it	ge
 80084d2:	4643      	movge	r3, r8
 80084d4:	42bb      	cmp	r3, r7
 80084d6:	bfa8      	it	ge
 80084d8:	463b      	movge	r3, r7
 80084da:	2b00      	cmp	r3, #0
 80084dc:	bfc2      	ittt	gt
 80084de:	eba8 0803 	subgt.w	r8, r8, r3
 80084e2:	1aff      	subgt	r7, r7, r3
 80084e4:	eba9 0903 	subgt.w	r9, r9, r3
 80084e8:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 80084ea:	2b00      	cmp	r3, #0
 80084ec:	dd17      	ble.n	800851e <_strtod_l+0x75e>
 80084ee:	4631      	mov	r1, r6
 80084f0:	461a      	mov	r2, r3
 80084f2:	4620      	mov	r0, r4
 80084f4:	f001 ff0c 	bl	800a310 <__pow5mult>
 80084f8:	4606      	mov	r6, r0
 80084fa:	2800      	cmp	r0, #0
 80084fc:	f43f aea8 	beq.w	8008250 <_strtod_l+0x490>
 8008500:	4601      	mov	r1, r0
 8008502:	9a18      	ldr	r2, [sp, #96]	; 0x60
 8008504:	4620      	mov	r0, r4
 8008506:	f001 fe59 	bl	800a1bc <__multiply>
 800850a:	900b      	str	r0, [sp, #44]	; 0x2c
 800850c:	2800      	cmp	r0, #0
 800850e:	f43f ae9f 	beq.w	8008250 <_strtod_l+0x490>
 8008512:	9918      	ldr	r1, [sp, #96]	; 0x60
 8008514:	4620      	mov	r0, r4
 8008516:	f001 fd39 	bl	8009f8c <_Bfree>
 800851a:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 800851c:	9318      	str	r3, [sp, #96]	; 0x60
 800851e:	f1b8 0f00 	cmp.w	r8, #0
 8008522:	f300 808c 	bgt.w	800863e <_strtod_l+0x87e>
 8008526:	9b06      	ldr	r3, [sp, #24]
 8008528:	2b00      	cmp	r3, #0
 800852a:	dd08      	ble.n	800853e <_strtod_l+0x77e>
 800852c:	9a12      	ldr	r2, [sp, #72]	; 0x48
 800852e:	9905      	ldr	r1, [sp, #20]
 8008530:	4620      	mov	r0, r4
 8008532:	f001 feed 	bl	800a310 <__pow5mult>
 8008536:	9005      	str	r0, [sp, #20]
 8008538:	2800      	cmp	r0, #0
 800853a:	f43f ae89 	beq.w	8008250 <_strtod_l+0x490>
 800853e:	2f00      	cmp	r7, #0
 8008540:	dd08      	ble.n	8008554 <_strtod_l+0x794>
 8008542:	9905      	ldr	r1, [sp, #20]
 8008544:	463a      	mov	r2, r7
 8008546:	4620      	mov	r0, r4
 8008548:	f001 ff3c 	bl	800a3c4 <__lshift>
 800854c:	9005      	str	r0, [sp, #20]
 800854e:	2800      	cmp	r0, #0
 8008550:	f43f ae7e 	beq.w	8008250 <_strtod_l+0x490>
 8008554:	f1b9 0f00 	cmp.w	r9, #0
 8008558:	dd08      	ble.n	800856c <_strtod_l+0x7ac>
 800855a:	4631      	mov	r1, r6
 800855c:	464a      	mov	r2, r9
 800855e:	4620      	mov	r0, r4
 8008560:	f001 ff30 	bl	800a3c4 <__lshift>
 8008564:	4606      	mov	r6, r0
 8008566:	2800      	cmp	r0, #0
 8008568:	f43f ae72 	beq.w	8008250 <_strtod_l+0x490>
 800856c:	9a05      	ldr	r2, [sp, #20]
 800856e:	9918      	ldr	r1, [sp, #96]	; 0x60
 8008570:	4620      	mov	r0, r4
 8008572:	f001 ffb3 	bl	800a4dc <__mdiff>
 8008576:	4605      	mov	r5, r0
 8008578:	2800      	cmp	r0, #0
 800857a:	f43f ae69 	beq.w	8008250 <_strtod_l+0x490>
 800857e:	68c3      	ldr	r3, [r0, #12]
 8008580:	930b      	str	r3, [sp, #44]	; 0x2c
 8008582:	2300      	movs	r3, #0
 8008584:	60c3      	str	r3, [r0, #12]
 8008586:	4631      	mov	r1, r6
 8008588:	f001 ff8c 	bl	800a4a4 <__mcmp>
 800858c:	2800      	cmp	r0, #0
 800858e:	da60      	bge.n	8008652 <_strtod_l+0x892>
 8008590:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8008592:	ea53 030a 	orrs.w	r3, r3, sl
 8008596:	f040 8082 	bne.w	800869e <_strtod_l+0x8de>
 800859a:	f3cb 0313 	ubfx	r3, fp, #0, #20
 800859e:	2b00      	cmp	r3, #0
 80085a0:	d17d      	bne.n	800869e <_strtod_l+0x8de>
 80085a2:	f02b 4300 	bic.w	r3, fp, #2147483648	; 0x80000000
 80085a6:	0d1b      	lsrs	r3, r3, #20
 80085a8:	051b      	lsls	r3, r3, #20
 80085aa:	f1b3 6fd6 	cmp.w	r3, #112197632	; 0x6b00000
 80085ae:	d976      	bls.n	800869e <_strtod_l+0x8de>
 80085b0:	696b      	ldr	r3, [r5, #20]
 80085b2:	b913      	cbnz	r3, 80085ba <_strtod_l+0x7fa>
 80085b4:	692b      	ldr	r3, [r5, #16]
 80085b6:	2b01      	cmp	r3, #1
 80085b8:	dd71      	ble.n	800869e <_strtod_l+0x8de>
 80085ba:	4629      	mov	r1, r5
 80085bc:	2201      	movs	r2, #1
 80085be:	4620      	mov	r0, r4
 80085c0:	f001 ff00 	bl	800a3c4 <__lshift>
 80085c4:	4631      	mov	r1, r6
 80085c6:	4605      	mov	r5, r0
 80085c8:	f001 ff6c 	bl	800a4a4 <__mcmp>
 80085cc:	2800      	cmp	r0, #0
 80085ce:	dd66      	ble.n	800869e <_strtod_l+0x8de>
 80085d0:	9904      	ldr	r1, [sp, #16]
 80085d2:	4a53      	ldr	r2, [pc, #332]	; (8008720 <_strtod_l+0x960>)
 80085d4:	465b      	mov	r3, fp
 80085d6:	2900      	cmp	r1, #0
 80085d8:	f000 8081 	beq.w	80086de <_strtod_l+0x91e>
 80085dc:	ea02 010b 	and.w	r1, r2, fp
 80085e0:	f1b1 6fd6 	cmp.w	r1, #112197632	; 0x6b00000
 80085e4:	dc7b      	bgt.n	80086de <_strtod_l+0x91e>
 80085e6:	f1b1 7f5c 	cmp.w	r1, #57671680	; 0x3700000
 80085ea:	f77f aea9 	ble.w	8008340 <_strtod_l+0x580>
 80085ee:	4b4d      	ldr	r3, [pc, #308]	; (8008724 <_strtod_l+0x964>)
 80085f0:	4650      	mov	r0, sl
 80085f2:	4659      	mov	r1, fp
 80085f4:	2200      	movs	r2, #0
 80085f6:	f7f7 ffff 	bl	80005f8 <__aeabi_dmul>
 80085fa:	460b      	mov	r3, r1
 80085fc:	4303      	orrs	r3, r0
 80085fe:	bf08      	it	eq
 8008600:	2322      	moveq	r3, #34	; 0x22
 8008602:	4682      	mov	sl, r0
 8008604:	468b      	mov	fp, r1
 8008606:	bf08      	it	eq
 8008608:	6023      	streq	r3, [r4, #0]
 800860a:	e62b      	b.n	8008264 <_strtod_l+0x4a4>
 800860c:	f04f 32ff 	mov.w	r2, #4294967295
 8008610:	fa02 f303 	lsl.w	r3, r2, r3
 8008614:	ea03 0a0a 	and.w	sl, r3, sl
 8008618:	e6e3      	b.n	80083e2 <_strtod_l+0x622>
 800861a:	f1c8 487f 	rsb	r8, r8, #4278190080	; 0xff000000
 800861e:	f508 087f 	add.w	r8, r8, #16711680	; 0xff0000
 8008622:	f508 487b 	add.w	r8, r8, #64256	; 0xfb00
 8008626:	f108 08e2 	add.w	r8, r8, #226	; 0xe2
 800862a:	fa01 f308 	lsl.w	r3, r1, r8
 800862e:	9308      	str	r3, [sp, #32]
 8008630:	910d      	str	r1, [sp, #52]	; 0x34
 8008632:	e746      	b.n	80084c2 <_strtod_l+0x702>
 8008634:	2300      	movs	r3, #0
 8008636:	9308      	str	r3, [sp, #32]
 8008638:	2301      	movs	r3, #1
 800863a:	930d      	str	r3, [sp, #52]	; 0x34
 800863c:	e741      	b.n	80084c2 <_strtod_l+0x702>
 800863e:	9918      	ldr	r1, [sp, #96]	; 0x60
 8008640:	4642      	mov	r2, r8
 8008642:	4620      	mov	r0, r4
 8008644:	f001 febe 	bl	800a3c4 <__lshift>
 8008648:	9018      	str	r0, [sp, #96]	; 0x60
 800864a:	2800      	cmp	r0, #0
 800864c:	f47f af6b 	bne.w	8008526 <_strtod_l+0x766>
 8008650:	e5fe      	b.n	8008250 <_strtod_l+0x490>
 8008652:	465f      	mov	r7, fp
 8008654:	d16e      	bne.n	8008734 <_strtod_l+0x974>
 8008656:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
 8008658:	f3cb 0313 	ubfx	r3, fp, #0, #20
 800865c:	b342      	cbz	r2, 80086b0 <_strtod_l+0x8f0>
 800865e:	4a32      	ldr	r2, [pc, #200]	; (8008728 <_strtod_l+0x968>)
 8008660:	4293      	cmp	r3, r2
 8008662:	d128      	bne.n	80086b6 <_strtod_l+0x8f6>
 8008664:	9b04      	ldr	r3, [sp, #16]
 8008666:	4651      	mov	r1, sl
 8008668:	b1eb      	cbz	r3, 80086a6 <_strtod_l+0x8e6>
 800866a:	4b2d      	ldr	r3, [pc, #180]	; (8008720 <_strtod_l+0x960>)
 800866c:	403b      	ands	r3, r7
 800866e:	f1b3 6fd4 	cmp.w	r3, #111149056	; 0x6a00000
 8008672:	f04f 32ff 	mov.w	r2, #4294967295
 8008676:	d819      	bhi.n	80086ac <_strtod_l+0x8ec>
 8008678:	0d1b      	lsrs	r3, r3, #20
 800867a:	f1c3 036b 	rsb	r3, r3, #107	; 0x6b
 800867e:	fa02 f303 	lsl.w	r3, r2, r3
 8008682:	4299      	cmp	r1, r3
 8008684:	d117      	bne.n	80086b6 <_strtod_l+0x8f6>
 8008686:	4b29      	ldr	r3, [pc, #164]	; (800872c <_strtod_l+0x96c>)
 8008688:	429f      	cmp	r7, r3
 800868a:	d102      	bne.n	8008692 <_strtod_l+0x8d2>
 800868c:	3101      	adds	r1, #1
 800868e:	f43f addf 	beq.w	8008250 <_strtod_l+0x490>
 8008692:	4b23      	ldr	r3, [pc, #140]	; (8008720 <_strtod_l+0x960>)
 8008694:	403b      	ands	r3, r7
 8008696:	f503 1b80 	add.w	fp, r3, #1048576	; 0x100000
 800869a:	f04f 0a00 	mov.w	sl, #0
 800869e:	9b04      	ldr	r3, [sp, #16]
 80086a0:	2b00      	cmp	r3, #0
 80086a2:	d1a4      	bne.n	80085ee <_strtod_l+0x82e>
 80086a4:	e5de      	b.n	8008264 <_strtod_l+0x4a4>
 80086a6:	f04f 33ff 	mov.w	r3, #4294967295
 80086aa:	e7ea      	b.n	8008682 <_strtod_l+0x8c2>
 80086ac:	4613      	mov	r3, r2
 80086ae:	e7e8      	b.n	8008682 <_strtod_l+0x8c2>
 80086b0:	ea53 030a 	orrs.w	r3, r3, sl
 80086b4:	d08c      	beq.n	80085d0 <_strtod_l+0x810>
 80086b6:	9b08      	ldr	r3, [sp, #32]
 80086b8:	b1db      	cbz	r3, 80086f2 <_strtod_l+0x932>
 80086ba:	423b      	tst	r3, r7
 80086bc:	d0ef      	beq.n	800869e <_strtod_l+0x8de>
 80086be:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 80086c0:	9a04      	ldr	r2, [sp, #16]
 80086c2:	4650      	mov	r0, sl
 80086c4:	4659      	mov	r1, fp
 80086c6:	b1c3      	cbz	r3, 80086fa <_strtod_l+0x93a>
 80086c8:	f7ff fb5c 	bl	8007d84 <sulp>
 80086cc:	4602      	mov	r2, r0
 80086ce:	460b      	mov	r3, r1
 80086d0:	ec51 0b18 	vmov	r0, r1, d8
 80086d4:	f7f7 fdda 	bl	800028c <__adddf3>
 80086d8:	4682      	mov	sl, r0
 80086da:	468b      	mov	fp, r1
 80086dc:	e7df      	b.n	800869e <_strtod_l+0x8de>
 80086de:	4013      	ands	r3, r2
 80086e0:	f5a3 1380 	sub.w	r3, r3, #1048576	; 0x100000
 80086e4:	ea6f 5b13 	mvn.w	fp, r3, lsr #20
 80086e8:	ea6f 5b0b 	mvn.w	fp, fp, lsl #20
 80086ec:	f04f 3aff 	mov.w	sl, #4294967295
 80086f0:	e7d5      	b.n	800869e <_strtod_l+0x8de>
 80086f2:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 80086f4:	ea13 0f0a 	tst.w	r3, sl
 80086f8:	e7e0      	b.n	80086bc <_strtod_l+0x8fc>
 80086fa:	f7ff fb43 	bl	8007d84 <sulp>
 80086fe:	4602      	mov	r2, r0
 8008700:	460b      	mov	r3, r1
 8008702:	ec51 0b18 	vmov	r0, r1, d8
 8008706:	f7f7 fdbf 	bl	8000288 <__aeabi_dsub>
 800870a:	2200      	movs	r2, #0
 800870c:	2300      	movs	r3, #0
 800870e:	4682      	mov	sl, r0
 8008710:	468b      	mov	fp, r1
 8008712:	f7f8 f9d9 	bl	8000ac8 <__aeabi_dcmpeq>
 8008716:	2800      	cmp	r0, #0
 8008718:	d0c1      	beq.n	800869e <_strtod_l+0x8de>
 800871a:	e611      	b.n	8008340 <_strtod_l+0x580>
 800871c:	fffffc02 	.word	0xfffffc02
 8008720:	7ff00000 	.word	0x7ff00000
 8008724:	39500000 	.word	0x39500000
 8008728:	000fffff 	.word	0x000fffff
 800872c:	7fefffff 	.word	0x7fefffff
 8008730:	0800ba68 	.word	0x0800ba68
 8008734:	4631      	mov	r1, r6
 8008736:	4628      	mov	r0, r5
 8008738:	f002 f832 	bl	800a7a0 <__ratio>
 800873c:	ec59 8b10 	vmov	r8, r9, d0
 8008740:	ee10 0a10 	vmov	r0, s0
 8008744:	2200      	movs	r2, #0
 8008746:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 800874a:	4649      	mov	r1, r9
 800874c:	f7f8 f9d0 	bl	8000af0 <__aeabi_dcmple>
 8008750:	2800      	cmp	r0, #0
 8008752:	d07a      	beq.n	800884a <_strtod_l+0xa8a>
 8008754:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8008756:	2b00      	cmp	r3, #0
 8008758:	d04a      	beq.n	80087f0 <_strtod_l+0xa30>
 800875a:	4b95      	ldr	r3, [pc, #596]	; (80089b0 <_strtod_l+0xbf0>)
 800875c:	2200      	movs	r2, #0
 800875e:	e9cd 2308 	strd	r2, r3, [sp, #32]
 8008762:	f8df 924c 	ldr.w	r9, [pc, #588]	; 80089b0 <_strtod_l+0xbf0>
 8008766:	f04f 0800 	mov.w	r8, #0
 800876a:	4b92      	ldr	r3, [pc, #584]	; (80089b4 <_strtod_l+0xbf4>)
 800876c:	403b      	ands	r3, r7
 800876e:	930d      	str	r3, [sp, #52]	; 0x34
 8008770:	9a0d      	ldr	r2, [sp, #52]	; 0x34
 8008772:	4b91      	ldr	r3, [pc, #580]	; (80089b8 <_strtod_l+0xbf8>)
 8008774:	429a      	cmp	r2, r3
 8008776:	f040 80b0 	bne.w	80088da <_strtod_l+0xb1a>
 800877a:	e9dd 0108 	ldrd	r0, r1, [sp, #32]
 800877e:	f1a7 7b54 	sub.w	fp, r7, #55574528	; 0x3500000
 8008782:	ec4b ab10 	vmov	d0, sl, fp
 8008786:	e9cd 0108 	strd	r0, r1, [sp, #32]
 800878a:	f001 ff31 	bl	800a5f0 <__ulp>
 800878e:	e9dd 0108 	ldrd	r0, r1, [sp, #32]
 8008792:	ec53 2b10 	vmov	r2, r3, d0
 8008796:	f7f7 ff2f 	bl	80005f8 <__aeabi_dmul>
 800879a:	4652      	mov	r2, sl
 800879c:	465b      	mov	r3, fp
 800879e:	f7f7 fd75 	bl	800028c <__adddf3>
 80087a2:	460b      	mov	r3, r1
 80087a4:	4983      	ldr	r1, [pc, #524]	; (80089b4 <_strtod_l+0xbf4>)
 80087a6:	4a85      	ldr	r2, [pc, #532]	; (80089bc <_strtod_l+0xbfc>)
 80087a8:	4019      	ands	r1, r3
 80087aa:	4291      	cmp	r1, r2
 80087ac:	4682      	mov	sl, r0
 80087ae:	d960      	bls.n	8008872 <_strtod_l+0xab2>
 80087b0:	ee18 3a90 	vmov	r3, s17
 80087b4:	f102 7254 	add.w	r2, r2, #55574528	; 0x3500000
 80087b8:	4293      	cmp	r3, r2
 80087ba:	d104      	bne.n	80087c6 <_strtod_l+0xa06>
 80087bc:	ee18 3a10 	vmov	r3, s16
 80087c0:	3301      	adds	r3, #1
 80087c2:	f43f ad45 	beq.w	8008250 <_strtod_l+0x490>
 80087c6:	f8df b200 	ldr.w	fp, [pc, #512]	; 80089c8 <_strtod_l+0xc08>
 80087ca:	f04f 3aff 	mov.w	sl, #4294967295
 80087ce:	9918      	ldr	r1, [sp, #96]	; 0x60
 80087d0:	4620      	mov	r0, r4
 80087d2:	f001 fbdb 	bl	8009f8c <_Bfree>
 80087d6:	9905      	ldr	r1, [sp, #20]
 80087d8:	4620      	mov	r0, r4
 80087da:	f001 fbd7 	bl	8009f8c <_Bfree>
 80087de:	4631      	mov	r1, r6
 80087e0:	4620      	mov	r0, r4
 80087e2:	f001 fbd3 	bl	8009f8c <_Bfree>
 80087e6:	4629      	mov	r1, r5
 80087e8:	4620      	mov	r0, r4
 80087ea:	f001 fbcf 	bl	8009f8c <_Bfree>
 80087ee:	e61a      	b.n	8008426 <_strtod_l+0x666>
 80087f0:	f1ba 0f00 	cmp.w	sl, #0
 80087f4:	d11b      	bne.n	800882e <_strtod_l+0xa6e>
 80087f6:	f3cb 0313 	ubfx	r3, fp, #0, #20
 80087fa:	b9f3      	cbnz	r3, 800883a <_strtod_l+0xa7a>
 80087fc:	4b6c      	ldr	r3, [pc, #432]	; (80089b0 <_strtod_l+0xbf0>)
 80087fe:	2200      	movs	r2, #0
 8008800:	4640      	mov	r0, r8
 8008802:	4649      	mov	r1, r9
 8008804:	f7f8 f96a 	bl	8000adc <__aeabi_dcmplt>
 8008808:	b9d0      	cbnz	r0, 8008840 <_strtod_l+0xa80>
 800880a:	4640      	mov	r0, r8
 800880c:	4649      	mov	r1, r9
 800880e:	4b6c      	ldr	r3, [pc, #432]	; (80089c0 <_strtod_l+0xc00>)
 8008810:	2200      	movs	r2, #0
 8008812:	f7f7 fef1 	bl	80005f8 <__aeabi_dmul>
 8008816:	4680      	mov	r8, r0
 8008818:	4689      	mov	r9, r1
 800881a:	f109 4300 	add.w	r3, r9, #2147483648	; 0x80000000
 800881e:	f8cd 8050 	str.w	r8, [sp, #80]	; 0x50
 8008822:	9315      	str	r3, [sp, #84]	; 0x54
 8008824:	e9dd 2314 	ldrd	r2, r3, [sp, #80]	; 0x50
 8008828:	e9cd 2308 	strd	r2, r3, [sp, #32]
 800882c:	e79d      	b.n	800876a <_strtod_l+0x9aa>
 800882e:	f1ba 0f01 	cmp.w	sl, #1
 8008832:	d102      	bne.n	800883a <_strtod_l+0xa7a>
 8008834:	2f00      	cmp	r7, #0
 8008836:	f43f ad83 	beq.w	8008340 <_strtod_l+0x580>
 800883a:	4b62      	ldr	r3, [pc, #392]	; (80089c4 <_strtod_l+0xc04>)
 800883c:	2200      	movs	r2, #0
 800883e:	e78e      	b.n	800875e <_strtod_l+0x99e>
 8008840:	f8df 917c 	ldr.w	r9, [pc, #380]	; 80089c0 <_strtod_l+0xc00>
 8008844:	f04f 0800 	mov.w	r8, #0
 8008848:	e7e7      	b.n	800881a <_strtod_l+0xa5a>
 800884a:	4b5d      	ldr	r3, [pc, #372]	; (80089c0 <_strtod_l+0xc00>)
 800884c:	4640      	mov	r0, r8
 800884e:	4649      	mov	r1, r9
 8008850:	2200      	movs	r2, #0
 8008852:	f7f7 fed1 	bl	80005f8 <__aeabi_dmul>
 8008856:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8008858:	4680      	mov	r8, r0
 800885a:	4689      	mov	r9, r1
 800885c:	b933      	cbnz	r3, 800886c <_strtod_l+0xaac>
 800885e:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
 8008862:	900e      	str	r0, [sp, #56]	; 0x38
 8008864:	930f      	str	r3, [sp, #60]	; 0x3c
 8008866:	e9dd 230e 	ldrd	r2, r3, [sp, #56]	; 0x38
 800886a:	e7dd      	b.n	8008828 <_strtod_l+0xa68>
 800886c:	e9cd 890e 	strd	r8, r9, [sp, #56]	; 0x38
 8008870:	e7f9      	b.n	8008866 <_strtod_l+0xaa6>
 8008872:	f103 7b54 	add.w	fp, r3, #55574528	; 0x3500000
 8008876:	9b04      	ldr	r3, [sp, #16]
 8008878:	2b00      	cmp	r3, #0
 800887a:	d1a8      	bne.n	80087ce <_strtod_l+0xa0e>
 800887c:	f02b 4300 	bic.w	r3, fp, #2147483648	; 0x80000000
 8008880:	9a0d      	ldr	r2, [sp, #52]	; 0x34
 8008882:	0d1b      	lsrs	r3, r3, #20
 8008884:	051b      	lsls	r3, r3, #20
 8008886:	429a      	cmp	r2, r3
 8008888:	d1a1      	bne.n	80087ce <_strtod_l+0xa0e>
 800888a:	4640      	mov	r0, r8
 800888c:	4649      	mov	r1, r9
 800888e:	f7f8 fa13 	bl	8000cb8 <__aeabi_d2lz>
 8008892:	f7f7 fe83 	bl	800059c <__aeabi_l2d>
 8008896:	4602      	mov	r2, r0
 8008898:	460b      	mov	r3, r1
 800889a:	4640      	mov	r0, r8
 800889c:	4649      	mov	r1, r9
 800889e:	f7f7 fcf3 	bl	8000288 <__aeabi_dsub>
 80088a2:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
 80088a4:	f3cb 0313 	ubfx	r3, fp, #0, #20
 80088a8:	ea43 030a 	orr.w	r3, r3, sl
 80088ac:	4313      	orrs	r3, r2
 80088ae:	4680      	mov	r8, r0
 80088b0:	4689      	mov	r9, r1
 80088b2:	d055      	beq.n	8008960 <_strtod_l+0xba0>
 80088b4:	a336      	add	r3, pc, #216	; (adr r3, 8008990 <_strtod_l+0xbd0>)
 80088b6:	e9d3 2300 	ldrd	r2, r3, [r3]
 80088ba:	f7f8 f90f 	bl	8000adc <__aeabi_dcmplt>
 80088be:	2800      	cmp	r0, #0
 80088c0:	f47f acd0 	bne.w	8008264 <_strtod_l+0x4a4>
 80088c4:	a334      	add	r3, pc, #208	; (adr r3, 8008998 <_strtod_l+0xbd8>)
 80088c6:	e9d3 2300 	ldrd	r2, r3, [r3]
 80088ca:	4640      	mov	r0, r8
 80088cc:	4649      	mov	r1, r9
 80088ce:	f7f8 f923 	bl	8000b18 <__aeabi_dcmpgt>
 80088d2:	2800      	cmp	r0, #0
 80088d4:	f43f af7b 	beq.w	80087ce <_strtod_l+0xa0e>
 80088d8:	e4c4      	b.n	8008264 <_strtod_l+0x4a4>
 80088da:	9b04      	ldr	r3, [sp, #16]
 80088dc:	b333      	cbz	r3, 800892c <_strtod_l+0xb6c>
 80088de:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 80088e0:	f1b3 6fd4 	cmp.w	r3, #111149056	; 0x6a00000
 80088e4:	d822      	bhi.n	800892c <_strtod_l+0xb6c>
 80088e6:	a32e      	add	r3, pc, #184	; (adr r3, 80089a0 <_strtod_l+0xbe0>)
 80088e8:	e9d3 2300 	ldrd	r2, r3, [r3]
 80088ec:	4640      	mov	r0, r8
 80088ee:	4649      	mov	r1, r9
 80088f0:	f7f8 f8fe 	bl	8000af0 <__aeabi_dcmple>
 80088f4:	b1a0      	cbz	r0, 8008920 <_strtod_l+0xb60>
 80088f6:	4649      	mov	r1, r9
 80088f8:	4640      	mov	r0, r8
 80088fa:	f7f8 f955 	bl	8000ba8 <__aeabi_d2uiz>
 80088fe:	2801      	cmp	r0, #1
 8008900:	bf38      	it	cc
 8008902:	2001      	movcc	r0, #1
 8008904:	f7f7 fdfe 	bl	8000504 <__aeabi_ui2d>
 8008908:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 800890a:	4680      	mov	r8, r0
 800890c:	4689      	mov	r9, r1
 800890e:	bb23      	cbnz	r3, 800895a <_strtod_l+0xb9a>
 8008910:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
 8008914:	9010      	str	r0, [sp, #64]	; 0x40
 8008916:	9311      	str	r3, [sp, #68]	; 0x44
 8008918:	e9dd 2310 	ldrd	r2, r3, [sp, #64]	; 0x40
 800891c:	e9cd 2308 	strd	r2, r3, [sp, #32]
 8008920:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8008922:	9a0d      	ldr	r2, [sp, #52]	; 0x34
 8008924:	f103 63d6 	add.w	r3, r3, #112197632	; 0x6b00000
 8008928:	1a9b      	subs	r3, r3, r2
 800892a:	9309      	str	r3, [sp, #36]	; 0x24
 800892c:	e9dd 0108 	ldrd	r0, r1, [sp, #32]
 8008930:	eeb0 0a48 	vmov.f32	s0, s16
 8008934:	eef0 0a68 	vmov.f32	s1, s17
 8008938:	e9cd 0108 	strd	r0, r1, [sp, #32]
 800893c:	f001 fe58 	bl	800a5f0 <__ulp>
 8008940:	e9dd 0108 	ldrd	r0, r1, [sp, #32]
 8008944:	ec53 2b10 	vmov	r2, r3, d0
 8008948:	f7f7 fe56 	bl	80005f8 <__aeabi_dmul>
 800894c:	ec53 2b18 	vmov	r2, r3, d8
 8008950:	f7f7 fc9c 	bl	800028c <__adddf3>
 8008954:	4682      	mov	sl, r0
 8008956:	468b      	mov	fp, r1
 8008958:	e78d      	b.n	8008876 <_strtod_l+0xab6>
 800895a:	e9cd 8910 	strd	r8, r9, [sp, #64]	; 0x40
 800895e:	e7db      	b.n	8008918 <_strtod_l+0xb58>
 8008960:	a311      	add	r3, pc, #68	; (adr r3, 80089a8 <_strtod_l+0xbe8>)
 8008962:	e9d3 2300 	ldrd	r2, r3, [r3]
 8008966:	f7f8 f8b9 	bl	8000adc <__aeabi_dcmplt>
 800896a:	e7b2      	b.n	80088d2 <_strtod_l+0xb12>
 800896c:	2300      	movs	r3, #0
 800896e:	930a      	str	r3, [sp, #40]	; 0x28
 8008970:	9a13      	ldr	r2, [sp, #76]	; 0x4c
 8008972:	9b17      	ldr	r3, [sp, #92]	; 0x5c
 8008974:	6013      	str	r3, [r2, #0]
 8008976:	f7ff ba6b 	b.w	8007e50 <_strtod_l+0x90>
 800897a:	2a65      	cmp	r2, #101	; 0x65
 800897c:	f43f ab5f 	beq.w	800803e <_strtod_l+0x27e>
 8008980:	2a45      	cmp	r2, #69	; 0x45
 8008982:	f43f ab5c 	beq.w	800803e <_strtod_l+0x27e>
 8008986:	2301      	movs	r3, #1
 8008988:	f7ff bb94 	b.w	80080b4 <_strtod_l+0x2f4>
 800898c:	f3af 8000 	nop.w
 8008990:	94a03595 	.word	0x94a03595
 8008994:	3fdfffff 	.word	0x3fdfffff
 8008998:	35afe535 	.word	0x35afe535
 800899c:	3fe00000 	.word	0x3fe00000
 80089a0:	ffc00000 	.word	0xffc00000
 80089a4:	41dfffff 	.word	0x41dfffff
 80089a8:	94a03595 	.word	0x94a03595
 80089ac:	3fcfffff 	.word	0x3fcfffff
 80089b0:	3ff00000 	.word	0x3ff00000
 80089b4:	7ff00000 	.word	0x7ff00000
 80089b8:	7fe00000 	.word	0x7fe00000
 80089bc:	7c9fffff 	.word	0x7c9fffff
 80089c0:	3fe00000 	.word	0x3fe00000
 80089c4:	bff00000 	.word	0xbff00000
 80089c8:	7fefffff 	.word	0x7fefffff

080089cc <_strtod_r>:
 80089cc:	4b01      	ldr	r3, [pc, #4]	; (80089d4 <_strtod_r+0x8>)
 80089ce:	f7ff b9f7 	b.w	8007dc0 <_strtod_l>
 80089d2:	bf00      	nop
 80089d4:	20000074 	.word	0x20000074

080089d8 <_strtol_l.constprop.0>:
 80089d8:	2b01      	cmp	r3, #1
 80089da:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80089de:	d001      	beq.n	80089e4 <_strtol_l.constprop.0+0xc>
 80089e0:	2b24      	cmp	r3, #36	; 0x24
 80089e2:	d906      	bls.n	80089f2 <_strtol_l.constprop.0+0x1a>
 80089e4:	f7fe fac8 	bl	8006f78 <__errno>
 80089e8:	2316      	movs	r3, #22
 80089ea:	6003      	str	r3, [r0, #0]
 80089ec:	2000      	movs	r0, #0
 80089ee:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80089f2:	f8df c0e4 	ldr.w	ip, [pc, #228]	; 8008ad8 <_strtol_l.constprop.0+0x100>
 80089f6:	460d      	mov	r5, r1
 80089f8:	462e      	mov	r6, r5
 80089fa:	f815 4b01 	ldrb.w	r4, [r5], #1
 80089fe:	f814 700c 	ldrb.w	r7, [r4, ip]
 8008a02:	f017 0708 	ands.w	r7, r7, #8
 8008a06:	d1f7      	bne.n	80089f8 <_strtol_l.constprop.0+0x20>
 8008a08:	2c2d      	cmp	r4, #45	; 0x2d
 8008a0a:	d132      	bne.n	8008a72 <_strtol_l.constprop.0+0x9a>
 8008a0c:	782c      	ldrb	r4, [r5, #0]
 8008a0e:	2701      	movs	r7, #1
 8008a10:	1cb5      	adds	r5, r6, #2
 8008a12:	2b00      	cmp	r3, #0
 8008a14:	d05b      	beq.n	8008ace <_strtol_l.constprop.0+0xf6>
 8008a16:	2b10      	cmp	r3, #16
 8008a18:	d109      	bne.n	8008a2e <_strtol_l.constprop.0+0x56>
 8008a1a:	2c30      	cmp	r4, #48	; 0x30
 8008a1c:	d107      	bne.n	8008a2e <_strtol_l.constprop.0+0x56>
 8008a1e:	782c      	ldrb	r4, [r5, #0]
 8008a20:	f004 04df 	and.w	r4, r4, #223	; 0xdf
 8008a24:	2c58      	cmp	r4, #88	; 0x58
 8008a26:	d14d      	bne.n	8008ac4 <_strtol_l.constprop.0+0xec>
 8008a28:	786c      	ldrb	r4, [r5, #1]
 8008a2a:	2310      	movs	r3, #16
 8008a2c:	3502      	adds	r5, #2
 8008a2e:	f107 4800 	add.w	r8, r7, #2147483648	; 0x80000000
 8008a32:	f108 38ff 	add.w	r8, r8, #4294967295
 8008a36:	f04f 0c00 	mov.w	ip, #0
 8008a3a:	fbb8 f9f3 	udiv	r9, r8, r3
 8008a3e:	4666      	mov	r6, ip
 8008a40:	fb03 8a19 	mls	sl, r3, r9, r8
 8008a44:	f1a4 0e30 	sub.w	lr, r4, #48	; 0x30
 8008a48:	f1be 0f09 	cmp.w	lr, #9
 8008a4c:	d816      	bhi.n	8008a7c <_strtol_l.constprop.0+0xa4>
 8008a4e:	4674      	mov	r4, lr
 8008a50:	42a3      	cmp	r3, r4
 8008a52:	dd24      	ble.n	8008a9e <_strtol_l.constprop.0+0xc6>
 8008a54:	f1bc 0f00 	cmp.w	ip, #0
 8008a58:	db1e      	blt.n	8008a98 <_strtol_l.constprop.0+0xc0>
 8008a5a:	45b1      	cmp	r9, r6
 8008a5c:	d31c      	bcc.n	8008a98 <_strtol_l.constprop.0+0xc0>
 8008a5e:	d101      	bne.n	8008a64 <_strtol_l.constprop.0+0x8c>
 8008a60:	45a2      	cmp	sl, r4
 8008a62:	db19      	blt.n	8008a98 <_strtol_l.constprop.0+0xc0>
 8008a64:	fb06 4603 	mla	r6, r6, r3, r4
 8008a68:	f04f 0c01 	mov.w	ip, #1
 8008a6c:	f815 4b01 	ldrb.w	r4, [r5], #1
 8008a70:	e7e8      	b.n	8008a44 <_strtol_l.constprop.0+0x6c>
 8008a72:	2c2b      	cmp	r4, #43	; 0x2b
 8008a74:	bf04      	itt	eq
 8008a76:	782c      	ldrbeq	r4, [r5, #0]
 8008a78:	1cb5      	addeq	r5, r6, #2
 8008a7a:	e7ca      	b.n	8008a12 <_strtol_l.constprop.0+0x3a>
 8008a7c:	f1a4 0e41 	sub.w	lr, r4, #65	; 0x41
 8008a80:	f1be 0f19 	cmp.w	lr, #25
 8008a84:	d801      	bhi.n	8008a8a <_strtol_l.constprop.0+0xb2>
 8008a86:	3c37      	subs	r4, #55	; 0x37
 8008a88:	e7e2      	b.n	8008a50 <_strtol_l.constprop.0+0x78>
 8008a8a:	f1a4 0e61 	sub.w	lr, r4, #97	; 0x61
 8008a8e:	f1be 0f19 	cmp.w	lr, #25
 8008a92:	d804      	bhi.n	8008a9e <_strtol_l.constprop.0+0xc6>
 8008a94:	3c57      	subs	r4, #87	; 0x57
 8008a96:	e7db      	b.n	8008a50 <_strtol_l.constprop.0+0x78>
 8008a98:	f04f 3cff 	mov.w	ip, #4294967295
 8008a9c:	e7e6      	b.n	8008a6c <_strtol_l.constprop.0+0x94>
 8008a9e:	f1bc 0f00 	cmp.w	ip, #0
 8008aa2:	da05      	bge.n	8008ab0 <_strtol_l.constprop.0+0xd8>
 8008aa4:	2322      	movs	r3, #34	; 0x22
 8008aa6:	6003      	str	r3, [r0, #0]
 8008aa8:	4646      	mov	r6, r8
 8008aaa:	b942      	cbnz	r2, 8008abe <_strtol_l.constprop.0+0xe6>
 8008aac:	4630      	mov	r0, r6
 8008aae:	e79e      	b.n	80089ee <_strtol_l.constprop.0+0x16>
 8008ab0:	b107      	cbz	r7, 8008ab4 <_strtol_l.constprop.0+0xdc>
 8008ab2:	4276      	negs	r6, r6
 8008ab4:	2a00      	cmp	r2, #0
 8008ab6:	d0f9      	beq.n	8008aac <_strtol_l.constprop.0+0xd4>
 8008ab8:	f1bc 0f00 	cmp.w	ip, #0
 8008abc:	d000      	beq.n	8008ac0 <_strtol_l.constprop.0+0xe8>
 8008abe:	1e69      	subs	r1, r5, #1
 8008ac0:	6011      	str	r1, [r2, #0]
 8008ac2:	e7f3      	b.n	8008aac <_strtol_l.constprop.0+0xd4>
 8008ac4:	2430      	movs	r4, #48	; 0x30
 8008ac6:	2b00      	cmp	r3, #0
 8008ac8:	d1b1      	bne.n	8008a2e <_strtol_l.constprop.0+0x56>
 8008aca:	2308      	movs	r3, #8
 8008acc:	e7af      	b.n	8008a2e <_strtol_l.constprop.0+0x56>
 8008ace:	2c30      	cmp	r4, #48	; 0x30
 8008ad0:	d0a5      	beq.n	8008a1e <_strtol_l.constprop.0+0x46>
 8008ad2:	230a      	movs	r3, #10
 8008ad4:	e7ab      	b.n	8008a2e <_strtol_l.constprop.0+0x56>
 8008ad6:	bf00      	nop
 8008ad8:	0800ba91 	.word	0x0800ba91

08008adc <_strtol_r>:
 8008adc:	f7ff bf7c 	b.w	80089d8 <_strtol_l.constprop.0>

08008ae0 <quorem>:
 8008ae0:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8008ae4:	6903      	ldr	r3, [r0, #16]
 8008ae6:	690c      	ldr	r4, [r1, #16]
 8008ae8:	42a3      	cmp	r3, r4
 8008aea:	4607      	mov	r7, r0
 8008aec:	f2c0 8081 	blt.w	8008bf2 <quorem+0x112>
 8008af0:	3c01      	subs	r4, #1
 8008af2:	f101 0814 	add.w	r8, r1, #20
 8008af6:	f100 0514 	add.w	r5, r0, #20
 8008afa:	eb05 0384 	add.w	r3, r5, r4, lsl #2
 8008afe:	9301      	str	r3, [sp, #4]
 8008b00:	f858 3024 	ldr.w	r3, [r8, r4, lsl #2]
 8008b04:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
 8008b08:	3301      	adds	r3, #1
 8008b0a:	429a      	cmp	r2, r3
 8008b0c:	ea4f 0b84 	mov.w	fp, r4, lsl #2
 8008b10:	eb08 0984 	add.w	r9, r8, r4, lsl #2
 8008b14:	fbb2 f6f3 	udiv	r6, r2, r3
 8008b18:	d331      	bcc.n	8008b7e <quorem+0x9e>
 8008b1a:	f04f 0e00 	mov.w	lr, #0
 8008b1e:	4640      	mov	r0, r8
 8008b20:	46ac      	mov	ip, r5
 8008b22:	46f2      	mov	sl, lr
 8008b24:	f850 2b04 	ldr.w	r2, [r0], #4
 8008b28:	b293      	uxth	r3, r2
 8008b2a:	fb06 e303 	mla	r3, r6, r3, lr
 8008b2e:	ea4f 4e13 	mov.w	lr, r3, lsr #16
 8008b32:	b29b      	uxth	r3, r3
 8008b34:	ebaa 0303 	sub.w	r3, sl, r3
 8008b38:	f8dc a000 	ldr.w	sl, [ip]
 8008b3c:	0c12      	lsrs	r2, r2, #16
 8008b3e:	fa13 f38a 	uxtah	r3, r3, sl
 8008b42:	fb06 e202 	mla	r2, r6, r2, lr
 8008b46:	9300      	str	r3, [sp, #0]
 8008b48:	9b00      	ldr	r3, [sp, #0]
 8008b4a:	ea4f 4e12 	mov.w	lr, r2, lsr #16
 8008b4e:	b292      	uxth	r2, r2
 8008b50:	ebc2 421a 	rsb	r2, r2, sl, lsr #16
 8008b54:	eb02 4223 	add.w	r2, r2, r3, asr #16
 8008b58:	f8bd 3000 	ldrh.w	r3, [sp]
 8008b5c:	4581      	cmp	r9, r0
 8008b5e:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 8008b62:	f84c 3b04 	str.w	r3, [ip], #4
 8008b66:	ea4f 4a22 	mov.w	sl, r2, asr #16
 8008b6a:	d2db      	bcs.n	8008b24 <quorem+0x44>
 8008b6c:	f855 300b 	ldr.w	r3, [r5, fp]
 8008b70:	b92b      	cbnz	r3, 8008b7e <quorem+0x9e>
 8008b72:	9b01      	ldr	r3, [sp, #4]
 8008b74:	3b04      	subs	r3, #4
 8008b76:	429d      	cmp	r5, r3
 8008b78:	461a      	mov	r2, r3
 8008b7a:	d32e      	bcc.n	8008bda <quorem+0xfa>
 8008b7c:	613c      	str	r4, [r7, #16]
 8008b7e:	4638      	mov	r0, r7
 8008b80:	f001 fc90 	bl	800a4a4 <__mcmp>
 8008b84:	2800      	cmp	r0, #0
 8008b86:	db24      	blt.n	8008bd2 <quorem+0xf2>
 8008b88:	3601      	adds	r6, #1
 8008b8a:	4628      	mov	r0, r5
 8008b8c:	f04f 0c00 	mov.w	ip, #0
 8008b90:	f858 2b04 	ldr.w	r2, [r8], #4
 8008b94:	f8d0 e000 	ldr.w	lr, [r0]
 8008b98:	b293      	uxth	r3, r2
 8008b9a:	ebac 0303 	sub.w	r3, ip, r3
 8008b9e:	0c12      	lsrs	r2, r2, #16
 8008ba0:	fa13 f38e 	uxtah	r3, r3, lr
 8008ba4:	ebc2 421e 	rsb	r2, r2, lr, lsr #16
 8008ba8:	eb02 4223 	add.w	r2, r2, r3, asr #16
 8008bac:	b29b      	uxth	r3, r3
 8008bae:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 8008bb2:	45c1      	cmp	r9, r8
 8008bb4:	f840 3b04 	str.w	r3, [r0], #4
 8008bb8:	ea4f 4c22 	mov.w	ip, r2, asr #16
 8008bbc:	d2e8      	bcs.n	8008b90 <quorem+0xb0>
 8008bbe:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
 8008bc2:	eb05 0384 	add.w	r3, r5, r4, lsl #2
 8008bc6:	b922      	cbnz	r2, 8008bd2 <quorem+0xf2>
 8008bc8:	3b04      	subs	r3, #4
 8008bca:	429d      	cmp	r5, r3
 8008bcc:	461a      	mov	r2, r3
 8008bce:	d30a      	bcc.n	8008be6 <quorem+0x106>
 8008bd0:	613c      	str	r4, [r7, #16]
 8008bd2:	4630      	mov	r0, r6
 8008bd4:	b003      	add	sp, #12
 8008bd6:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8008bda:	6812      	ldr	r2, [r2, #0]
 8008bdc:	3b04      	subs	r3, #4
 8008bde:	2a00      	cmp	r2, #0
 8008be0:	d1cc      	bne.n	8008b7c <quorem+0x9c>
 8008be2:	3c01      	subs	r4, #1
 8008be4:	e7c7      	b.n	8008b76 <quorem+0x96>
 8008be6:	6812      	ldr	r2, [r2, #0]
 8008be8:	3b04      	subs	r3, #4
 8008bea:	2a00      	cmp	r2, #0
 8008bec:	d1f0      	bne.n	8008bd0 <quorem+0xf0>
 8008bee:	3c01      	subs	r4, #1
 8008bf0:	e7eb      	b.n	8008bca <quorem+0xea>
 8008bf2:	2000      	movs	r0, #0
 8008bf4:	e7ee      	b.n	8008bd4 <quorem+0xf4>
	...

08008bf8 <_dtoa_r>:
 8008bf8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8008bfc:	ed2d 8b04 	vpush	{d8-d9}
 8008c00:	ec57 6b10 	vmov	r6, r7, d0
 8008c04:	b093      	sub	sp, #76	; 0x4c
 8008c06:	6a45      	ldr	r5, [r0, #36]	; 0x24
 8008c08:	f8dd 8080 	ldr.w	r8, [sp, #128]	; 0x80
 8008c0c:	9106      	str	r1, [sp, #24]
 8008c0e:	ee10 aa10 	vmov	sl, s0
 8008c12:	4604      	mov	r4, r0
 8008c14:	9209      	str	r2, [sp, #36]	; 0x24
 8008c16:	930c      	str	r3, [sp, #48]	; 0x30
 8008c18:	46bb      	mov	fp, r7
 8008c1a:	b975      	cbnz	r5, 8008c3a <_dtoa_r+0x42>
 8008c1c:	2010      	movs	r0, #16
 8008c1e:	f001 f94d 	bl	8009ebc <malloc>
 8008c22:	4602      	mov	r2, r0
 8008c24:	6260      	str	r0, [r4, #36]	; 0x24
 8008c26:	b920      	cbnz	r0, 8008c32 <_dtoa_r+0x3a>
 8008c28:	4ba7      	ldr	r3, [pc, #668]	; (8008ec8 <_dtoa_r+0x2d0>)
 8008c2a:	21ea      	movs	r1, #234	; 0xea
 8008c2c:	48a7      	ldr	r0, [pc, #668]	; (8008ecc <_dtoa_r+0x2d4>)
 8008c2e:	f002 f8bd 	bl	800adac <__assert_func>
 8008c32:	e9c0 5501 	strd	r5, r5, [r0, #4]
 8008c36:	6005      	str	r5, [r0, #0]
 8008c38:	60c5      	str	r5, [r0, #12]
 8008c3a:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8008c3c:	6819      	ldr	r1, [r3, #0]
 8008c3e:	b151      	cbz	r1, 8008c56 <_dtoa_r+0x5e>
 8008c40:	685a      	ldr	r2, [r3, #4]
 8008c42:	604a      	str	r2, [r1, #4]
 8008c44:	2301      	movs	r3, #1
 8008c46:	4093      	lsls	r3, r2
 8008c48:	608b      	str	r3, [r1, #8]
 8008c4a:	4620      	mov	r0, r4
 8008c4c:	f001 f99e 	bl	8009f8c <_Bfree>
 8008c50:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8008c52:	2200      	movs	r2, #0
 8008c54:	601a      	str	r2, [r3, #0]
 8008c56:	1e3b      	subs	r3, r7, #0
 8008c58:	bfaa      	itet	ge
 8008c5a:	2300      	movge	r3, #0
 8008c5c:	f023 4b00 	biclt.w	fp, r3, #2147483648	; 0x80000000
 8008c60:	f8c8 3000 	strge.w	r3, [r8]
 8008c64:	4b9a      	ldr	r3, [pc, #616]	; (8008ed0 <_dtoa_r+0x2d8>)
 8008c66:	bfbc      	itt	lt
 8008c68:	2201      	movlt	r2, #1
 8008c6a:	f8c8 2000 	strlt.w	r2, [r8]
 8008c6e:	ea33 030b 	bics.w	r3, r3, fp
 8008c72:	d11b      	bne.n	8008cac <_dtoa_r+0xb4>
 8008c74:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 8008c76:	f242 730f 	movw	r3, #9999	; 0x270f
 8008c7a:	6013      	str	r3, [r2, #0]
 8008c7c:	f3cb 0313 	ubfx	r3, fp, #0, #20
 8008c80:	4333      	orrs	r3, r6
 8008c82:	f000 8592 	beq.w	80097aa <_dtoa_r+0xbb2>
 8008c86:	9b21      	ldr	r3, [sp, #132]	; 0x84
 8008c88:	b963      	cbnz	r3, 8008ca4 <_dtoa_r+0xac>
 8008c8a:	4b92      	ldr	r3, [pc, #584]	; (8008ed4 <_dtoa_r+0x2dc>)
 8008c8c:	e022      	b.n	8008cd4 <_dtoa_r+0xdc>
 8008c8e:	4b92      	ldr	r3, [pc, #584]	; (8008ed8 <_dtoa_r+0x2e0>)
 8008c90:	9301      	str	r3, [sp, #4]
 8008c92:	3308      	adds	r3, #8
 8008c94:	9a21      	ldr	r2, [sp, #132]	; 0x84
 8008c96:	6013      	str	r3, [r2, #0]
 8008c98:	9801      	ldr	r0, [sp, #4]
 8008c9a:	b013      	add	sp, #76	; 0x4c
 8008c9c:	ecbd 8b04 	vpop	{d8-d9}
 8008ca0:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8008ca4:	4b8b      	ldr	r3, [pc, #556]	; (8008ed4 <_dtoa_r+0x2dc>)
 8008ca6:	9301      	str	r3, [sp, #4]
 8008ca8:	3303      	adds	r3, #3
 8008caa:	e7f3      	b.n	8008c94 <_dtoa_r+0x9c>
 8008cac:	2200      	movs	r2, #0
 8008cae:	2300      	movs	r3, #0
 8008cb0:	4650      	mov	r0, sl
 8008cb2:	4659      	mov	r1, fp
 8008cb4:	f7f7 ff08 	bl	8000ac8 <__aeabi_dcmpeq>
 8008cb8:	ec4b ab19 	vmov	d9, sl, fp
 8008cbc:	4680      	mov	r8, r0
 8008cbe:	b158      	cbz	r0, 8008cd8 <_dtoa_r+0xe0>
 8008cc0:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 8008cc2:	2301      	movs	r3, #1
 8008cc4:	6013      	str	r3, [r2, #0]
 8008cc6:	9b21      	ldr	r3, [sp, #132]	; 0x84
 8008cc8:	2b00      	cmp	r3, #0
 8008cca:	f000 856b 	beq.w	80097a4 <_dtoa_r+0xbac>
 8008cce:	4883      	ldr	r0, [pc, #524]	; (8008edc <_dtoa_r+0x2e4>)
 8008cd0:	6018      	str	r0, [r3, #0]
 8008cd2:	1e43      	subs	r3, r0, #1
 8008cd4:	9301      	str	r3, [sp, #4]
 8008cd6:	e7df      	b.n	8008c98 <_dtoa_r+0xa0>
 8008cd8:	ec4b ab10 	vmov	d0, sl, fp
 8008cdc:	aa10      	add	r2, sp, #64	; 0x40
 8008cde:	a911      	add	r1, sp, #68	; 0x44
 8008ce0:	4620      	mov	r0, r4
 8008ce2:	f001 fd01 	bl	800a6e8 <__d2b>
 8008ce6:	f3cb 550a 	ubfx	r5, fp, #20, #11
 8008cea:	ee08 0a10 	vmov	s16, r0
 8008cee:	2d00      	cmp	r5, #0
 8008cf0:	f000 8084 	beq.w	8008dfc <_dtoa_r+0x204>
 8008cf4:	ee19 3a90 	vmov	r3, s19
 8008cf8:	f3c3 0313 	ubfx	r3, r3, #0, #20
 8008cfc:	f043 577f 	orr.w	r7, r3, #1069547520	; 0x3fc00000
 8008d00:	4656      	mov	r6, sl
 8008d02:	f447 1740 	orr.w	r7, r7, #3145728	; 0x300000
 8008d06:	f2a5 35ff 	subw	r5, r5, #1023	; 0x3ff
 8008d0a:	f8cd 8038 	str.w	r8, [sp, #56]	; 0x38
 8008d0e:	4b74      	ldr	r3, [pc, #464]	; (8008ee0 <_dtoa_r+0x2e8>)
 8008d10:	2200      	movs	r2, #0
 8008d12:	4630      	mov	r0, r6
 8008d14:	4639      	mov	r1, r7
 8008d16:	f7f7 fab7 	bl	8000288 <__aeabi_dsub>
 8008d1a:	a365      	add	r3, pc, #404	; (adr r3, 8008eb0 <_dtoa_r+0x2b8>)
 8008d1c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8008d20:	f7f7 fc6a 	bl	80005f8 <__aeabi_dmul>
 8008d24:	a364      	add	r3, pc, #400	; (adr r3, 8008eb8 <_dtoa_r+0x2c0>)
 8008d26:	e9d3 2300 	ldrd	r2, r3, [r3]
 8008d2a:	f7f7 faaf 	bl	800028c <__adddf3>
 8008d2e:	4606      	mov	r6, r0
 8008d30:	4628      	mov	r0, r5
 8008d32:	460f      	mov	r7, r1
 8008d34:	f7f7 fbf6 	bl	8000524 <__aeabi_i2d>
 8008d38:	a361      	add	r3, pc, #388	; (adr r3, 8008ec0 <_dtoa_r+0x2c8>)
 8008d3a:	e9d3 2300 	ldrd	r2, r3, [r3]
 8008d3e:	f7f7 fc5b 	bl	80005f8 <__aeabi_dmul>
 8008d42:	4602      	mov	r2, r0
 8008d44:	460b      	mov	r3, r1
 8008d46:	4630      	mov	r0, r6
 8008d48:	4639      	mov	r1, r7
 8008d4a:	f7f7 fa9f 	bl	800028c <__adddf3>
 8008d4e:	4606      	mov	r6, r0
 8008d50:	460f      	mov	r7, r1
 8008d52:	f7f7 ff01 	bl	8000b58 <__aeabi_d2iz>
 8008d56:	2200      	movs	r2, #0
 8008d58:	9000      	str	r0, [sp, #0]
 8008d5a:	2300      	movs	r3, #0
 8008d5c:	4630      	mov	r0, r6
 8008d5e:	4639      	mov	r1, r7
 8008d60:	f7f7 febc 	bl	8000adc <__aeabi_dcmplt>
 8008d64:	b150      	cbz	r0, 8008d7c <_dtoa_r+0x184>
 8008d66:	9800      	ldr	r0, [sp, #0]
 8008d68:	f7f7 fbdc 	bl	8000524 <__aeabi_i2d>
 8008d6c:	4632      	mov	r2, r6
 8008d6e:	463b      	mov	r3, r7
 8008d70:	f7f7 feaa 	bl	8000ac8 <__aeabi_dcmpeq>
 8008d74:	b910      	cbnz	r0, 8008d7c <_dtoa_r+0x184>
 8008d76:	9b00      	ldr	r3, [sp, #0]
 8008d78:	3b01      	subs	r3, #1
 8008d7a:	9300      	str	r3, [sp, #0]
 8008d7c:	9b00      	ldr	r3, [sp, #0]
 8008d7e:	2b16      	cmp	r3, #22
 8008d80:	d85a      	bhi.n	8008e38 <_dtoa_r+0x240>
 8008d82:	9a00      	ldr	r2, [sp, #0]
 8008d84:	4b57      	ldr	r3, [pc, #348]	; (8008ee4 <_dtoa_r+0x2ec>)
 8008d86:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 8008d8a:	e9d3 2300 	ldrd	r2, r3, [r3]
 8008d8e:	ec51 0b19 	vmov	r0, r1, d9
 8008d92:	f7f7 fea3 	bl	8000adc <__aeabi_dcmplt>
 8008d96:	2800      	cmp	r0, #0
 8008d98:	d050      	beq.n	8008e3c <_dtoa_r+0x244>
 8008d9a:	9b00      	ldr	r3, [sp, #0]
 8008d9c:	3b01      	subs	r3, #1
 8008d9e:	9300      	str	r3, [sp, #0]
 8008da0:	2300      	movs	r3, #0
 8008da2:	930b      	str	r3, [sp, #44]	; 0x2c
 8008da4:	9b10      	ldr	r3, [sp, #64]	; 0x40
 8008da6:	1b5d      	subs	r5, r3, r5
 8008da8:	1e6b      	subs	r3, r5, #1
 8008daa:	9305      	str	r3, [sp, #20]
 8008dac:	bf45      	ittet	mi
 8008dae:	f1c5 0301 	rsbmi	r3, r5, #1
 8008db2:	9304      	strmi	r3, [sp, #16]
 8008db4:	2300      	movpl	r3, #0
 8008db6:	2300      	movmi	r3, #0
 8008db8:	bf4c      	ite	mi
 8008dba:	9305      	strmi	r3, [sp, #20]
 8008dbc:	9304      	strpl	r3, [sp, #16]
 8008dbe:	9b00      	ldr	r3, [sp, #0]
 8008dc0:	2b00      	cmp	r3, #0
 8008dc2:	db3d      	blt.n	8008e40 <_dtoa_r+0x248>
 8008dc4:	9b05      	ldr	r3, [sp, #20]
 8008dc6:	9a00      	ldr	r2, [sp, #0]
 8008dc8:	920a      	str	r2, [sp, #40]	; 0x28
 8008dca:	4413      	add	r3, r2
 8008dcc:	9305      	str	r3, [sp, #20]
 8008dce:	2300      	movs	r3, #0
 8008dd0:	9307      	str	r3, [sp, #28]
 8008dd2:	9b06      	ldr	r3, [sp, #24]
 8008dd4:	2b09      	cmp	r3, #9
 8008dd6:	f200 8089 	bhi.w	8008eec <_dtoa_r+0x2f4>
 8008dda:	2b05      	cmp	r3, #5
 8008ddc:	bfc4      	itt	gt
 8008dde:	3b04      	subgt	r3, #4
 8008de0:	9306      	strgt	r3, [sp, #24]
 8008de2:	9b06      	ldr	r3, [sp, #24]
 8008de4:	f1a3 0302 	sub.w	r3, r3, #2
 8008de8:	bfcc      	ite	gt
 8008dea:	2500      	movgt	r5, #0
 8008dec:	2501      	movle	r5, #1
 8008dee:	2b03      	cmp	r3, #3
 8008df0:	f200 8087 	bhi.w	8008f02 <_dtoa_r+0x30a>
 8008df4:	e8df f003 	tbb	[pc, r3]
 8008df8:	59383a2d 	.word	0x59383a2d
 8008dfc:	e9dd 5310 	ldrd	r5, r3, [sp, #64]	; 0x40
 8008e00:	441d      	add	r5, r3
 8008e02:	f205 4332 	addw	r3, r5, #1074	; 0x432
 8008e06:	2b20      	cmp	r3, #32
 8008e08:	bfc1      	itttt	gt
 8008e0a:	f1c3 0340 	rsbgt	r3, r3, #64	; 0x40
 8008e0e:	f205 4012 	addwgt	r0, r5, #1042	; 0x412
 8008e12:	fa0b f303 	lslgt.w	r3, fp, r3
 8008e16:	fa26 f000 	lsrgt.w	r0, r6, r0
 8008e1a:	bfda      	itte	le
 8008e1c:	f1c3 0320 	rsble	r3, r3, #32
 8008e20:	fa06 f003 	lslle.w	r0, r6, r3
 8008e24:	4318      	orrgt	r0, r3
 8008e26:	f7f7 fb6d 	bl	8000504 <__aeabi_ui2d>
 8008e2a:	2301      	movs	r3, #1
 8008e2c:	4606      	mov	r6, r0
 8008e2e:	f1a1 77f8 	sub.w	r7, r1, #32505856	; 0x1f00000
 8008e32:	3d01      	subs	r5, #1
 8008e34:	930e      	str	r3, [sp, #56]	; 0x38
 8008e36:	e76a      	b.n	8008d0e <_dtoa_r+0x116>
 8008e38:	2301      	movs	r3, #1
 8008e3a:	e7b2      	b.n	8008da2 <_dtoa_r+0x1aa>
 8008e3c:	900b      	str	r0, [sp, #44]	; 0x2c
 8008e3e:	e7b1      	b.n	8008da4 <_dtoa_r+0x1ac>
 8008e40:	9b04      	ldr	r3, [sp, #16]
 8008e42:	9a00      	ldr	r2, [sp, #0]
 8008e44:	1a9b      	subs	r3, r3, r2
 8008e46:	9304      	str	r3, [sp, #16]
 8008e48:	4253      	negs	r3, r2
 8008e4a:	9307      	str	r3, [sp, #28]
 8008e4c:	2300      	movs	r3, #0
 8008e4e:	930a      	str	r3, [sp, #40]	; 0x28
 8008e50:	e7bf      	b.n	8008dd2 <_dtoa_r+0x1da>
 8008e52:	2300      	movs	r3, #0
 8008e54:	9308      	str	r3, [sp, #32]
 8008e56:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8008e58:	2b00      	cmp	r3, #0
 8008e5a:	dc55      	bgt.n	8008f08 <_dtoa_r+0x310>
 8008e5c:	2301      	movs	r3, #1
 8008e5e:	e9cd 3302 	strd	r3, r3, [sp, #8]
 8008e62:	461a      	mov	r2, r3
 8008e64:	9209      	str	r2, [sp, #36]	; 0x24
 8008e66:	e00c      	b.n	8008e82 <_dtoa_r+0x28a>
 8008e68:	2301      	movs	r3, #1
 8008e6a:	e7f3      	b.n	8008e54 <_dtoa_r+0x25c>
 8008e6c:	2300      	movs	r3, #0
 8008e6e:	9a09      	ldr	r2, [sp, #36]	; 0x24
 8008e70:	9308      	str	r3, [sp, #32]
 8008e72:	9b00      	ldr	r3, [sp, #0]
 8008e74:	4413      	add	r3, r2
 8008e76:	9302      	str	r3, [sp, #8]
 8008e78:	3301      	adds	r3, #1
 8008e7a:	2b01      	cmp	r3, #1
 8008e7c:	9303      	str	r3, [sp, #12]
 8008e7e:	bfb8      	it	lt
 8008e80:	2301      	movlt	r3, #1
 8008e82:	6a60      	ldr	r0, [r4, #36]	; 0x24
 8008e84:	2200      	movs	r2, #0
 8008e86:	6042      	str	r2, [r0, #4]
 8008e88:	2204      	movs	r2, #4
 8008e8a:	f102 0614 	add.w	r6, r2, #20
 8008e8e:	429e      	cmp	r6, r3
 8008e90:	6841      	ldr	r1, [r0, #4]
 8008e92:	d93d      	bls.n	8008f10 <_dtoa_r+0x318>
 8008e94:	4620      	mov	r0, r4
 8008e96:	f001 f839 	bl	8009f0c <_Balloc>
 8008e9a:	9001      	str	r0, [sp, #4]
 8008e9c:	2800      	cmp	r0, #0
 8008e9e:	d13b      	bne.n	8008f18 <_dtoa_r+0x320>
 8008ea0:	4b11      	ldr	r3, [pc, #68]	; (8008ee8 <_dtoa_r+0x2f0>)
 8008ea2:	4602      	mov	r2, r0
 8008ea4:	f44f 71d5 	mov.w	r1, #426	; 0x1aa
 8008ea8:	e6c0      	b.n	8008c2c <_dtoa_r+0x34>
 8008eaa:	2301      	movs	r3, #1
 8008eac:	e7df      	b.n	8008e6e <_dtoa_r+0x276>
 8008eae:	bf00      	nop
 8008eb0:	636f4361 	.word	0x636f4361
 8008eb4:	3fd287a7 	.word	0x3fd287a7
 8008eb8:	8b60c8b3 	.word	0x8b60c8b3
 8008ebc:	3fc68a28 	.word	0x3fc68a28
 8008ec0:	509f79fb 	.word	0x509f79fb
 8008ec4:	3fd34413 	.word	0x3fd34413
 8008ec8:	0800bb9e 	.word	0x0800bb9e
 8008ecc:	0800bbb5 	.word	0x0800bbb5
 8008ed0:	7ff00000 	.word	0x7ff00000
 8008ed4:	0800bb9a 	.word	0x0800bb9a
 8008ed8:	0800bb91 	.word	0x0800bb91
 8008edc:	0800ba11 	.word	0x0800ba11
 8008ee0:	3ff80000 	.word	0x3ff80000
 8008ee4:	0800bd20 	.word	0x0800bd20
 8008ee8:	0800bc10 	.word	0x0800bc10
 8008eec:	2501      	movs	r5, #1
 8008eee:	2300      	movs	r3, #0
 8008ef0:	9306      	str	r3, [sp, #24]
 8008ef2:	9508      	str	r5, [sp, #32]
 8008ef4:	f04f 33ff 	mov.w	r3, #4294967295
 8008ef8:	e9cd 3302 	strd	r3, r3, [sp, #8]
 8008efc:	2200      	movs	r2, #0
 8008efe:	2312      	movs	r3, #18
 8008f00:	e7b0      	b.n	8008e64 <_dtoa_r+0x26c>
 8008f02:	2301      	movs	r3, #1
 8008f04:	9308      	str	r3, [sp, #32]
 8008f06:	e7f5      	b.n	8008ef4 <_dtoa_r+0x2fc>
 8008f08:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8008f0a:	e9cd 3302 	strd	r3, r3, [sp, #8]
 8008f0e:	e7b8      	b.n	8008e82 <_dtoa_r+0x28a>
 8008f10:	3101      	adds	r1, #1
 8008f12:	6041      	str	r1, [r0, #4]
 8008f14:	0052      	lsls	r2, r2, #1
 8008f16:	e7b8      	b.n	8008e8a <_dtoa_r+0x292>
 8008f18:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8008f1a:	9a01      	ldr	r2, [sp, #4]
 8008f1c:	601a      	str	r2, [r3, #0]
 8008f1e:	9b03      	ldr	r3, [sp, #12]
 8008f20:	2b0e      	cmp	r3, #14
 8008f22:	f200 809d 	bhi.w	8009060 <_dtoa_r+0x468>
 8008f26:	2d00      	cmp	r5, #0
 8008f28:	f000 809a 	beq.w	8009060 <_dtoa_r+0x468>
 8008f2c:	9b00      	ldr	r3, [sp, #0]
 8008f2e:	2b00      	cmp	r3, #0
 8008f30:	dd32      	ble.n	8008f98 <_dtoa_r+0x3a0>
 8008f32:	4ab7      	ldr	r2, [pc, #732]	; (8009210 <_dtoa_r+0x618>)
 8008f34:	f003 030f 	and.w	r3, r3, #15
 8008f38:	eb02 03c3 	add.w	r3, r2, r3, lsl #3
 8008f3c:	e9d3 8900 	ldrd	r8, r9, [r3]
 8008f40:	9b00      	ldr	r3, [sp, #0]
 8008f42:	05d8      	lsls	r0, r3, #23
 8008f44:	ea4f 1723 	mov.w	r7, r3, asr #4
 8008f48:	d516      	bpl.n	8008f78 <_dtoa_r+0x380>
 8008f4a:	4bb2      	ldr	r3, [pc, #712]	; (8009214 <_dtoa_r+0x61c>)
 8008f4c:	ec51 0b19 	vmov	r0, r1, d9
 8008f50:	e9d3 2308 	ldrd	r2, r3, [r3, #32]
 8008f54:	f7f7 fc7a 	bl	800084c <__aeabi_ddiv>
 8008f58:	f007 070f 	and.w	r7, r7, #15
 8008f5c:	4682      	mov	sl, r0
 8008f5e:	468b      	mov	fp, r1
 8008f60:	2503      	movs	r5, #3
 8008f62:	4eac      	ldr	r6, [pc, #688]	; (8009214 <_dtoa_r+0x61c>)
 8008f64:	b957      	cbnz	r7, 8008f7c <_dtoa_r+0x384>
 8008f66:	4642      	mov	r2, r8
 8008f68:	464b      	mov	r3, r9
 8008f6a:	4650      	mov	r0, sl
 8008f6c:	4659      	mov	r1, fp
 8008f6e:	f7f7 fc6d 	bl	800084c <__aeabi_ddiv>
 8008f72:	4682      	mov	sl, r0
 8008f74:	468b      	mov	fp, r1
 8008f76:	e028      	b.n	8008fca <_dtoa_r+0x3d2>
 8008f78:	2502      	movs	r5, #2
 8008f7a:	e7f2      	b.n	8008f62 <_dtoa_r+0x36a>
 8008f7c:	07f9      	lsls	r1, r7, #31
 8008f7e:	d508      	bpl.n	8008f92 <_dtoa_r+0x39a>
 8008f80:	4640      	mov	r0, r8
 8008f82:	4649      	mov	r1, r9
 8008f84:	e9d6 2300 	ldrd	r2, r3, [r6]
 8008f88:	f7f7 fb36 	bl	80005f8 <__aeabi_dmul>
 8008f8c:	3501      	adds	r5, #1
 8008f8e:	4680      	mov	r8, r0
 8008f90:	4689      	mov	r9, r1
 8008f92:	107f      	asrs	r7, r7, #1
 8008f94:	3608      	adds	r6, #8
 8008f96:	e7e5      	b.n	8008f64 <_dtoa_r+0x36c>
 8008f98:	f000 809b 	beq.w	80090d2 <_dtoa_r+0x4da>
 8008f9c:	9b00      	ldr	r3, [sp, #0]
 8008f9e:	4f9d      	ldr	r7, [pc, #628]	; (8009214 <_dtoa_r+0x61c>)
 8008fa0:	425e      	negs	r6, r3
 8008fa2:	4b9b      	ldr	r3, [pc, #620]	; (8009210 <_dtoa_r+0x618>)
 8008fa4:	f006 020f 	and.w	r2, r6, #15
 8008fa8:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 8008fac:	e9d3 2300 	ldrd	r2, r3, [r3]
 8008fb0:	ec51 0b19 	vmov	r0, r1, d9
 8008fb4:	f7f7 fb20 	bl	80005f8 <__aeabi_dmul>
 8008fb8:	1136      	asrs	r6, r6, #4
 8008fba:	4682      	mov	sl, r0
 8008fbc:	468b      	mov	fp, r1
 8008fbe:	2300      	movs	r3, #0
 8008fc0:	2502      	movs	r5, #2
 8008fc2:	2e00      	cmp	r6, #0
 8008fc4:	d17a      	bne.n	80090bc <_dtoa_r+0x4c4>
 8008fc6:	2b00      	cmp	r3, #0
 8008fc8:	d1d3      	bne.n	8008f72 <_dtoa_r+0x37a>
 8008fca:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8008fcc:	2b00      	cmp	r3, #0
 8008fce:	f000 8082 	beq.w	80090d6 <_dtoa_r+0x4de>
 8008fd2:	4b91      	ldr	r3, [pc, #580]	; (8009218 <_dtoa_r+0x620>)
 8008fd4:	2200      	movs	r2, #0
 8008fd6:	4650      	mov	r0, sl
 8008fd8:	4659      	mov	r1, fp
 8008fda:	f7f7 fd7f 	bl	8000adc <__aeabi_dcmplt>
 8008fde:	2800      	cmp	r0, #0
 8008fe0:	d079      	beq.n	80090d6 <_dtoa_r+0x4de>
 8008fe2:	9b03      	ldr	r3, [sp, #12]
 8008fe4:	2b00      	cmp	r3, #0
 8008fe6:	d076      	beq.n	80090d6 <_dtoa_r+0x4de>
 8008fe8:	9b02      	ldr	r3, [sp, #8]
 8008fea:	2b00      	cmp	r3, #0
 8008fec:	dd36      	ble.n	800905c <_dtoa_r+0x464>
 8008fee:	9b00      	ldr	r3, [sp, #0]
 8008ff0:	4650      	mov	r0, sl
 8008ff2:	4659      	mov	r1, fp
 8008ff4:	1e5f      	subs	r7, r3, #1
 8008ff6:	2200      	movs	r2, #0
 8008ff8:	4b88      	ldr	r3, [pc, #544]	; (800921c <_dtoa_r+0x624>)
 8008ffa:	f7f7 fafd 	bl	80005f8 <__aeabi_dmul>
 8008ffe:	9e02      	ldr	r6, [sp, #8]
 8009000:	4682      	mov	sl, r0
 8009002:	468b      	mov	fp, r1
 8009004:	3501      	adds	r5, #1
 8009006:	4628      	mov	r0, r5
 8009008:	f7f7 fa8c 	bl	8000524 <__aeabi_i2d>
 800900c:	4652      	mov	r2, sl
 800900e:	465b      	mov	r3, fp
 8009010:	f7f7 faf2 	bl	80005f8 <__aeabi_dmul>
 8009014:	4b82      	ldr	r3, [pc, #520]	; (8009220 <_dtoa_r+0x628>)
 8009016:	2200      	movs	r2, #0
 8009018:	f7f7 f938 	bl	800028c <__adddf3>
 800901c:	46d0      	mov	r8, sl
 800901e:	46d9      	mov	r9, fp
 8009020:	4682      	mov	sl, r0
 8009022:	f1a1 7b50 	sub.w	fp, r1, #54525952	; 0x3400000
 8009026:	2e00      	cmp	r6, #0
 8009028:	d158      	bne.n	80090dc <_dtoa_r+0x4e4>
 800902a:	4b7e      	ldr	r3, [pc, #504]	; (8009224 <_dtoa_r+0x62c>)
 800902c:	2200      	movs	r2, #0
 800902e:	4640      	mov	r0, r8
 8009030:	4649      	mov	r1, r9
 8009032:	f7f7 f929 	bl	8000288 <__aeabi_dsub>
 8009036:	4652      	mov	r2, sl
 8009038:	465b      	mov	r3, fp
 800903a:	4680      	mov	r8, r0
 800903c:	4689      	mov	r9, r1
 800903e:	f7f7 fd6b 	bl	8000b18 <__aeabi_dcmpgt>
 8009042:	2800      	cmp	r0, #0
 8009044:	f040 8295 	bne.w	8009572 <_dtoa_r+0x97a>
 8009048:	4652      	mov	r2, sl
 800904a:	f10b 4300 	add.w	r3, fp, #2147483648	; 0x80000000
 800904e:	4640      	mov	r0, r8
 8009050:	4649      	mov	r1, r9
 8009052:	f7f7 fd43 	bl	8000adc <__aeabi_dcmplt>
 8009056:	2800      	cmp	r0, #0
 8009058:	f040 8289 	bne.w	800956e <_dtoa_r+0x976>
 800905c:	ec5b ab19 	vmov	sl, fp, d9
 8009060:	9b11      	ldr	r3, [sp, #68]	; 0x44
 8009062:	2b00      	cmp	r3, #0
 8009064:	f2c0 8148 	blt.w	80092f8 <_dtoa_r+0x700>
 8009068:	9a00      	ldr	r2, [sp, #0]
 800906a:	2a0e      	cmp	r2, #14
 800906c:	f300 8144 	bgt.w	80092f8 <_dtoa_r+0x700>
 8009070:	4b67      	ldr	r3, [pc, #412]	; (8009210 <_dtoa_r+0x618>)
 8009072:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 8009076:	e9d3 8900 	ldrd	r8, r9, [r3]
 800907a:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800907c:	2b00      	cmp	r3, #0
 800907e:	f280 80d5 	bge.w	800922c <_dtoa_r+0x634>
 8009082:	9b03      	ldr	r3, [sp, #12]
 8009084:	2b00      	cmp	r3, #0
 8009086:	f300 80d1 	bgt.w	800922c <_dtoa_r+0x634>
 800908a:	f040 826f 	bne.w	800956c <_dtoa_r+0x974>
 800908e:	4b65      	ldr	r3, [pc, #404]	; (8009224 <_dtoa_r+0x62c>)
 8009090:	2200      	movs	r2, #0
 8009092:	4640      	mov	r0, r8
 8009094:	4649      	mov	r1, r9
 8009096:	f7f7 faaf 	bl	80005f8 <__aeabi_dmul>
 800909a:	4652      	mov	r2, sl
 800909c:	465b      	mov	r3, fp
 800909e:	f7f7 fd31 	bl	8000b04 <__aeabi_dcmpge>
 80090a2:	9e03      	ldr	r6, [sp, #12]
 80090a4:	4637      	mov	r7, r6
 80090a6:	2800      	cmp	r0, #0
 80090a8:	f040 8245 	bne.w	8009536 <_dtoa_r+0x93e>
 80090ac:	9d01      	ldr	r5, [sp, #4]
 80090ae:	2331      	movs	r3, #49	; 0x31
 80090b0:	f805 3b01 	strb.w	r3, [r5], #1
 80090b4:	9b00      	ldr	r3, [sp, #0]
 80090b6:	3301      	adds	r3, #1
 80090b8:	9300      	str	r3, [sp, #0]
 80090ba:	e240      	b.n	800953e <_dtoa_r+0x946>
 80090bc:	07f2      	lsls	r2, r6, #31
 80090be:	d505      	bpl.n	80090cc <_dtoa_r+0x4d4>
 80090c0:	e9d7 2300 	ldrd	r2, r3, [r7]
 80090c4:	f7f7 fa98 	bl	80005f8 <__aeabi_dmul>
 80090c8:	3501      	adds	r5, #1
 80090ca:	2301      	movs	r3, #1
 80090cc:	1076      	asrs	r6, r6, #1
 80090ce:	3708      	adds	r7, #8
 80090d0:	e777      	b.n	8008fc2 <_dtoa_r+0x3ca>
 80090d2:	2502      	movs	r5, #2
 80090d4:	e779      	b.n	8008fca <_dtoa_r+0x3d2>
 80090d6:	9f00      	ldr	r7, [sp, #0]
 80090d8:	9e03      	ldr	r6, [sp, #12]
 80090da:	e794      	b.n	8009006 <_dtoa_r+0x40e>
 80090dc:	9901      	ldr	r1, [sp, #4]
 80090de:	4b4c      	ldr	r3, [pc, #304]	; (8009210 <_dtoa_r+0x618>)
 80090e0:	4431      	add	r1, r6
 80090e2:	910d      	str	r1, [sp, #52]	; 0x34
 80090e4:	9908      	ldr	r1, [sp, #32]
 80090e6:	eb03 03c6 	add.w	r3, r3, r6, lsl #3
 80090ea:	e953 2302 	ldrd	r2, r3, [r3, #-8]
 80090ee:	2900      	cmp	r1, #0
 80090f0:	d043      	beq.n	800917a <_dtoa_r+0x582>
 80090f2:	494d      	ldr	r1, [pc, #308]	; (8009228 <_dtoa_r+0x630>)
 80090f4:	2000      	movs	r0, #0
 80090f6:	f7f7 fba9 	bl	800084c <__aeabi_ddiv>
 80090fa:	4652      	mov	r2, sl
 80090fc:	465b      	mov	r3, fp
 80090fe:	f7f7 f8c3 	bl	8000288 <__aeabi_dsub>
 8009102:	9d01      	ldr	r5, [sp, #4]
 8009104:	4682      	mov	sl, r0
 8009106:	468b      	mov	fp, r1
 8009108:	4649      	mov	r1, r9
 800910a:	4640      	mov	r0, r8
 800910c:	f7f7 fd24 	bl	8000b58 <__aeabi_d2iz>
 8009110:	4606      	mov	r6, r0
 8009112:	f7f7 fa07 	bl	8000524 <__aeabi_i2d>
 8009116:	4602      	mov	r2, r0
 8009118:	460b      	mov	r3, r1
 800911a:	4640      	mov	r0, r8
 800911c:	4649      	mov	r1, r9
 800911e:	f7f7 f8b3 	bl	8000288 <__aeabi_dsub>
 8009122:	3630      	adds	r6, #48	; 0x30
 8009124:	f805 6b01 	strb.w	r6, [r5], #1
 8009128:	4652      	mov	r2, sl
 800912a:	465b      	mov	r3, fp
 800912c:	4680      	mov	r8, r0
 800912e:	4689      	mov	r9, r1
 8009130:	f7f7 fcd4 	bl	8000adc <__aeabi_dcmplt>
 8009134:	2800      	cmp	r0, #0
 8009136:	d163      	bne.n	8009200 <_dtoa_r+0x608>
 8009138:	4642      	mov	r2, r8
 800913a:	464b      	mov	r3, r9
 800913c:	4936      	ldr	r1, [pc, #216]	; (8009218 <_dtoa_r+0x620>)
 800913e:	2000      	movs	r0, #0
 8009140:	f7f7 f8a2 	bl	8000288 <__aeabi_dsub>
 8009144:	4652      	mov	r2, sl
 8009146:	465b      	mov	r3, fp
 8009148:	f7f7 fcc8 	bl	8000adc <__aeabi_dcmplt>
 800914c:	2800      	cmp	r0, #0
 800914e:	f040 80b5 	bne.w	80092bc <_dtoa_r+0x6c4>
 8009152:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 8009154:	429d      	cmp	r5, r3
 8009156:	d081      	beq.n	800905c <_dtoa_r+0x464>
 8009158:	4b30      	ldr	r3, [pc, #192]	; (800921c <_dtoa_r+0x624>)
 800915a:	2200      	movs	r2, #0
 800915c:	4650      	mov	r0, sl
 800915e:	4659      	mov	r1, fp
 8009160:	f7f7 fa4a 	bl	80005f8 <__aeabi_dmul>
 8009164:	4b2d      	ldr	r3, [pc, #180]	; (800921c <_dtoa_r+0x624>)
 8009166:	4682      	mov	sl, r0
 8009168:	468b      	mov	fp, r1
 800916a:	4640      	mov	r0, r8
 800916c:	4649      	mov	r1, r9
 800916e:	2200      	movs	r2, #0
 8009170:	f7f7 fa42 	bl	80005f8 <__aeabi_dmul>
 8009174:	4680      	mov	r8, r0
 8009176:	4689      	mov	r9, r1
 8009178:	e7c6      	b.n	8009108 <_dtoa_r+0x510>
 800917a:	4650      	mov	r0, sl
 800917c:	4659      	mov	r1, fp
 800917e:	f7f7 fa3b 	bl	80005f8 <__aeabi_dmul>
 8009182:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 8009184:	9d01      	ldr	r5, [sp, #4]
 8009186:	930f      	str	r3, [sp, #60]	; 0x3c
 8009188:	4682      	mov	sl, r0
 800918a:	468b      	mov	fp, r1
 800918c:	4649      	mov	r1, r9
 800918e:	4640      	mov	r0, r8
 8009190:	f7f7 fce2 	bl	8000b58 <__aeabi_d2iz>
 8009194:	4606      	mov	r6, r0
 8009196:	f7f7 f9c5 	bl	8000524 <__aeabi_i2d>
 800919a:	3630      	adds	r6, #48	; 0x30
 800919c:	4602      	mov	r2, r0
 800919e:	460b      	mov	r3, r1
 80091a0:	4640      	mov	r0, r8
 80091a2:	4649      	mov	r1, r9
 80091a4:	f7f7 f870 	bl	8000288 <__aeabi_dsub>
 80091a8:	f805 6b01 	strb.w	r6, [r5], #1
 80091ac:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 80091ae:	429d      	cmp	r5, r3
 80091b0:	4680      	mov	r8, r0
 80091b2:	4689      	mov	r9, r1
 80091b4:	f04f 0200 	mov.w	r2, #0
 80091b8:	d124      	bne.n	8009204 <_dtoa_r+0x60c>
 80091ba:	4b1b      	ldr	r3, [pc, #108]	; (8009228 <_dtoa_r+0x630>)
 80091bc:	4650      	mov	r0, sl
 80091be:	4659      	mov	r1, fp
 80091c0:	f7f7 f864 	bl	800028c <__adddf3>
 80091c4:	4602      	mov	r2, r0
 80091c6:	460b      	mov	r3, r1
 80091c8:	4640      	mov	r0, r8
 80091ca:	4649      	mov	r1, r9
 80091cc:	f7f7 fca4 	bl	8000b18 <__aeabi_dcmpgt>
 80091d0:	2800      	cmp	r0, #0
 80091d2:	d173      	bne.n	80092bc <_dtoa_r+0x6c4>
 80091d4:	4652      	mov	r2, sl
 80091d6:	465b      	mov	r3, fp
 80091d8:	4913      	ldr	r1, [pc, #76]	; (8009228 <_dtoa_r+0x630>)
 80091da:	2000      	movs	r0, #0
 80091dc:	f7f7 f854 	bl	8000288 <__aeabi_dsub>
 80091e0:	4602      	mov	r2, r0
 80091e2:	460b      	mov	r3, r1
 80091e4:	4640      	mov	r0, r8
 80091e6:	4649      	mov	r1, r9
 80091e8:	f7f7 fc78 	bl	8000adc <__aeabi_dcmplt>
 80091ec:	2800      	cmp	r0, #0
 80091ee:	f43f af35 	beq.w	800905c <_dtoa_r+0x464>
 80091f2:	9d0f      	ldr	r5, [sp, #60]	; 0x3c
 80091f4:	1e6b      	subs	r3, r5, #1
 80091f6:	930f      	str	r3, [sp, #60]	; 0x3c
 80091f8:	f815 3c01 	ldrb.w	r3, [r5, #-1]
 80091fc:	2b30      	cmp	r3, #48	; 0x30
 80091fe:	d0f8      	beq.n	80091f2 <_dtoa_r+0x5fa>
 8009200:	9700      	str	r7, [sp, #0]
 8009202:	e049      	b.n	8009298 <_dtoa_r+0x6a0>
 8009204:	4b05      	ldr	r3, [pc, #20]	; (800921c <_dtoa_r+0x624>)
 8009206:	f7f7 f9f7 	bl	80005f8 <__aeabi_dmul>
 800920a:	4680      	mov	r8, r0
 800920c:	4689      	mov	r9, r1
 800920e:	e7bd      	b.n	800918c <_dtoa_r+0x594>
 8009210:	0800bd20 	.word	0x0800bd20
 8009214:	0800bcf8 	.word	0x0800bcf8
 8009218:	3ff00000 	.word	0x3ff00000
 800921c:	40240000 	.word	0x40240000
 8009220:	401c0000 	.word	0x401c0000
 8009224:	40140000 	.word	0x40140000
 8009228:	3fe00000 	.word	0x3fe00000
 800922c:	9d01      	ldr	r5, [sp, #4]
 800922e:	4656      	mov	r6, sl
 8009230:	465f      	mov	r7, fp
 8009232:	4642      	mov	r2, r8
 8009234:	464b      	mov	r3, r9
 8009236:	4630      	mov	r0, r6
 8009238:	4639      	mov	r1, r7
 800923a:	f7f7 fb07 	bl	800084c <__aeabi_ddiv>
 800923e:	f7f7 fc8b 	bl	8000b58 <__aeabi_d2iz>
 8009242:	4682      	mov	sl, r0
 8009244:	f7f7 f96e 	bl	8000524 <__aeabi_i2d>
 8009248:	4642      	mov	r2, r8
 800924a:	464b      	mov	r3, r9
 800924c:	f7f7 f9d4 	bl	80005f8 <__aeabi_dmul>
 8009250:	4602      	mov	r2, r0
 8009252:	460b      	mov	r3, r1
 8009254:	4630      	mov	r0, r6
 8009256:	4639      	mov	r1, r7
 8009258:	f10a 0630 	add.w	r6, sl, #48	; 0x30
 800925c:	f7f7 f814 	bl	8000288 <__aeabi_dsub>
 8009260:	f805 6b01 	strb.w	r6, [r5], #1
 8009264:	9e01      	ldr	r6, [sp, #4]
 8009266:	9f03      	ldr	r7, [sp, #12]
 8009268:	1bae      	subs	r6, r5, r6
 800926a:	42b7      	cmp	r7, r6
 800926c:	4602      	mov	r2, r0
 800926e:	460b      	mov	r3, r1
 8009270:	d135      	bne.n	80092de <_dtoa_r+0x6e6>
 8009272:	f7f7 f80b 	bl	800028c <__adddf3>
 8009276:	4642      	mov	r2, r8
 8009278:	464b      	mov	r3, r9
 800927a:	4606      	mov	r6, r0
 800927c:	460f      	mov	r7, r1
 800927e:	f7f7 fc4b 	bl	8000b18 <__aeabi_dcmpgt>
 8009282:	b9d0      	cbnz	r0, 80092ba <_dtoa_r+0x6c2>
 8009284:	4642      	mov	r2, r8
 8009286:	464b      	mov	r3, r9
 8009288:	4630      	mov	r0, r6
 800928a:	4639      	mov	r1, r7
 800928c:	f7f7 fc1c 	bl	8000ac8 <__aeabi_dcmpeq>
 8009290:	b110      	cbz	r0, 8009298 <_dtoa_r+0x6a0>
 8009292:	f01a 0f01 	tst.w	sl, #1
 8009296:	d110      	bne.n	80092ba <_dtoa_r+0x6c2>
 8009298:	4620      	mov	r0, r4
 800929a:	ee18 1a10 	vmov	r1, s16
 800929e:	f000 fe75 	bl	8009f8c <_Bfree>
 80092a2:	2300      	movs	r3, #0
 80092a4:	9800      	ldr	r0, [sp, #0]
 80092a6:	702b      	strb	r3, [r5, #0]
 80092a8:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 80092aa:	3001      	adds	r0, #1
 80092ac:	6018      	str	r0, [r3, #0]
 80092ae:	9b21      	ldr	r3, [sp, #132]	; 0x84
 80092b0:	2b00      	cmp	r3, #0
 80092b2:	f43f acf1 	beq.w	8008c98 <_dtoa_r+0xa0>
 80092b6:	601d      	str	r5, [r3, #0]
 80092b8:	e4ee      	b.n	8008c98 <_dtoa_r+0xa0>
 80092ba:	9f00      	ldr	r7, [sp, #0]
 80092bc:	462b      	mov	r3, r5
 80092be:	461d      	mov	r5, r3
 80092c0:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
 80092c4:	2a39      	cmp	r2, #57	; 0x39
 80092c6:	d106      	bne.n	80092d6 <_dtoa_r+0x6de>
 80092c8:	9a01      	ldr	r2, [sp, #4]
 80092ca:	429a      	cmp	r2, r3
 80092cc:	d1f7      	bne.n	80092be <_dtoa_r+0x6c6>
 80092ce:	9901      	ldr	r1, [sp, #4]
 80092d0:	2230      	movs	r2, #48	; 0x30
 80092d2:	3701      	adds	r7, #1
 80092d4:	700a      	strb	r2, [r1, #0]
 80092d6:	781a      	ldrb	r2, [r3, #0]
 80092d8:	3201      	adds	r2, #1
 80092da:	701a      	strb	r2, [r3, #0]
 80092dc:	e790      	b.n	8009200 <_dtoa_r+0x608>
 80092de:	4ba6      	ldr	r3, [pc, #664]	; (8009578 <_dtoa_r+0x980>)
 80092e0:	2200      	movs	r2, #0
 80092e2:	f7f7 f989 	bl	80005f8 <__aeabi_dmul>
 80092e6:	2200      	movs	r2, #0
 80092e8:	2300      	movs	r3, #0
 80092ea:	4606      	mov	r6, r0
 80092ec:	460f      	mov	r7, r1
 80092ee:	f7f7 fbeb 	bl	8000ac8 <__aeabi_dcmpeq>
 80092f2:	2800      	cmp	r0, #0
 80092f4:	d09d      	beq.n	8009232 <_dtoa_r+0x63a>
 80092f6:	e7cf      	b.n	8009298 <_dtoa_r+0x6a0>
 80092f8:	9a08      	ldr	r2, [sp, #32]
 80092fa:	2a00      	cmp	r2, #0
 80092fc:	f000 80d7 	beq.w	80094ae <_dtoa_r+0x8b6>
 8009300:	9a06      	ldr	r2, [sp, #24]
 8009302:	2a01      	cmp	r2, #1
 8009304:	f300 80ba 	bgt.w	800947c <_dtoa_r+0x884>
 8009308:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 800930a:	2a00      	cmp	r2, #0
 800930c:	f000 80b2 	beq.w	8009474 <_dtoa_r+0x87c>
 8009310:	f203 4333 	addw	r3, r3, #1075	; 0x433
 8009314:	9e07      	ldr	r6, [sp, #28]
 8009316:	9d04      	ldr	r5, [sp, #16]
 8009318:	9a04      	ldr	r2, [sp, #16]
 800931a:	441a      	add	r2, r3
 800931c:	9204      	str	r2, [sp, #16]
 800931e:	9a05      	ldr	r2, [sp, #20]
 8009320:	2101      	movs	r1, #1
 8009322:	441a      	add	r2, r3
 8009324:	4620      	mov	r0, r4
 8009326:	9205      	str	r2, [sp, #20]
 8009328:	f000 ff32 	bl	800a190 <__i2b>
 800932c:	4607      	mov	r7, r0
 800932e:	2d00      	cmp	r5, #0
 8009330:	dd0c      	ble.n	800934c <_dtoa_r+0x754>
 8009332:	9b05      	ldr	r3, [sp, #20]
 8009334:	2b00      	cmp	r3, #0
 8009336:	dd09      	ble.n	800934c <_dtoa_r+0x754>
 8009338:	42ab      	cmp	r3, r5
 800933a:	9a04      	ldr	r2, [sp, #16]
 800933c:	bfa8      	it	ge
 800933e:	462b      	movge	r3, r5
 8009340:	1ad2      	subs	r2, r2, r3
 8009342:	9204      	str	r2, [sp, #16]
 8009344:	9a05      	ldr	r2, [sp, #20]
 8009346:	1aed      	subs	r5, r5, r3
 8009348:	1ad3      	subs	r3, r2, r3
 800934a:	9305      	str	r3, [sp, #20]
 800934c:	9b07      	ldr	r3, [sp, #28]
 800934e:	b31b      	cbz	r3, 8009398 <_dtoa_r+0x7a0>
 8009350:	9b08      	ldr	r3, [sp, #32]
 8009352:	2b00      	cmp	r3, #0
 8009354:	f000 80af 	beq.w	80094b6 <_dtoa_r+0x8be>
 8009358:	2e00      	cmp	r6, #0
 800935a:	dd13      	ble.n	8009384 <_dtoa_r+0x78c>
 800935c:	4639      	mov	r1, r7
 800935e:	4632      	mov	r2, r6
 8009360:	4620      	mov	r0, r4
 8009362:	f000 ffd5 	bl	800a310 <__pow5mult>
 8009366:	ee18 2a10 	vmov	r2, s16
 800936a:	4601      	mov	r1, r0
 800936c:	4607      	mov	r7, r0
 800936e:	4620      	mov	r0, r4
 8009370:	f000 ff24 	bl	800a1bc <__multiply>
 8009374:	ee18 1a10 	vmov	r1, s16
 8009378:	4680      	mov	r8, r0
 800937a:	4620      	mov	r0, r4
 800937c:	f000 fe06 	bl	8009f8c <_Bfree>
 8009380:	ee08 8a10 	vmov	s16, r8
 8009384:	9b07      	ldr	r3, [sp, #28]
 8009386:	1b9a      	subs	r2, r3, r6
 8009388:	d006      	beq.n	8009398 <_dtoa_r+0x7a0>
 800938a:	ee18 1a10 	vmov	r1, s16
 800938e:	4620      	mov	r0, r4
 8009390:	f000 ffbe 	bl	800a310 <__pow5mult>
 8009394:	ee08 0a10 	vmov	s16, r0
 8009398:	2101      	movs	r1, #1
 800939a:	4620      	mov	r0, r4
 800939c:	f000 fef8 	bl	800a190 <__i2b>
 80093a0:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 80093a2:	2b00      	cmp	r3, #0
 80093a4:	4606      	mov	r6, r0
 80093a6:	f340 8088 	ble.w	80094ba <_dtoa_r+0x8c2>
 80093aa:	461a      	mov	r2, r3
 80093ac:	4601      	mov	r1, r0
 80093ae:	4620      	mov	r0, r4
 80093b0:	f000 ffae 	bl	800a310 <__pow5mult>
 80093b4:	9b06      	ldr	r3, [sp, #24]
 80093b6:	2b01      	cmp	r3, #1
 80093b8:	4606      	mov	r6, r0
 80093ba:	f340 8081 	ble.w	80094c0 <_dtoa_r+0x8c8>
 80093be:	f04f 0800 	mov.w	r8, #0
 80093c2:	6933      	ldr	r3, [r6, #16]
 80093c4:	eb06 0383 	add.w	r3, r6, r3, lsl #2
 80093c8:	6918      	ldr	r0, [r3, #16]
 80093ca:	f000 fe91 	bl	800a0f0 <__hi0bits>
 80093ce:	f1c0 0020 	rsb	r0, r0, #32
 80093d2:	9b05      	ldr	r3, [sp, #20]
 80093d4:	4418      	add	r0, r3
 80093d6:	f010 001f 	ands.w	r0, r0, #31
 80093da:	f000 8092 	beq.w	8009502 <_dtoa_r+0x90a>
 80093de:	f1c0 0320 	rsb	r3, r0, #32
 80093e2:	2b04      	cmp	r3, #4
 80093e4:	f340 808a 	ble.w	80094fc <_dtoa_r+0x904>
 80093e8:	f1c0 001c 	rsb	r0, r0, #28
 80093ec:	9b04      	ldr	r3, [sp, #16]
 80093ee:	4403      	add	r3, r0
 80093f0:	9304      	str	r3, [sp, #16]
 80093f2:	9b05      	ldr	r3, [sp, #20]
 80093f4:	4403      	add	r3, r0
 80093f6:	4405      	add	r5, r0
 80093f8:	9305      	str	r3, [sp, #20]
 80093fa:	9b04      	ldr	r3, [sp, #16]
 80093fc:	2b00      	cmp	r3, #0
 80093fe:	dd07      	ble.n	8009410 <_dtoa_r+0x818>
 8009400:	ee18 1a10 	vmov	r1, s16
 8009404:	461a      	mov	r2, r3
 8009406:	4620      	mov	r0, r4
 8009408:	f000 ffdc 	bl	800a3c4 <__lshift>
 800940c:	ee08 0a10 	vmov	s16, r0
 8009410:	9b05      	ldr	r3, [sp, #20]
 8009412:	2b00      	cmp	r3, #0
 8009414:	dd05      	ble.n	8009422 <_dtoa_r+0x82a>
 8009416:	4631      	mov	r1, r6
 8009418:	461a      	mov	r2, r3
 800941a:	4620      	mov	r0, r4
 800941c:	f000 ffd2 	bl	800a3c4 <__lshift>
 8009420:	4606      	mov	r6, r0
 8009422:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8009424:	2b00      	cmp	r3, #0
 8009426:	d06e      	beq.n	8009506 <_dtoa_r+0x90e>
 8009428:	ee18 0a10 	vmov	r0, s16
 800942c:	4631      	mov	r1, r6
 800942e:	f001 f839 	bl	800a4a4 <__mcmp>
 8009432:	2800      	cmp	r0, #0
 8009434:	da67      	bge.n	8009506 <_dtoa_r+0x90e>
 8009436:	9b00      	ldr	r3, [sp, #0]
 8009438:	3b01      	subs	r3, #1
 800943a:	ee18 1a10 	vmov	r1, s16
 800943e:	9300      	str	r3, [sp, #0]
 8009440:	220a      	movs	r2, #10
 8009442:	2300      	movs	r3, #0
 8009444:	4620      	mov	r0, r4
 8009446:	f000 fdc3 	bl	8009fd0 <__multadd>
 800944a:	9b08      	ldr	r3, [sp, #32]
 800944c:	ee08 0a10 	vmov	s16, r0
 8009450:	2b00      	cmp	r3, #0
 8009452:	f000 81b1 	beq.w	80097b8 <_dtoa_r+0xbc0>
 8009456:	2300      	movs	r3, #0
 8009458:	4639      	mov	r1, r7
 800945a:	220a      	movs	r2, #10
 800945c:	4620      	mov	r0, r4
 800945e:	f000 fdb7 	bl	8009fd0 <__multadd>
 8009462:	9b02      	ldr	r3, [sp, #8]
 8009464:	2b00      	cmp	r3, #0
 8009466:	4607      	mov	r7, r0
 8009468:	f300 808e 	bgt.w	8009588 <_dtoa_r+0x990>
 800946c:	9b06      	ldr	r3, [sp, #24]
 800946e:	2b02      	cmp	r3, #2
 8009470:	dc51      	bgt.n	8009516 <_dtoa_r+0x91e>
 8009472:	e089      	b.n	8009588 <_dtoa_r+0x990>
 8009474:	9b10      	ldr	r3, [sp, #64]	; 0x40
 8009476:	f1c3 0336 	rsb	r3, r3, #54	; 0x36
 800947a:	e74b      	b.n	8009314 <_dtoa_r+0x71c>
 800947c:	9b03      	ldr	r3, [sp, #12]
 800947e:	1e5e      	subs	r6, r3, #1
 8009480:	9b07      	ldr	r3, [sp, #28]
 8009482:	42b3      	cmp	r3, r6
 8009484:	bfbf      	itttt	lt
 8009486:	9b07      	ldrlt	r3, [sp, #28]
 8009488:	9607      	strlt	r6, [sp, #28]
 800948a:	1af2      	sublt	r2, r6, r3
 800948c:	9b0a      	ldrlt	r3, [sp, #40]	; 0x28
 800948e:	bfb6      	itet	lt
 8009490:	189b      	addlt	r3, r3, r2
 8009492:	1b9e      	subge	r6, r3, r6
 8009494:	930a      	strlt	r3, [sp, #40]	; 0x28
 8009496:	9b03      	ldr	r3, [sp, #12]
 8009498:	bfb8      	it	lt
 800949a:	2600      	movlt	r6, #0
 800949c:	2b00      	cmp	r3, #0
 800949e:	bfb7      	itett	lt
 80094a0:	e9dd 2303 	ldrdlt	r2, r3, [sp, #12]
 80094a4:	e9dd 3503 	ldrdge	r3, r5, [sp, #12]
 80094a8:	1a9d      	sublt	r5, r3, r2
 80094aa:	2300      	movlt	r3, #0
 80094ac:	e734      	b.n	8009318 <_dtoa_r+0x720>
 80094ae:	9e07      	ldr	r6, [sp, #28]
 80094b0:	9d04      	ldr	r5, [sp, #16]
 80094b2:	9f08      	ldr	r7, [sp, #32]
 80094b4:	e73b      	b.n	800932e <_dtoa_r+0x736>
 80094b6:	9a07      	ldr	r2, [sp, #28]
 80094b8:	e767      	b.n	800938a <_dtoa_r+0x792>
 80094ba:	9b06      	ldr	r3, [sp, #24]
 80094bc:	2b01      	cmp	r3, #1
 80094be:	dc18      	bgt.n	80094f2 <_dtoa_r+0x8fa>
 80094c0:	f1ba 0f00 	cmp.w	sl, #0
 80094c4:	d115      	bne.n	80094f2 <_dtoa_r+0x8fa>
 80094c6:	f3cb 0313 	ubfx	r3, fp, #0, #20
 80094ca:	b993      	cbnz	r3, 80094f2 <_dtoa_r+0x8fa>
 80094cc:	f02b 4300 	bic.w	r3, fp, #2147483648	; 0x80000000
 80094d0:	0d1b      	lsrs	r3, r3, #20
 80094d2:	051b      	lsls	r3, r3, #20
 80094d4:	b183      	cbz	r3, 80094f8 <_dtoa_r+0x900>
 80094d6:	9b04      	ldr	r3, [sp, #16]
 80094d8:	3301      	adds	r3, #1
 80094da:	9304      	str	r3, [sp, #16]
 80094dc:	9b05      	ldr	r3, [sp, #20]
 80094de:	3301      	adds	r3, #1
 80094e0:	9305      	str	r3, [sp, #20]
 80094e2:	f04f 0801 	mov.w	r8, #1
 80094e6:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 80094e8:	2b00      	cmp	r3, #0
 80094ea:	f47f af6a 	bne.w	80093c2 <_dtoa_r+0x7ca>
 80094ee:	2001      	movs	r0, #1
 80094f0:	e76f      	b.n	80093d2 <_dtoa_r+0x7da>
 80094f2:	f04f 0800 	mov.w	r8, #0
 80094f6:	e7f6      	b.n	80094e6 <_dtoa_r+0x8ee>
 80094f8:	4698      	mov	r8, r3
 80094fa:	e7f4      	b.n	80094e6 <_dtoa_r+0x8ee>
 80094fc:	f43f af7d 	beq.w	80093fa <_dtoa_r+0x802>
 8009500:	4618      	mov	r0, r3
 8009502:	301c      	adds	r0, #28
 8009504:	e772      	b.n	80093ec <_dtoa_r+0x7f4>
 8009506:	9b03      	ldr	r3, [sp, #12]
 8009508:	2b00      	cmp	r3, #0
 800950a:	dc37      	bgt.n	800957c <_dtoa_r+0x984>
 800950c:	9b06      	ldr	r3, [sp, #24]
 800950e:	2b02      	cmp	r3, #2
 8009510:	dd34      	ble.n	800957c <_dtoa_r+0x984>
 8009512:	9b03      	ldr	r3, [sp, #12]
 8009514:	9302      	str	r3, [sp, #8]
 8009516:	9b02      	ldr	r3, [sp, #8]
 8009518:	b96b      	cbnz	r3, 8009536 <_dtoa_r+0x93e>
 800951a:	4631      	mov	r1, r6
 800951c:	2205      	movs	r2, #5
 800951e:	4620      	mov	r0, r4
 8009520:	f000 fd56 	bl	8009fd0 <__multadd>
 8009524:	4601      	mov	r1, r0
 8009526:	4606      	mov	r6, r0
 8009528:	ee18 0a10 	vmov	r0, s16
 800952c:	f000 ffba 	bl	800a4a4 <__mcmp>
 8009530:	2800      	cmp	r0, #0
 8009532:	f73f adbb 	bgt.w	80090ac <_dtoa_r+0x4b4>
 8009536:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8009538:	9d01      	ldr	r5, [sp, #4]
 800953a:	43db      	mvns	r3, r3
 800953c:	9300      	str	r3, [sp, #0]
 800953e:	f04f 0800 	mov.w	r8, #0
 8009542:	4631      	mov	r1, r6
 8009544:	4620      	mov	r0, r4
 8009546:	f000 fd21 	bl	8009f8c <_Bfree>
 800954a:	2f00      	cmp	r7, #0
 800954c:	f43f aea4 	beq.w	8009298 <_dtoa_r+0x6a0>
 8009550:	f1b8 0f00 	cmp.w	r8, #0
 8009554:	d005      	beq.n	8009562 <_dtoa_r+0x96a>
 8009556:	45b8      	cmp	r8, r7
 8009558:	d003      	beq.n	8009562 <_dtoa_r+0x96a>
 800955a:	4641      	mov	r1, r8
 800955c:	4620      	mov	r0, r4
 800955e:	f000 fd15 	bl	8009f8c <_Bfree>
 8009562:	4639      	mov	r1, r7
 8009564:	4620      	mov	r0, r4
 8009566:	f000 fd11 	bl	8009f8c <_Bfree>
 800956a:	e695      	b.n	8009298 <_dtoa_r+0x6a0>
 800956c:	2600      	movs	r6, #0
 800956e:	4637      	mov	r7, r6
 8009570:	e7e1      	b.n	8009536 <_dtoa_r+0x93e>
 8009572:	9700      	str	r7, [sp, #0]
 8009574:	4637      	mov	r7, r6
 8009576:	e599      	b.n	80090ac <_dtoa_r+0x4b4>
 8009578:	40240000 	.word	0x40240000
 800957c:	9b08      	ldr	r3, [sp, #32]
 800957e:	2b00      	cmp	r3, #0
 8009580:	f000 80ca 	beq.w	8009718 <_dtoa_r+0xb20>
 8009584:	9b03      	ldr	r3, [sp, #12]
 8009586:	9302      	str	r3, [sp, #8]
 8009588:	2d00      	cmp	r5, #0
 800958a:	dd05      	ble.n	8009598 <_dtoa_r+0x9a0>
 800958c:	4639      	mov	r1, r7
 800958e:	462a      	mov	r2, r5
 8009590:	4620      	mov	r0, r4
 8009592:	f000 ff17 	bl	800a3c4 <__lshift>
 8009596:	4607      	mov	r7, r0
 8009598:	f1b8 0f00 	cmp.w	r8, #0
 800959c:	d05b      	beq.n	8009656 <_dtoa_r+0xa5e>
 800959e:	6879      	ldr	r1, [r7, #4]
 80095a0:	4620      	mov	r0, r4
 80095a2:	f000 fcb3 	bl	8009f0c <_Balloc>
 80095a6:	4605      	mov	r5, r0
 80095a8:	b928      	cbnz	r0, 80095b6 <_dtoa_r+0x9be>
 80095aa:	4b87      	ldr	r3, [pc, #540]	; (80097c8 <_dtoa_r+0xbd0>)
 80095ac:	4602      	mov	r2, r0
 80095ae:	f240 21ea 	movw	r1, #746	; 0x2ea
 80095b2:	f7ff bb3b 	b.w	8008c2c <_dtoa_r+0x34>
 80095b6:	693a      	ldr	r2, [r7, #16]
 80095b8:	3202      	adds	r2, #2
 80095ba:	0092      	lsls	r2, r2, #2
 80095bc:	f107 010c 	add.w	r1, r7, #12
 80095c0:	300c      	adds	r0, #12
 80095c2:	f000 fc95 	bl	8009ef0 <memcpy>
 80095c6:	2201      	movs	r2, #1
 80095c8:	4629      	mov	r1, r5
 80095ca:	4620      	mov	r0, r4
 80095cc:	f000 fefa 	bl	800a3c4 <__lshift>
 80095d0:	9b01      	ldr	r3, [sp, #4]
 80095d2:	f103 0901 	add.w	r9, r3, #1
 80095d6:	e9dd 2301 	ldrd	r2, r3, [sp, #4]
 80095da:	4413      	add	r3, r2
 80095dc:	9305      	str	r3, [sp, #20]
 80095de:	f00a 0301 	and.w	r3, sl, #1
 80095e2:	46b8      	mov	r8, r7
 80095e4:	9304      	str	r3, [sp, #16]
 80095e6:	4607      	mov	r7, r0
 80095e8:	4631      	mov	r1, r6
 80095ea:	ee18 0a10 	vmov	r0, s16
 80095ee:	f7ff fa77 	bl	8008ae0 <quorem>
 80095f2:	4641      	mov	r1, r8
 80095f4:	9002      	str	r0, [sp, #8]
 80095f6:	f100 0a30 	add.w	sl, r0, #48	; 0x30
 80095fa:	ee18 0a10 	vmov	r0, s16
 80095fe:	f000 ff51 	bl	800a4a4 <__mcmp>
 8009602:	463a      	mov	r2, r7
 8009604:	9003      	str	r0, [sp, #12]
 8009606:	4631      	mov	r1, r6
 8009608:	4620      	mov	r0, r4
 800960a:	f000 ff67 	bl	800a4dc <__mdiff>
 800960e:	68c2      	ldr	r2, [r0, #12]
 8009610:	f109 3bff 	add.w	fp, r9, #4294967295
 8009614:	4605      	mov	r5, r0
 8009616:	bb02      	cbnz	r2, 800965a <_dtoa_r+0xa62>
 8009618:	4601      	mov	r1, r0
 800961a:	ee18 0a10 	vmov	r0, s16
 800961e:	f000 ff41 	bl	800a4a4 <__mcmp>
 8009622:	4602      	mov	r2, r0
 8009624:	4629      	mov	r1, r5
 8009626:	4620      	mov	r0, r4
 8009628:	9207      	str	r2, [sp, #28]
 800962a:	f000 fcaf 	bl	8009f8c <_Bfree>
 800962e:	e9dd 3206 	ldrd	r3, r2, [sp, #24]
 8009632:	ea43 0102 	orr.w	r1, r3, r2
 8009636:	9b04      	ldr	r3, [sp, #16]
 8009638:	430b      	orrs	r3, r1
 800963a:	464d      	mov	r5, r9
 800963c:	d10f      	bne.n	800965e <_dtoa_r+0xa66>
 800963e:	f1ba 0f39 	cmp.w	sl, #57	; 0x39
 8009642:	d02a      	beq.n	800969a <_dtoa_r+0xaa2>
 8009644:	9b03      	ldr	r3, [sp, #12]
 8009646:	2b00      	cmp	r3, #0
 8009648:	dd02      	ble.n	8009650 <_dtoa_r+0xa58>
 800964a:	9b02      	ldr	r3, [sp, #8]
 800964c:	f103 0a31 	add.w	sl, r3, #49	; 0x31
 8009650:	f88b a000 	strb.w	sl, [fp]
 8009654:	e775      	b.n	8009542 <_dtoa_r+0x94a>
 8009656:	4638      	mov	r0, r7
 8009658:	e7ba      	b.n	80095d0 <_dtoa_r+0x9d8>
 800965a:	2201      	movs	r2, #1
 800965c:	e7e2      	b.n	8009624 <_dtoa_r+0xa2c>
 800965e:	9b03      	ldr	r3, [sp, #12]
 8009660:	2b00      	cmp	r3, #0
 8009662:	db04      	blt.n	800966e <_dtoa_r+0xa76>
 8009664:	9906      	ldr	r1, [sp, #24]
 8009666:	430b      	orrs	r3, r1
 8009668:	9904      	ldr	r1, [sp, #16]
 800966a:	430b      	orrs	r3, r1
 800966c:	d122      	bne.n	80096b4 <_dtoa_r+0xabc>
 800966e:	2a00      	cmp	r2, #0
 8009670:	ddee      	ble.n	8009650 <_dtoa_r+0xa58>
 8009672:	ee18 1a10 	vmov	r1, s16
 8009676:	2201      	movs	r2, #1
 8009678:	4620      	mov	r0, r4
 800967a:	f000 fea3 	bl	800a3c4 <__lshift>
 800967e:	4631      	mov	r1, r6
 8009680:	ee08 0a10 	vmov	s16, r0
 8009684:	f000 ff0e 	bl	800a4a4 <__mcmp>
 8009688:	2800      	cmp	r0, #0
 800968a:	dc03      	bgt.n	8009694 <_dtoa_r+0xa9c>
 800968c:	d1e0      	bne.n	8009650 <_dtoa_r+0xa58>
 800968e:	f01a 0f01 	tst.w	sl, #1
 8009692:	d0dd      	beq.n	8009650 <_dtoa_r+0xa58>
 8009694:	f1ba 0f39 	cmp.w	sl, #57	; 0x39
 8009698:	d1d7      	bne.n	800964a <_dtoa_r+0xa52>
 800969a:	2339      	movs	r3, #57	; 0x39
 800969c:	f88b 3000 	strb.w	r3, [fp]
 80096a0:	462b      	mov	r3, r5
 80096a2:	461d      	mov	r5, r3
 80096a4:	3b01      	subs	r3, #1
 80096a6:	f815 2c01 	ldrb.w	r2, [r5, #-1]
 80096aa:	2a39      	cmp	r2, #57	; 0x39
 80096ac:	d071      	beq.n	8009792 <_dtoa_r+0xb9a>
 80096ae:	3201      	adds	r2, #1
 80096b0:	701a      	strb	r2, [r3, #0]
 80096b2:	e746      	b.n	8009542 <_dtoa_r+0x94a>
 80096b4:	2a00      	cmp	r2, #0
 80096b6:	dd07      	ble.n	80096c8 <_dtoa_r+0xad0>
 80096b8:	f1ba 0f39 	cmp.w	sl, #57	; 0x39
 80096bc:	d0ed      	beq.n	800969a <_dtoa_r+0xaa2>
 80096be:	f10a 0301 	add.w	r3, sl, #1
 80096c2:	f88b 3000 	strb.w	r3, [fp]
 80096c6:	e73c      	b.n	8009542 <_dtoa_r+0x94a>
 80096c8:	9b05      	ldr	r3, [sp, #20]
 80096ca:	f809 ac01 	strb.w	sl, [r9, #-1]
 80096ce:	4599      	cmp	r9, r3
 80096d0:	d047      	beq.n	8009762 <_dtoa_r+0xb6a>
 80096d2:	ee18 1a10 	vmov	r1, s16
 80096d6:	2300      	movs	r3, #0
 80096d8:	220a      	movs	r2, #10
 80096da:	4620      	mov	r0, r4
 80096dc:	f000 fc78 	bl	8009fd0 <__multadd>
 80096e0:	45b8      	cmp	r8, r7
 80096e2:	ee08 0a10 	vmov	s16, r0
 80096e6:	f04f 0300 	mov.w	r3, #0
 80096ea:	f04f 020a 	mov.w	r2, #10
 80096ee:	4641      	mov	r1, r8
 80096f0:	4620      	mov	r0, r4
 80096f2:	d106      	bne.n	8009702 <_dtoa_r+0xb0a>
 80096f4:	f000 fc6c 	bl	8009fd0 <__multadd>
 80096f8:	4680      	mov	r8, r0
 80096fa:	4607      	mov	r7, r0
 80096fc:	f109 0901 	add.w	r9, r9, #1
 8009700:	e772      	b.n	80095e8 <_dtoa_r+0x9f0>
 8009702:	f000 fc65 	bl	8009fd0 <__multadd>
 8009706:	4639      	mov	r1, r7
 8009708:	4680      	mov	r8, r0
 800970a:	2300      	movs	r3, #0
 800970c:	220a      	movs	r2, #10
 800970e:	4620      	mov	r0, r4
 8009710:	f000 fc5e 	bl	8009fd0 <__multadd>
 8009714:	4607      	mov	r7, r0
 8009716:	e7f1      	b.n	80096fc <_dtoa_r+0xb04>
 8009718:	9b03      	ldr	r3, [sp, #12]
 800971a:	9302      	str	r3, [sp, #8]
 800971c:	9d01      	ldr	r5, [sp, #4]
 800971e:	ee18 0a10 	vmov	r0, s16
 8009722:	4631      	mov	r1, r6
 8009724:	f7ff f9dc 	bl	8008ae0 <quorem>
 8009728:	f100 0a30 	add.w	sl, r0, #48	; 0x30
 800972c:	9b01      	ldr	r3, [sp, #4]
 800972e:	f805 ab01 	strb.w	sl, [r5], #1
 8009732:	1aea      	subs	r2, r5, r3
 8009734:	9b02      	ldr	r3, [sp, #8]
 8009736:	4293      	cmp	r3, r2
 8009738:	dd09      	ble.n	800974e <_dtoa_r+0xb56>
 800973a:	ee18 1a10 	vmov	r1, s16
 800973e:	2300      	movs	r3, #0
 8009740:	220a      	movs	r2, #10
 8009742:	4620      	mov	r0, r4
 8009744:	f000 fc44 	bl	8009fd0 <__multadd>
 8009748:	ee08 0a10 	vmov	s16, r0
 800974c:	e7e7      	b.n	800971e <_dtoa_r+0xb26>
 800974e:	9b02      	ldr	r3, [sp, #8]
 8009750:	2b00      	cmp	r3, #0
 8009752:	bfc8      	it	gt
 8009754:	461d      	movgt	r5, r3
 8009756:	9b01      	ldr	r3, [sp, #4]
 8009758:	bfd8      	it	le
 800975a:	2501      	movle	r5, #1
 800975c:	441d      	add	r5, r3
 800975e:	f04f 0800 	mov.w	r8, #0
 8009762:	ee18 1a10 	vmov	r1, s16
 8009766:	2201      	movs	r2, #1
 8009768:	4620      	mov	r0, r4
 800976a:	f000 fe2b 	bl	800a3c4 <__lshift>
 800976e:	4631      	mov	r1, r6
 8009770:	ee08 0a10 	vmov	s16, r0
 8009774:	f000 fe96 	bl	800a4a4 <__mcmp>
 8009778:	2800      	cmp	r0, #0
 800977a:	dc91      	bgt.n	80096a0 <_dtoa_r+0xaa8>
 800977c:	d102      	bne.n	8009784 <_dtoa_r+0xb8c>
 800977e:	f01a 0f01 	tst.w	sl, #1
 8009782:	d18d      	bne.n	80096a0 <_dtoa_r+0xaa8>
 8009784:	462b      	mov	r3, r5
 8009786:	461d      	mov	r5, r3
 8009788:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
 800978c:	2a30      	cmp	r2, #48	; 0x30
 800978e:	d0fa      	beq.n	8009786 <_dtoa_r+0xb8e>
 8009790:	e6d7      	b.n	8009542 <_dtoa_r+0x94a>
 8009792:	9a01      	ldr	r2, [sp, #4]
 8009794:	429a      	cmp	r2, r3
 8009796:	d184      	bne.n	80096a2 <_dtoa_r+0xaaa>
 8009798:	9b00      	ldr	r3, [sp, #0]
 800979a:	3301      	adds	r3, #1
 800979c:	9300      	str	r3, [sp, #0]
 800979e:	2331      	movs	r3, #49	; 0x31
 80097a0:	7013      	strb	r3, [r2, #0]
 80097a2:	e6ce      	b.n	8009542 <_dtoa_r+0x94a>
 80097a4:	4b09      	ldr	r3, [pc, #36]	; (80097cc <_dtoa_r+0xbd4>)
 80097a6:	f7ff ba95 	b.w	8008cd4 <_dtoa_r+0xdc>
 80097aa:	9b21      	ldr	r3, [sp, #132]	; 0x84
 80097ac:	2b00      	cmp	r3, #0
 80097ae:	f47f aa6e 	bne.w	8008c8e <_dtoa_r+0x96>
 80097b2:	4b07      	ldr	r3, [pc, #28]	; (80097d0 <_dtoa_r+0xbd8>)
 80097b4:	f7ff ba8e 	b.w	8008cd4 <_dtoa_r+0xdc>
 80097b8:	9b02      	ldr	r3, [sp, #8]
 80097ba:	2b00      	cmp	r3, #0
 80097bc:	dcae      	bgt.n	800971c <_dtoa_r+0xb24>
 80097be:	9b06      	ldr	r3, [sp, #24]
 80097c0:	2b02      	cmp	r3, #2
 80097c2:	f73f aea8 	bgt.w	8009516 <_dtoa_r+0x91e>
 80097c6:	e7a9      	b.n	800971c <_dtoa_r+0xb24>
 80097c8:	0800bc10 	.word	0x0800bc10
 80097cc:	0800ba10 	.word	0x0800ba10
 80097d0:	0800bb91 	.word	0x0800bb91

080097d4 <rshift>:
 80097d4:	6903      	ldr	r3, [r0, #16]
 80097d6:	ebb3 1f61 	cmp.w	r3, r1, asr #5
 80097da:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 80097de:	ea4f 1261 	mov.w	r2, r1, asr #5
 80097e2:	f100 0414 	add.w	r4, r0, #20
 80097e6:	dd45      	ble.n	8009874 <rshift+0xa0>
 80097e8:	f011 011f 	ands.w	r1, r1, #31
 80097ec:	eb04 0683 	add.w	r6, r4, r3, lsl #2
 80097f0:	eb04 0582 	add.w	r5, r4, r2, lsl #2
 80097f4:	d10c      	bne.n	8009810 <rshift+0x3c>
 80097f6:	f100 0710 	add.w	r7, r0, #16
 80097fa:	4629      	mov	r1, r5
 80097fc:	42b1      	cmp	r1, r6
 80097fe:	d334      	bcc.n	800986a <rshift+0x96>
 8009800:	1a9b      	subs	r3, r3, r2
 8009802:	009b      	lsls	r3, r3, #2
 8009804:	1eea      	subs	r2, r5, #3
 8009806:	4296      	cmp	r6, r2
 8009808:	bf38      	it	cc
 800980a:	2300      	movcc	r3, #0
 800980c:	4423      	add	r3, r4
 800980e:	e015      	b.n	800983c <rshift+0x68>
 8009810:	f854 7022 	ldr.w	r7, [r4, r2, lsl #2]
 8009814:	f1c1 0820 	rsb	r8, r1, #32
 8009818:	40cf      	lsrs	r7, r1
 800981a:	f105 0e04 	add.w	lr, r5, #4
 800981e:	46a1      	mov	r9, r4
 8009820:	4576      	cmp	r6, lr
 8009822:	46f4      	mov	ip, lr
 8009824:	d815      	bhi.n	8009852 <rshift+0x7e>
 8009826:	1a9a      	subs	r2, r3, r2
 8009828:	0092      	lsls	r2, r2, #2
 800982a:	3a04      	subs	r2, #4
 800982c:	3501      	adds	r5, #1
 800982e:	42ae      	cmp	r6, r5
 8009830:	bf38      	it	cc
 8009832:	2200      	movcc	r2, #0
 8009834:	18a3      	adds	r3, r4, r2
 8009836:	50a7      	str	r7, [r4, r2]
 8009838:	b107      	cbz	r7, 800983c <rshift+0x68>
 800983a:	3304      	adds	r3, #4
 800983c:	1b1a      	subs	r2, r3, r4
 800983e:	42a3      	cmp	r3, r4
 8009840:	ea4f 02a2 	mov.w	r2, r2, asr #2
 8009844:	bf08      	it	eq
 8009846:	2300      	moveq	r3, #0
 8009848:	6102      	str	r2, [r0, #16]
 800984a:	bf08      	it	eq
 800984c:	6143      	streq	r3, [r0, #20]
 800984e:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 8009852:	f8dc c000 	ldr.w	ip, [ip]
 8009856:	fa0c fc08 	lsl.w	ip, ip, r8
 800985a:	ea4c 0707 	orr.w	r7, ip, r7
 800985e:	f849 7b04 	str.w	r7, [r9], #4
 8009862:	f85e 7b04 	ldr.w	r7, [lr], #4
 8009866:	40cf      	lsrs	r7, r1
 8009868:	e7da      	b.n	8009820 <rshift+0x4c>
 800986a:	f851 cb04 	ldr.w	ip, [r1], #4
 800986e:	f847 cf04 	str.w	ip, [r7, #4]!
 8009872:	e7c3      	b.n	80097fc <rshift+0x28>
 8009874:	4623      	mov	r3, r4
 8009876:	e7e1      	b.n	800983c <rshift+0x68>

08009878 <__hexdig_fun>:
 8009878:	f1a0 0330 	sub.w	r3, r0, #48	; 0x30
 800987c:	2b09      	cmp	r3, #9
 800987e:	d802      	bhi.n	8009886 <__hexdig_fun+0xe>
 8009880:	3820      	subs	r0, #32
 8009882:	b2c0      	uxtb	r0, r0
 8009884:	4770      	bx	lr
 8009886:	f1a0 0361 	sub.w	r3, r0, #97	; 0x61
 800988a:	2b05      	cmp	r3, #5
 800988c:	d801      	bhi.n	8009892 <__hexdig_fun+0x1a>
 800988e:	3847      	subs	r0, #71	; 0x47
 8009890:	e7f7      	b.n	8009882 <__hexdig_fun+0xa>
 8009892:	f1a0 0341 	sub.w	r3, r0, #65	; 0x41
 8009896:	2b05      	cmp	r3, #5
 8009898:	d801      	bhi.n	800989e <__hexdig_fun+0x26>
 800989a:	3827      	subs	r0, #39	; 0x27
 800989c:	e7f1      	b.n	8009882 <__hexdig_fun+0xa>
 800989e:	2000      	movs	r0, #0
 80098a0:	4770      	bx	lr
	...

080098a4 <__gethex>:
 80098a4:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80098a8:	ed2d 8b02 	vpush	{d8}
 80098ac:	b089      	sub	sp, #36	; 0x24
 80098ae:	ee08 0a10 	vmov	s16, r0
 80098b2:	9304      	str	r3, [sp, #16]
 80098b4:	4bb4      	ldr	r3, [pc, #720]	; (8009b88 <__gethex+0x2e4>)
 80098b6:	681b      	ldr	r3, [r3, #0]
 80098b8:	9301      	str	r3, [sp, #4]
 80098ba:	4618      	mov	r0, r3
 80098bc:	468b      	mov	fp, r1
 80098be:	4690      	mov	r8, r2
 80098c0:	f7f6 fc86 	bl	80001d0 <strlen>
 80098c4:	9b01      	ldr	r3, [sp, #4]
 80098c6:	f8db 2000 	ldr.w	r2, [fp]
 80098ca:	4403      	add	r3, r0
 80098cc:	4682      	mov	sl, r0
 80098ce:	f813 3c01 	ldrb.w	r3, [r3, #-1]
 80098d2:	9305      	str	r3, [sp, #20]
 80098d4:	1c93      	adds	r3, r2, #2
 80098d6:	f1c2 22ff 	rsb	r2, r2, #4278255360	; 0xff00ff00
 80098da:	f502 027f 	add.w	r2, r2, #16711680	; 0xff0000
 80098de:	32fe      	adds	r2, #254	; 0xfe
 80098e0:	18d1      	adds	r1, r2, r3
 80098e2:	461f      	mov	r7, r3
 80098e4:	f813 0b01 	ldrb.w	r0, [r3], #1
 80098e8:	9100      	str	r1, [sp, #0]
 80098ea:	2830      	cmp	r0, #48	; 0x30
 80098ec:	d0f8      	beq.n	80098e0 <__gethex+0x3c>
 80098ee:	f7ff ffc3 	bl	8009878 <__hexdig_fun>
 80098f2:	4604      	mov	r4, r0
 80098f4:	2800      	cmp	r0, #0
 80098f6:	d13a      	bne.n	800996e <__gethex+0xca>
 80098f8:	9901      	ldr	r1, [sp, #4]
 80098fa:	4652      	mov	r2, sl
 80098fc:	4638      	mov	r0, r7
 80098fe:	f001 fa33 	bl	800ad68 <strncmp>
 8009902:	4605      	mov	r5, r0
 8009904:	2800      	cmp	r0, #0
 8009906:	d168      	bne.n	80099da <__gethex+0x136>
 8009908:	f817 000a 	ldrb.w	r0, [r7, sl]
 800990c:	eb07 060a 	add.w	r6, r7, sl
 8009910:	f7ff ffb2 	bl	8009878 <__hexdig_fun>
 8009914:	2800      	cmp	r0, #0
 8009916:	d062      	beq.n	80099de <__gethex+0x13a>
 8009918:	4633      	mov	r3, r6
 800991a:	7818      	ldrb	r0, [r3, #0]
 800991c:	2830      	cmp	r0, #48	; 0x30
 800991e:	461f      	mov	r7, r3
 8009920:	f103 0301 	add.w	r3, r3, #1
 8009924:	d0f9      	beq.n	800991a <__gethex+0x76>
 8009926:	f7ff ffa7 	bl	8009878 <__hexdig_fun>
 800992a:	2301      	movs	r3, #1
 800992c:	fab0 f480 	clz	r4, r0
 8009930:	0964      	lsrs	r4, r4, #5
 8009932:	4635      	mov	r5, r6
 8009934:	9300      	str	r3, [sp, #0]
 8009936:	463a      	mov	r2, r7
 8009938:	4616      	mov	r6, r2
 800993a:	3201      	adds	r2, #1
 800993c:	7830      	ldrb	r0, [r6, #0]
 800993e:	f7ff ff9b 	bl	8009878 <__hexdig_fun>
 8009942:	2800      	cmp	r0, #0
 8009944:	d1f8      	bne.n	8009938 <__gethex+0x94>
 8009946:	9901      	ldr	r1, [sp, #4]
 8009948:	4652      	mov	r2, sl
 800994a:	4630      	mov	r0, r6
 800994c:	f001 fa0c 	bl	800ad68 <strncmp>
 8009950:	b980      	cbnz	r0, 8009974 <__gethex+0xd0>
 8009952:	b94d      	cbnz	r5, 8009968 <__gethex+0xc4>
 8009954:	eb06 050a 	add.w	r5, r6, sl
 8009958:	462a      	mov	r2, r5
 800995a:	4616      	mov	r6, r2
 800995c:	3201      	adds	r2, #1
 800995e:	7830      	ldrb	r0, [r6, #0]
 8009960:	f7ff ff8a 	bl	8009878 <__hexdig_fun>
 8009964:	2800      	cmp	r0, #0
 8009966:	d1f8      	bne.n	800995a <__gethex+0xb6>
 8009968:	1bad      	subs	r5, r5, r6
 800996a:	00ad      	lsls	r5, r5, #2
 800996c:	e004      	b.n	8009978 <__gethex+0xd4>
 800996e:	2400      	movs	r4, #0
 8009970:	4625      	mov	r5, r4
 8009972:	e7e0      	b.n	8009936 <__gethex+0x92>
 8009974:	2d00      	cmp	r5, #0
 8009976:	d1f7      	bne.n	8009968 <__gethex+0xc4>
 8009978:	7833      	ldrb	r3, [r6, #0]
 800997a:	f003 03df 	and.w	r3, r3, #223	; 0xdf
 800997e:	2b50      	cmp	r3, #80	; 0x50
 8009980:	d13b      	bne.n	80099fa <__gethex+0x156>
 8009982:	7873      	ldrb	r3, [r6, #1]
 8009984:	2b2b      	cmp	r3, #43	; 0x2b
 8009986:	d02c      	beq.n	80099e2 <__gethex+0x13e>
 8009988:	2b2d      	cmp	r3, #45	; 0x2d
 800998a:	d02e      	beq.n	80099ea <__gethex+0x146>
 800998c:	1c71      	adds	r1, r6, #1
 800998e:	f04f 0900 	mov.w	r9, #0
 8009992:	7808      	ldrb	r0, [r1, #0]
 8009994:	f7ff ff70 	bl	8009878 <__hexdig_fun>
 8009998:	1e43      	subs	r3, r0, #1
 800999a:	b2db      	uxtb	r3, r3
 800999c:	2b18      	cmp	r3, #24
 800999e:	d82c      	bhi.n	80099fa <__gethex+0x156>
 80099a0:	f1a0 0210 	sub.w	r2, r0, #16
 80099a4:	f811 0f01 	ldrb.w	r0, [r1, #1]!
 80099a8:	f7ff ff66 	bl	8009878 <__hexdig_fun>
 80099ac:	1e43      	subs	r3, r0, #1
 80099ae:	b2db      	uxtb	r3, r3
 80099b0:	2b18      	cmp	r3, #24
 80099b2:	d91d      	bls.n	80099f0 <__gethex+0x14c>
 80099b4:	f1b9 0f00 	cmp.w	r9, #0
 80099b8:	d000      	beq.n	80099bc <__gethex+0x118>
 80099ba:	4252      	negs	r2, r2
 80099bc:	4415      	add	r5, r2
 80099be:	f8cb 1000 	str.w	r1, [fp]
 80099c2:	b1e4      	cbz	r4, 80099fe <__gethex+0x15a>
 80099c4:	9b00      	ldr	r3, [sp, #0]
 80099c6:	2b00      	cmp	r3, #0
 80099c8:	bf14      	ite	ne
 80099ca:	2700      	movne	r7, #0
 80099cc:	2706      	moveq	r7, #6
 80099ce:	4638      	mov	r0, r7
 80099d0:	b009      	add	sp, #36	; 0x24
 80099d2:	ecbd 8b02 	vpop	{d8}
 80099d6:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80099da:	463e      	mov	r6, r7
 80099dc:	4625      	mov	r5, r4
 80099de:	2401      	movs	r4, #1
 80099e0:	e7ca      	b.n	8009978 <__gethex+0xd4>
 80099e2:	f04f 0900 	mov.w	r9, #0
 80099e6:	1cb1      	adds	r1, r6, #2
 80099e8:	e7d3      	b.n	8009992 <__gethex+0xee>
 80099ea:	f04f 0901 	mov.w	r9, #1
 80099ee:	e7fa      	b.n	80099e6 <__gethex+0x142>
 80099f0:	230a      	movs	r3, #10
 80099f2:	fb03 0202 	mla	r2, r3, r2, r0
 80099f6:	3a10      	subs	r2, #16
 80099f8:	e7d4      	b.n	80099a4 <__gethex+0x100>
 80099fa:	4631      	mov	r1, r6
 80099fc:	e7df      	b.n	80099be <__gethex+0x11a>
 80099fe:	1bf3      	subs	r3, r6, r7
 8009a00:	3b01      	subs	r3, #1
 8009a02:	4621      	mov	r1, r4
 8009a04:	2b07      	cmp	r3, #7
 8009a06:	dc0b      	bgt.n	8009a20 <__gethex+0x17c>
 8009a08:	ee18 0a10 	vmov	r0, s16
 8009a0c:	f000 fa7e 	bl	8009f0c <_Balloc>
 8009a10:	4604      	mov	r4, r0
 8009a12:	b940      	cbnz	r0, 8009a26 <__gethex+0x182>
 8009a14:	4b5d      	ldr	r3, [pc, #372]	; (8009b8c <__gethex+0x2e8>)
 8009a16:	4602      	mov	r2, r0
 8009a18:	21de      	movs	r1, #222	; 0xde
 8009a1a:	485d      	ldr	r0, [pc, #372]	; (8009b90 <__gethex+0x2ec>)
 8009a1c:	f001 f9c6 	bl	800adac <__assert_func>
 8009a20:	3101      	adds	r1, #1
 8009a22:	105b      	asrs	r3, r3, #1
 8009a24:	e7ee      	b.n	8009a04 <__gethex+0x160>
 8009a26:	f100 0914 	add.w	r9, r0, #20
 8009a2a:	f04f 0b00 	mov.w	fp, #0
 8009a2e:	f1ca 0301 	rsb	r3, sl, #1
 8009a32:	f8cd 9008 	str.w	r9, [sp, #8]
 8009a36:	f8cd b000 	str.w	fp, [sp]
 8009a3a:	9306      	str	r3, [sp, #24]
 8009a3c:	42b7      	cmp	r7, r6
 8009a3e:	d340      	bcc.n	8009ac2 <__gethex+0x21e>
 8009a40:	9802      	ldr	r0, [sp, #8]
 8009a42:	9b00      	ldr	r3, [sp, #0]
 8009a44:	f840 3b04 	str.w	r3, [r0], #4
 8009a48:	eba0 0009 	sub.w	r0, r0, r9
 8009a4c:	1080      	asrs	r0, r0, #2
 8009a4e:	0146      	lsls	r6, r0, #5
 8009a50:	6120      	str	r0, [r4, #16]
 8009a52:	4618      	mov	r0, r3
 8009a54:	f000 fb4c 	bl	800a0f0 <__hi0bits>
 8009a58:	1a30      	subs	r0, r6, r0
 8009a5a:	f8d8 6000 	ldr.w	r6, [r8]
 8009a5e:	42b0      	cmp	r0, r6
 8009a60:	dd63      	ble.n	8009b2a <__gethex+0x286>
 8009a62:	1b87      	subs	r7, r0, r6
 8009a64:	4639      	mov	r1, r7
 8009a66:	4620      	mov	r0, r4
 8009a68:	f000 fef0 	bl	800a84c <__any_on>
 8009a6c:	4682      	mov	sl, r0
 8009a6e:	b1a8      	cbz	r0, 8009a9c <__gethex+0x1f8>
 8009a70:	1e7b      	subs	r3, r7, #1
 8009a72:	1159      	asrs	r1, r3, #5
 8009a74:	f003 021f 	and.w	r2, r3, #31
 8009a78:	f859 1021 	ldr.w	r1, [r9, r1, lsl #2]
 8009a7c:	f04f 0a01 	mov.w	sl, #1
 8009a80:	fa0a f202 	lsl.w	r2, sl, r2
 8009a84:	420a      	tst	r2, r1
 8009a86:	d009      	beq.n	8009a9c <__gethex+0x1f8>
 8009a88:	4553      	cmp	r3, sl
 8009a8a:	dd05      	ble.n	8009a98 <__gethex+0x1f4>
 8009a8c:	1eb9      	subs	r1, r7, #2
 8009a8e:	4620      	mov	r0, r4
 8009a90:	f000 fedc 	bl	800a84c <__any_on>
 8009a94:	2800      	cmp	r0, #0
 8009a96:	d145      	bne.n	8009b24 <__gethex+0x280>
 8009a98:	f04f 0a02 	mov.w	sl, #2
 8009a9c:	4639      	mov	r1, r7
 8009a9e:	4620      	mov	r0, r4
 8009aa0:	f7ff fe98 	bl	80097d4 <rshift>
 8009aa4:	443d      	add	r5, r7
 8009aa6:	f8d8 3008 	ldr.w	r3, [r8, #8]
 8009aaa:	42ab      	cmp	r3, r5
 8009aac:	da4c      	bge.n	8009b48 <__gethex+0x2a4>
 8009aae:	ee18 0a10 	vmov	r0, s16
 8009ab2:	4621      	mov	r1, r4
 8009ab4:	f000 fa6a 	bl	8009f8c <_Bfree>
 8009ab8:	9a14      	ldr	r2, [sp, #80]	; 0x50
 8009aba:	2300      	movs	r3, #0
 8009abc:	6013      	str	r3, [r2, #0]
 8009abe:	27a3      	movs	r7, #163	; 0xa3
 8009ac0:	e785      	b.n	80099ce <__gethex+0x12a>
 8009ac2:	1e73      	subs	r3, r6, #1
 8009ac4:	9a05      	ldr	r2, [sp, #20]
 8009ac6:	9303      	str	r3, [sp, #12]
 8009ac8:	f816 3c01 	ldrb.w	r3, [r6, #-1]
 8009acc:	4293      	cmp	r3, r2
 8009ace:	d019      	beq.n	8009b04 <__gethex+0x260>
 8009ad0:	f1bb 0f20 	cmp.w	fp, #32
 8009ad4:	d107      	bne.n	8009ae6 <__gethex+0x242>
 8009ad6:	9b02      	ldr	r3, [sp, #8]
 8009ad8:	9a00      	ldr	r2, [sp, #0]
 8009ada:	f843 2b04 	str.w	r2, [r3], #4
 8009ade:	9302      	str	r3, [sp, #8]
 8009ae0:	2300      	movs	r3, #0
 8009ae2:	9300      	str	r3, [sp, #0]
 8009ae4:	469b      	mov	fp, r3
 8009ae6:	f816 0c01 	ldrb.w	r0, [r6, #-1]
 8009aea:	f7ff fec5 	bl	8009878 <__hexdig_fun>
 8009aee:	9b00      	ldr	r3, [sp, #0]
 8009af0:	f000 000f 	and.w	r0, r0, #15
 8009af4:	fa00 f00b 	lsl.w	r0, r0, fp
 8009af8:	4303      	orrs	r3, r0
 8009afa:	9300      	str	r3, [sp, #0]
 8009afc:	f10b 0b04 	add.w	fp, fp, #4
 8009b00:	9b03      	ldr	r3, [sp, #12]
 8009b02:	e00d      	b.n	8009b20 <__gethex+0x27c>
 8009b04:	9b03      	ldr	r3, [sp, #12]
 8009b06:	9a06      	ldr	r2, [sp, #24]
 8009b08:	4413      	add	r3, r2
 8009b0a:	42bb      	cmp	r3, r7
 8009b0c:	d3e0      	bcc.n	8009ad0 <__gethex+0x22c>
 8009b0e:	4618      	mov	r0, r3
 8009b10:	9901      	ldr	r1, [sp, #4]
 8009b12:	9307      	str	r3, [sp, #28]
 8009b14:	4652      	mov	r2, sl
 8009b16:	f001 f927 	bl	800ad68 <strncmp>
 8009b1a:	9b07      	ldr	r3, [sp, #28]
 8009b1c:	2800      	cmp	r0, #0
 8009b1e:	d1d7      	bne.n	8009ad0 <__gethex+0x22c>
 8009b20:	461e      	mov	r6, r3
 8009b22:	e78b      	b.n	8009a3c <__gethex+0x198>
 8009b24:	f04f 0a03 	mov.w	sl, #3
 8009b28:	e7b8      	b.n	8009a9c <__gethex+0x1f8>
 8009b2a:	da0a      	bge.n	8009b42 <__gethex+0x29e>
 8009b2c:	1a37      	subs	r7, r6, r0
 8009b2e:	4621      	mov	r1, r4
 8009b30:	ee18 0a10 	vmov	r0, s16
 8009b34:	463a      	mov	r2, r7
 8009b36:	f000 fc45 	bl	800a3c4 <__lshift>
 8009b3a:	1bed      	subs	r5, r5, r7
 8009b3c:	4604      	mov	r4, r0
 8009b3e:	f100 0914 	add.w	r9, r0, #20
 8009b42:	f04f 0a00 	mov.w	sl, #0
 8009b46:	e7ae      	b.n	8009aa6 <__gethex+0x202>
 8009b48:	f8d8 0004 	ldr.w	r0, [r8, #4]
 8009b4c:	42a8      	cmp	r0, r5
 8009b4e:	dd72      	ble.n	8009c36 <__gethex+0x392>
 8009b50:	1b45      	subs	r5, r0, r5
 8009b52:	42ae      	cmp	r6, r5
 8009b54:	dc36      	bgt.n	8009bc4 <__gethex+0x320>
 8009b56:	f8d8 300c 	ldr.w	r3, [r8, #12]
 8009b5a:	2b02      	cmp	r3, #2
 8009b5c:	d02a      	beq.n	8009bb4 <__gethex+0x310>
 8009b5e:	2b03      	cmp	r3, #3
 8009b60:	d02c      	beq.n	8009bbc <__gethex+0x318>
 8009b62:	2b01      	cmp	r3, #1
 8009b64:	d11c      	bne.n	8009ba0 <__gethex+0x2fc>
 8009b66:	42ae      	cmp	r6, r5
 8009b68:	d11a      	bne.n	8009ba0 <__gethex+0x2fc>
 8009b6a:	2e01      	cmp	r6, #1
 8009b6c:	d112      	bne.n	8009b94 <__gethex+0x2f0>
 8009b6e:	9a04      	ldr	r2, [sp, #16]
 8009b70:	f8d8 3004 	ldr.w	r3, [r8, #4]
 8009b74:	6013      	str	r3, [r2, #0]
 8009b76:	2301      	movs	r3, #1
 8009b78:	6123      	str	r3, [r4, #16]
 8009b7a:	f8c9 3000 	str.w	r3, [r9]
 8009b7e:	9b14      	ldr	r3, [sp, #80]	; 0x50
 8009b80:	2762      	movs	r7, #98	; 0x62
 8009b82:	601c      	str	r4, [r3, #0]
 8009b84:	e723      	b.n	80099ce <__gethex+0x12a>
 8009b86:	bf00      	nop
 8009b88:	0800bc88 	.word	0x0800bc88
 8009b8c:	0800bc10 	.word	0x0800bc10
 8009b90:	0800bc21 	.word	0x0800bc21
 8009b94:	1e71      	subs	r1, r6, #1
 8009b96:	4620      	mov	r0, r4
 8009b98:	f000 fe58 	bl	800a84c <__any_on>
 8009b9c:	2800      	cmp	r0, #0
 8009b9e:	d1e6      	bne.n	8009b6e <__gethex+0x2ca>
 8009ba0:	ee18 0a10 	vmov	r0, s16
 8009ba4:	4621      	mov	r1, r4
 8009ba6:	f000 f9f1 	bl	8009f8c <_Bfree>
 8009baa:	9a14      	ldr	r2, [sp, #80]	; 0x50
 8009bac:	2300      	movs	r3, #0
 8009bae:	6013      	str	r3, [r2, #0]
 8009bb0:	2750      	movs	r7, #80	; 0x50
 8009bb2:	e70c      	b.n	80099ce <__gethex+0x12a>
 8009bb4:	9b15      	ldr	r3, [sp, #84]	; 0x54
 8009bb6:	2b00      	cmp	r3, #0
 8009bb8:	d1f2      	bne.n	8009ba0 <__gethex+0x2fc>
 8009bba:	e7d8      	b.n	8009b6e <__gethex+0x2ca>
 8009bbc:	9b15      	ldr	r3, [sp, #84]	; 0x54
 8009bbe:	2b00      	cmp	r3, #0
 8009bc0:	d1d5      	bne.n	8009b6e <__gethex+0x2ca>
 8009bc2:	e7ed      	b.n	8009ba0 <__gethex+0x2fc>
 8009bc4:	1e6f      	subs	r7, r5, #1
 8009bc6:	f1ba 0f00 	cmp.w	sl, #0
 8009bca:	d131      	bne.n	8009c30 <__gethex+0x38c>
 8009bcc:	b127      	cbz	r7, 8009bd8 <__gethex+0x334>
 8009bce:	4639      	mov	r1, r7
 8009bd0:	4620      	mov	r0, r4
 8009bd2:	f000 fe3b 	bl	800a84c <__any_on>
 8009bd6:	4682      	mov	sl, r0
 8009bd8:	117b      	asrs	r3, r7, #5
 8009bda:	2101      	movs	r1, #1
 8009bdc:	f859 3023 	ldr.w	r3, [r9, r3, lsl #2]
 8009be0:	f007 071f 	and.w	r7, r7, #31
 8009be4:	fa01 f707 	lsl.w	r7, r1, r7
 8009be8:	421f      	tst	r7, r3
 8009bea:	4629      	mov	r1, r5
 8009bec:	4620      	mov	r0, r4
 8009bee:	bf18      	it	ne
 8009bf0:	f04a 0a02 	orrne.w	sl, sl, #2
 8009bf4:	1b76      	subs	r6, r6, r5
 8009bf6:	f7ff fded 	bl	80097d4 <rshift>
 8009bfa:	f8d8 5004 	ldr.w	r5, [r8, #4]
 8009bfe:	2702      	movs	r7, #2
 8009c00:	f1ba 0f00 	cmp.w	sl, #0
 8009c04:	d048      	beq.n	8009c98 <__gethex+0x3f4>
 8009c06:	f8d8 300c 	ldr.w	r3, [r8, #12]
 8009c0a:	2b02      	cmp	r3, #2
 8009c0c:	d015      	beq.n	8009c3a <__gethex+0x396>
 8009c0e:	2b03      	cmp	r3, #3
 8009c10:	d017      	beq.n	8009c42 <__gethex+0x39e>
 8009c12:	2b01      	cmp	r3, #1
 8009c14:	d109      	bne.n	8009c2a <__gethex+0x386>
 8009c16:	f01a 0f02 	tst.w	sl, #2
 8009c1a:	d006      	beq.n	8009c2a <__gethex+0x386>
 8009c1c:	f8d9 0000 	ldr.w	r0, [r9]
 8009c20:	ea4a 0a00 	orr.w	sl, sl, r0
 8009c24:	f01a 0f01 	tst.w	sl, #1
 8009c28:	d10e      	bne.n	8009c48 <__gethex+0x3a4>
 8009c2a:	f047 0710 	orr.w	r7, r7, #16
 8009c2e:	e033      	b.n	8009c98 <__gethex+0x3f4>
 8009c30:	f04f 0a01 	mov.w	sl, #1
 8009c34:	e7d0      	b.n	8009bd8 <__gethex+0x334>
 8009c36:	2701      	movs	r7, #1
 8009c38:	e7e2      	b.n	8009c00 <__gethex+0x35c>
 8009c3a:	9b15      	ldr	r3, [sp, #84]	; 0x54
 8009c3c:	f1c3 0301 	rsb	r3, r3, #1
 8009c40:	9315      	str	r3, [sp, #84]	; 0x54
 8009c42:	9b15      	ldr	r3, [sp, #84]	; 0x54
 8009c44:	2b00      	cmp	r3, #0
 8009c46:	d0f0      	beq.n	8009c2a <__gethex+0x386>
 8009c48:	f8d4 b010 	ldr.w	fp, [r4, #16]
 8009c4c:	f104 0314 	add.w	r3, r4, #20
 8009c50:	ea4f 0a8b 	mov.w	sl, fp, lsl #2
 8009c54:	eb03 018b 	add.w	r1, r3, fp, lsl #2
 8009c58:	f04f 0c00 	mov.w	ip, #0
 8009c5c:	4618      	mov	r0, r3
 8009c5e:	f853 2b04 	ldr.w	r2, [r3], #4
 8009c62:	f1b2 3fff 	cmp.w	r2, #4294967295
 8009c66:	d01c      	beq.n	8009ca2 <__gethex+0x3fe>
 8009c68:	3201      	adds	r2, #1
 8009c6a:	6002      	str	r2, [r0, #0]
 8009c6c:	2f02      	cmp	r7, #2
 8009c6e:	f104 0314 	add.w	r3, r4, #20
 8009c72:	d13f      	bne.n	8009cf4 <__gethex+0x450>
 8009c74:	f8d8 2000 	ldr.w	r2, [r8]
 8009c78:	3a01      	subs	r2, #1
 8009c7a:	42b2      	cmp	r2, r6
 8009c7c:	d10a      	bne.n	8009c94 <__gethex+0x3f0>
 8009c7e:	1171      	asrs	r1, r6, #5
 8009c80:	2201      	movs	r2, #1
 8009c82:	f853 3021 	ldr.w	r3, [r3, r1, lsl #2]
 8009c86:	f006 061f 	and.w	r6, r6, #31
 8009c8a:	fa02 f606 	lsl.w	r6, r2, r6
 8009c8e:	421e      	tst	r6, r3
 8009c90:	bf18      	it	ne
 8009c92:	4617      	movne	r7, r2
 8009c94:	f047 0720 	orr.w	r7, r7, #32
 8009c98:	9b14      	ldr	r3, [sp, #80]	; 0x50
 8009c9a:	601c      	str	r4, [r3, #0]
 8009c9c:	9b04      	ldr	r3, [sp, #16]
 8009c9e:	601d      	str	r5, [r3, #0]
 8009ca0:	e695      	b.n	80099ce <__gethex+0x12a>
 8009ca2:	4299      	cmp	r1, r3
 8009ca4:	f843 cc04 	str.w	ip, [r3, #-4]
 8009ca8:	d8d8      	bhi.n	8009c5c <__gethex+0x3b8>
 8009caa:	68a3      	ldr	r3, [r4, #8]
 8009cac:	459b      	cmp	fp, r3
 8009cae:	db19      	blt.n	8009ce4 <__gethex+0x440>
 8009cb0:	6861      	ldr	r1, [r4, #4]
 8009cb2:	ee18 0a10 	vmov	r0, s16
 8009cb6:	3101      	adds	r1, #1
 8009cb8:	f000 f928 	bl	8009f0c <_Balloc>
 8009cbc:	4681      	mov	r9, r0
 8009cbe:	b918      	cbnz	r0, 8009cc8 <__gethex+0x424>
 8009cc0:	4b1a      	ldr	r3, [pc, #104]	; (8009d2c <__gethex+0x488>)
 8009cc2:	4602      	mov	r2, r0
 8009cc4:	2184      	movs	r1, #132	; 0x84
 8009cc6:	e6a8      	b.n	8009a1a <__gethex+0x176>
 8009cc8:	6922      	ldr	r2, [r4, #16]
 8009cca:	3202      	adds	r2, #2
 8009ccc:	f104 010c 	add.w	r1, r4, #12
 8009cd0:	0092      	lsls	r2, r2, #2
 8009cd2:	300c      	adds	r0, #12
 8009cd4:	f000 f90c 	bl	8009ef0 <memcpy>
 8009cd8:	4621      	mov	r1, r4
 8009cda:	ee18 0a10 	vmov	r0, s16
 8009cde:	f000 f955 	bl	8009f8c <_Bfree>
 8009ce2:	464c      	mov	r4, r9
 8009ce4:	6923      	ldr	r3, [r4, #16]
 8009ce6:	1c5a      	adds	r2, r3, #1
 8009ce8:	eb04 0383 	add.w	r3, r4, r3, lsl #2
 8009cec:	6122      	str	r2, [r4, #16]
 8009cee:	2201      	movs	r2, #1
 8009cf0:	615a      	str	r2, [r3, #20]
 8009cf2:	e7bb      	b.n	8009c6c <__gethex+0x3c8>
 8009cf4:	6922      	ldr	r2, [r4, #16]
 8009cf6:	455a      	cmp	r2, fp
 8009cf8:	dd0b      	ble.n	8009d12 <__gethex+0x46e>
 8009cfa:	2101      	movs	r1, #1
 8009cfc:	4620      	mov	r0, r4
 8009cfe:	f7ff fd69 	bl	80097d4 <rshift>
 8009d02:	f8d8 3008 	ldr.w	r3, [r8, #8]
 8009d06:	3501      	adds	r5, #1
 8009d08:	42ab      	cmp	r3, r5
 8009d0a:	f6ff aed0 	blt.w	8009aae <__gethex+0x20a>
 8009d0e:	2701      	movs	r7, #1
 8009d10:	e7c0      	b.n	8009c94 <__gethex+0x3f0>
 8009d12:	f016 061f 	ands.w	r6, r6, #31
 8009d16:	d0fa      	beq.n	8009d0e <__gethex+0x46a>
 8009d18:	4453      	add	r3, sl
 8009d1a:	f1c6 0620 	rsb	r6, r6, #32
 8009d1e:	f853 0c04 	ldr.w	r0, [r3, #-4]
 8009d22:	f000 f9e5 	bl	800a0f0 <__hi0bits>
 8009d26:	42b0      	cmp	r0, r6
 8009d28:	dbe7      	blt.n	8009cfa <__gethex+0x456>
 8009d2a:	e7f0      	b.n	8009d0e <__gethex+0x46a>
 8009d2c:	0800bc10 	.word	0x0800bc10

08009d30 <L_shift>:
 8009d30:	f1c2 0208 	rsb	r2, r2, #8
 8009d34:	0092      	lsls	r2, r2, #2
 8009d36:	b570      	push	{r4, r5, r6, lr}
 8009d38:	f1c2 0620 	rsb	r6, r2, #32
 8009d3c:	6843      	ldr	r3, [r0, #4]
 8009d3e:	6804      	ldr	r4, [r0, #0]
 8009d40:	fa03 f506 	lsl.w	r5, r3, r6
 8009d44:	432c      	orrs	r4, r5
 8009d46:	40d3      	lsrs	r3, r2
 8009d48:	6004      	str	r4, [r0, #0]
 8009d4a:	f840 3f04 	str.w	r3, [r0, #4]!
 8009d4e:	4288      	cmp	r0, r1
 8009d50:	d3f4      	bcc.n	8009d3c <L_shift+0xc>
 8009d52:	bd70      	pop	{r4, r5, r6, pc}

08009d54 <__match>:
 8009d54:	b530      	push	{r4, r5, lr}
 8009d56:	6803      	ldr	r3, [r0, #0]
 8009d58:	3301      	adds	r3, #1
 8009d5a:	f811 4b01 	ldrb.w	r4, [r1], #1
 8009d5e:	b914      	cbnz	r4, 8009d66 <__match+0x12>
 8009d60:	6003      	str	r3, [r0, #0]
 8009d62:	2001      	movs	r0, #1
 8009d64:	bd30      	pop	{r4, r5, pc}
 8009d66:	f813 2b01 	ldrb.w	r2, [r3], #1
 8009d6a:	f1a2 0541 	sub.w	r5, r2, #65	; 0x41
 8009d6e:	2d19      	cmp	r5, #25
 8009d70:	bf98      	it	ls
 8009d72:	3220      	addls	r2, #32
 8009d74:	42a2      	cmp	r2, r4
 8009d76:	d0f0      	beq.n	8009d5a <__match+0x6>
 8009d78:	2000      	movs	r0, #0
 8009d7a:	e7f3      	b.n	8009d64 <__match+0x10>

08009d7c <__hexnan>:
 8009d7c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8009d80:	680b      	ldr	r3, [r1, #0]
 8009d82:	115e      	asrs	r6, r3, #5
 8009d84:	eb02 0686 	add.w	r6, r2, r6, lsl #2
 8009d88:	f013 031f 	ands.w	r3, r3, #31
 8009d8c:	b087      	sub	sp, #28
 8009d8e:	bf18      	it	ne
 8009d90:	3604      	addne	r6, #4
 8009d92:	2500      	movs	r5, #0
 8009d94:	1f37      	subs	r7, r6, #4
 8009d96:	4690      	mov	r8, r2
 8009d98:	6802      	ldr	r2, [r0, #0]
 8009d9a:	9301      	str	r3, [sp, #4]
 8009d9c:	4682      	mov	sl, r0
 8009d9e:	f846 5c04 	str.w	r5, [r6, #-4]
 8009da2:	46b9      	mov	r9, r7
 8009da4:	463c      	mov	r4, r7
 8009da6:	9502      	str	r5, [sp, #8]
 8009da8:	46ab      	mov	fp, r5
 8009daa:	7851      	ldrb	r1, [r2, #1]
 8009dac:	1c53      	adds	r3, r2, #1
 8009dae:	9303      	str	r3, [sp, #12]
 8009db0:	b341      	cbz	r1, 8009e04 <__hexnan+0x88>
 8009db2:	4608      	mov	r0, r1
 8009db4:	9205      	str	r2, [sp, #20]
 8009db6:	9104      	str	r1, [sp, #16]
 8009db8:	f7ff fd5e 	bl	8009878 <__hexdig_fun>
 8009dbc:	2800      	cmp	r0, #0
 8009dbe:	d14f      	bne.n	8009e60 <__hexnan+0xe4>
 8009dc0:	9904      	ldr	r1, [sp, #16]
 8009dc2:	9a05      	ldr	r2, [sp, #20]
 8009dc4:	2920      	cmp	r1, #32
 8009dc6:	d818      	bhi.n	8009dfa <__hexnan+0x7e>
 8009dc8:	9b02      	ldr	r3, [sp, #8]
 8009dca:	459b      	cmp	fp, r3
 8009dcc:	dd13      	ble.n	8009df6 <__hexnan+0x7a>
 8009dce:	454c      	cmp	r4, r9
 8009dd0:	d206      	bcs.n	8009de0 <__hexnan+0x64>
 8009dd2:	2d07      	cmp	r5, #7
 8009dd4:	dc04      	bgt.n	8009de0 <__hexnan+0x64>
 8009dd6:	462a      	mov	r2, r5
 8009dd8:	4649      	mov	r1, r9
 8009dda:	4620      	mov	r0, r4
 8009ddc:	f7ff ffa8 	bl	8009d30 <L_shift>
 8009de0:	4544      	cmp	r4, r8
 8009de2:	d950      	bls.n	8009e86 <__hexnan+0x10a>
 8009de4:	2300      	movs	r3, #0
 8009de6:	f1a4 0904 	sub.w	r9, r4, #4
 8009dea:	f844 3c04 	str.w	r3, [r4, #-4]
 8009dee:	f8cd b008 	str.w	fp, [sp, #8]
 8009df2:	464c      	mov	r4, r9
 8009df4:	461d      	mov	r5, r3
 8009df6:	9a03      	ldr	r2, [sp, #12]
 8009df8:	e7d7      	b.n	8009daa <__hexnan+0x2e>
 8009dfa:	2929      	cmp	r1, #41	; 0x29
 8009dfc:	d156      	bne.n	8009eac <__hexnan+0x130>
 8009dfe:	3202      	adds	r2, #2
 8009e00:	f8ca 2000 	str.w	r2, [sl]
 8009e04:	f1bb 0f00 	cmp.w	fp, #0
 8009e08:	d050      	beq.n	8009eac <__hexnan+0x130>
 8009e0a:	454c      	cmp	r4, r9
 8009e0c:	d206      	bcs.n	8009e1c <__hexnan+0xa0>
 8009e0e:	2d07      	cmp	r5, #7
 8009e10:	dc04      	bgt.n	8009e1c <__hexnan+0xa0>
 8009e12:	462a      	mov	r2, r5
 8009e14:	4649      	mov	r1, r9
 8009e16:	4620      	mov	r0, r4
 8009e18:	f7ff ff8a 	bl	8009d30 <L_shift>
 8009e1c:	4544      	cmp	r4, r8
 8009e1e:	d934      	bls.n	8009e8a <__hexnan+0x10e>
 8009e20:	f1a8 0204 	sub.w	r2, r8, #4
 8009e24:	4623      	mov	r3, r4
 8009e26:	f853 1b04 	ldr.w	r1, [r3], #4
 8009e2a:	f842 1f04 	str.w	r1, [r2, #4]!
 8009e2e:	429f      	cmp	r7, r3
 8009e30:	d2f9      	bcs.n	8009e26 <__hexnan+0xaa>
 8009e32:	1b3b      	subs	r3, r7, r4
 8009e34:	f023 0303 	bic.w	r3, r3, #3
 8009e38:	3304      	adds	r3, #4
 8009e3a:	3401      	adds	r4, #1
 8009e3c:	3e03      	subs	r6, #3
 8009e3e:	42b4      	cmp	r4, r6
 8009e40:	bf88      	it	hi
 8009e42:	2304      	movhi	r3, #4
 8009e44:	4443      	add	r3, r8
 8009e46:	2200      	movs	r2, #0
 8009e48:	f843 2b04 	str.w	r2, [r3], #4
 8009e4c:	429f      	cmp	r7, r3
 8009e4e:	d2fb      	bcs.n	8009e48 <__hexnan+0xcc>
 8009e50:	683b      	ldr	r3, [r7, #0]
 8009e52:	b91b      	cbnz	r3, 8009e5c <__hexnan+0xe0>
 8009e54:	4547      	cmp	r7, r8
 8009e56:	d127      	bne.n	8009ea8 <__hexnan+0x12c>
 8009e58:	2301      	movs	r3, #1
 8009e5a:	603b      	str	r3, [r7, #0]
 8009e5c:	2005      	movs	r0, #5
 8009e5e:	e026      	b.n	8009eae <__hexnan+0x132>
 8009e60:	3501      	adds	r5, #1
 8009e62:	2d08      	cmp	r5, #8
 8009e64:	f10b 0b01 	add.w	fp, fp, #1
 8009e68:	dd06      	ble.n	8009e78 <__hexnan+0xfc>
 8009e6a:	4544      	cmp	r4, r8
 8009e6c:	d9c3      	bls.n	8009df6 <__hexnan+0x7a>
 8009e6e:	2300      	movs	r3, #0
 8009e70:	f844 3c04 	str.w	r3, [r4, #-4]
 8009e74:	2501      	movs	r5, #1
 8009e76:	3c04      	subs	r4, #4
 8009e78:	6822      	ldr	r2, [r4, #0]
 8009e7a:	f000 000f 	and.w	r0, r0, #15
 8009e7e:	ea40 1202 	orr.w	r2, r0, r2, lsl #4
 8009e82:	6022      	str	r2, [r4, #0]
 8009e84:	e7b7      	b.n	8009df6 <__hexnan+0x7a>
 8009e86:	2508      	movs	r5, #8
 8009e88:	e7b5      	b.n	8009df6 <__hexnan+0x7a>
 8009e8a:	9b01      	ldr	r3, [sp, #4]
 8009e8c:	2b00      	cmp	r3, #0
 8009e8e:	d0df      	beq.n	8009e50 <__hexnan+0xd4>
 8009e90:	f04f 32ff 	mov.w	r2, #4294967295
 8009e94:	f1c3 0320 	rsb	r3, r3, #32
 8009e98:	fa22 f303 	lsr.w	r3, r2, r3
 8009e9c:	f856 2c04 	ldr.w	r2, [r6, #-4]
 8009ea0:	401a      	ands	r2, r3
 8009ea2:	f846 2c04 	str.w	r2, [r6, #-4]
 8009ea6:	e7d3      	b.n	8009e50 <__hexnan+0xd4>
 8009ea8:	3f04      	subs	r7, #4
 8009eaa:	e7d1      	b.n	8009e50 <__hexnan+0xd4>
 8009eac:	2004      	movs	r0, #4
 8009eae:	b007      	add	sp, #28
 8009eb0:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}

08009eb4 <_localeconv_r>:
 8009eb4:	4800      	ldr	r0, [pc, #0]	; (8009eb8 <_localeconv_r+0x4>)
 8009eb6:	4770      	bx	lr
 8009eb8:	20000164 	.word	0x20000164

08009ebc <malloc>:
 8009ebc:	4b02      	ldr	r3, [pc, #8]	; (8009ec8 <malloc+0xc>)
 8009ebe:	4601      	mov	r1, r0
 8009ec0:	6818      	ldr	r0, [r3, #0]
 8009ec2:	f000 bd67 	b.w	800a994 <_malloc_r>
 8009ec6:	bf00      	nop
 8009ec8:	2000000c 	.word	0x2000000c

08009ecc <__ascii_mbtowc>:
 8009ecc:	b082      	sub	sp, #8
 8009ece:	b901      	cbnz	r1, 8009ed2 <__ascii_mbtowc+0x6>
 8009ed0:	a901      	add	r1, sp, #4
 8009ed2:	b142      	cbz	r2, 8009ee6 <__ascii_mbtowc+0x1a>
 8009ed4:	b14b      	cbz	r3, 8009eea <__ascii_mbtowc+0x1e>
 8009ed6:	7813      	ldrb	r3, [r2, #0]
 8009ed8:	600b      	str	r3, [r1, #0]
 8009eda:	7812      	ldrb	r2, [r2, #0]
 8009edc:	1e10      	subs	r0, r2, #0
 8009ede:	bf18      	it	ne
 8009ee0:	2001      	movne	r0, #1
 8009ee2:	b002      	add	sp, #8
 8009ee4:	4770      	bx	lr
 8009ee6:	4610      	mov	r0, r2
 8009ee8:	e7fb      	b.n	8009ee2 <__ascii_mbtowc+0x16>
 8009eea:	f06f 0001 	mvn.w	r0, #1
 8009eee:	e7f8      	b.n	8009ee2 <__ascii_mbtowc+0x16>

08009ef0 <memcpy>:
 8009ef0:	440a      	add	r2, r1
 8009ef2:	4291      	cmp	r1, r2
 8009ef4:	f100 33ff 	add.w	r3, r0, #4294967295
 8009ef8:	d100      	bne.n	8009efc <memcpy+0xc>
 8009efa:	4770      	bx	lr
 8009efc:	b510      	push	{r4, lr}
 8009efe:	f811 4b01 	ldrb.w	r4, [r1], #1
 8009f02:	f803 4f01 	strb.w	r4, [r3, #1]!
 8009f06:	4291      	cmp	r1, r2
 8009f08:	d1f9      	bne.n	8009efe <memcpy+0xe>
 8009f0a:	bd10      	pop	{r4, pc}

08009f0c <_Balloc>:
 8009f0c:	b570      	push	{r4, r5, r6, lr}
 8009f0e:	6a46      	ldr	r6, [r0, #36]	; 0x24
 8009f10:	4604      	mov	r4, r0
 8009f12:	460d      	mov	r5, r1
 8009f14:	b976      	cbnz	r6, 8009f34 <_Balloc+0x28>
 8009f16:	2010      	movs	r0, #16
 8009f18:	f7ff ffd0 	bl	8009ebc <malloc>
 8009f1c:	4602      	mov	r2, r0
 8009f1e:	6260      	str	r0, [r4, #36]	; 0x24
 8009f20:	b920      	cbnz	r0, 8009f2c <_Balloc+0x20>
 8009f22:	4b18      	ldr	r3, [pc, #96]	; (8009f84 <_Balloc+0x78>)
 8009f24:	4818      	ldr	r0, [pc, #96]	; (8009f88 <_Balloc+0x7c>)
 8009f26:	2166      	movs	r1, #102	; 0x66
 8009f28:	f000 ff40 	bl	800adac <__assert_func>
 8009f2c:	e9c0 6601 	strd	r6, r6, [r0, #4]
 8009f30:	6006      	str	r6, [r0, #0]
 8009f32:	60c6      	str	r6, [r0, #12]
 8009f34:	6a66      	ldr	r6, [r4, #36]	; 0x24
 8009f36:	68f3      	ldr	r3, [r6, #12]
 8009f38:	b183      	cbz	r3, 8009f5c <_Balloc+0x50>
 8009f3a:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8009f3c:	68db      	ldr	r3, [r3, #12]
 8009f3e:	f853 0025 	ldr.w	r0, [r3, r5, lsl #2]
 8009f42:	b9b8      	cbnz	r0, 8009f74 <_Balloc+0x68>
 8009f44:	2101      	movs	r1, #1
 8009f46:	fa01 f605 	lsl.w	r6, r1, r5
 8009f4a:	1d72      	adds	r2, r6, #5
 8009f4c:	0092      	lsls	r2, r2, #2
 8009f4e:	4620      	mov	r0, r4
 8009f50:	f000 fc9d 	bl	800a88e <_calloc_r>
 8009f54:	b160      	cbz	r0, 8009f70 <_Balloc+0x64>
 8009f56:	e9c0 5601 	strd	r5, r6, [r0, #4]
 8009f5a:	e00e      	b.n	8009f7a <_Balloc+0x6e>
 8009f5c:	2221      	movs	r2, #33	; 0x21
 8009f5e:	2104      	movs	r1, #4
 8009f60:	4620      	mov	r0, r4
 8009f62:	f000 fc94 	bl	800a88e <_calloc_r>
 8009f66:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8009f68:	60f0      	str	r0, [r6, #12]
 8009f6a:	68db      	ldr	r3, [r3, #12]
 8009f6c:	2b00      	cmp	r3, #0
 8009f6e:	d1e4      	bne.n	8009f3a <_Balloc+0x2e>
 8009f70:	2000      	movs	r0, #0
 8009f72:	bd70      	pop	{r4, r5, r6, pc}
 8009f74:	6802      	ldr	r2, [r0, #0]
 8009f76:	f843 2025 	str.w	r2, [r3, r5, lsl #2]
 8009f7a:	2300      	movs	r3, #0
 8009f7c:	e9c0 3303 	strd	r3, r3, [r0, #12]
 8009f80:	e7f7      	b.n	8009f72 <_Balloc+0x66>
 8009f82:	bf00      	nop
 8009f84:	0800bb9e 	.word	0x0800bb9e
 8009f88:	0800bc9c 	.word	0x0800bc9c

08009f8c <_Bfree>:
 8009f8c:	b570      	push	{r4, r5, r6, lr}
 8009f8e:	6a46      	ldr	r6, [r0, #36]	; 0x24
 8009f90:	4605      	mov	r5, r0
 8009f92:	460c      	mov	r4, r1
 8009f94:	b976      	cbnz	r6, 8009fb4 <_Bfree+0x28>
 8009f96:	2010      	movs	r0, #16
 8009f98:	f7ff ff90 	bl	8009ebc <malloc>
 8009f9c:	4602      	mov	r2, r0
 8009f9e:	6268      	str	r0, [r5, #36]	; 0x24
 8009fa0:	b920      	cbnz	r0, 8009fac <_Bfree+0x20>
 8009fa2:	4b09      	ldr	r3, [pc, #36]	; (8009fc8 <_Bfree+0x3c>)
 8009fa4:	4809      	ldr	r0, [pc, #36]	; (8009fcc <_Bfree+0x40>)
 8009fa6:	218a      	movs	r1, #138	; 0x8a
 8009fa8:	f000 ff00 	bl	800adac <__assert_func>
 8009fac:	e9c0 6601 	strd	r6, r6, [r0, #4]
 8009fb0:	6006      	str	r6, [r0, #0]
 8009fb2:	60c6      	str	r6, [r0, #12]
 8009fb4:	b13c      	cbz	r4, 8009fc6 <_Bfree+0x3a>
 8009fb6:	6a6b      	ldr	r3, [r5, #36]	; 0x24
 8009fb8:	6862      	ldr	r2, [r4, #4]
 8009fba:	68db      	ldr	r3, [r3, #12]
 8009fbc:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
 8009fc0:	6021      	str	r1, [r4, #0]
 8009fc2:	f843 4022 	str.w	r4, [r3, r2, lsl #2]
 8009fc6:	bd70      	pop	{r4, r5, r6, pc}
 8009fc8:	0800bb9e 	.word	0x0800bb9e
 8009fcc:	0800bc9c 	.word	0x0800bc9c

08009fd0 <__multadd>:
 8009fd0:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8009fd4:	690d      	ldr	r5, [r1, #16]
 8009fd6:	4607      	mov	r7, r0
 8009fd8:	460c      	mov	r4, r1
 8009fda:	461e      	mov	r6, r3
 8009fdc:	f101 0c14 	add.w	ip, r1, #20
 8009fe0:	2000      	movs	r0, #0
 8009fe2:	f8dc 3000 	ldr.w	r3, [ip]
 8009fe6:	b299      	uxth	r1, r3
 8009fe8:	fb02 6101 	mla	r1, r2, r1, r6
 8009fec:	0c1e      	lsrs	r6, r3, #16
 8009fee:	0c0b      	lsrs	r3, r1, #16
 8009ff0:	fb02 3306 	mla	r3, r2, r6, r3
 8009ff4:	b289      	uxth	r1, r1
 8009ff6:	3001      	adds	r0, #1
 8009ff8:	eb01 4103 	add.w	r1, r1, r3, lsl #16
 8009ffc:	4285      	cmp	r5, r0
 8009ffe:	f84c 1b04 	str.w	r1, [ip], #4
 800a002:	ea4f 4613 	mov.w	r6, r3, lsr #16
 800a006:	dcec      	bgt.n	8009fe2 <__multadd+0x12>
 800a008:	b30e      	cbz	r6, 800a04e <__multadd+0x7e>
 800a00a:	68a3      	ldr	r3, [r4, #8]
 800a00c:	42ab      	cmp	r3, r5
 800a00e:	dc19      	bgt.n	800a044 <__multadd+0x74>
 800a010:	6861      	ldr	r1, [r4, #4]
 800a012:	4638      	mov	r0, r7
 800a014:	3101      	adds	r1, #1
 800a016:	f7ff ff79 	bl	8009f0c <_Balloc>
 800a01a:	4680      	mov	r8, r0
 800a01c:	b928      	cbnz	r0, 800a02a <__multadd+0x5a>
 800a01e:	4602      	mov	r2, r0
 800a020:	4b0c      	ldr	r3, [pc, #48]	; (800a054 <__multadd+0x84>)
 800a022:	480d      	ldr	r0, [pc, #52]	; (800a058 <__multadd+0x88>)
 800a024:	21b5      	movs	r1, #181	; 0xb5
 800a026:	f000 fec1 	bl	800adac <__assert_func>
 800a02a:	6922      	ldr	r2, [r4, #16]
 800a02c:	3202      	adds	r2, #2
 800a02e:	f104 010c 	add.w	r1, r4, #12
 800a032:	0092      	lsls	r2, r2, #2
 800a034:	300c      	adds	r0, #12
 800a036:	f7ff ff5b 	bl	8009ef0 <memcpy>
 800a03a:	4621      	mov	r1, r4
 800a03c:	4638      	mov	r0, r7
 800a03e:	f7ff ffa5 	bl	8009f8c <_Bfree>
 800a042:	4644      	mov	r4, r8
 800a044:	eb04 0385 	add.w	r3, r4, r5, lsl #2
 800a048:	3501      	adds	r5, #1
 800a04a:	615e      	str	r6, [r3, #20]
 800a04c:	6125      	str	r5, [r4, #16]
 800a04e:	4620      	mov	r0, r4
 800a050:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800a054:	0800bc10 	.word	0x0800bc10
 800a058:	0800bc9c 	.word	0x0800bc9c

0800a05c <__s2b>:
 800a05c:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800a060:	460c      	mov	r4, r1
 800a062:	4615      	mov	r5, r2
 800a064:	461f      	mov	r7, r3
 800a066:	2209      	movs	r2, #9
 800a068:	3308      	adds	r3, #8
 800a06a:	4606      	mov	r6, r0
 800a06c:	fb93 f3f2 	sdiv	r3, r3, r2
 800a070:	2100      	movs	r1, #0
 800a072:	2201      	movs	r2, #1
 800a074:	429a      	cmp	r2, r3
 800a076:	db09      	blt.n	800a08c <__s2b+0x30>
 800a078:	4630      	mov	r0, r6
 800a07a:	f7ff ff47 	bl	8009f0c <_Balloc>
 800a07e:	b940      	cbnz	r0, 800a092 <__s2b+0x36>
 800a080:	4602      	mov	r2, r0
 800a082:	4b19      	ldr	r3, [pc, #100]	; (800a0e8 <__s2b+0x8c>)
 800a084:	4819      	ldr	r0, [pc, #100]	; (800a0ec <__s2b+0x90>)
 800a086:	21ce      	movs	r1, #206	; 0xce
 800a088:	f000 fe90 	bl	800adac <__assert_func>
 800a08c:	0052      	lsls	r2, r2, #1
 800a08e:	3101      	adds	r1, #1
 800a090:	e7f0      	b.n	800a074 <__s2b+0x18>
 800a092:	9b08      	ldr	r3, [sp, #32]
 800a094:	6143      	str	r3, [r0, #20]
 800a096:	2d09      	cmp	r5, #9
 800a098:	f04f 0301 	mov.w	r3, #1
 800a09c:	6103      	str	r3, [r0, #16]
 800a09e:	dd16      	ble.n	800a0ce <__s2b+0x72>
 800a0a0:	f104 0909 	add.w	r9, r4, #9
 800a0a4:	46c8      	mov	r8, r9
 800a0a6:	442c      	add	r4, r5
 800a0a8:	f818 3b01 	ldrb.w	r3, [r8], #1
 800a0ac:	4601      	mov	r1, r0
 800a0ae:	3b30      	subs	r3, #48	; 0x30
 800a0b0:	220a      	movs	r2, #10
 800a0b2:	4630      	mov	r0, r6
 800a0b4:	f7ff ff8c 	bl	8009fd0 <__multadd>
 800a0b8:	45a0      	cmp	r8, r4
 800a0ba:	d1f5      	bne.n	800a0a8 <__s2b+0x4c>
 800a0bc:	f1a5 0408 	sub.w	r4, r5, #8
 800a0c0:	444c      	add	r4, r9
 800a0c2:	1b2d      	subs	r5, r5, r4
 800a0c4:	1963      	adds	r3, r4, r5
 800a0c6:	42bb      	cmp	r3, r7
 800a0c8:	db04      	blt.n	800a0d4 <__s2b+0x78>
 800a0ca:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800a0ce:	340a      	adds	r4, #10
 800a0d0:	2509      	movs	r5, #9
 800a0d2:	e7f6      	b.n	800a0c2 <__s2b+0x66>
 800a0d4:	f814 3b01 	ldrb.w	r3, [r4], #1
 800a0d8:	4601      	mov	r1, r0
 800a0da:	3b30      	subs	r3, #48	; 0x30
 800a0dc:	220a      	movs	r2, #10
 800a0de:	4630      	mov	r0, r6
 800a0e0:	f7ff ff76 	bl	8009fd0 <__multadd>
 800a0e4:	e7ee      	b.n	800a0c4 <__s2b+0x68>
 800a0e6:	bf00      	nop
 800a0e8:	0800bc10 	.word	0x0800bc10
 800a0ec:	0800bc9c 	.word	0x0800bc9c

0800a0f0 <__hi0bits>:
 800a0f0:	0c03      	lsrs	r3, r0, #16
 800a0f2:	041b      	lsls	r3, r3, #16
 800a0f4:	b9d3      	cbnz	r3, 800a12c <__hi0bits+0x3c>
 800a0f6:	0400      	lsls	r0, r0, #16
 800a0f8:	2310      	movs	r3, #16
 800a0fa:	f010 4f7f 	tst.w	r0, #4278190080	; 0xff000000
 800a0fe:	bf04      	itt	eq
 800a100:	0200      	lsleq	r0, r0, #8
 800a102:	3308      	addeq	r3, #8
 800a104:	f010 4f70 	tst.w	r0, #4026531840	; 0xf0000000
 800a108:	bf04      	itt	eq
 800a10a:	0100      	lsleq	r0, r0, #4
 800a10c:	3304      	addeq	r3, #4
 800a10e:	f010 4f40 	tst.w	r0, #3221225472	; 0xc0000000
 800a112:	bf04      	itt	eq
 800a114:	0080      	lsleq	r0, r0, #2
 800a116:	3302      	addeq	r3, #2
 800a118:	2800      	cmp	r0, #0
 800a11a:	db05      	blt.n	800a128 <__hi0bits+0x38>
 800a11c:	f010 4f80 	tst.w	r0, #1073741824	; 0x40000000
 800a120:	f103 0301 	add.w	r3, r3, #1
 800a124:	bf08      	it	eq
 800a126:	2320      	moveq	r3, #32
 800a128:	4618      	mov	r0, r3
 800a12a:	4770      	bx	lr
 800a12c:	2300      	movs	r3, #0
 800a12e:	e7e4      	b.n	800a0fa <__hi0bits+0xa>

0800a130 <__lo0bits>:
 800a130:	6803      	ldr	r3, [r0, #0]
 800a132:	f013 0207 	ands.w	r2, r3, #7
 800a136:	4601      	mov	r1, r0
 800a138:	d00b      	beq.n	800a152 <__lo0bits+0x22>
 800a13a:	07da      	lsls	r2, r3, #31
 800a13c:	d423      	bmi.n	800a186 <__lo0bits+0x56>
 800a13e:	0798      	lsls	r0, r3, #30
 800a140:	bf49      	itett	mi
 800a142:	085b      	lsrmi	r3, r3, #1
 800a144:	089b      	lsrpl	r3, r3, #2
 800a146:	2001      	movmi	r0, #1
 800a148:	600b      	strmi	r3, [r1, #0]
 800a14a:	bf5c      	itt	pl
 800a14c:	600b      	strpl	r3, [r1, #0]
 800a14e:	2002      	movpl	r0, #2
 800a150:	4770      	bx	lr
 800a152:	b298      	uxth	r0, r3
 800a154:	b9a8      	cbnz	r0, 800a182 <__lo0bits+0x52>
 800a156:	0c1b      	lsrs	r3, r3, #16
 800a158:	2010      	movs	r0, #16
 800a15a:	b2da      	uxtb	r2, r3
 800a15c:	b90a      	cbnz	r2, 800a162 <__lo0bits+0x32>
 800a15e:	3008      	adds	r0, #8
 800a160:	0a1b      	lsrs	r3, r3, #8
 800a162:	071a      	lsls	r2, r3, #28
 800a164:	bf04      	itt	eq
 800a166:	091b      	lsreq	r3, r3, #4
 800a168:	3004      	addeq	r0, #4
 800a16a:	079a      	lsls	r2, r3, #30
 800a16c:	bf04      	itt	eq
 800a16e:	089b      	lsreq	r3, r3, #2
 800a170:	3002      	addeq	r0, #2
 800a172:	07da      	lsls	r2, r3, #31
 800a174:	d403      	bmi.n	800a17e <__lo0bits+0x4e>
 800a176:	085b      	lsrs	r3, r3, #1
 800a178:	f100 0001 	add.w	r0, r0, #1
 800a17c:	d005      	beq.n	800a18a <__lo0bits+0x5a>
 800a17e:	600b      	str	r3, [r1, #0]
 800a180:	4770      	bx	lr
 800a182:	4610      	mov	r0, r2
 800a184:	e7e9      	b.n	800a15a <__lo0bits+0x2a>
 800a186:	2000      	movs	r0, #0
 800a188:	4770      	bx	lr
 800a18a:	2020      	movs	r0, #32
 800a18c:	4770      	bx	lr
	...

0800a190 <__i2b>:
 800a190:	b510      	push	{r4, lr}
 800a192:	460c      	mov	r4, r1
 800a194:	2101      	movs	r1, #1
 800a196:	f7ff feb9 	bl	8009f0c <_Balloc>
 800a19a:	4602      	mov	r2, r0
 800a19c:	b928      	cbnz	r0, 800a1aa <__i2b+0x1a>
 800a19e:	4b05      	ldr	r3, [pc, #20]	; (800a1b4 <__i2b+0x24>)
 800a1a0:	4805      	ldr	r0, [pc, #20]	; (800a1b8 <__i2b+0x28>)
 800a1a2:	f44f 71a0 	mov.w	r1, #320	; 0x140
 800a1a6:	f000 fe01 	bl	800adac <__assert_func>
 800a1aa:	2301      	movs	r3, #1
 800a1ac:	6144      	str	r4, [r0, #20]
 800a1ae:	6103      	str	r3, [r0, #16]
 800a1b0:	bd10      	pop	{r4, pc}
 800a1b2:	bf00      	nop
 800a1b4:	0800bc10 	.word	0x0800bc10
 800a1b8:	0800bc9c 	.word	0x0800bc9c

0800a1bc <__multiply>:
 800a1bc:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800a1c0:	4691      	mov	r9, r2
 800a1c2:	690a      	ldr	r2, [r1, #16]
 800a1c4:	f8d9 3010 	ldr.w	r3, [r9, #16]
 800a1c8:	429a      	cmp	r2, r3
 800a1ca:	bfb8      	it	lt
 800a1cc:	460b      	movlt	r3, r1
 800a1ce:	460c      	mov	r4, r1
 800a1d0:	bfbc      	itt	lt
 800a1d2:	464c      	movlt	r4, r9
 800a1d4:	4699      	movlt	r9, r3
 800a1d6:	6927      	ldr	r7, [r4, #16]
 800a1d8:	f8d9 a010 	ldr.w	sl, [r9, #16]
 800a1dc:	68a3      	ldr	r3, [r4, #8]
 800a1de:	6861      	ldr	r1, [r4, #4]
 800a1e0:	eb07 060a 	add.w	r6, r7, sl
 800a1e4:	42b3      	cmp	r3, r6
 800a1e6:	b085      	sub	sp, #20
 800a1e8:	bfb8      	it	lt
 800a1ea:	3101      	addlt	r1, #1
 800a1ec:	f7ff fe8e 	bl	8009f0c <_Balloc>
 800a1f0:	b930      	cbnz	r0, 800a200 <__multiply+0x44>
 800a1f2:	4602      	mov	r2, r0
 800a1f4:	4b44      	ldr	r3, [pc, #272]	; (800a308 <__multiply+0x14c>)
 800a1f6:	4845      	ldr	r0, [pc, #276]	; (800a30c <__multiply+0x150>)
 800a1f8:	f240 115d 	movw	r1, #349	; 0x15d
 800a1fc:	f000 fdd6 	bl	800adac <__assert_func>
 800a200:	f100 0514 	add.w	r5, r0, #20
 800a204:	eb05 0886 	add.w	r8, r5, r6, lsl #2
 800a208:	462b      	mov	r3, r5
 800a20a:	2200      	movs	r2, #0
 800a20c:	4543      	cmp	r3, r8
 800a20e:	d321      	bcc.n	800a254 <__multiply+0x98>
 800a210:	f104 0314 	add.w	r3, r4, #20
 800a214:	eb03 0787 	add.w	r7, r3, r7, lsl #2
 800a218:	f109 0314 	add.w	r3, r9, #20
 800a21c:	eb03 028a 	add.w	r2, r3, sl, lsl #2
 800a220:	9202      	str	r2, [sp, #8]
 800a222:	1b3a      	subs	r2, r7, r4
 800a224:	3a15      	subs	r2, #21
 800a226:	f022 0203 	bic.w	r2, r2, #3
 800a22a:	3204      	adds	r2, #4
 800a22c:	f104 0115 	add.w	r1, r4, #21
 800a230:	428f      	cmp	r7, r1
 800a232:	bf38      	it	cc
 800a234:	2204      	movcc	r2, #4
 800a236:	9201      	str	r2, [sp, #4]
 800a238:	9a02      	ldr	r2, [sp, #8]
 800a23a:	9303      	str	r3, [sp, #12]
 800a23c:	429a      	cmp	r2, r3
 800a23e:	d80c      	bhi.n	800a25a <__multiply+0x9e>
 800a240:	2e00      	cmp	r6, #0
 800a242:	dd03      	ble.n	800a24c <__multiply+0x90>
 800a244:	f858 3d04 	ldr.w	r3, [r8, #-4]!
 800a248:	2b00      	cmp	r3, #0
 800a24a:	d05a      	beq.n	800a302 <__multiply+0x146>
 800a24c:	6106      	str	r6, [r0, #16]
 800a24e:	b005      	add	sp, #20
 800a250:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800a254:	f843 2b04 	str.w	r2, [r3], #4
 800a258:	e7d8      	b.n	800a20c <__multiply+0x50>
 800a25a:	f8b3 a000 	ldrh.w	sl, [r3]
 800a25e:	f1ba 0f00 	cmp.w	sl, #0
 800a262:	d024      	beq.n	800a2ae <__multiply+0xf2>
 800a264:	f104 0e14 	add.w	lr, r4, #20
 800a268:	46a9      	mov	r9, r5
 800a26a:	f04f 0c00 	mov.w	ip, #0
 800a26e:	f85e 2b04 	ldr.w	r2, [lr], #4
 800a272:	f8d9 1000 	ldr.w	r1, [r9]
 800a276:	fa1f fb82 	uxth.w	fp, r2
 800a27a:	b289      	uxth	r1, r1
 800a27c:	fb0a 110b 	mla	r1, sl, fp, r1
 800a280:	ea4f 4b12 	mov.w	fp, r2, lsr #16
 800a284:	f8d9 2000 	ldr.w	r2, [r9]
 800a288:	4461      	add	r1, ip
 800a28a:	ea4f 4c12 	mov.w	ip, r2, lsr #16
 800a28e:	fb0a c20b 	mla	r2, sl, fp, ip
 800a292:	eb02 4211 	add.w	r2, r2, r1, lsr #16
 800a296:	b289      	uxth	r1, r1
 800a298:	ea41 4102 	orr.w	r1, r1, r2, lsl #16
 800a29c:	4577      	cmp	r7, lr
 800a29e:	f849 1b04 	str.w	r1, [r9], #4
 800a2a2:	ea4f 4c12 	mov.w	ip, r2, lsr #16
 800a2a6:	d8e2      	bhi.n	800a26e <__multiply+0xb2>
 800a2a8:	9a01      	ldr	r2, [sp, #4]
 800a2aa:	f845 c002 	str.w	ip, [r5, r2]
 800a2ae:	9a03      	ldr	r2, [sp, #12]
 800a2b0:	f8b2 9002 	ldrh.w	r9, [r2, #2]
 800a2b4:	3304      	adds	r3, #4
 800a2b6:	f1b9 0f00 	cmp.w	r9, #0
 800a2ba:	d020      	beq.n	800a2fe <__multiply+0x142>
 800a2bc:	6829      	ldr	r1, [r5, #0]
 800a2be:	f104 0c14 	add.w	ip, r4, #20
 800a2c2:	46ae      	mov	lr, r5
 800a2c4:	f04f 0a00 	mov.w	sl, #0
 800a2c8:	f8bc b000 	ldrh.w	fp, [ip]
 800a2cc:	f8be 2002 	ldrh.w	r2, [lr, #2]
 800a2d0:	fb09 220b 	mla	r2, r9, fp, r2
 800a2d4:	4492      	add	sl, r2
 800a2d6:	b289      	uxth	r1, r1
 800a2d8:	ea41 410a 	orr.w	r1, r1, sl, lsl #16
 800a2dc:	f84e 1b04 	str.w	r1, [lr], #4
 800a2e0:	f85c 2b04 	ldr.w	r2, [ip], #4
 800a2e4:	f8be 1000 	ldrh.w	r1, [lr]
 800a2e8:	0c12      	lsrs	r2, r2, #16
 800a2ea:	fb09 1102 	mla	r1, r9, r2, r1
 800a2ee:	eb01 411a 	add.w	r1, r1, sl, lsr #16
 800a2f2:	4567      	cmp	r7, ip
 800a2f4:	ea4f 4a11 	mov.w	sl, r1, lsr #16
 800a2f8:	d8e6      	bhi.n	800a2c8 <__multiply+0x10c>
 800a2fa:	9a01      	ldr	r2, [sp, #4]
 800a2fc:	50a9      	str	r1, [r5, r2]
 800a2fe:	3504      	adds	r5, #4
 800a300:	e79a      	b.n	800a238 <__multiply+0x7c>
 800a302:	3e01      	subs	r6, #1
 800a304:	e79c      	b.n	800a240 <__multiply+0x84>
 800a306:	bf00      	nop
 800a308:	0800bc10 	.word	0x0800bc10
 800a30c:	0800bc9c 	.word	0x0800bc9c

0800a310 <__pow5mult>:
 800a310:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800a314:	4615      	mov	r5, r2
 800a316:	f012 0203 	ands.w	r2, r2, #3
 800a31a:	4606      	mov	r6, r0
 800a31c:	460f      	mov	r7, r1
 800a31e:	d007      	beq.n	800a330 <__pow5mult+0x20>
 800a320:	4c25      	ldr	r4, [pc, #148]	; (800a3b8 <__pow5mult+0xa8>)
 800a322:	3a01      	subs	r2, #1
 800a324:	2300      	movs	r3, #0
 800a326:	f854 2022 	ldr.w	r2, [r4, r2, lsl #2]
 800a32a:	f7ff fe51 	bl	8009fd0 <__multadd>
 800a32e:	4607      	mov	r7, r0
 800a330:	10ad      	asrs	r5, r5, #2
 800a332:	d03d      	beq.n	800a3b0 <__pow5mult+0xa0>
 800a334:	6a74      	ldr	r4, [r6, #36]	; 0x24
 800a336:	b97c      	cbnz	r4, 800a358 <__pow5mult+0x48>
 800a338:	2010      	movs	r0, #16
 800a33a:	f7ff fdbf 	bl	8009ebc <malloc>
 800a33e:	4602      	mov	r2, r0
 800a340:	6270      	str	r0, [r6, #36]	; 0x24
 800a342:	b928      	cbnz	r0, 800a350 <__pow5mult+0x40>
 800a344:	4b1d      	ldr	r3, [pc, #116]	; (800a3bc <__pow5mult+0xac>)
 800a346:	481e      	ldr	r0, [pc, #120]	; (800a3c0 <__pow5mult+0xb0>)
 800a348:	f44f 71d7 	mov.w	r1, #430	; 0x1ae
 800a34c:	f000 fd2e 	bl	800adac <__assert_func>
 800a350:	e9c0 4401 	strd	r4, r4, [r0, #4]
 800a354:	6004      	str	r4, [r0, #0]
 800a356:	60c4      	str	r4, [r0, #12]
 800a358:	f8d6 8024 	ldr.w	r8, [r6, #36]	; 0x24
 800a35c:	f8d8 4008 	ldr.w	r4, [r8, #8]
 800a360:	b94c      	cbnz	r4, 800a376 <__pow5mult+0x66>
 800a362:	f240 2171 	movw	r1, #625	; 0x271
 800a366:	4630      	mov	r0, r6
 800a368:	f7ff ff12 	bl	800a190 <__i2b>
 800a36c:	2300      	movs	r3, #0
 800a36e:	f8c8 0008 	str.w	r0, [r8, #8]
 800a372:	4604      	mov	r4, r0
 800a374:	6003      	str	r3, [r0, #0]
 800a376:	f04f 0900 	mov.w	r9, #0
 800a37a:	07eb      	lsls	r3, r5, #31
 800a37c:	d50a      	bpl.n	800a394 <__pow5mult+0x84>
 800a37e:	4639      	mov	r1, r7
 800a380:	4622      	mov	r2, r4
 800a382:	4630      	mov	r0, r6
 800a384:	f7ff ff1a 	bl	800a1bc <__multiply>
 800a388:	4639      	mov	r1, r7
 800a38a:	4680      	mov	r8, r0
 800a38c:	4630      	mov	r0, r6
 800a38e:	f7ff fdfd 	bl	8009f8c <_Bfree>
 800a392:	4647      	mov	r7, r8
 800a394:	106d      	asrs	r5, r5, #1
 800a396:	d00b      	beq.n	800a3b0 <__pow5mult+0xa0>
 800a398:	6820      	ldr	r0, [r4, #0]
 800a39a:	b938      	cbnz	r0, 800a3ac <__pow5mult+0x9c>
 800a39c:	4622      	mov	r2, r4
 800a39e:	4621      	mov	r1, r4
 800a3a0:	4630      	mov	r0, r6
 800a3a2:	f7ff ff0b 	bl	800a1bc <__multiply>
 800a3a6:	6020      	str	r0, [r4, #0]
 800a3a8:	f8c0 9000 	str.w	r9, [r0]
 800a3ac:	4604      	mov	r4, r0
 800a3ae:	e7e4      	b.n	800a37a <__pow5mult+0x6a>
 800a3b0:	4638      	mov	r0, r7
 800a3b2:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800a3b6:	bf00      	nop
 800a3b8:	0800bde8 	.word	0x0800bde8
 800a3bc:	0800bb9e 	.word	0x0800bb9e
 800a3c0:	0800bc9c 	.word	0x0800bc9c

0800a3c4 <__lshift>:
 800a3c4:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800a3c8:	460c      	mov	r4, r1
 800a3ca:	6849      	ldr	r1, [r1, #4]
 800a3cc:	6923      	ldr	r3, [r4, #16]
 800a3ce:	eb03 1862 	add.w	r8, r3, r2, asr #5
 800a3d2:	68a3      	ldr	r3, [r4, #8]
 800a3d4:	4607      	mov	r7, r0
 800a3d6:	4691      	mov	r9, r2
 800a3d8:	ea4f 1a62 	mov.w	sl, r2, asr #5
 800a3dc:	f108 0601 	add.w	r6, r8, #1
 800a3e0:	42b3      	cmp	r3, r6
 800a3e2:	db0b      	blt.n	800a3fc <__lshift+0x38>
 800a3e4:	4638      	mov	r0, r7
 800a3e6:	f7ff fd91 	bl	8009f0c <_Balloc>
 800a3ea:	4605      	mov	r5, r0
 800a3ec:	b948      	cbnz	r0, 800a402 <__lshift+0x3e>
 800a3ee:	4602      	mov	r2, r0
 800a3f0:	4b2a      	ldr	r3, [pc, #168]	; (800a49c <__lshift+0xd8>)
 800a3f2:	482b      	ldr	r0, [pc, #172]	; (800a4a0 <__lshift+0xdc>)
 800a3f4:	f240 11d9 	movw	r1, #473	; 0x1d9
 800a3f8:	f000 fcd8 	bl	800adac <__assert_func>
 800a3fc:	3101      	adds	r1, #1
 800a3fe:	005b      	lsls	r3, r3, #1
 800a400:	e7ee      	b.n	800a3e0 <__lshift+0x1c>
 800a402:	2300      	movs	r3, #0
 800a404:	f100 0114 	add.w	r1, r0, #20
 800a408:	f100 0210 	add.w	r2, r0, #16
 800a40c:	4618      	mov	r0, r3
 800a40e:	4553      	cmp	r3, sl
 800a410:	db37      	blt.n	800a482 <__lshift+0xbe>
 800a412:	6920      	ldr	r0, [r4, #16]
 800a414:	ea2a 7aea 	bic.w	sl, sl, sl, asr #31
 800a418:	f104 0314 	add.w	r3, r4, #20
 800a41c:	f019 091f 	ands.w	r9, r9, #31
 800a420:	eb01 018a 	add.w	r1, r1, sl, lsl #2
 800a424:	eb03 0080 	add.w	r0, r3, r0, lsl #2
 800a428:	d02f      	beq.n	800a48a <__lshift+0xc6>
 800a42a:	f1c9 0e20 	rsb	lr, r9, #32
 800a42e:	468a      	mov	sl, r1
 800a430:	f04f 0c00 	mov.w	ip, #0
 800a434:	681a      	ldr	r2, [r3, #0]
 800a436:	fa02 f209 	lsl.w	r2, r2, r9
 800a43a:	ea42 020c 	orr.w	r2, r2, ip
 800a43e:	f84a 2b04 	str.w	r2, [sl], #4
 800a442:	f853 2b04 	ldr.w	r2, [r3], #4
 800a446:	4298      	cmp	r0, r3
 800a448:	fa22 fc0e 	lsr.w	ip, r2, lr
 800a44c:	d8f2      	bhi.n	800a434 <__lshift+0x70>
 800a44e:	1b03      	subs	r3, r0, r4
 800a450:	3b15      	subs	r3, #21
 800a452:	f023 0303 	bic.w	r3, r3, #3
 800a456:	3304      	adds	r3, #4
 800a458:	f104 0215 	add.w	r2, r4, #21
 800a45c:	4290      	cmp	r0, r2
 800a45e:	bf38      	it	cc
 800a460:	2304      	movcc	r3, #4
 800a462:	f841 c003 	str.w	ip, [r1, r3]
 800a466:	f1bc 0f00 	cmp.w	ip, #0
 800a46a:	d001      	beq.n	800a470 <__lshift+0xac>
 800a46c:	f108 0602 	add.w	r6, r8, #2
 800a470:	3e01      	subs	r6, #1
 800a472:	4638      	mov	r0, r7
 800a474:	612e      	str	r6, [r5, #16]
 800a476:	4621      	mov	r1, r4
 800a478:	f7ff fd88 	bl	8009f8c <_Bfree>
 800a47c:	4628      	mov	r0, r5
 800a47e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800a482:	f842 0f04 	str.w	r0, [r2, #4]!
 800a486:	3301      	adds	r3, #1
 800a488:	e7c1      	b.n	800a40e <__lshift+0x4a>
 800a48a:	3904      	subs	r1, #4
 800a48c:	f853 2b04 	ldr.w	r2, [r3], #4
 800a490:	f841 2f04 	str.w	r2, [r1, #4]!
 800a494:	4298      	cmp	r0, r3
 800a496:	d8f9      	bhi.n	800a48c <__lshift+0xc8>
 800a498:	e7ea      	b.n	800a470 <__lshift+0xac>
 800a49a:	bf00      	nop
 800a49c:	0800bc10 	.word	0x0800bc10
 800a4a0:	0800bc9c 	.word	0x0800bc9c

0800a4a4 <__mcmp>:
 800a4a4:	b530      	push	{r4, r5, lr}
 800a4a6:	6902      	ldr	r2, [r0, #16]
 800a4a8:	690c      	ldr	r4, [r1, #16]
 800a4aa:	1b12      	subs	r2, r2, r4
 800a4ac:	d10e      	bne.n	800a4cc <__mcmp+0x28>
 800a4ae:	f100 0314 	add.w	r3, r0, #20
 800a4b2:	3114      	adds	r1, #20
 800a4b4:	eb03 0084 	add.w	r0, r3, r4, lsl #2
 800a4b8:	eb01 0184 	add.w	r1, r1, r4, lsl #2
 800a4bc:	f850 5d04 	ldr.w	r5, [r0, #-4]!
 800a4c0:	f851 4d04 	ldr.w	r4, [r1, #-4]!
 800a4c4:	42a5      	cmp	r5, r4
 800a4c6:	d003      	beq.n	800a4d0 <__mcmp+0x2c>
 800a4c8:	d305      	bcc.n	800a4d6 <__mcmp+0x32>
 800a4ca:	2201      	movs	r2, #1
 800a4cc:	4610      	mov	r0, r2
 800a4ce:	bd30      	pop	{r4, r5, pc}
 800a4d0:	4283      	cmp	r3, r0
 800a4d2:	d3f3      	bcc.n	800a4bc <__mcmp+0x18>
 800a4d4:	e7fa      	b.n	800a4cc <__mcmp+0x28>
 800a4d6:	f04f 32ff 	mov.w	r2, #4294967295
 800a4da:	e7f7      	b.n	800a4cc <__mcmp+0x28>

0800a4dc <__mdiff>:
 800a4dc:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800a4e0:	460c      	mov	r4, r1
 800a4e2:	4606      	mov	r6, r0
 800a4e4:	4611      	mov	r1, r2
 800a4e6:	4620      	mov	r0, r4
 800a4e8:	4690      	mov	r8, r2
 800a4ea:	f7ff ffdb 	bl	800a4a4 <__mcmp>
 800a4ee:	1e05      	subs	r5, r0, #0
 800a4f0:	d110      	bne.n	800a514 <__mdiff+0x38>
 800a4f2:	4629      	mov	r1, r5
 800a4f4:	4630      	mov	r0, r6
 800a4f6:	f7ff fd09 	bl	8009f0c <_Balloc>
 800a4fa:	b930      	cbnz	r0, 800a50a <__mdiff+0x2e>
 800a4fc:	4b3a      	ldr	r3, [pc, #232]	; (800a5e8 <__mdiff+0x10c>)
 800a4fe:	4602      	mov	r2, r0
 800a500:	f240 2132 	movw	r1, #562	; 0x232
 800a504:	4839      	ldr	r0, [pc, #228]	; (800a5ec <__mdiff+0x110>)
 800a506:	f000 fc51 	bl	800adac <__assert_func>
 800a50a:	2301      	movs	r3, #1
 800a50c:	e9c0 3504 	strd	r3, r5, [r0, #16]
 800a510:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800a514:	bfa4      	itt	ge
 800a516:	4643      	movge	r3, r8
 800a518:	46a0      	movge	r8, r4
 800a51a:	4630      	mov	r0, r6
 800a51c:	f8d8 1004 	ldr.w	r1, [r8, #4]
 800a520:	bfa6      	itte	ge
 800a522:	461c      	movge	r4, r3
 800a524:	2500      	movge	r5, #0
 800a526:	2501      	movlt	r5, #1
 800a528:	f7ff fcf0 	bl	8009f0c <_Balloc>
 800a52c:	b920      	cbnz	r0, 800a538 <__mdiff+0x5c>
 800a52e:	4b2e      	ldr	r3, [pc, #184]	; (800a5e8 <__mdiff+0x10c>)
 800a530:	4602      	mov	r2, r0
 800a532:	f44f 7110 	mov.w	r1, #576	; 0x240
 800a536:	e7e5      	b.n	800a504 <__mdiff+0x28>
 800a538:	f8d8 7010 	ldr.w	r7, [r8, #16]
 800a53c:	6926      	ldr	r6, [r4, #16]
 800a53e:	60c5      	str	r5, [r0, #12]
 800a540:	f104 0914 	add.w	r9, r4, #20
 800a544:	f108 0514 	add.w	r5, r8, #20
 800a548:	f100 0e14 	add.w	lr, r0, #20
 800a54c:	eb05 0c87 	add.w	ip, r5, r7, lsl #2
 800a550:	eb09 0686 	add.w	r6, r9, r6, lsl #2
 800a554:	f108 0210 	add.w	r2, r8, #16
 800a558:	46f2      	mov	sl, lr
 800a55a:	2100      	movs	r1, #0
 800a55c:	f859 3b04 	ldr.w	r3, [r9], #4
 800a560:	f852 bf04 	ldr.w	fp, [r2, #4]!
 800a564:	fa1f f883 	uxth.w	r8, r3
 800a568:	fa11 f18b 	uxtah	r1, r1, fp
 800a56c:	0c1b      	lsrs	r3, r3, #16
 800a56e:	eba1 0808 	sub.w	r8, r1, r8
 800a572:	ebc3 431b 	rsb	r3, r3, fp, lsr #16
 800a576:	eb03 4328 	add.w	r3, r3, r8, asr #16
 800a57a:	fa1f f888 	uxth.w	r8, r8
 800a57e:	1419      	asrs	r1, r3, #16
 800a580:	454e      	cmp	r6, r9
 800a582:	ea48 4303 	orr.w	r3, r8, r3, lsl #16
 800a586:	f84a 3b04 	str.w	r3, [sl], #4
 800a58a:	d8e7      	bhi.n	800a55c <__mdiff+0x80>
 800a58c:	1b33      	subs	r3, r6, r4
 800a58e:	3b15      	subs	r3, #21
 800a590:	f023 0303 	bic.w	r3, r3, #3
 800a594:	3304      	adds	r3, #4
 800a596:	3415      	adds	r4, #21
 800a598:	42a6      	cmp	r6, r4
 800a59a:	bf38      	it	cc
 800a59c:	2304      	movcc	r3, #4
 800a59e:	441d      	add	r5, r3
 800a5a0:	4473      	add	r3, lr
 800a5a2:	469e      	mov	lr, r3
 800a5a4:	462e      	mov	r6, r5
 800a5a6:	4566      	cmp	r6, ip
 800a5a8:	d30e      	bcc.n	800a5c8 <__mdiff+0xec>
 800a5aa:	f10c 0203 	add.w	r2, ip, #3
 800a5ae:	1b52      	subs	r2, r2, r5
 800a5b0:	f022 0203 	bic.w	r2, r2, #3
 800a5b4:	3d03      	subs	r5, #3
 800a5b6:	45ac      	cmp	ip, r5
 800a5b8:	bf38      	it	cc
 800a5ba:	2200      	movcc	r2, #0
 800a5bc:	441a      	add	r2, r3
 800a5be:	f852 3d04 	ldr.w	r3, [r2, #-4]!
 800a5c2:	b17b      	cbz	r3, 800a5e4 <__mdiff+0x108>
 800a5c4:	6107      	str	r7, [r0, #16]
 800a5c6:	e7a3      	b.n	800a510 <__mdiff+0x34>
 800a5c8:	f856 8b04 	ldr.w	r8, [r6], #4
 800a5cc:	fa11 f288 	uxtah	r2, r1, r8
 800a5d0:	1414      	asrs	r4, r2, #16
 800a5d2:	eb04 4418 	add.w	r4, r4, r8, lsr #16
 800a5d6:	b292      	uxth	r2, r2
 800a5d8:	ea42 4204 	orr.w	r2, r2, r4, lsl #16
 800a5dc:	f84e 2b04 	str.w	r2, [lr], #4
 800a5e0:	1421      	asrs	r1, r4, #16
 800a5e2:	e7e0      	b.n	800a5a6 <__mdiff+0xca>
 800a5e4:	3f01      	subs	r7, #1
 800a5e6:	e7ea      	b.n	800a5be <__mdiff+0xe2>
 800a5e8:	0800bc10 	.word	0x0800bc10
 800a5ec:	0800bc9c 	.word	0x0800bc9c

0800a5f0 <__ulp>:
 800a5f0:	b082      	sub	sp, #8
 800a5f2:	ed8d 0b00 	vstr	d0, [sp]
 800a5f6:	9b01      	ldr	r3, [sp, #4]
 800a5f8:	4912      	ldr	r1, [pc, #72]	; (800a644 <__ulp+0x54>)
 800a5fa:	4019      	ands	r1, r3
 800a5fc:	f1a1 7150 	sub.w	r1, r1, #54525952	; 0x3400000
 800a600:	2900      	cmp	r1, #0
 800a602:	dd05      	ble.n	800a610 <__ulp+0x20>
 800a604:	2200      	movs	r2, #0
 800a606:	460b      	mov	r3, r1
 800a608:	ec43 2b10 	vmov	d0, r2, r3
 800a60c:	b002      	add	sp, #8
 800a60e:	4770      	bx	lr
 800a610:	4249      	negs	r1, r1
 800a612:	f1b1 7fa0 	cmp.w	r1, #20971520	; 0x1400000
 800a616:	ea4f 5021 	mov.w	r0, r1, asr #20
 800a61a:	f04f 0200 	mov.w	r2, #0
 800a61e:	f04f 0300 	mov.w	r3, #0
 800a622:	da04      	bge.n	800a62e <__ulp+0x3e>
 800a624:	f44f 2100 	mov.w	r1, #524288	; 0x80000
 800a628:	fa41 f300 	asr.w	r3, r1, r0
 800a62c:	e7ec      	b.n	800a608 <__ulp+0x18>
 800a62e:	f1a0 0114 	sub.w	r1, r0, #20
 800a632:	291e      	cmp	r1, #30
 800a634:	bfda      	itte	le
 800a636:	f04f 4000 	movle.w	r0, #2147483648	; 0x80000000
 800a63a:	fa20 f101 	lsrle.w	r1, r0, r1
 800a63e:	2101      	movgt	r1, #1
 800a640:	460a      	mov	r2, r1
 800a642:	e7e1      	b.n	800a608 <__ulp+0x18>
 800a644:	7ff00000 	.word	0x7ff00000

0800a648 <__b2d>:
 800a648:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800a64a:	6905      	ldr	r5, [r0, #16]
 800a64c:	f100 0714 	add.w	r7, r0, #20
 800a650:	eb07 0585 	add.w	r5, r7, r5, lsl #2
 800a654:	1f2e      	subs	r6, r5, #4
 800a656:	f855 4c04 	ldr.w	r4, [r5, #-4]
 800a65a:	4620      	mov	r0, r4
 800a65c:	f7ff fd48 	bl	800a0f0 <__hi0bits>
 800a660:	f1c0 0320 	rsb	r3, r0, #32
 800a664:	280a      	cmp	r0, #10
 800a666:	f8df c07c 	ldr.w	ip, [pc, #124]	; 800a6e4 <__b2d+0x9c>
 800a66a:	600b      	str	r3, [r1, #0]
 800a66c:	dc14      	bgt.n	800a698 <__b2d+0x50>
 800a66e:	f1c0 0e0b 	rsb	lr, r0, #11
 800a672:	fa24 f10e 	lsr.w	r1, r4, lr
 800a676:	42b7      	cmp	r7, r6
 800a678:	ea41 030c 	orr.w	r3, r1, ip
 800a67c:	bf34      	ite	cc
 800a67e:	f855 1c08 	ldrcc.w	r1, [r5, #-8]
 800a682:	2100      	movcs	r1, #0
 800a684:	3015      	adds	r0, #21
 800a686:	fa04 f000 	lsl.w	r0, r4, r0
 800a68a:	fa21 f10e 	lsr.w	r1, r1, lr
 800a68e:	ea40 0201 	orr.w	r2, r0, r1
 800a692:	ec43 2b10 	vmov	d0, r2, r3
 800a696:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800a698:	42b7      	cmp	r7, r6
 800a69a:	bf3a      	itte	cc
 800a69c:	f855 1c08 	ldrcc.w	r1, [r5, #-8]
 800a6a0:	f1a5 0608 	subcc.w	r6, r5, #8
 800a6a4:	2100      	movcs	r1, #0
 800a6a6:	380b      	subs	r0, #11
 800a6a8:	d017      	beq.n	800a6da <__b2d+0x92>
 800a6aa:	f1c0 0c20 	rsb	ip, r0, #32
 800a6ae:	fa04 f500 	lsl.w	r5, r4, r0
 800a6b2:	42be      	cmp	r6, r7
 800a6b4:	fa21 f40c 	lsr.w	r4, r1, ip
 800a6b8:	ea45 0504 	orr.w	r5, r5, r4
 800a6bc:	bf8c      	ite	hi
 800a6be:	f856 4c04 	ldrhi.w	r4, [r6, #-4]
 800a6c2:	2400      	movls	r4, #0
 800a6c4:	f045 537f 	orr.w	r3, r5, #1069547520	; 0x3fc00000
 800a6c8:	fa01 f000 	lsl.w	r0, r1, r0
 800a6cc:	fa24 f40c 	lsr.w	r4, r4, ip
 800a6d0:	f443 1340 	orr.w	r3, r3, #3145728	; 0x300000
 800a6d4:	ea40 0204 	orr.w	r2, r0, r4
 800a6d8:	e7db      	b.n	800a692 <__b2d+0x4a>
 800a6da:	ea44 030c 	orr.w	r3, r4, ip
 800a6de:	460a      	mov	r2, r1
 800a6e0:	e7d7      	b.n	800a692 <__b2d+0x4a>
 800a6e2:	bf00      	nop
 800a6e4:	3ff00000 	.word	0x3ff00000

0800a6e8 <__d2b>:
 800a6e8:	e92d 43f7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, lr}
 800a6ec:	4689      	mov	r9, r1
 800a6ee:	2101      	movs	r1, #1
 800a6f0:	ec57 6b10 	vmov	r6, r7, d0
 800a6f4:	4690      	mov	r8, r2
 800a6f6:	f7ff fc09 	bl	8009f0c <_Balloc>
 800a6fa:	4604      	mov	r4, r0
 800a6fc:	b930      	cbnz	r0, 800a70c <__d2b+0x24>
 800a6fe:	4602      	mov	r2, r0
 800a700:	4b25      	ldr	r3, [pc, #148]	; (800a798 <__d2b+0xb0>)
 800a702:	4826      	ldr	r0, [pc, #152]	; (800a79c <__d2b+0xb4>)
 800a704:	f240 310a 	movw	r1, #778	; 0x30a
 800a708:	f000 fb50 	bl	800adac <__assert_func>
 800a70c:	f3c7 550a 	ubfx	r5, r7, #20, #11
 800a710:	f3c7 0313 	ubfx	r3, r7, #0, #20
 800a714:	bb35      	cbnz	r5, 800a764 <__d2b+0x7c>
 800a716:	2e00      	cmp	r6, #0
 800a718:	9301      	str	r3, [sp, #4]
 800a71a:	d028      	beq.n	800a76e <__d2b+0x86>
 800a71c:	4668      	mov	r0, sp
 800a71e:	9600      	str	r6, [sp, #0]
 800a720:	f7ff fd06 	bl	800a130 <__lo0bits>
 800a724:	9900      	ldr	r1, [sp, #0]
 800a726:	b300      	cbz	r0, 800a76a <__d2b+0x82>
 800a728:	9a01      	ldr	r2, [sp, #4]
 800a72a:	f1c0 0320 	rsb	r3, r0, #32
 800a72e:	fa02 f303 	lsl.w	r3, r2, r3
 800a732:	430b      	orrs	r3, r1
 800a734:	40c2      	lsrs	r2, r0
 800a736:	6163      	str	r3, [r4, #20]
 800a738:	9201      	str	r2, [sp, #4]
 800a73a:	9b01      	ldr	r3, [sp, #4]
 800a73c:	61a3      	str	r3, [r4, #24]
 800a73e:	2b00      	cmp	r3, #0
 800a740:	bf14      	ite	ne
 800a742:	2202      	movne	r2, #2
 800a744:	2201      	moveq	r2, #1
 800a746:	6122      	str	r2, [r4, #16]
 800a748:	b1d5      	cbz	r5, 800a780 <__d2b+0x98>
 800a74a:	f2a5 4533 	subw	r5, r5, #1075	; 0x433
 800a74e:	4405      	add	r5, r0
 800a750:	f8c9 5000 	str.w	r5, [r9]
 800a754:	f1c0 0035 	rsb	r0, r0, #53	; 0x35
 800a758:	f8c8 0000 	str.w	r0, [r8]
 800a75c:	4620      	mov	r0, r4
 800a75e:	b003      	add	sp, #12
 800a760:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 800a764:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 800a768:	e7d5      	b.n	800a716 <__d2b+0x2e>
 800a76a:	6161      	str	r1, [r4, #20]
 800a76c:	e7e5      	b.n	800a73a <__d2b+0x52>
 800a76e:	a801      	add	r0, sp, #4
 800a770:	f7ff fcde 	bl	800a130 <__lo0bits>
 800a774:	9b01      	ldr	r3, [sp, #4]
 800a776:	6163      	str	r3, [r4, #20]
 800a778:	2201      	movs	r2, #1
 800a77a:	6122      	str	r2, [r4, #16]
 800a77c:	3020      	adds	r0, #32
 800a77e:	e7e3      	b.n	800a748 <__d2b+0x60>
 800a780:	eb04 0382 	add.w	r3, r4, r2, lsl #2
 800a784:	f2a0 4032 	subw	r0, r0, #1074	; 0x432
 800a788:	f8c9 0000 	str.w	r0, [r9]
 800a78c:	6918      	ldr	r0, [r3, #16]
 800a78e:	f7ff fcaf 	bl	800a0f0 <__hi0bits>
 800a792:	ebc0 1042 	rsb	r0, r0, r2, lsl #5
 800a796:	e7df      	b.n	800a758 <__d2b+0x70>
 800a798:	0800bc10 	.word	0x0800bc10
 800a79c:	0800bc9c 	.word	0x0800bc9c

0800a7a0 <__ratio>:
 800a7a0:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800a7a4:	4688      	mov	r8, r1
 800a7a6:	4669      	mov	r1, sp
 800a7a8:	4681      	mov	r9, r0
 800a7aa:	f7ff ff4d 	bl	800a648 <__b2d>
 800a7ae:	a901      	add	r1, sp, #4
 800a7b0:	4640      	mov	r0, r8
 800a7b2:	ec55 4b10 	vmov	r4, r5, d0
 800a7b6:	f7ff ff47 	bl	800a648 <__b2d>
 800a7ba:	f8d9 3010 	ldr.w	r3, [r9, #16]
 800a7be:	f8d8 2010 	ldr.w	r2, [r8, #16]
 800a7c2:	eba3 0c02 	sub.w	ip, r3, r2
 800a7c6:	e9dd 3200 	ldrd	r3, r2, [sp]
 800a7ca:	1a9b      	subs	r3, r3, r2
 800a7cc:	eb03 134c 	add.w	r3, r3, ip, lsl #5
 800a7d0:	ec51 0b10 	vmov	r0, r1, d0
 800a7d4:	2b00      	cmp	r3, #0
 800a7d6:	bfd6      	itet	le
 800a7d8:	460a      	movle	r2, r1
 800a7da:	462a      	movgt	r2, r5
 800a7dc:	ebc3 3303 	rsble	r3, r3, r3, lsl #12
 800a7e0:	468b      	mov	fp, r1
 800a7e2:	462f      	mov	r7, r5
 800a7e4:	bfd4      	ite	le
 800a7e6:	eb02 5b03 	addle.w	fp, r2, r3, lsl #20
 800a7ea:	eb02 5703 	addgt.w	r7, r2, r3, lsl #20
 800a7ee:	4620      	mov	r0, r4
 800a7f0:	ee10 2a10 	vmov	r2, s0
 800a7f4:	465b      	mov	r3, fp
 800a7f6:	4639      	mov	r1, r7
 800a7f8:	f7f6 f828 	bl	800084c <__aeabi_ddiv>
 800a7fc:	ec41 0b10 	vmov	d0, r0, r1
 800a800:	b003      	add	sp, #12
 800a802:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}

0800a806 <__copybits>:
 800a806:	3901      	subs	r1, #1
 800a808:	b570      	push	{r4, r5, r6, lr}
 800a80a:	1149      	asrs	r1, r1, #5
 800a80c:	6914      	ldr	r4, [r2, #16]
 800a80e:	3101      	adds	r1, #1
 800a810:	f102 0314 	add.w	r3, r2, #20
 800a814:	eb00 0181 	add.w	r1, r0, r1, lsl #2
 800a818:	eb03 0484 	add.w	r4, r3, r4, lsl #2
 800a81c:	1f05      	subs	r5, r0, #4
 800a81e:	42a3      	cmp	r3, r4
 800a820:	d30c      	bcc.n	800a83c <__copybits+0x36>
 800a822:	1aa3      	subs	r3, r4, r2
 800a824:	3b11      	subs	r3, #17
 800a826:	f023 0303 	bic.w	r3, r3, #3
 800a82a:	3211      	adds	r2, #17
 800a82c:	42a2      	cmp	r2, r4
 800a82e:	bf88      	it	hi
 800a830:	2300      	movhi	r3, #0
 800a832:	4418      	add	r0, r3
 800a834:	2300      	movs	r3, #0
 800a836:	4288      	cmp	r0, r1
 800a838:	d305      	bcc.n	800a846 <__copybits+0x40>
 800a83a:	bd70      	pop	{r4, r5, r6, pc}
 800a83c:	f853 6b04 	ldr.w	r6, [r3], #4
 800a840:	f845 6f04 	str.w	r6, [r5, #4]!
 800a844:	e7eb      	b.n	800a81e <__copybits+0x18>
 800a846:	f840 3b04 	str.w	r3, [r0], #4
 800a84a:	e7f4      	b.n	800a836 <__copybits+0x30>

0800a84c <__any_on>:
 800a84c:	f100 0214 	add.w	r2, r0, #20
 800a850:	6900      	ldr	r0, [r0, #16]
 800a852:	114b      	asrs	r3, r1, #5
 800a854:	4298      	cmp	r0, r3
 800a856:	b510      	push	{r4, lr}
 800a858:	db11      	blt.n	800a87e <__any_on+0x32>
 800a85a:	dd0a      	ble.n	800a872 <__any_on+0x26>
 800a85c:	f011 011f 	ands.w	r1, r1, #31
 800a860:	d007      	beq.n	800a872 <__any_on+0x26>
 800a862:	f852 4023 	ldr.w	r4, [r2, r3, lsl #2]
 800a866:	fa24 f001 	lsr.w	r0, r4, r1
 800a86a:	fa00 f101 	lsl.w	r1, r0, r1
 800a86e:	428c      	cmp	r4, r1
 800a870:	d10b      	bne.n	800a88a <__any_on+0x3e>
 800a872:	eb02 0383 	add.w	r3, r2, r3, lsl #2
 800a876:	4293      	cmp	r3, r2
 800a878:	d803      	bhi.n	800a882 <__any_on+0x36>
 800a87a:	2000      	movs	r0, #0
 800a87c:	bd10      	pop	{r4, pc}
 800a87e:	4603      	mov	r3, r0
 800a880:	e7f7      	b.n	800a872 <__any_on+0x26>
 800a882:	f853 1d04 	ldr.w	r1, [r3, #-4]!
 800a886:	2900      	cmp	r1, #0
 800a888:	d0f5      	beq.n	800a876 <__any_on+0x2a>
 800a88a:	2001      	movs	r0, #1
 800a88c:	e7f6      	b.n	800a87c <__any_on+0x30>

0800a88e <_calloc_r>:
 800a88e:	b537      	push	{r0, r1, r2, r4, r5, lr}
 800a890:	fba1 2402 	umull	r2, r4, r1, r2
 800a894:	b94c      	cbnz	r4, 800a8aa <_calloc_r+0x1c>
 800a896:	4611      	mov	r1, r2
 800a898:	9201      	str	r2, [sp, #4]
 800a89a:	f000 f87b 	bl	800a994 <_malloc_r>
 800a89e:	9a01      	ldr	r2, [sp, #4]
 800a8a0:	4605      	mov	r5, r0
 800a8a2:	b930      	cbnz	r0, 800a8b2 <_calloc_r+0x24>
 800a8a4:	4628      	mov	r0, r5
 800a8a6:	b003      	add	sp, #12
 800a8a8:	bd30      	pop	{r4, r5, pc}
 800a8aa:	220c      	movs	r2, #12
 800a8ac:	6002      	str	r2, [r0, #0]
 800a8ae:	2500      	movs	r5, #0
 800a8b0:	e7f8      	b.n	800a8a4 <_calloc_r+0x16>
 800a8b2:	4621      	mov	r1, r4
 800a8b4:	f7fc fb8a 	bl	8006fcc <memset>
 800a8b8:	e7f4      	b.n	800a8a4 <_calloc_r+0x16>
	...

0800a8bc <_free_r>:
 800a8bc:	b537      	push	{r0, r1, r2, r4, r5, lr}
 800a8be:	2900      	cmp	r1, #0
 800a8c0:	d044      	beq.n	800a94c <_free_r+0x90>
 800a8c2:	f851 3c04 	ldr.w	r3, [r1, #-4]
 800a8c6:	9001      	str	r0, [sp, #4]
 800a8c8:	2b00      	cmp	r3, #0
 800a8ca:	f1a1 0404 	sub.w	r4, r1, #4
 800a8ce:	bfb8      	it	lt
 800a8d0:	18e4      	addlt	r4, r4, r3
 800a8d2:	f000 fab5 	bl	800ae40 <__malloc_lock>
 800a8d6:	4a1e      	ldr	r2, [pc, #120]	; (800a950 <_free_r+0x94>)
 800a8d8:	9801      	ldr	r0, [sp, #4]
 800a8da:	6813      	ldr	r3, [r2, #0]
 800a8dc:	b933      	cbnz	r3, 800a8ec <_free_r+0x30>
 800a8de:	6063      	str	r3, [r4, #4]
 800a8e0:	6014      	str	r4, [r2, #0]
 800a8e2:	b003      	add	sp, #12
 800a8e4:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 800a8e8:	f000 bab0 	b.w	800ae4c <__malloc_unlock>
 800a8ec:	42a3      	cmp	r3, r4
 800a8ee:	d908      	bls.n	800a902 <_free_r+0x46>
 800a8f0:	6825      	ldr	r5, [r4, #0]
 800a8f2:	1961      	adds	r1, r4, r5
 800a8f4:	428b      	cmp	r3, r1
 800a8f6:	bf01      	itttt	eq
 800a8f8:	6819      	ldreq	r1, [r3, #0]
 800a8fa:	685b      	ldreq	r3, [r3, #4]
 800a8fc:	1949      	addeq	r1, r1, r5
 800a8fe:	6021      	streq	r1, [r4, #0]
 800a900:	e7ed      	b.n	800a8de <_free_r+0x22>
 800a902:	461a      	mov	r2, r3
 800a904:	685b      	ldr	r3, [r3, #4]
 800a906:	b10b      	cbz	r3, 800a90c <_free_r+0x50>
 800a908:	42a3      	cmp	r3, r4
 800a90a:	d9fa      	bls.n	800a902 <_free_r+0x46>
 800a90c:	6811      	ldr	r1, [r2, #0]
 800a90e:	1855      	adds	r5, r2, r1
 800a910:	42a5      	cmp	r5, r4
 800a912:	d10b      	bne.n	800a92c <_free_r+0x70>
 800a914:	6824      	ldr	r4, [r4, #0]
 800a916:	4421      	add	r1, r4
 800a918:	1854      	adds	r4, r2, r1
 800a91a:	42a3      	cmp	r3, r4
 800a91c:	6011      	str	r1, [r2, #0]
 800a91e:	d1e0      	bne.n	800a8e2 <_free_r+0x26>
 800a920:	681c      	ldr	r4, [r3, #0]
 800a922:	685b      	ldr	r3, [r3, #4]
 800a924:	6053      	str	r3, [r2, #4]
 800a926:	4421      	add	r1, r4
 800a928:	6011      	str	r1, [r2, #0]
 800a92a:	e7da      	b.n	800a8e2 <_free_r+0x26>
 800a92c:	d902      	bls.n	800a934 <_free_r+0x78>
 800a92e:	230c      	movs	r3, #12
 800a930:	6003      	str	r3, [r0, #0]
 800a932:	e7d6      	b.n	800a8e2 <_free_r+0x26>
 800a934:	6825      	ldr	r5, [r4, #0]
 800a936:	1961      	adds	r1, r4, r5
 800a938:	428b      	cmp	r3, r1
 800a93a:	bf04      	itt	eq
 800a93c:	6819      	ldreq	r1, [r3, #0]
 800a93e:	685b      	ldreq	r3, [r3, #4]
 800a940:	6063      	str	r3, [r4, #4]
 800a942:	bf04      	itt	eq
 800a944:	1949      	addeq	r1, r1, r5
 800a946:	6021      	streq	r1, [r4, #0]
 800a948:	6054      	str	r4, [r2, #4]
 800a94a:	e7ca      	b.n	800a8e2 <_free_r+0x26>
 800a94c:	b003      	add	sp, #12
 800a94e:	bd30      	pop	{r4, r5, pc}
 800a950:	2000042c 	.word	0x2000042c

0800a954 <sbrk_aligned>:
 800a954:	b570      	push	{r4, r5, r6, lr}
 800a956:	4e0e      	ldr	r6, [pc, #56]	; (800a990 <sbrk_aligned+0x3c>)
 800a958:	460c      	mov	r4, r1
 800a95a:	6831      	ldr	r1, [r6, #0]
 800a95c:	4605      	mov	r5, r0
 800a95e:	b911      	cbnz	r1, 800a966 <sbrk_aligned+0x12>
 800a960:	f000 f9f2 	bl	800ad48 <_sbrk_r>
 800a964:	6030      	str	r0, [r6, #0]
 800a966:	4621      	mov	r1, r4
 800a968:	4628      	mov	r0, r5
 800a96a:	f000 f9ed 	bl	800ad48 <_sbrk_r>
 800a96e:	1c43      	adds	r3, r0, #1
 800a970:	d00a      	beq.n	800a988 <sbrk_aligned+0x34>
 800a972:	1cc4      	adds	r4, r0, #3
 800a974:	f024 0403 	bic.w	r4, r4, #3
 800a978:	42a0      	cmp	r0, r4
 800a97a:	d007      	beq.n	800a98c <sbrk_aligned+0x38>
 800a97c:	1a21      	subs	r1, r4, r0
 800a97e:	4628      	mov	r0, r5
 800a980:	f000 f9e2 	bl	800ad48 <_sbrk_r>
 800a984:	3001      	adds	r0, #1
 800a986:	d101      	bne.n	800a98c <sbrk_aligned+0x38>
 800a988:	f04f 34ff 	mov.w	r4, #4294967295
 800a98c:	4620      	mov	r0, r4
 800a98e:	bd70      	pop	{r4, r5, r6, pc}
 800a990:	20000430 	.word	0x20000430

0800a994 <_malloc_r>:
 800a994:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800a998:	1ccd      	adds	r5, r1, #3
 800a99a:	f025 0503 	bic.w	r5, r5, #3
 800a99e:	3508      	adds	r5, #8
 800a9a0:	2d0c      	cmp	r5, #12
 800a9a2:	bf38      	it	cc
 800a9a4:	250c      	movcc	r5, #12
 800a9a6:	2d00      	cmp	r5, #0
 800a9a8:	4607      	mov	r7, r0
 800a9aa:	db01      	blt.n	800a9b0 <_malloc_r+0x1c>
 800a9ac:	42a9      	cmp	r1, r5
 800a9ae:	d905      	bls.n	800a9bc <_malloc_r+0x28>
 800a9b0:	230c      	movs	r3, #12
 800a9b2:	603b      	str	r3, [r7, #0]
 800a9b4:	2600      	movs	r6, #0
 800a9b6:	4630      	mov	r0, r6
 800a9b8:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800a9bc:	4e2e      	ldr	r6, [pc, #184]	; (800aa78 <_malloc_r+0xe4>)
 800a9be:	f000 fa3f 	bl	800ae40 <__malloc_lock>
 800a9c2:	6833      	ldr	r3, [r6, #0]
 800a9c4:	461c      	mov	r4, r3
 800a9c6:	bb34      	cbnz	r4, 800aa16 <_malloc_r+0x82>
 800a9c8:	4629      	mov	r1, r5
 800a9ca:	4638      	mov	r0, r7
 800a9cc:	f7ff ffc2 	bl	800a954 <sbrk_aligned>
 800a9d0:	1c43      	adds	r3, r0, #1
 800a9d2:	4604      	mov	r4, r0
 800a9d4:	d14d      	bne.n	800aa72 <_malloc_r+0xde>
 800a9d6:	6834      	ldr	r4, [r6, #0]
 800a9d8:	4626      	mov	r6, r4
 800a9da:	2e00      	cmp	r6, #0
 800a9dc:	d140      	bne.n	800aa60 <_malloc_r+0xcc>
 800a9de:	6823      	ldr	r3, [r4, #0]
 800a9e0:	4631      	mov	r1, r6
 800a9e2:	4638      	mov	r0, r7
 800a9e4:	eb04 0803 	add.w	r8, r4, r3
 800a9e8:	f000 f9ae 	bl	800ad48 <_sbrk_r>
 800a9ec:	4580      	cmp	r8, r0
 800a9ee:	d13a      	bne.n	800aa66 <_malloc_r+0xd2>
 800a9f0:	6821      	ldr	r1, [r4, #0]
 800a9f2:	3503      	adds	r5, #3
 800a9f4:	1a6d      	subs	r5, r5, r1
 800a9f6:	f025 0503 	bic.w	r5, r5, #3
 800a9fa:	3508      	adds	r5, #8
 800a9fc:	2d0c      	cmp	r5, #12
 800a9fe:	bf38      	it	cc
 800aa00:	250c      	movcc	r5, #12
 800aa02:	4629      	mov	r1, r5
 800aa04:	4638      	mov	r0, r7
 800aa06:	f7ff ffa5 	bl	800a954 <sbrk_aligned>
 800aa0a:	3001      	adds	r0, #1
 800aa0c:	d02b      	beq.n	800aa66 <_malloc_r+0xd2>
 800aa0e:	6823      	ldr	r3, [r4, #0]
 800aa10:	442b      	add	r3, r5
 800aa12:	6023      	str	r3, [r4, #0]
 800aa14:	e00e      	b.n	800aa34 <_malloc_r+0xa0>
 800aa16:	6822      	ldr	r2, [r4, #0]
 800aa18:	1b52      	subs	r2, r2, r5
 800aa1a:	d41e      	bmi.n	800aa5a <_malloc_r+0xc6>
 800aa1c:	2a0b      	cmp	r2, #11
 800aa1e:	d916      	bls.n	800aa4e <_malloc_r+0xba>
 800aa20:	1961      	adds	r1, r4, r5
 800aa22:	42a3      	cmp	r3, r4
 800aa24:	6025      	str	r5, [r4, #0]
 800aa26:	bf18      	it	ne
 800aa28:	6059      	strne	r1, [r3, #4]
 800aa2a:	6863      	ldr	r3, [r4, #4]
 800aa2c:	bf08      	it	eq
 800aa2e:	6031      	streq	r1, [r6, #0]
 800aa30:	5162      	str	r2, [r4, r5]
 800aa32:	604b      	str	r3, [r1, #4]
 800aa34:	4638      	mov	r0, r7
 800aa36:	f104 060b 	add.w	r6, r4, #11
 800aa3a:	f000 fa07 	bl	800ae4c <__malloc_unlock>
 800aa3e:	f026 0607 	bic.w	r6, r6, #7
 800aa42:	1d23      	adds	r3, r4, #4
 800aa44:	1af2      	subs	r2, r6, r3
 800aa46:	d0b6      	beq.n	800a9b6 <_malloc_r+0x22>
 800aa48:	1b9b      	subs	r3, r3, r6
 800aa4a:	50a3      	str	r3, [r4, r2]
 800aa4c:	e7b3      	b.n	800a9b6 <_malloc_r+0x22>
 800aa4e:	6862      	ldr	r2, [r4, #4]
 800aa50:	42a3      	cmp	r3, r4
 800aa52:	bf0c      	ite	eq
 800aa54:	6032      	streq	r2, [r6, #0]
 800aa56:	605a      	strne	r2, [r3, #4]
 800aa58:	e7ec      	b.n	800aa34 <_malloc_r+0xa0>
 800aa5a:	4623      	mov	r3, r4
 800aa5c:	6864      	ldr	r4, [r4, #4]
 800aa5e:	e7b2      	b.n	800a9c6 <_malloc_r+0x32>
 800aa60:	4634      	mov	r4, r6
 800aa62:	6876      	ldr	r6, [r6, #4]
 800aa64:	e7b9      	b.n	800a9da <_malloc_r+0x46>
 800aa66:	230c      	movs	r3, #12
 800aa68:	603b      	str	r3, [r7, #0]
 800aa6a:	4638      	mov	r0, r7
 800aa6c:	f000 f9ee 	bl	800ae4c <__malloc_unlock>
 800aa70:	e7a1      	b.n	800a9b6 <_malloc_r+0x22>
 800aa72:	6025      	str	r5, [r4, #0]
 800aa74:	e7de      	b.n	800aa34 <_malloc_r+0xa0>
 800aa76:	bf00      	nop
 800aa78:	2000042c 	.word	0x2000042c

0800aa7c <__ssputs_r>:
 800aa7c:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800aa80:	688e      	ldr	r6, [r1, #8]
 800aa82:	429e      	cmp	r6, r3
 800aa84:	4682      	mov	sl, r0
 800aa86:	460c      	mov	r4, r1
 800aa88:	4690      	mov	r8, r2
 800aa8a:	461f      	mov	r7, r3
 800aa8c:	d838      	bhi.n	800ab00 <__ssputs_r+0x84>
 800aa8e:	898a      	ldrh	r2, [r1, #12]
 800aa90:	f412 6f90 	tst.w	r2, #1152	; 0x480
 800aa94:	d032      	beq.n	800aafc <__ssputs_r+0x80>
 800aa96:	6825      	ldr	r5, [r4, #0]
 800aa98:	6909      	ldr	r1, [r1, #16]
 800aa9a:	eba5 0901 	sub.w	r9, r5, r1
 800aa9e:	6965      	ldr	r5, [r4, #20]
 800aaa0:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 800aaa4:	eb05 75d5 	add.w	r5, r5, r5, lsr #31
 800aaa8:	3301      	adds	r3, #1
 800aaaa:	444b      	add	r3, r9
 800aaac:	106d      	asrs	r5, r5, #1
 800aaae:	429d      	cmp	r5, r3
 800aab0:	bf38      	it	cc
 800aab2:	461d      	movcc	r5, r3
 800aab4:	0553      	lsls	r3, r2, #21
 800aab6:	d531      	bpl.n	800ab1c <__ssputs_r+0xa0>
 800aab8:	4629      	mov	r1, r5
 800aaba:	f7ff ff6b 	bl	800a994 <_malloc_r>
 800aabe:	4606      	mov	r6, r0
 800aac0:	b950      	cbnz	r0, 800aad8 <__ssputs_r+0x5c>
 800aac2:	230c      	movs	r3, #12
 800aac4:	f8ca 3000 	str.w	r3, [sl]
 800aac8:	89a3      	ldrh	r3, [r4, #12]
 800aaca:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800aace:	81a3      	strh	r3, [r4, #12]
 800aad0:	f04f 30ff 	mov.w	r0, #4294967295
 800aad4:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800aad8:	6921      	ldr	r1, [r4, #16]
 800aada:	464a      	mov	r2, r9
 800aadc:	f7ff fa08 	bl	8009ef0 <memcpy>
 800aae0:	89a3      	ldrh	r3, [r4, #12]
 800aae2:	f423 6390 	bic.w	r3, r3, #1152	; 0x480
 800aae6:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800aaea:	81a3      	strh	r3, [r4, #12]
 800aaec:	6126      	str	r6, [r4, #16]
 800aaee:	6165      	str	r5, [r4, #20]
 800aaf0:	444e      	add	r6, r9
 800aaf2:	eba5 0509 	sub.w	r5, r5, r9
 800aaf6:	6026      	str	r6, [r4, #0]
 800aaf8:	60a5      	str	r5, [r4, #8]
 800aafa:	463e      	mov	r6, r7
 800aafc:	42be      	cmp	r6, r7
 800aafe:	d900      	bls.n	800ab02 <__ssputs_r+0x86>
 800ab00:	463e      	mov	r6, r7
 800ab02:	6820      	ldr	r0, [r4, #0]
 800ab04:	4632      	mov	r2, r6
 800ab06:	4641      	mov	r1, r8
 800ab08:	f000 f980 	bl	800ae0c <memmove>
 800ab0c:	68a3      	ldr	r3, [r4, #8]
 800ab0e:	1b9b      	subs	r3, r3, r6
 800ab10:	60a3      	str	r3, [r4, #8]
 800ab12:	6823      	ldr	r3, [r4, #0]
 800ab14:	4433      	add	r3, r6
 800ab16:	6023      	str	r3, [r4, #0]
 800ab18:	2000      	movs	r0, #0
 800ab1a:	e7db      	b.n	800aad4 <__ssputs_r+0x58>
 800ab1c:	462a      	mov	r2, r5
 800ab1e:	f000 f99b 	bl	800ae58 <_realloc_r>
 800ab22:	4606      	mov	r6, r0
 800ab24:	2800      	cmp	r0, #0
 800ab26:	d1e1      	bne.n	800aaec <__ssputs_r+0x70>
 800ab28:	6921      	ldr	r1, [r4, #16]
 800ab2a:	4650      	mov	r0, sl
 800ab2c:	f7ff fec6 	bl	800a8bc <_free_r>
 800ab30:	e7c7      	b.n	800aac2 <__ssputs_r+0x46>
	...

0800ab34 <_svfiprintf_r>:
 800ab34:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800ab38:	4698      	mov	r8, r3
 800ab3a:	898b      	ldrh	r3, [r1, #12]
 800ab3c:	061b      	lsls	r3, r3, #24
 800ab3e:	b09d      	sub	sp, #116	; 0x74
 800ab40:	4607      	mov	r7, r0
 800ab42:	460d      	mov	r5, r1
 800ab44:	4614      	mov	r4, r2
 800ab46:	d50e      	bpl.n	800ab66 <_svfiprintf_r+0x32>
 800ab48:	690b      	ldr	r3, [r1, #16]
 800ab4a:	b963      	cbnz	r3, 800ab66 <_svfiprintf_r+0x32>
 800ab4c:	2140      	movs	r1, #64	; 0x40
 800ab4e:	f7ff ff21 	bl	800a994 <_malloc_r>
 800ab52:	6028      	str	r0, [r5, #0]
 800ab54:	6128      	str	r0, [r5, #16]
 800ab56:	b920      	cbnz	r0, 800ab62 <_svfiprintf_r+0x2e>
 800ab58:	230c      	movs	r3, #12
 800ab5a:	603b      	str	r3, [r7, #0]
 800ab5c:	f04f 30ff 	mov.w	r0, #4294967295
 800ab60:	e0d1      	b.n	800ad06 <_svfiprintf_r+0x1d2>
 800ab62:	2340      	movs	r3, #64	; 0x40
 800ab64:	616b      	str	r3, [r5, #20]
 800ab66:	2300      	movs	r3, #0
 800ab68:	9309      	str	r3, [sp, #36]	; 0x24
 800ab6a:	2320      	movs	r3, #32
 800ab6c:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 800ab70:	f8cd 800c 	str.w	r8, [sp, #12]
 800ab74:	2330      	movs	r3, #48	; 0x30
 800ab76:	f8df 81a8 	ldr.w	r8, [pc, #424]	; 800ad20 <_svfiprintf_r+0x1ec>
 800ab7a:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 800ab7e:	f04f 0901 	mov.w	r9, #1
 800ab82:	4623      	mov	r3, r4
 800ab84:	469a      	mov	sl, r3
 800ab86:	f813 2b01 	ldrb.w	r2, [r3], #1
 800ab8a:	b10a      	cbz	r2, 800ab90 <_svfiprintf_r+0x5c>
 800ab8c:	2a25      	cmp	r2, #37	; 0x25
 800ab8e:	d1f9      	bne.n	800ab84 <_svfiprintf_r+0x50>
 800ab90:	ebba 0b04 	subs.w	fp, sl, r4
 800ab94:	d00b      	beq.n	800abae <_svfiprintf_r+0x7a>
 800ab96:	465b      	mov	r3, fp
 800ab98:	4622      	mov	r2, r4
 800ab9a:	4629      	mov	r1, r5
 800ab9c:	4638      	mov	r0, r7
 800ab9e:	f7ff ff6d 	bl	800aa7c <__ssputs_r>
 800aba2:	3001      	adds	r0, #1
 800aba4:	f000 80aa 	beq.w	800acfc <_svfiprintf_r+0x1c8>
 800aba8:	9a09      	ldr	r2, [sp, #36]	; 0x24
 800abaa:	445a      	add	r2, fp
 800abac:	9209      	str	r2, [sp, #36]	; 0x24
 800abae:	f89a 3000 	ldrb.w	r3, [sl]
 800abb2:	2b00      	cmp	r3, #0
 800abb4:	f000 80a2 	beq.w	800acfc <_svfiprintf_r+0x1c8>
 800abb8:	2300      	movs	r3, #0
 800abba:	f04f 32ff 	mov.w	r2, #4294967295
 800abbe:	e9cd 2305 	strd	r2, r3, [sp, #20]
 800abc2:	f10a 0a01 	add.w	sl, sl, #1
 800abc6:	9304      	str	r3, [sp, #16]
 800abc8:	9307      	str	r3, [sp, #28]
 800abca:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 800abce:	931a      	str	r3, [sp, #104]	; 0x68
 800abd0:	4654      	mov	r4, sl
 800abd2:	2205      	movs	r2, #5
 800abd4:	f814 1b01 	ldrb.w	r1, [r4], #1
 800abd8:	4851      	ldr	r0, [pc, #324]	; (800ad20 <_svfiprintf_r+0x1ec>)
 800abda:	f7f5 fb01 	bl	80001e0 <memchr>
 800abde:	9a04      	ldr	r2, [sp, #16]
 800abe0:	b9d8      	cbnz	r0, 800ac1a <_svfiprintf_r+0xe6>
 800abe2:	06d0      	lsls	r0, r2, #27
 800abe4:	bf44      	itt	mi
 800abe6:	2320      	movmi	r3, #32
 800abe8:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 800abec:	0711      	lsls	r1, r2, #28
 800abee:	bf44      	itt	mi
 800abf0:	232b      	movmi	r3, #43	; 0x2b
 800abf2:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 800abf6:	f89a 3000 	ldrb.w	r3, [sl]
 800abfa:	2b2a      	cmp	r3, #42	; 0x2a
 800abfc:	d015      	beq.n	800ac2a <_svfiprintf_r+0xf6>
 800abfe:	9a07      	ldr	r2, [sp, #28]
 800ac00:	4654      	mov	r4, sl
 800ac02:	2000      	movs	r0, #0
 800ac04:	f04f 0c0a 	mov.w	ip, #10
 800ac08:	4621      	mov	r1, r4
 800ac0a:	f811 3b01 	ldrb.w	r3, [r1], #1
 800ac0e:	3b30      	subs	r3, #48	; 0x30
 800ac10:	2b09      	cmp	r3, #9
 800ac12:	d94e      	bls.n	800acb2 <_svfiprintf_r+0x17e>
 800ac14:	b1b0      	cbz	r0, 800ac44 <_svfiprintf_r+0x110>
 800ac16:	9207      	str	r2, [sp, #28]
 800ac18:	e014      	b.n	800ac44 <_svfiprintf_r+0x110>
 800ac1a:	eba0 0308 	sub.w	r3, r0, r8
 800ac1e:	fa09 f303 	lsl.w	r3, r9, r3
 800ac22:	4313      	orrs	r3, r2
 800ac24:	9304      	str	r3, [sp, #16]
 800ac26:	46a2      	mov	sl, r4
 800ac28:	e7d2      	b.n	800abd0 <_svfiprintf_r+0x9c>
 800ac2a:	9b03      	ldr	r3, [sp, #12]
 800ac2c:	1d19      	adds	r1, r3, #4
 800ac2e:	681b      	ldr	r3, [r3, #0]
 800ac30:	9103      	str	r1, [sp, #12]
 800ac32:	2b00      	cmp	r3, #0
 800ac34:	bfbb      	ittet	lt
 800ac36:	425b      	neglt	r3, r3
 800ac38:	f042 0202 	orrlt.w	r2, r2, #2
 800ac3c:	9307      	strge	r3, [sp, #28]
 800ac3e:	9307      	strlt	r3, [sp, #28]
 800ac40:	bfb8      	it	lt
 800ac42:	9204      	strlt	r2, [sp, #16]
 800ac44:	7823      	ldrb	r3, [r4, #0]
 800ac46:	2b2e      	cmp	r3, #46	; 0x2e
 800ac48:	d10c      	bne.n	800ac64 <_svfiprintf_r+0x130>
 800ac4a:	7863      	ldrb	r3, [r4, #1]
 800ac4c:	2b2a      	cmp	r3, #42	; 0x2a
 800ac4e:	d135      	bne.n	800acbc <_svfiprintf_r+0x188>
 800ac50:	9b03      	ldr	r3, [sp, #12]
 800ac52:	1d1a      	adds	r2, r3, #4
 800ac54:	681b      	ldr	r3, [r3, #0]
 800ac56:	9203      	str	r2, [sp, #12]
 800ac58:	2b00      	cmp	r3, #0
 800ac5a:	bfb8      	it	lt
 800ac5c:	f04f 33ff 	movlt.w	r3, #4294967295
 800ac60:	3402      	adds	r4, #2
 800ac62:	9305      	str	r3, [sp, #20]
 800ac64:	f8df a0c8 	ldr.w	sl, [pc, #200]	; 800ad30 <_svfiprintf_r+0x1fc>
 800ac68:	7821      	ldrb	r1, [r4, #0]
 800ac6a:	2203      	movs	r2, #3
 800ac6c:	4650      	mov	r0, sl
 800ac6e:	f7f5 fab7 	bl	80001e0 <memchr>
 800ac72:	b140      	cbz	r0, 800ac86 <_svfiprintf_r+0x152>
 800ac74:	2340      	movs	r3, #64	; 0x40
 800ac76:	eba0 000a 	sub.w	r0, r0, sl
 800ac7a:	fa03 f000 	lsl.w	r0, r3, r0
 800ac7e:	9b04      	ldr	r3, [sp, #16]
 800ac80:	4303      	orrs	r3, r0
 800ac82:	3401      	adds	r4, #1
 800ac84:	9304      	str	r3, [sp, #16]
 800ac86:	f814 1b01 	ldrb.w	r1, [r4], #1
 800ac8a:	4826      	ldr	r0, [pc, #152]	; (800ad24 <_svfiprintf_r+0x1f0>)
 800ac8c:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 800ac90:	2206      	movs	r2, #6
 800ac92:	f7f5 faa5 	bl	80001e0 <memchr>
 800ac96:	2800      	cmp	r0, #0
 800ac98:	d038      	beq.n	800ad0c <_svfiprintf_r+0x1d8>
 800ac9a:	4b23      	ldr	r3, [pc, #140]	; (800ad28 <_svfiprintf_r+0x1f4>)
 800ac9c:	bb1b      	cbnz	r3, 800ace6 <_svfiprintf_r+0x1b2>
 800ac9e:	9b03      	ldr	r3, [sp, #12]
 800aca0:	3307      	adds	r3, #7
 800aca2:	f023 0307 	bic.w	r3, r3, #7
 800aca6:	3308      	adds	r3, #8
 800aca8:	9303      	str	r3, [sp, #12]
 800acaa:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800acac:	4433      	add	r3, r6
 800acae:	9309      	str	r3, [sp, #36]	; 0x24
 800acb0:	e767      	b.n	800ab82 <_svfiprintf_r+0x4e>
 800acb2:	fb0c 3202 	mla	r2, ip, r2, r3
 800acb6:	460c      	mov	r4, r1
 800acb8:	2001      	movs	r0, #1
 800acba:	e7a5      	b.n	800ac08 <_svfiprintf_r+0xd4>
 800acbc:	2300      	movs	r3, #0
 800acbe:	3401      	adds	r4, #1
 800acc0:	9305      	str	r3, [sp, #20]
 800acc2:	4619      	mov	r1, r3
 800acc4:	f04f 0c0a 	mov.w	ip, #10
 800acc8:	4620      	mov	r0, r4
 800acca:	f810 2b01 	ldrb.w	r2, [r0], #1
 800acce:	3a30      	subs	r2, #48	; 0x30
 800acd0:	2a09      	cmp	r2, #9
 800acd2:	d903      	bls.n	800acdc <_svfiprintf_r+0x1a8>
 800acd4:	2b00      	cmp	r3, #0
 800acd6:	d0c5      	beq.n	800ac64 <_svfiprintf_r+0x130>
 800acd8:	9105      	str	r1, [sp, #20]
 800acda:	e7c3      	b.n	800ac64 <_svfiprintf_r+0x130>
 800acdc:	fb0c 2101 	mla	r1, ip, r1, r2
 800ace0:	4604      	mov	r4, r0
 800ace2:	2301      	movs	r3, #1
 800ace4:	e7f0      	b.n	800acc8 <_svfiprintf_r+0x194>
 800ace6:	ab03      	add	r3, sp, #12
 800ace8:	9300      	str	r3, [sp, #0]
 800acea:	462a      	mov	r2, r5
 800acec:	4b0f      	ldr	r3, [pc, #60]	; (800ad2c <_svfiprintf_r+0x1f8>)
 800acee:	a904      	add	r1, sp, #16
 800acf0:	4638      	mov	r0, r7
 800acf2:	f7fc fa13 	bl	800711c <_printf_float>
 800acf6:	1c42      	adds	r2, r0, #1
 800acf8:	4606      	mov	r6, r0
 800acfa:	d1d6      	bne.n	800acaa <_svfiprintf_r+0x176>
 800acfc:	89ab      	ldrh	r3, [r5, #12]
 800acfe:	065b      	lsls	r3, r3, #25
 800ad00:	f53f af2c 	bmi.w	800ab5c <_svfiprintf_r+0x28>
 800ad04:	9809      	ldr	r0, [sp, #36]	; 0x24
 800ad06:	b01d      	add	sp, #116	; 0x74
 800ad08:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800ad0c:	ab03      	add	r3, sp, #12
 800ad0e:	9300      	str	r3, [sp, #0]
 800ad10:	462a      	mov	r2, r5
 800ad12:	4b06      	ldr	r3, [pc, #24]	; (800ad2c <_svfiprintf_r+0x1f8>)
 800ad14:	a904      	add	r1, sp, #16
 800ad16:	4638      	mov	r0, r7
 800ad18:	f7fc fca4 	bl	8007664 <_printf_i>
 800ad1c:	e7eb      	b.n	800acf6 <_svfiprintf_r+0x1c2>
 800ad1e:	bf00      	nop
 800ad20:	0800bdf4 	.word	0x0800bdf4
 800ad24:	0800bdfe 	.word	0x0800bdfe
 800ad28:	0800711d 	.word	0x0800711d
 800ad2c:	0800aa7d 	.word	0x0800aa7d
 800ad30:	0800bdfa 	.word	0x0800bdfa
 800ad34:	00000000 	.word	0x00000000

0800ad38 <nan>:
 800ad38:	ed9f 0b01 	vldr	d0, [pc, #4]	; 800ad40 <nan+0x8>
 800ad3c:	4770      	bx	lr
 800ad3e:	bf00      	nop
 800ad40:	00000000 	.word	0x00000000
 800ad44:	7ff80000 	.word	0x7ff80000

0800ad48 <_sbrk_r>:
 800ad48:	b538      	push	{r3, r4, r5, lr}
 800ad4a:	4d06      	ldr	r5, [pc, #24]	; (800ad64 <_sbrk_r+0x1c>)
 800ad4c:	2300      	movs	r3, #0
 800ad4e:	4604      	mov	r4, r0
 800ad50:	4608      	mov	r0, r1
 800ad52:	602b      	str	r3, [r5, #0]
 800ad54:	f7f6 fee4 	bl	8001b20 <_sbrk>
 800ad58:	1c43      	adds	r3, r0, #1
 800ad5a:	d102      	bne.n	800ad62 <_sbrk_r+0x1a>
 800ad5c:	682b      	ldr	r3, [r5, #0]
 800ad5e:	b103      	cbz	r3, 800ad62 <_sbrk_r+0x1a>
 800ad60:	6023      	str	r3, [r4, #0]
 800ad62:	bd38      	pop	{r3, r4, r5, pc}
 800ad64:	20000434 	.word	0x20000434

0800ad68 <strncmp>:
 800ad68:	b510      	push	{r4, lr}
 800ad6a:	b17a      	cbz	r2, 800ad8c <strncmp+0x24>
 800ad6c:	4603      	mov	r3, r0
 800ad6e:	3901      	subs	r1, #1
 800ad70:	1884      	adds	r4, r0, r2
 800ad72:	f813 0b01 	ldrb.w	r0, [r3], #1
 800ad76:	f811 2f01 	ldrb.w	r2, [r1, #1]!
 800ad7a:	4290      	cmp	r0, r2
 800ad7c:	d101      	bne.n	800ad82 <strncmp+0x1a>
 800ad7e:	42a3      	cmp	r3, r4
 800ad80:	d101      	bne.n	800ad86 <strncmp+0x1e>
 800ad82:	1a80      	subs	r0, r0, r2
 800ad84:	bd10      	pop	{r4, pc}
 800ad86:	2800      	cmp	r0, #0
 800ad88:	d1f3      	bne.n	800ad72 <strncmp+0xa>
 800ad8a:	e7fa      	b.n	800ad82 <strncmp+0x1a>
 800ad8c:	4610      	mov	r0, r2
 800ad8e:	e7f9      	b.n	800ad84 <strncmp+0x1c>

0800ad90 <__ascii_wctomb>:
 800ad90:	b149      	cbz	r1, 800ada6 <__ascii_wctomb+0x16>
 800ad92:	2aff      	cmp	r2, #255	; 0xff
 800ad94:	bf85      	ittet	hi
 800ad96:	238a      	movhi	r3, #138	; 0x8a
 800ad98:	6003      	strhi	r3, [r0, #0]
 800ad9a:	700a      	strbls	r2, [r1, #0]
 800ad9c:	f04f 30ff 	movhi.w	r0, #4294967295
 800ada0:	bf98      	it	ls
 800ada2:	2001      	movls	r0, #1
 800ada4:	4770      	bx	lr
 800ada6:	4608      	mov	r0, r1
 800ada8:	4770      	bx	lr
	...

0800adac <__assert_func>:
 800adac:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 800adae:	4614      	mov	r4, r2
 800adb0:	461a      	mov	r2, r3
 800adb2:	4b09      	ldr	r3, [pc, #36]	; (800add8 <__assert_func+0x2c>)
 800adb4:	681b      	ldr	r3, [r3, #0]
 800adb6:	4605      	mov	r5, r0
 800adb8:	68d8      	ldr	r0, [r3, #12]
 800adba:	b14c      	cbz	r4, 800add0 <__assert_func+0x24>
 800adbc:	4b07      	ldr	r3, [pc, #28]	; (800addc <__assert_func+0x30>)
 800adbe:	9100      	str	r1, [sp, #0]
 800adc0:	e9cd 3401 	strd	r3, r4, [sp, #4]
 800adc4:	4906      	ldr	r1, [pc, #24]	; (800ade0 <__assert_func+0x34>)
 800adc6:	462b      	mov	r3, r5
 800adc8:	f000 f80e 	bl	800ade8 <fiprintf>
 800adcc:	f000 fa8c 	bl	800b2e8 <abort>
 800add0:	4b04      	ldr	r3, [pc, #16]	; (800ade4 <__assert_func+0x38>)
 800add2:	461c      	mov	r4, r3
 800add4:	e7f3      	b.n	800adbe <__assert_func+0x12>
 800add6:	bf00      	nop
 800add8:	2000000c 	.word	0x2000000c
 800addc:	0800be05 	.word	0x0800be05
 800ade0:	0800be12 	.word	0x0800be12
 800ade4:	0800be40 	.word	0x0800be40

0800ade8 <fiprintf>:
 800ade8:	b40e      	push	{r1, r2, r3}
 800adea:	b503      	push	{r0, r1, lr}
 800adec:	4601      	mov	r1, r0
 800adee:	ab03      	add	r3, sp, #12
 800adf0:	4805      	ldr	r0, [pc, #20]	; (800ae08 <fiprintf+0x20>)
 800adf2:	f853 2b04 	ldr.w	r2, [r3], #4
 800adf6:	6800      	ldr	r0, [r0, #0]
 800adf8:	9301      	str	r3, [sp, #4]
 800adfa:	f000 f885 	bl	800af08 <_vfiprintf_r>
 800adfe:	b002      	add	sp, #8
 800ae00:	f85d eb04 	ldr.w	lr, [sp], #4
 800ae04:	b003      	add	sp, #12
 800ae06:	4770      	bx	lr
 800ae08:	2000000c 	.word	0x2000000c

0800ae0c <memmove>:
 800ae0c:	4288      	cmp	r0, r1
 800ae0e:	b510      	push	{r4, lr}
 800ae10:	eb01 0402 	add.w	r4, r1, r2
 800ae14:	d902      	bls.n	800ae1c <memmove+0x10>
 800ae16:	4284      	cmp	r4, r0
 800ae18:	4623      	mov	r3, r4
 800ae1a:	d807      	bhi.n	800ae2c <memmove+0x20>
 800ae1c:	1e43      	subs	r3, r0, #1
 800ae1e:	42a1      	cmp	r1, r4
 800ae20:	d008      	beq.n	800ae34 <memmove+0x28>
 800ae22:	f811 2b01 	ldrb.w	r2, [r1], #1
 800ae26:	f803 2f01 	strb.w	r2, [r3, #1]!
 800ae2a:	e7f8      	b.n	800ae1e <memmove+0x12>
 800ae2c:	4402      	add	r2, r0
 800ae2e:	4601      	mov	r1, r0
 800ae30:	428a      	cmp	r2, r1
 800ae32:	d100      	bne.n	800ae36 <memmove+0x2a>
 800ae34:	bd10      	pop	{r4, pc}
 800ae36:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 800ae3a:	f802 4d01 	strb.w	r4, [r2, #-1]!
 800ae3e:	e7f7      	b.n	800ae30 <memmove+0x24>

0800ae40 <__malloc_lock>:
 800ae40:	4801      	ldr	r0, [pc, #4]	; (800ae48 <__malloc_lock+0x8>)
 800ae42:	f000 bc11 	b.w	800b668 <__retarget_lock_acquire_recursive>
 800ae46:	bf00      	nop
 800ae48:	20000438 	.word	0x20000438

0800ae4c <__malloc_unlock>:
 800ae4c:	4801      	ldr	r0, [pc, #4]	; (800ae54 <__malloc_unlock+0x8>)
 800ae4e:	f000 bc0c 	b.w	800b66a <__retarget_lock_release_recursive>
 800ae52:	bf00      	nop
 800ae54:	20000438 	.word	0x20000438

0800ae58 <_realloc_r>:
 800ae58:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800ae5c:	4680      	mov	r8, r0
 800ae5e:	4614      	mov	r4, r2
 800ae60:	460e      	mov	r6, r1
 800ae62:	b921      	cbnz	r1, 800ae6e <_realloc_r+0x16>
 800ae64:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 800ae68:	4611      	mov	r1, r2
 800ae6a:	f7ff bd93 	b.w	800a994 <_malloc_r>
 800ae6e:	b92a      	cbnz	r2, 800ae7c <_realloc_r+0x24>
 800ae70:	f7ff fd24 	bl	800a8bc <_free_r>
 800ae74:	4625      	mov	r5, r4
 800ae76:	4628      	mov	r0, r5
 800ae78:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800ae7c:	f000 fc5c 	bl	800b738 <_malloc_usable_size_r>
 800ae80:	4284      	cmp	r4, r0
 800ae82:	4607      	mov	r7, r0
 800ae84:	d802      	bhi.n	800ae8c <_realloc_r+0x34>
 800ae86:	ebb4 0f50 	cmp.w	r4, r0, lsr #1
 800ae8a:	d812      	bhi.n	800aeb2 <_realloc_r+0x5a>
 800ae8c:	4621      	mov	r1, r4
 800ae8e:	4640      	mov	r0, r8
 800ae90:	f7ff fd80 	bl	800a994 <_malloc_r>
 800ae94:	4605      	mov	r5, r0
 800ae96:	2800      	cmp	r0, #0
 800ae98:	d0ed      	beq.n	800ae76 <_realloc_r+0x1e>
 800ae9a:	42bc      	cmp	r4, r7
 800ae9c:	4622      	mov	r2, r4
 800ae9e:	4631      	mov	r1, r6
 800aea0:	bf28      	it	cs
 800aea2:	463a      	movcs	r2, r7
 800aea4:	f7ff f824 	bl	8009ef0 <memcpy>
 800aea8:	4631      	mov	r1, r6
 800aeaa:	4640      	mov	r0, r8
 800aeac:	f7ff fd06 	bl	800a8bc <_free_r>
 800aeb0:	e7e1      	b.n	800ae76 <_realloc_r+0x1e>
 800aeb2:	4635      	mov	r5, r6
 800aeb4:	e7df      	b.n	800ae76 <_realloc_r+0x1e>

0800aeb6 <__sfputc_r>:
 800aeb6:	6893      	ldr	r3, [r2, #8]
 800aeb8:	3b01      	subs	r3, #1
 800aeba:	2b00      	cmp	r3, #0
 800aebc:	b410      	push	{r4}
 800aebe:	6093      	str	r3, [r2, #8]
 800aec0:	da08      	bge.n	800aed4 <__sfputc_r+0x1e>
 800aec2:	6994      	ldr	r4, [r2, #24]
 800aec4:	42a3      	cmp	r3, r4
 800aec6:	db01      	blt.n	800aecc <__sfputc_r+0x16>
 800aec8:	290a      	cmp	r1, #10
 800aeca:	d103      	bne.n	800aed4 <__sfputc_r+0x1e>
 800aecc:	f85d 4b04 	ldr.w	r4, [sp], #4
 800aed0:	f000 b94a 	b.w	800b168 <__swbuf_r>
 800aed4:	6813      	ldr	r3, [r2, #0]
 800aed6:	1c58      	adds	r0, r3, #1
 800aed8:	6010      	str	r0, [r2, #0]
 800aeda:	7019      	strb	r1, [r3, #0]
 800aedc:	4608      	mov	r0, r1
 800aede:	f85d 4b04 	ldr.w	r4, [sp], #4
 800aee2:	4770      	bx	lr

0800aee4 <__sfputs_r>:
 800aee4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800aee6:	4606      	mov	r6, r0
 800aee8:	460f      	mov	r7, r1
 800aeea:	4614      	mov	r4, r2
 800aeec:	18d5      	adds	r5, r2, r3
 800aeee:	42ac      	cmp	r4, r5
 800aef0:	d101      	bne.n	800aef6 <__sfputs_r+0x12>
 800aef2:	2000      	movs	r0, #0
 800aef4:	e007      	b.n	800af06 <__sfputs_r+0x22>
 800aef6:	f814 1b01 	ldrb.w	r1, [r4], #1
 800aefa:	463a      	mov	r2, r7
 800aefc:	4630      	mov	r0, r6
 800aefe:	f7ff ffda 	bl	800aeb6 <__sfputc_r>
 800af02:	1c43      	adds	r3, r0, #1
 800af04:	d1f3      	bne.n	800aeee <__sfputs_r+0xa>
 800af06:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

0800af08 <_vfiprintf_r>:
 800af08:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800af0c:	460d      	mov	r5, r1
 800af0e:	b09d      	sub	sp, #116	; 0x74
 800af10:	4614      	mov	r4, r2
 800af12:	4698      	mov	r8, r3
 800af14:	4606      	mov	r6, r0
 800af16:	b118      	cbz	r0, 800af20 <_vfiprintf_r+0x18>
 800af18:	6983      	ldr	r3, [r0, #24]
 800af1a:	b90b      	cbnz	r3, 800af20 <_vfiprintf_r+0x18>
 800af1c:	f000 fb06 	bl	800b52c <__sinit>
 800af20:	4b89      	ldr	r3, [pc, #548]	; (800b148 <_vfiprintf_r+0x240>)
 800af22:	429d      	cmp	r5, r3
 800af24:	d11b      	bne.n	800af5e <_vfiprintf_r+0x56>
 800af26:	6875      	ldr	r5, [r6, #4]
 800af28:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 800af2a:	07d9      	lsls	r1, r3, #31
 800af2c:	d405      	bmi.n	800af3a <_vfiprintf_r+0x32>
 800af2e:	89ab      	ldrh	r3, [r5, #12]
 800af30:	059a      	lsls	r2, r3, #22
 800af32:	d402      	bmi.n	800af3a <_vfiprintf_r+0x32>
 800af34:	6da8      	ldr	r0, [r5, #88]	; 0x58
 800af36:	f000 fb97 	bl	800b668 <__retarget_lock_acquire_recursive>
 800af3a:	89ab      	ldrh	r3, [r5, #12]
 800af3c:	071b      	lsls	r3, r3, #28
 800af3e:	d501      	bpl.n	800af44 <_vfiprintf_r+0x3c>
 800af40:	692b      	ldr	r3, [r5, #16]
 800af42:	b9eb      	cbnz	r3, 800af80 <_vfiprintf_r+0x78>
 800af44:	4629      	mov	r1, r5
 800af46:	4630      	mov	r0, r6
 800af48:	f000 f960 	bl	800b20c <__swsetup_r>
 800af4c:	b1c0      	cbz	r0, 800af80 <_vfiprintf_r+0x78>
 800af4e:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 800af50:	07dc      	lsls	r4, r3, #31
 800af52:	d50e      	bpl.n	800af72 <_vfiprintf_r+0x6a>
 800af54:	f04f 30ff 	mov.w	r0, #4294967295
 800af58:	b01d      	add	sp, #116	; 0x74
 800af5a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800af5e:	4b7b      	ldr	r3, [pc, #492]	; (800b14c <_vfiprintf_r+0x244>)
 800af60:	429d      	cmp	r5, r3
 800af62:	d101      	bne.n	800af68 <_vfiprintf_r+0x60>
 800af64:	68b5      	ldr	r5, [r6, #8]
 800af66:	e7df      	b.n	800af28 <_vfiprintf_r+0x20>
 800af68:	4b79      	ldr	r3, [pc, #484]	; (800b150 <_vfiprintf_r+0x248>)
 800af6a:	429d      	cmp	r5, r3
 800af6c:	bf08      	it	eq
 800af6e:	68f5      	ldreq	r5, [r6, #12]
 800af70:	e7da      	b.n	800af28 <_vfiprintf_r+0x20>
 800af72:	89ab      	ldrh	r3, [r5, #12]
 800af74:	0598      	lsls	r0, r3, #22
 800af76:	d4ed      	bmi.n	800af54 <_vfiprintf_r+0x4c>
 800af78:	6da8      	ldr	r0, [r5, #88]	; 0x58
 800af7a:	f000 fb76 	bl	800b66a <__retarget_lock_release_recursive>
 800af7e:	e7e9      	b.n	800af54 <_vfiprintf_r+0x4c>
 800af80:	2300      	movs	r3, #0
 800af82:	9309      	str	r3, [sp, #36]	; 0x24
 800af84:	2320      	movs	r3, #32
 800af86:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 800af8a:	f8cd 800c 	str.w	r8, [sp, #12]
 800af8e:	2330      	movs	r3, #48	; 0x30
 800af90:	f8df 81c0 	ldr.w	r8, [pc, #448]	; 800b154 <_vfiprintf_r+0x24c>
 800af94:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 800af98:	f04f 0901 	mov.w	r9, #1
 800af9c:	4623      	mov	r3, r4
 800af9e:	469a      	mov	sl, r3
 800afa0:	f813 2b01 	ldrb.w	r2, [r3], #1
 800afa4:	b10a      	cbz	r2, 800afaa <_vfiprintf_r+0xa2>
 800afa6:	2a25      	cmp	r2, #37	; 0x25
 800afa8:	d1f9      	bne.n	800af9e <_vfiprintf_r+0x96>
 800afaa:	ebba 0b04 	subs.w	fp, sl, r4
 800afae:	d00b      	beq.n	800afc8 <_vfiprintf_r+0xc0>
 800afb0:	465b      	mov	r3, fp
 800afb2:	4622      	mov	r2, r4
 800afb4:	4629      	mov	r1, r5
 800afb6:	4630      	mov	r0, r6
 800afb8:	f7ff ff94 	bl	800aee4 <__sfputs_r>
 800afbc:	3001      	adds	r0, #1
 800afbe:	f000 80aa 	beq.w	800b116 <_vfiprintf_r+0x20e>
 800afc2:	9a09      	ldr	r2, [sp, #36]	; 0x24
 800afc4:	445a      	add	r2, fp
 800afc6:	9209      	str	r2, [sp, #36]	; 0x24
 800afc8:	f89a 3000 	ldrb.w	r3, [sl]
 800afcc:	2b00      	cmp	r3, #0
 800afce:	f000 80a2 	beq.w	800b116 <_vfiprintf_r+0x20e>
 800afd2:	2300      	movs	r3, #0
 800afd4:	f04f 32ff 	mov.w	r2, #4294967295
 800afd8:	e9cd 2305 	strd	r2, r3, [sp, #20]
 800afdc:	f10a 0a01 	add.w	sl, sl, #1
 800afe0:	9304      	str	r3, [sp, #16]
 800afe2:	9307      	str	r3, [sp, #28]
 800afe4:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 800afe8:	931a      	str	r3, [sp, #104]	; 0x68
 800afea:	4654      	mov	r4, sl
 800afec:	2205      	movs	r2, #5
 800afee:	f814 1b01 	ldrb.w	r1, [r4], #1
 800aff2:	4858      	ldr	r0, [pc, #352]	; (800b154 <_vfiprintf_r+0x24c>)
 800aff4:	f7f5 f8f4 	bl	80001e0 <memchr>
 800aff8:	9a04      	ldr	r2, [sp, #16]
 800affa:	b9d8      	cbnz	r0, 800b034 <_vfiprintf_r+0x12c>
 800affc:	06d1      	lsls	r1, r2, #27
 800affe:	bf44      	itt	mi
 800b000:	2320      	movmi	r3, #32
 800b002:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 800b006:	0713      	lsls	r3, r2, #28
 800b008:	bf44      	itt	mi
 800b00a:	232b      	movmi	r3, #43	; 0x2b
 800b00c:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 800b010:	f89a 3000 	ldrb.w	r3, [sl]
 800b014:	2b2a      	cmp	r3, #42	; 0x2a
 800b016:	d015      	beq.n	800b044 <_vfiprintf_r+0x13c>
 800b018:	9a07      	ldr	r2, [sp, #28]
 800b01a:	4654      	mov	r4, sl
 800b01c:	2000      	movs	r0, #0
 800b01e:	f04f 0c0a 	mov.w	ip, #10
 800b022:	4621      	mov	r1, r4
 800b024:	f811 3b01 	ldrb.w	r3, [r1], #1
 800b028:	3b30      	subs	r3, #48	; 0x30
 800b02a:	2b09      	cmp	r3, #9
 800b02c:	d94e      	bls.n	800b0cc <_vfiprintf_r+0x1c4>
 800b02e:	b1b0      	cbz	r0, 800b05e <_vfiprintf_r+0x156>
 800b030:	9207      	str	r2, [sp, #28]
 800b032:	e014      	b.n	800b05e <_vfiprintf_r+0x156>
 800b034:	eba0 0308 	sub.w	r3, r0, r8
 800b038:	fa09 f303 	lsl.w	r3, r9, r3
 800b03c:	4313      	orrs	r3, r2
 800b03e:	9304      	str	r3, [sp, #16]
 800b040:	46a2      	mov	sl, r4
 800b042:	e7d2      	b.n	800afea <_vfiprintf_r+0xe2>
 800b044:	9b03      	ldr	r3, [sp, #12]
 800b046:	1d19      	adds	r1, r3, #4
 800b048:	681b      	ldr	r3, [r3, #0]
 800b04a:	9103      	str	r1, [sp, #12]
 800b04c:	2b00      	cmp	r3, #0
 800b04e:	bfbb      	ittet	lt
 800b050:	425b      	neglt	r3, r3
 800b052:	f042 0202 	orrlt.w	r2, r2, #2
 800b056:	9307      	strge	r3, [sp, #28]
 800b058:	9307      	strlt	r3, [sp, #28]
 800b05a:	bfb8      	it	lt
 800b05c:	9204      	strlt	r2, [sp, #16]
 800b05e:	7823      	ldrb	r3, [r4, #0]
 800b060:	2b2e      	cmp	r3, #46	; 0x2e
 800b062:	d10c      	bne.n	800b07e <_vfiprintf_r+0x176>
 800b064:	7863      	ldrb	r3, [r4, #1]
 800b066:	2b2a      	cmp	r3, #42	; 0x2a
 800b068:	d135      	bne.n	800b0d6 <_vfiprintf_r+0x1ce>
 800b06a:	9b03      	ldr	r3, [sp, #12]
 800b06c:	1d1a      	adds	r2, r3, #4
 800b06e:	681b      	ldr	r3, [r3, #0]
 800b070:	9203      	str	r2, [sp, #12]
 800b072:	2b00      	cmp	r3, #0
 800b074:	bfb8      	it	lt
 800b076:	f04f 33ff 	movlt.w	r3, #4294967295
 800b07a:	3402      	adds	r4, #2
 800b07c:	9305      	str	r3, [sp, #20]
 800b07e:	f8df a0e4 	ldr.w	sl, [pc, #228]	; 800b164 <_vfiprintf_r+0x25c>
 800b082:	7821      	ldrb	r1, [r4, #0]
 800b084:	2203      	movs	r2, #3
 800b086:	4650      	mov	r0, sl
 800b088:	f7f5 f8aa 	bl	80001e0 <memchr>
 800b08c:	b140      	cbz	r0, 800b0a0 <_vfiprintf_r+0x198>
 800b08e:	2340      	movs	r3, #64	; 0x40
 800b090:	eba0 000a 	sub.w	r0, r0, sl
 800b094:	fa03 f000 	lsl.w	r0, r3, r0
 800b098:	9b04      	ldr	r3, [sp, #16]
 800b09a:	4303      	orrs	r3, r0
 800b09c:	3401      	adds	r4, #1
 800b09e:	9304      	str	r3, [sp, #16]
 800b0a0:	f814 1b01 	ldrb.w	r1, [r4], #1
 800b0a4:	482c      	ldr	r0, [pc, #176]	; (800b158 <_vfiprintf_r+0x250>)
 800b0a6:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 800b0aa:	2206      	movs	r2, #6
 800b0ac:	f7f5 f898 	bl	80001e0 <memchr>
 800b0b0:	2800      	cmp	r0, #0
 800b0b2:	d03f      	beq.n	800b134 <_vfiprintf_r+0x22c>
 800b0b4:	4b29      	ldr	r3, [pc, #164]	; (800b15c <_vfiprintf_r+0x254>)
 800b0b6:	bb1b      	cbnz	r3, 800b100 <_vfiprintf_r+0x1f8>
 800b0b8:	9b03      	ldr	r3, [sp, #12]
 800b0ba:	3307      	adds	r3, #7
 800b0bc:	f023 0307 	bic.w	r3, r3, #7
 800b0c0:	3308      	adds	r3, #8
 800b0c2:	9303      	str	r3, [sp, #12]
 800b0c4:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800b0c6:	443b      	add	r3, r7
 800b0c8:	9309      	str	r3, [sp, #36]	; 0x24
 800b0ca:	e767      	b.n	800af9c <_vfiprintf_r+0x94>
 800b0cc:	fb0c 3202 	mla	r2, ip, r2, r3
 800b0d0:	460c      	mov	r4, r1
 800b0d2:	2001      	movs	r0, #1
 800b0d4:	e7a5      	b.n	800b022 <_vfiprintf_r+0x11a>
 800b0d6:	2300      	movs	r3, #0
 800b0d8:	3401      	adds	r4, #1
 800b0da:	9305      	str	r3, [sp, #20]
 800b0dc:	4619      	mov	r1, r3
 800b0de:	f04f 0c0a 	mov.w	ip, #10
 800b0e2:	4620      	mov	r0, r4
 800b0e4:	f810 2b01 	ldrb.w	r2, [r0], #1
 800b0e8:	3a30      	subs	r2, #48	; 0x30
 800b0ea:	2a09      	cmp	r2, #9
 800b0ec:	d903      	bls.n	800b0f6 <_vfiprintf_r+0x1ee>
 800b0ee:	2b00      	cmp	r3, #0
 800b0f0:	d0c5      	beq.n	800b07e <_vfiprintf_r+0x176>
 800b0f2:	9105      	str	r1, [sp, #20]
 800b0f4:	e7c3      	b.n	800b07e <_vfiprintf_r+0x176>
 800b0f6:	fb0c 2101 	mla	r1, ip, r1, r2
 800b0fa:	4604      	mov	r4, r0
 800b0fc:	2301      	movs	r3, #1
 800b0fe:	e7f0      	b.n	800b0e2 <_vfiprintf_r+0x1da>
 800b100:	ab03      	add	r3, sp, #12
 800b102:	9300      	str	r3, [sp, #0]
 800b104:	462a      	mov	r2, r5
 800b106:	4b16      	ldr	r3, [pc, #88]	; (800b160 <_vfiprintf_r+0x258>)
 800b108:	a904      	add	r1, sp, #16
 800b10a:	4630      	mov	r0, r6
 800b10c:	f7fc f806 	bl	800711c <_printf_float>
 800b110:	4607      	mov	r7, r0
 800b112:	1c78      	adds	r0, r7, #1
 800b114:	d1d6      	bne.n	800b0c4 <_vfiprintf_r+0x1bc>
 800b116:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 800b118:	07d9      	lsls	r1, r3, #31
 800b11a:	d405      	bmi.n	800b128 <_vfiprintf_r+0x220>
 800b11c:	89ab      	ldrh	r3, [r5, #12]
 800b11e:	059a      	lsls	r2, r3, #22
 800b120:	d402      	bmi.n	800b128 <_vfiprintf_r+0x220>
 800b122:	6da8      	ldr	r0, [r5, #88]	; 0x58
 800b124:	f000 faa1 	bl	800b66a <__retarget_lock_release_recursive>
 800b128:	89ab      	ldrh	r3, [r5, #12]
 800b12a:	065b      	lsls	r3, r3, #25
 800b12c:	f53f af12 	bmi.w	800af54 <_vfiprintf_r+0x4c>
 800b130:	9809      	ldr	r0, [sp, #36]	; 0x24
 800b132:	e711      	b.n	800af58 <_vfiprintf_r+0x50>
 800b134:	ab03      	add	r3, sp, #12
 800b136:	9300      	str	r3, [sp, #0]
 800b138:	462a      	mov	r2, r5
 800b13a:	4b09      	ldr	r3, [pc, #36]	; (800b160 <_vfiprintf_r+0x258>)
 800b13c:	a904      	add	r1, sp, #16
 800b13e:	4630      	mov	r0, r6
 800b140:	f7fc fa90 	bl	8007664 <_printf_i>
 800b144:	e7e4      	b.n	800b110 <_vfiprintf_r+0x208>
 800b146:	bf00      	nop
 800b148:	0800be64 	.word	0x0800be64
 800b14c:	0800be84 	.word	0x0800be84
 800b150:	0800be44 	.word	0x0800be44
 800b154:	0800bdf4 	.word	0x0800bdf4
 800b158:	0800bdfe 	.word	0x0800bdfe
 800b15c:	0800711d 	.word	0x0800711d
 800b160:	0800aee5 	.word	0x0800aee5
 800b164:	0800bdfa 	.word	0x0800bdfa

0800b168 <__swbuf_r>:
 800b168:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800b16a:	460e      	mov	r6, r1
 800b16c:	4614      	mov	r4, r2
 800b16e:	4605      	mov	r5, r0
 800b170:	b118      	cbz	r0, 800b17a <__swbuf_r+0x12>
 800b172:	6983      	ldr	r3, [r0, #24]
 800b174:	b90b      	cbnz	r3, 800b17a <__swbuf_r+0x12>
 800b176:	f000 f9d9 	bl	800b52c <__sinit>
 800b17a:	4b21      	ldr	r3, [pc, #132]	; (800b200 <__swbuf_r+0x98>)
 800b17c:	429c      	cmp	r4, r3
 800b17e:	d12b      	bne.n	800b1d8 <__swbuf_r+0x70>
 800b180:	686c      	ldr	r4, [r5, #4]
 800b182:	69a3      	ldr	r3, [r4, #24]
 800b184:	60a3      	str	r3, [r4, #8]
 800b186:	89a3      	ldrh	r3, [r4, #12]
 800b188:	071a      	lsls	r2, r3, #28
 800b18a:	d52f      	bpl.n	800b1ec <__swbuf_r+0x84>
 800b18c:	6923      	ldr	r3, [r4, #16]
 800b18e:	b36b      	cbz	r3, 800b1ec <__swbuf_r+0x84>
 800b190:	6923      	ldr	r3, [r4, #16]
 800b192:	6820      	ldr	r0, [r4, #0]
 800b194:	1ac0      	subs	r0, r0, r3
 800b196:	6963      	ldr	r3, [r4, #20]
 800b198:	b2f6      	uxtb	r6, r6
 800b19a:	4283      	cmp	r3, r0
 800b19c:	4637      	mov	r7, r6
 800b19e:	dc04      	bgt.n	800b1aa <__swbuf_r+0x42>
 800b1a0:	4621      	mov	r1, r4
 800b1a2:	4628      	mov	r0, r5
 800b1a4:	f000 f92e 	bl	800b404 <_fflush_r>
 800b1a8:	bb30      	cbnz	r0, 800b1f8 <__swbuf_r+0x90>
 800b1aa:	68a3      	ldr	r3, [r4, #8]
 800b1ac:	3b01      	subs	r3, #1
 800b1ae:	60a3      	str	r3, [r4, #8]
 800b1b0:	6823      	ldr	r3, [r4, #0]
 800b1b2:	1c5a      	adds	r2, r3, #1
 800b1b4:	6022      	str	r2, [r4, #0]
 800b1b6:	701e      	strb	r6, [r3, #0]
 800b1b8:	6963      	ldr	r3, [r4, #20]
 800b1ba:	3001      	adds	r0, #1
 800b1bc:	4283      	cmp	r3, r0
 800b1be:	d004      	beq.n	800b1ca <__swbuf_r+0x62>
 800b1c0:	89a3      	ldrh	r3, [r4, #12]
 800b1c2:	07db      	lsls	r3, r3, #31
 800b1c4:	d506      	bpl.n	800b1d4 <__swbuf_r+0x6c>
 800b1c6:	2e0a      	cmp	r6, #10
 800b1c8:	d104      	bne.n	800b1d4 <__swbuf_r+0x6c>
 800b1ca:	4621      	mov	r1, r4
 800b1cc:	4628      	mov	r0, r5
 800b1ce:	f000 f919 	bl	800b404 <_fflush_r>
 800b1d2:	b988      	cbnz	r0, 800b1f8 <__swbuf_r+0x90>
 800b1d4:	4638      	mov	r0, r7
 800b1d6:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800b1d8:	4b0a      	ldr	r3, [pc, #40]	; (800b204 <__swbuf_r+0x9c>)
 800b1da:	429c      	cmp	r4, r3
 800b1dc:	d101      	bne.n	800b1e2 <__swbuf_r+0x7a>
 800b1de:	68ac      	ldr	r4, [r5, #8]
 800b1e0:	e7cf      	b.n	800b182 <__swbuf_r+0x1a>
 800b1e2:	4b09      	ldr	r3, [pc, #36]	; (800b208 <__swbuf_r+0xa0>)
 800b1e4:	429c      	cmp	r4, r3
 800b1e6:	bf08      	it	eq
 800b1e8:	68ec      	ldreq	r4, [r5, #12]
 800b1ea:	e7ca      	b.n	800b182 <__swbuf_r+0x1a>
 800b1ec:	4621      	mov	r1, r4
 800b1ee:	4628      	mov	r0, r5
 800b1f0:	f000 f80c 	bl	800b20c <__swsetup_r>
 800b1f4:	2800      	cmp	r0, #0
 800b1f6:	d0cb      	beq.n	800b190 <__swbuf_r+0x28>
 800b1f8:	f04f 37ff 	mov.w	r7, #4294967295
 800b1fc:	e7ea      	b.n	800b1d4 <__swbuf_r+0x6c>
 800b1fe:	bf00      	nop
 800b200:	0800be64 	.word	0x0800be64
 800b204:	0800be84 	.word	0x0800be84
 800b208:	0800be44 	.word	0x0800be44

0800b20c <__swsetup_r>:
 800b20c:	4b32      	ldr	r3, [pc, #200]	; (800b2d8 <__swsetup_r+0xcc>)
 800b20e:	b570      	push	{r4, r5, r6, lr}
 800b210:	681d      	ldr	r5, [r3, #0]
 800b212:	4606      	mov	r6, r0
 800b214:	460c      	mov	r4, r1
 800b216:	b125      	cbz	r5, 800b222 <__swsetup_r+0x16>
 800b218:	69ab      	ldr	r3, [r5, #24]
 800b21a:	b913      	cbnz	r3, 800b222 <__swsetup_r+0x16>
 800b21c:	4628      	mov	r0, r5
 800b21e:	f000 f985 	bl	800b52c <__sinit>
 800b222:	4b2e      	ldr	r3, [pc, #184]	; (800b2dc <__swsetup_r+0xd0>)
 800b224:	429c      	cmp	r4, r3
 800b226:	d10f      	bne.n	800b248 <__swsetup_r+0x3c>
 800b228:	686c      	ldr	r4, [r5, #4]
 800b22a:	89a3      	ldrh	r3, [r4, #12]
 800b22c:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 800b230:	0719      	lsls	r1, r3, #28
 800b232:	d42c      	bmi.n	800b28e <__swsetup_r+0x82>
 800b234:	06dd      	lsls	r5, r3, #27
 800b236:	d411      	bmi.n	800b25c <__swsetup_r+0x50>
 800b238:	2309      	movs	r3, #9
 800b23a:	6033      	str	r3, [r6, #0]
 800b23c:	f042 0340 	orr.w	r3, r2, #64	; 0x40
 800b240:	81a3      	strh	r3, [r4, #12]
 800b242:	f04f 30ff 	mov.w	r0, #4294967295
 800b246:	e03e      	b.n	800b2c6 <__swsetup_r+0xba>
 800b248:	4b25      	ldr	r3, [pc, #148]	; (800b2e0 <__swsetup_r+0xd4>)
 800b24a:	429c      	cmp	r4, r3
 800b24c:	d101      	bne.n	800b252 <__swsetup_r+0x46>
 800b24e:	68ac      	ldr	r4, [r5, #8]
 800b250:	e7eb      	b.n	800b22a <__swsetup_r+0x1e>
 800b252:	4b24      	ldr	r3, [pc, #144]	; (800b2e4 <__swsetup_r+0xd8>)
 800b254:	429c      	cmp	r4, r3
 800b256:	bf08      	it	eq
 800b258:	68ec      	ldreq	r4, [r5, #12]
 800b25a:	e7e6      	b.n	800b22a <__swsetup_r+0x1e>
 800b25c:	0758      	lsls	r0, r3, #29
 800b25e:	d512      	bpl.n	800b286 <__swsetup_r+0x7a>
 800b260:	6b61      	ldr	r1, [r4, #52]	; 0x34
 800b262:	b141      	cbz	r1, 800b276 <__swsetup_r+0x6a>
 800b264:	f104 0344 	add.w	r3, r4, #68	; 0x44
 800b268:	4299      	cmp	r1, r3
 800b26a:	d002      	beq.n	800b272 <__swsetup_r+0x66>
 800b26c:	4630      	mov	r0, r6
 800b26e:	f7ff fb25 	bl	800a8bc <_free_r>
 800b272:	2300      	movs	r3, #0
 800b274:	6363      	str	r3, [r4, #52]	; 0x34
 800b276:	89a3      	ldrh	r3, [r4, #12]
 800b278:	f023 0324 	bic.w	r3, r3, #36	; 0x24
 800b27c:	81a3      	strh	r3, [r4, #12]
 800b27e:	2300      	movs	r3, #0
 800b280:	6063      	str	r3, [r4, #4]
 800b282:	6923      	ldr	r3, [r4, #16]
 800b284:	6023      	str	r3, [r4, #0]
 800b286:	89a3      	ldrh	r3, [r4, #12]
 800b288:	f043 0308 	orr.w	r3, r3, #8
 800b28c:	81a3      	strh	r3, [r4, #12]
 800b28e:	6923      	ldr	r3, [r4, #16]
 800b290:	b94b      	cbnz	r3, 800b2a6 <__swsetup_r+0x9a>
 800b292:	89a3      	ldrh	r3, [r4, #12]
 800b294:	f403 7320 	and.w	r3, r3, #640	; 0x280
 800b298:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 800b29c:	d003      	beq.n	800b2a6 <__swsetup_r+0x9a>
 800b29e:	4621      	mov	r1, r4
 800b2a0:	4630      	mov	r0, r6
 800b2a2:	f000 fa09 	bl	800b6b8 <__smakebuf_r>
 800b2a6:	89a0      	ldrh	r0, [r4, #12]
 800b2a8:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 800b2ac:	f010 0301 	ands.w	r3, r0, #1
 800b2b0:	d00a      	beq.n	800b2c8 <__swsetup_r+0xbc>
 800b2b2:	2300      	movs	r3, #0
 800b2b4:	60a3      	str	r3, [r4, #8]
 800b2b6:	6963      	ldr	r3, [r4, #20]
 800b2b8:	425b      	negs	r3, r3
 800b2ba:	61a3      	str	r3, [r4, #24]
 800b2bc:	6923      	ldr	r3, [r4, #16]
 800b2be:	b943      	cbnz	r3, 800b2d2 <__swsetup_r+0xc6>
 800b2c0:	f010 0080 	ands.w	r0, r0, #128	; 0x80
 800b2c4:	d1ba      	bne.n	800b23c <__swsetup_r+0x30>
 800b2c6:	bd70      	pop	{r4, r5, r6, pc}
 800b2c8:	0781      	lsls	r1, r0, #30
 800b2ca:	bf58      	it	pl
 800b2cc:	6963      	ldrpl	r3, [r4, #20]
 800b2ce:	60a3      	str	r3, [r4, #8]
 800b2d0:	e7f4      	b.n	800b2bc <__swsetup_r+0xb0>
 800b2d2:	2000      	movs	r0, #0
 800b2d4:	e7f7      	b.n	800b2c6 <__swsetup_r+0xba>
 800b2d6:	bf00      	nop
 800b2d8:	2000000c 	.word	0x2000000c
 800b2dc:	0800be64 	.word	0x0800be64
 800b2e0:	0800be84 	.word	0x0800be84
 800b2e4:	0800be44 	.word	0x0800be44

0800b2e8 <abort>:
 800b2e8:	b508      	push	{r3, lr}
 800b2ea:	2006      	movs	r0, #6
 800b2ec:	f000 fa54 	bl	800b798 <raise>
 800b2f0:	2001      	movs	r0, #1
 800b2f2:	f7f6 fb9d 	bl	8001a30 <_exit>
	...

0800b2f8 <__sflush_r>:
 800b2f8:	898a      	ldrh	r2, [r1, #12]
 800b2fa:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800b2fe:	4605      	mov	r5, r0
 800b300:	0710      	lsls	r0, r2, #28
 800b302:	460c      	mov	r4, r1
 800b304:	d458      	bmi.n	800b3b8 <__sflush_r+0xc0>
 800b306:	684b      	ldr	r3, [r1, #4]
 800b308:	2b00      	cmp	r3, #0
 800b30a:	dc05      	bgt.n	800b318 <__sflush_r+0x20>
 800b30c:	6c0b      	ldr	r3, [r1, #64]	; 0x40
 800b30e:	2b00      	cmp	r3, #0
 800b310:	dc02      	bgt.n	800b318 <__sflush_r+0x20>
 800b312:	2000      	movs	r0, #0
 800b314:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800b318:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 800b31a:	2e00      	cmp	r6, #0
 800b31c:	d0f9      	beq.n	800b312 <__sflush_r+0x1a>
 800b31e:	2300      	movs	r3, #0
 800b320:	f412 5280 	ands.w	r2, r2, #4096	; 0x1000
 800b324:	682f      	ldr	r7, [r5, #0]
 800b326:	602b      	str	r3, [r5, #0]
 800b328:	d032      	beq.n	800b390 <__sflush_r+0x98>
 800b32a:	6d60      	ldr	r0, [r4, #84]	; 0x54
 800b32c:	89a3      	ldrh	r3, [r4, #12]
 800b32e:	075a      	lsls	r2, r3, #29
 800b330:	d505      	bpl.n	800b33e <__sflush_r+0x46>
 800b332:	6863      	ldr	r3, [r4, #4]
 800b334:	1ac0      	subs	r0, r0, r3
 800b336:	6b63      	ldr	r3, [r4, #52]	; 0x34
 800b338:	b10b      	cbz	r3, 800b33e <__sflush_r+0x46>
 800b33a:	6c23      	ldr	r3, [r4, #64]	; 0x40
 800b33c:	1ac0      	subs	r0, r0, r3
 800b33e:	2300      	movs	r3, #0
 800b340:	4602      	mov	r2, r0
 800b342:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 800b344:	6a21      	ldr	r1, [r4, #32]
 800b346:	4628      	mov	r0, r5
 800b348:	47b0      	blx	r6
 800b34a:	1c43      	adds	r3, r0, #1
 800b34c:	89a3      	ldrh	r3, [r4, #12]
 800b34e:	d106      	bne.n	800b35e <__sflush_r+0x66>
 800b350:	6829      	ldr	r1, [r5, #0]
 800b352:	291d      	cmp	r1, #29
 800b354:	d82c      	bhi.n	800b3b0 <__sflush_r+0xb8>
 800b356:	4a2a      	ldr	r2, [pc, #168]	; (800b400 <__sflush_r+0x108>)
 800b358:	40ca      	lsrs	r2, r1
 800b35a:	07d6      	lsls	r6, r2, #31
 800b35c:	d528      	bpl.n	800b3b0 <__sflush_r+0xb8>
 800b35e:	2200      	movs	r2, #0
 800b360:	6062      	str	r2, [r4, #4]
 800b362:	04d9      	lsls	r1, r3, #19
 800b364:	6922      	ldr	r2, [r4, #16]
 800b366:	6022      	str	r2, [r4, #0]
 800b368:	d504      	bpl.n	800b374 <__sflush_r+0x7c>
 800b36a:	1c42      	adds	r2, r0, #1
 800b36c:	d101      	bne.n	800b372 <__sflush_r+0x7a>
 800b36e:	682b      	ldr	r3, [r5, #0]
 800b370:	b903      	cbnz	r3, 800b374 <__sflush_r+0x7c>
 800b372:	6560      	str	r0, [r4, #84]	; 0x54
 800b374:	6b61      	ldr	r1, [r4, #52]	; 0x34
 800b376:	602f      	str	r7, [r5, #0]
 800b378:	2900      	cmp	r1, #0
 800b37a:	d0ca      	beq.n	800b312 <__sflush_r+0x1a>
 800b37c:	f104 0344 	add.w	r3, r4, #68	; 0x44
 800b380:	4299      	cmp	r1, r3
 800b382:	d002      	beq.n	800b38a <__sflush_r+0x92>
 800b384:	4628      	mov	r0, r5
 800b386:	f7ff fa99 	bl	800a8bc <_free_r>
 800b38a:	2000      	movs	r0, #0
 800b38c:	6360      	str	r0, [r4, #52]	; 0x34
 800b38e:	e7c1      	b.n	800b314 <__sflush_r+0x1c>
 800b390:	6a21      	ldr	r1, [r4, #32]
 800b392:	2301      	movs	r3, #1
 800b394:	4628      	mov	r0, r5
 800b396:	47b0      	blx	r6
 800b398:	1c41      	adds	r1, r0, #1
 800b39a:	d1c7      	bne.n	800b32c <__sflush_r+0x34>
 800b39c:	682b      	ldr	r3, [r5, #0]
 800b39e:	2b00      	cmp	r3, #0
 800b3a0:	d0c4      	beq.n	800b32c <__sflush_r+0x34>
 800b3a2:	2b1d      	cmp	r3, #29
 800b3a4:	d001      	beq.n	800b3aa <__sflush_r+0xb2>
 800b3a6:	2b16      	cmp	r3, #22
 800b3a8:	d101      	bne.n	800b3ae <__sflush_r+0xb6>
 800b3aa:	602f      	str	r7, [r5, #0]
 800b3ac:	e7b1      	b.n	800b312 <__sflush_r+0x1a>
 800b3ae:	89a3      	ldrh	r3, [r4, #12]
 800b3b0:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800b3b4:	81a3      	strh	r3, [r4, #12]
 800b3b6:	e7ad      	b.n	800b314 <__sflush_r+0x1c>
 800b3b8:	690f      	ldr	r7, [r1, #16]
 800b3ba:	2f00      	cmp	r7, #0
 800b3bc:	d0a9      	beq.n	800b312 <__sflush_r+0x1a>
 800b3be:	0793      	lsls	r3, r2, #30
 800b3c0:	680e      	ldr	r6, [r1, #0]
 800b3c2:	bf08      	it	eq
 800b3c4:	694b      	ldreq	r3, [r1, #20]
 800b3c6:	600f      	str	r7, [r1, #0]
 800b3c8:	bf18      	it	ne
 800b3ca:	2300      	movne	r3, #0
 800b3cc:	eba6 0807 	sub.w	r8, r6, r7
 800b3d0:	608b      	str	r3, [r1, #8]
 800b3d2:	f1b8 0f00 	cmp.w	r8, #0
 800b3d6:	dd9c      	ble.n	800b312 <__sflush_r+0x1a>
 800b3d8:	6a21      	ldr	r1, [r4, #32]
 800b3da:	6aa6      	ldr	r6, [r4, #40]	; 0x28
 800b3dc:	4643      	mov	r3, r8
 800b3de:	463a      	mov	r2, r7
 800b3e0:	4628      	mov	r0, r5
 800b3e2:	47b0      	blx	r6
 800b3e4:	2800      	cmp	r0, #0
 800b3e6:	dc06      	bgt.n	800b3f6 <__sflush_r+0xfe>
 800b3e8:	89a3      	ldrh	r3, [r4, #12]
 800b3ea:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800b3ee:	81a3      	strh	r3, [r4, #12]
 800b3f0:	f04f 30ff 	mov.w	r0, #4294967295
 800b3f4:	e78e      	b.n	800b314 <__sflush_r+0x1c>
 800b3f6:	4407      	add	r7, r0
 800b3f8:	eba8 0800 	sub.w	r8, r8, r0
 800b3fc:	e7e9      	b.n	800b3d2 <__sflush_r+0xda>
 800b3fe:	bf00      	nop
 800b400:	20400001 	.word	0x20400001

0800b404 <_fflush_r>:
 800b404:	b538      	push	{r3, r4, r5, lr}
 800b406:	690b      	ldr	r3, [r1, #16]
 800b408:	4605      	mov	r5, r0
 800b40a:	460c      	mov	r4, r1
 800b40c:	b913      	cbnz	r3, 800b414 <_fflush_r+0x10>
 800b40e:	2500      	movs	r5, #0
 800b410:	4628      	mov	r0, r5
 800b412:	bd38      	pop	{r3, r4, r5, pc}
 800b414:	b118      	cbz	r0, 800b41e <_fflush_r+0x1a>
 800b416:	6983      	ldr	r3, [r0, #24]
 800b418:	b90b      	cbnz	r3, 800b41e <_fflush_r+0x1a>
 800b41a:	f000 f887 	bl	800b52c <__sinit>
 800b41e:	4b14      	ldr	r3, [pc, #80]	; (800b470 <_fflush_r+0x6c>)
 800b420:	429c      	cmp	r4, r3
 800b422:	d11b      	bne.n	800b45c <_fflush_r+0x58>
 800b424:	686c      	ldr	r4, [r5, #4]
 800b426:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800b42a:	2b00      	cmp	r3, #0
 800b42c:	d0ef      	beq.n	800b40e <_fflush_r+0xa>
 800b42e:	6e62      	ldr	r2, [r4, #100]	; 0x64
 800b430:	07d0      	lsls	r0, r2, #31
 800b432:	d404      	bmi.n	800b43e <_fflush_r+0x3a>
 800b434:	0599      	lsls	r1, r3, #22
 800b436:	d402      	bmi.n	800b43e <_fflush_r+0x3a>
 800b438:	6da0      	ldr	r0, [r4, #88]	; 0x58
 800b43a:	f000 f915 	bl	800b668 <__retarget_lock_acquire_recursive>
 800b43e:	4628      	mov	r0, r5
 800b440:	4621      	mov	r1, r4
 800b442:	f7ff ff59 	bl	800b2f8 <__sflush_r>
 800b446:	6e63      	ldr	r3, [r4, #100]	; 0x64
 800b448:	07da      	lsls	r2, r3, #31
 800b44a:	4605      	mov	r5, r0
 800b44c:	d4e0      	bmi.n	800b410 <_fflush_r+0xc>
 800b44e:	89a3      	ldrh	r3, [r4, #12]
 800b450:	059b      	lsls	r3, r3, #22
 800b452:	d4dd      	bmi.n	800b410 <_fflush_r+0xc>
 800b454:	6da0      	ldr	r0, [r4, #88]	; 0x58
 800b456:	f000 f908 	bl	800b66a <__retarget_lock_release_recursive>
 800b45a:	e7d9      	b.n	800b410 <_fflush_r+0xc>
 800b45c:	4b05      	ldr	r3, [pc, #20]	; (800b474 <_fflush_r+0x70>)
 800b45e:	429c      	cmp	r4, r3
 800b460:	d101      	bne.n	800b466 <_fflush_r+0x62>
 800b462:	68ac      	ldr	r4, [r5, #8]
 800b464:	e7df      	b.n	800b426 <_fflush_r+0x22>
 800b466:	4b04      	ldr	r3, [pc, #16]	; (800b478 <_fflush_r+0x74>)
 800b468:	429c      	cmp	r4, r3
 800b46a:	bf08      	it	eq
 800b46c:	68ec      	ldreq	r4, [r5, #12]
 800b46e:	e7da      	b.n	800b426 <_fflush_r+0x22>
 800b470:	0800be64 	.word	0x0800be64
 800b474:	0800be84 	.word	0x0800be84
 800b478:	0800be44 	.word	0x0800be44

0800b47c <std>:
 800b47c:	2300      	movs	r3, #0
 800b47e:	b510      	push	{r4, lr}
 800b480:	4604      	mov	r4, r0
 800b482:	e9c0 3300 	strd	r3, r3, [r0]
 800b486:	e9c0 3304 	strd	r3, r3, [r0, #16]
 800b48a:	6083      	str	r3, [r0, #8]
 800b48c:	8181      	strh	r1, [r0, #12]
 800b48e:	6643      	str	r3, [r0, #100]	; 0x64
 800b490:	81c2      	strh	r2, [r0, #14]
 800b492:	6183      	str	r3, [r0, #24]
 800b494:	4619      	mov	r1, r3
 800b496:	2208      	movs	r2, #8
 800b498:	305c      	adds	r0, #92	; 0x5c
 800b49a:	f7fb fd97 	bl	8006fcc <memset>
 800b49e:	4b05      	ldr	r3, [pc, #20]	; (800b4b4 <std+0x38>)
 800b4a0:	6263      	str	r3, [r4, #36]	; 0x24
 800b4a2:	4b05      	ldr	r3, [pc, #20]	; (800b4b8 <std+0x3c>)
 800b4a4:	62a3      	str	r3, [r4, #40]	; 0x28
 800b4a6:	4b05      	ldr	r3, [pc, #20]	; (800b4bc <std+0x40>)
 800b4a8:	62e3      	str	r3, [r4, #44]	; 0x2c
 800b4aa:	4b05      	ldr	r3, [pc, #20]	; (800b4c0 <std+0x44>)
 800b4ac:	6224      	str	r4, [r4, #32]
 800b4ae:	6323      	str	r3, [r4, #48]	; 0x30
 800b4b0:	bd10      	pop	{r4, pc}
 800b4b2:	bf00      	nop
 800b4b4:	0800b7d1 	.word	0x0800b7d1
 800b4b8:	0800b7f3 	.word	0x0800b7f3
 800b4bc:	0800b82b 	.word	0x0800b82b
 800b4c0:	0800b84f 	.word	0x0800b84f

0800b4c4 <_cleanup_r>:
 800b4c4:	4901      	ldr	r1, [pc, #4]	; (800b4cc <_cleanup_r+0x8>)
 800b4c6:	f000 b8af 	b.w	800b628 <_fwalk_reent>
 800b4ca:	bf00      	nop
 800b4cc:	0800b405 	.word	0x0800b405

0800b4d0 <__sfmoreglue>:
 800b4d0:	b570      	push	{r4, r5, r6, lr}
 800b4d2:	2268      	movs	r2, #104	; 0x68
 800b4d4:	1e4d      	subs	r5, r1, #1
 800b4d6:	4355      	muls	r5, r2
 800b4d8:	460e      	mov	r6, r1
 800b4da:	f105 0174 	add.w	r1, r5, #116	; 0x74
 800b4de:	f7ff fa59 	bl	800a994 <_malloc_r>
 800b4e2:	4604      	mov	r4, r0
 800b4e4:	b140      	cbz	r0, 800b4f8 <__sfmoreglue+0x28>
 800b4e6:	2100      	movs	r1, #0
 800b4e8:	e9c0 1600 	strd	r1, r6, [r0]
 800b4ec:	300c      	adds	r0, #12
 800b4ee:	60a0      	str	r0, [r4, #8]
 800b4f0:	f105 0268 	add.w	r2, r5, #104	; 0x68
 800b4f4:	f7fb fd6a 	bl	8006fcc <memset>
 800b4f8:	4620      	mov	r0, r4
 800b4fa:	bd70      	pop	{r4, r5, r6, pc}

0800b4fc <__sfp_lock_acquire>:
 800b4fc:	4801      	ldr	r0, [pc, #4]	; (800b504 <__sfp_lock_acquire+0x8>)
 800b4fe:	f000 b8b3 	b.w	800b668 <__retarget_lock_acquire_recursive>
 800b502:	bf00      	nop
 800b504:	20000439 	.word	0x20000439

0800b508 <__sfp_lock_release>:
 800b508:	4801      	ldr	r0, [pc, #4]	; (800b510 <__sfp_lock_release+0x8>)
 800b50a:	f000 b8ae 	b.w	800b66a <__retarget_lock_release_recursive>
 800b50e:	bf00      	nop
 800b510:	20000439 	.word	0x20000439

0800b514 <__sinit_lock_acquire>:
 800b514:	4801      	ldr	r0, [pc, #4]	; (800b51c <__sinit_lock_acquire+0x8>)
 800b516:	f000 b8a7 	b.w	800b668 <__retarget_lock_acquire_recursive>
 800b51a:	bf00      	nop
 800b51c:	2000043a 	.word	0x2000043a

0800b520 <__sinit_lock_release>:
 800b520:	4801      	ldr	r0, [pc, #4]	; (800b528 <__sinit_lock_release+0x8>)
 800b522:	f000 b8a2 	b.w	800b66a <__retarget_lock_release_recursive>
 800b526:	bf00      	nop
 800b528:	2000043a 	.word	0x2000043a

0800b52c <__sinit>:
 800b52c:	b510      	push	{r4, lr}
 800b52e:	4604      	mov	r4, r0
 800b530:	f7ff fff0 	bl	800b514 <__sinit_lock_acquire>
 800b534:	69a3      	ldr	r3, [r4, #24]
 800b536:	b11b      	cbz	r3, 800b540 <__sinit+0x14>
 800b538:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800b53c:	f7ff bff0 	b.w	800b520 <__sinit_lock_release>
 800b540:	e9c4 3312 	strd	r3, r3, [r4, #72]	; 0x48
 800b544:	6523      	str	r3, [r4, #80]	; 0x50
 800b546:	4b13      	ldr	r3, [pc, #76]	; (800b594 <__sinit+0x68>)
 800b548:	4a13      	ldr	r2, [pc, #76]	; (800b598 <__sinit+0x6c>)
 800b54a:	681b      	ldr	r3, [r3, #0]
 800b54c:	62a2      	str	r2, [r4, #40]	; 0x28
 800b54e:	42a3      	cmp	r3, r4
 800b550:	bf04      	itt	eq
 800b552:	2301      	moveq	r3, #1
 800b554:	61a3      	streq	r3, [r4, #24]
 800b556:	4620      	mov	r0, r4
 800b558:	f000 f820 	bl	800b59c <__sfp>
 800b55c:	6060      	str	r0, [r4, #4]
 800b55e:	4620      	mov	r0, r4
 800b560:	f000 f81c 	bl	800b59c <__sfp>
 800b564:	60a0      	str	r0, [r4, #8]
 800b566:	4620      	mov	r0, r4
 800b568:	f000 f818 	bl	800b59c <__sfp>
 800b56c:	2200      	movs	r2, #0
 800b56e:	60e0      	str	r0, [r4, #12]
 800b570:	2104      	movs	r1, #4
 800b572:	6860      	ldr	r0, [r4, #4]
 800b574:	f7ff ff82 	bl	800b47c <std>
 800b578:	68a0      	ldr	r0, [r4, #8]
 800b57a:	2201      	movs	r2, #1
 800b57c:	2109      	movs	r1, #9
 800b57e:	f7ff ff7d 	bl	800b47c <std>
 800b582:	68e0      	ldr	r0, [r4, #12]
 800b584:	2202      	movs	r2, #2
 800b586:	2112      	movs	r1, #18
 800b588:	f7ff ff78 	bl	800b47c <std>
 800b58c:	2301      	movs	r3, #1
 800b58e:	61a3      	str	r3, [r4, #24]
 800b590:	e7d2      	b.n	800b538 <__sinit+0xc>
 800b592:	bf00      	nop
 800b594:	0800b9fc 	.word	0x0800b9fc
 800b598:	0800b4c5 	.word	0x0800b4c5

0800b59c <__sfp>:
 800b59c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800b59e:	4607      	mov	r7, r0
 800b5a0:	f7ff ffac 	bl	800b4fc <__sfp_lock_acquire>
 800b5a4:	4b1e      	ldr	r3, [pc, #120]	; (800b620 <__sfp+0x84>)
 800b5a6:	681e      	ldr	r6, [r3, #0]
 800b5a8:	69b3      	ldr	r3, [r6, #24]
 800b5aa:	b913      	cbnz	r3, 800b5b2 <__sfp+0x16>
 800b5ac:	4630      	mov	r0, r6
 800b5ae:	f7ff ffbd 	bl	800b52c <__sinit>
 800b5b2:	3648      	adds	r6, #72	; 0x48
 800b5b4:	e9d6 3401 	ldrd	r3, r4, [r6, #4]
 800b5b8:	3b01      	subs	r3, #1
 800b5ba:	d503      	bpl.n	800b5c4 <__sfp+0x28>
 800b5bc:	6833      	ldr	r3, [r6, #0]
 800b5be:	b30b      	cbz	r3, 800b604 <__sfp+0x68>
 800b5c0:	6836      	ldr	r6, [r6, #0]
 800b5c2:	e7f7      	b.n	800b5b4 <__sfp+0x18>
 800b5c4:	f9b4 500c 	ldrsh.w	r5, [r4, #12]
 800b5c8:	b9d5      	cbnz	r5, 800b600 <__sfp+0x64>
 800b5ca:	4b16      	ldr	r3, [pc, #88]	; (800b624 <__sfp+0x88>)
 800b5cc:	60e3      	str	r3, [r4, #12]
 800b5ce:	f104 0058 	add.w	r0, r4, #88	; 0x58
 800b5d2:	6665      	str	r5, [r4, #100]	; 0x64
 800b5d4:	f000 f847 	bl	800b666 <__retarget_lock_init_recursive>
 800b5d8:	f7ff ff96 	bl	800b508 <__sfp_lock_release>
 800b5dc:	e9c4 5501 	strd	r5, r5, [r4, #4]
 800b5e0:	e9c4 5504 	strd	r5, r5, [r4, #16]
 800b5e4:	6025      	str	r5, [r4, #0]
 800b5e6:	61a5      	str	r5, [r4, #24]
 800b5e8:	2208      	movs	r2, #8
 800b5ea:	4629      	mov	r1, r5
 800b5ec:	f104 005c 	add.w	r0, r4, #92	; 0x5c
 800b5f0:	f7fb fcec 	bl	8006fcc <memset>
 800b5f4:	e9c4 550d 	strd	r5, r5, [r4, #52]	; 0x34
 800b5f8:	e9c4 5512 	strd	r5, r5, [r4, #72]	; 0x48
 800b5fc:	4620      	mov	r0, r4
 800b5fe:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800b600:	3468      	adds	r4, #104	; 0x68
 800b602:	e7d9      	b.n	800b5b8 <__sfp+0x1c>
 800b604:	2104      	movs	r1, #4
 800b606:	4638      	mov	r0, r7
 800b608:	f7ff ff62 	bl	800b4d0 <__sfmoreglue>
 800b60c:	4604      	mov	r4, r0
 800b60e:	6030      	str	r0, [r6, #0]
 800b610:	2800      	cmp	r0, #0
 800b612:	d1d5      	bne.n	800b5c0 <__sfp+0x24>
 800b614:	f7ff ff78 	bl	800b508 <__sfp_lock_release>
 800b618:	230c      	movs	r3, #12
 800b61a:	603b      	str	r3, [r7, #0]
 800b61c:	e7ee      	b.n	800b5fc <__sfp+0x60>
 800b61e:	bf00      	nop
 800b620:	0800b9fc 	.word	0x0800b9fc
 800b624:	ffff0001 	.word	0xffff0001

0800b628 <_fwalk_reent>:
 800b628:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800b62c:	4606      	mov	r6, r0
 800b62e:	4688      	mov	r8, r1
 800b630:	f100 0448 	add.w	r4, r0, #72	; 0x48
 800b634:	2700      	movs	r7, #0
 800b636:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 800b63a:	f1b9 0901 	subs.w	r9, r9, #1
 800b63e:	d505      	bpl.n	800b64c <_fwalk_reent+0x24>
 800b640:	6824      	ldr	r4, [r4, #0]
 800b642:	2c00      	cmp	r4, #0
 800b644:	d1f7      	bne.n	800b636 <_fwalk_reent+0xe>
 800b646:	4638      	mov	r0, r7
 800b648:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800b64c:	89ab      	ldrh	r3, [r5, #12]
 800b64e:	2b01      	cmp	r3, #1
 800b650:	d907      	bls.n	800b662 <_fwalk_reent+0x3a>
 800b652:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 800b656:	3301      	adds	r3, #1
 800b658:	d003      	beq.n	800b662 <_fwalk_reent+0x3a>
 800b65a:	4629      	mov	r1, r5
 800b65c:	4630      	mov	r0, r6
 800b65e:	47c0      	blx	r8
 800b660:	4307      	orrs	r7, r0
 800b662:	3568      	adds	r5, #104	; 0x68
 800b664:	e7e9      	b.n	800b63a <_fwalk_reent+0x12>

0800b666 <__retarget_lock_init_recursive>:
 800b666:	4770      	bx	lr

0800b668 <__retarget_lock_acquire_recursive>:
 800b668:	4770      	bx	lr

0800b66a <__retarget_lock_release_recursive>:
 800b66a:	4770      	bx	lr

0800b66c <__swhatbuf_r>:
 800b66c:	b570      	push	{r4, r5, r6, lr}
 800b66e:	460e      	mov	r6, r1
 800b670:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800b674:	2900      	cmp	r1, #0
 800b676:	b096      	sub	sp, #88	; 0x58
 800b678:	4614      	mov	r4, r2
 800b67a:	461d      	mov	r5, r3
 800b67c:	da08      	bge.n	800b690 <__swhatbuf_r+0x24>
 800b67e:	f9b6 300c 	ldrsh.w	r3, [r6, #12]
 800b682:	2200      	movs	r2, #0
 800b684:	602a      	str	r2, [r5, #0]
 800b686:	061a      	lsls	r2, r3, #24
 800b688:	d410      	bmi.n	800b6ac <__swhatbuf_r+0x40>
 800b68a:	f44f 6380 	mov.w	r3, #1024	; 0x400
 800b68e:	e00e      	b.n	800b6ae <__swhatbuf_r+0x42>
 800b690:	466a      	mov	r2, sp
 800b692:	f000 f903 	bl	800b89c <_fstat_r>
 800b696:	2800      	cmp	r0, #0
 800b698:	dbf1      	blt.n	800b67e <__swhatbuf_r+0x12>
 800b69a:	9a01      	ldr	r2, [sp, #4]
 800b69c:	f402 4270 	and.w	r2, r2, #61440	; 0xf000
 800b6a0:	f5a2 5300 	sub.w	r3, r2, #8192	; 0x2000
 800b6a4:	425a      	negs	r2, r3
 800b6a6:	415a      	adcs	r2, r3
 800b6a8:	602a      	str	r2, [r5, #0]
 800b6aa:	e7ee      	b.n	800b68a <__swhatbuf_r+0x1e>
 800b6ac:	2340      	movs	r3, #64	; 0x40
 800b6ae:	2000      	movs	r0, #0
 800b6b0:	6023      	str	r3, [r4, #0]
 800b6b2:	b016      	add	sp, #88	; 0x58
 800b6b4:	bd70      	pop	{r4, r5, r6, pc}
	...

0800b6b8 <__smakebuf_r>:
 800b6b8:	898b      	ldrh	r3, [r1, #12]
 800b6ba:	b573      	push	{r0, r1, r4, r5, r6, lr}
 800b6bc:	079d      	lsls	r5, r3, #30
 800b6be:	4606      	mov	r6, r0
 800b6c0:	460c      	mov	r4, r1
 800b6c2:	d507      	bpl.n	800b6d4 <__smakebuf_r+0x1c>
 800b6c4:	f104 0347 	add.w	r3, r4, #71	; 0x47
 800b6c8:	6023      	str	r3, [r4, #0]
 800b6ca:	6123      	str	r3, [r4, #16]
 800b6cc:	2301      	movs	r3, #1
 800b6ce:	6163      	str	r3, [r4, #20]
 800b6d0:	b002      	add	sp, #8
 800b6d2:	bd70      	pop	{r4, r5, r6, pc}
 800b6d4:	ab01      	add	r3, sp, #4
 800b6d6:	466a      	mov	r2, sp
 800b6d8:	f7ff ffc8 	bl	800b66c <__swhatbuf_r>
 800b6dc:	9900      	ldr	r1, [sp, #0]
 800b6de:	4605      	mov	r5, r0
 800b6e0:	4630      	mov	r0, r6
 800b6e2:	f7ff f957 	bl	800a994 <_malloc_r>
 800b6e6:	b948      	cbnz	r0, 800b6fc <__smakebuf_r+0x44>
 800b6e8:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800b6ec:	059a      	lsls	r2, r3, #22
 800b6ee:	d4ef      	bmi.n	800b6d0 <__smakebuf_r+0x18>
 800b6f0:	f023 0303 	bic.w	r3, r3, #3
 800b6f4:	f043 0302 	orr.w	r3, r3, #2
 800b6f8:	81a3      	strh	r3, [r4, #12]
 800b6fa:	e7e3      	b.n	800b6c4 <__smakebuf_r+0xc>
 800b6fc:	4b0d      	ldr	r3, [pc, #52]	; (800b734 <__smakebuf_r+0x7c>)
 800b6fe:	62b3      	str	r3, [r6, #40]	; 0x28
 800b700:	89a3      	ldrh	r3, [r4, #12]
 800b702:	6020      	str	r0, [r4, #0]
 800b704:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800b708:	81a3      	strh	r3, [r4, #12]
 800b70a:	9b00      	ldr	r3, [sp, #0]
 800b70c:	6163      	str	r3, [r4, #20]
 800b70e:	9b01      	ldr	r3, [sp, #4]
 800b710:	6120      	str	r0, [r4, #16]
 800b712:	b15b      	cbz	r3, 800b72c <__smakebuf_r+0x74>
 800b714:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 800b718:	4630      	mov	r0, r6
 800b71a:	f000 f8d1 	bl	800b8c0 <_isatty_r>
 800b71e:	b128      	cbz	r0, 800b72c <__smakebuf_r+0x74>
 800b720:	89a3      	ldrh	r3, [r4, #12]
 800b722:	f023 0303 	bic.w	r3, r3, #3
 800b726:	f043 0301 	orr.w	r3, r3, #1
 800b72a:	81a3      	strh	r3, [r4, #12]
 800b72c:	89a0      	ldrh	r0, [r4, #12]
 800b72e:	4305      	orrs	r5, r0
 800b730:	81a5      	strh	r5, [r4, #12]
 800b732:	e7cd      	b.n	800b6d0 <__smakebuf_r+0x18>
 800b734:	0800b4c5 	.word	0x0800b4c5

0800b738 <_malloc_usable_size_r>:
 800b738:	f851 3c04 	ldr.w	r3, [r1, #-4]
 800b73c:	1f18      	subs	r0, r3, #4
 800b73e:	2b00      	cmp	r3, #0
 800b740:	bfbc      	itt	lt
 800b742:	580b      	ldrlt	r3, [r1, r0]
 800b744:	18c0      	addlt	r0, r0, r3
 800b746:	4770      	bx	lr

0800b748 <_raise_r>:
 800b748:	291f      	cmp	r1, #31
 800b74a:	b538      	push	{r3, r4, r5, lr}
 800b74c:	4604      	mov	r4, r0
 800b74e:	460d      	mov	r5, r1
 800b750:	d904      	bls.n	800b75c <_raise_r+0x14>
 800b752:	2316      	movs	r3, #22
 800b754:	6003      	str	r3, [r0, #0]
 800b756:	f04f 30ff 	mov.w	r0, #4294967295
 800b75a:	bd38      	pop	{r3, r4, r5, pc}
 800b75c:	6c42      	ldr	r2, [r0, #68]	; 0x44
 800b75e:	b112      	cbz	r2, 800b766 <_raise_r+0x1e>
 800b760:	f852 3021 	ldr.w	r3, [r2, r1, lsl #2]
 800b764:	b94b      	cbnz	r3, 800b77a <_raise_r+0x32>
 800b766:	4620      	mov	r0, r4
 800b768:	f000 f830 	bl	800b7cc <_getpid_r>
 800b76c:	462a      	mov	r2, r5
 800b76e:	4601      	mov	r1, r0
 800b770:	4620      	mov	r0, r4
 800b772:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 800b776:	f000 b817 	b.w	800b7a8 <_kill_r>
 800b77a:	2b01      	cmp	r3, #1
 800b77c:	d00a      	beq.n	800b794 <_raise_r+0x4c>
 800b77e:	1c59      	adds	r1, r3, #1
 800b780:	d103      	bne.n	800b78a <_raise_r+0x42>
 800b782:	2316      	movs	r3, #22
 800b784:	6003      	str	r3, [r0, #0]
 800b786:	2001      	movs	r0, #1
 800b788:	e7e7      	b.n	800b75a <_raise_r+0x12>
 800b78a:	2400      	movs	r4, #0
 800b78c:	f842 4025 	str.w	r4, [r2, r5, lsl #2]
 800b790:	4628      	mov	r0, r5
 800b792:	4798      	blx	r3
 800b794:	2000      	movs	r0, #0
 800b796:	e7e0      	b.n	800b75a <_raise_r+0x12>

0800b798 <raise>:
 800b798:	4b02      	ldr	r3, [pc, #8]	; (800b7a4 <raise+0xc>)
 800b79a:	4601      	mov	r1, r0
 800b79c:	6818      	ldr	r0, [r3, #0]
 800b79e:	f7ff bfd3 	b.w	800b748 <_raise_r>
 800b7a2:	bf00      	nop
 800b7a4:	2000000c 	.word	0x2000000c

0800b7a8 <_kill_r>:
 800b7a8:	b538      	push	{r3, r4, r5, lr}
 800b7aa:	4d07      	ldr	r5, [pc, #28]	; (800b7c8 <_kill_r+0x20>)
 800b7ac:	2300      	movs	r3, #0
 800b7ae:	4604      	mov	r4, r0
 800b7b0:	4608      	mov	r0, r1
 800b7b2:	4611      	mov	r1, r2
 800b7b4:	602b      	str	r3, [r5, #0]
 800b7b6:	f7f6 f92b 	bl	8001a10 <_kill>
 800b7ba:	1c43      	adds	r3, r0, #1
 800b7bc:	d102      	bne.n	800b7c4 <_kill_r+0x1c>
 800b7be:	682b      	ldr	r3, [r5, #0]
 800b7c0:	b103      	cbz	r3, 800b7c4 <_kill_r+0x1c>
 800b7c2:	6023      	str	r3, [r4, #0]
 800b7c4:	bd38      	pop	{r3, r4, r5, pc}
 800b7c6:	bf00      	nop
 800b7c8:	20000434 	.word	0x20000434

0800b7cc <_getpid_r>:
 800b7cc:	f7f6 b918 	b.w	8001a00 <_getpid>

0800b7d0 <__sread>:
 800b7d0:	b510      	push	{r4, lr}
 800b7d2:	460c      	mov	r4, r1
 800b7d4:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800b7d8:	f000 f894 	bl	800b904 <_read_r>
 800b7dc:	2800      	cmp	r0, #0
 800b7de:	bfab      	itete	ge
 800b7e0:	6d63      	ldrge	r3, [r4, #84]	; 0x54
 800b7e2:	89a3      	ldrhlt	r3, [r4, #12]
 800b7e4:	181b      	addge	r3, r3, r0
 800b7e6:	f423 5380 	biclt.w	r3, r3, #4096	; 0x1000
 800b7ea:	bfac      	ite	ge
 800b7ec:	6563      	strge	r3, [r4, #84]	; 0x54
 800b7ee:	81a3      	strhlt	r3, [r4, #12]
 800b7f0:	bd10      	pop	{r4, pc}

0800b7f2 <__swrite>:
 800b7f2:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800b7f6:	461f      	mov	r7, r3
 800b7f8:	898b      	ldrh	r3, [r1, #12]
 800b7fa:	05db      	lsls	r3, r3, #23
 800b7fc:	4605      	mov	r5, r0
 800b7fe:	460c      	mov	r4, r1
 800b800:	4616      	mov	r6, r2
 800b802:	d505      	bpl.n	800b810 <__swrite+0x1e>
 800b804:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800b808:	2302      	movs	r3, #2
 800b80a:	2200      	movs	r2, #0
 800b80c:	f000 f868 	bl	800b8e0 <_lseek_r>
 800b810:	89a3      	ldrh	r3, [r4, #12]
 800b812:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 800b816:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 800b81a:	81a3      	strh	r3, [r4, #12]
 800b81c:	4632      	mov	r2, r6
 800b81e:	463b      	mov	r3, r7
 800b820:	4628      	mov	r0, r5
 800b822:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 800b826:	f000 b817 	b.w	800b858 <_write_r>

0800b82a <__sseek>:
 800b82a:	b510      	push	{r4, lr}
 800b82c:	460c      	mov	r4, r1
 800b82e:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800b832:	f000 f855 	bl	800b8e0 <_lseek_r>
 800b836:	1c43      	adds	r3, r0, #1
 800b838:	89a3      	ldrh	r3, [r4, #12]
 800b83a:	bf15      	itete	ne
 800b83c:	6560      	strne	r0, [r4, #84]	; 0x54
 800b83e:	f423 5380 	biceq.w	r3, r3, #4096	; 0x1000
 800b842:	f443 5380 	orrne.w	r3, r3, #4096	; 0x1000
 800b846:	81a3      	strheq	r3, [r4, #12]
 800b848:	bf18      	it	ne
 800b84a:	81a3      	strhne	r3, [r4, #12]
 800b84c:	bd10      	pop	{r4, pc}

0800b84e <__sclose>:
 800b84e:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800b852:	f000 b813 	b.w	800b87c <_close_r>
	...

0800b858 <_write_r>:
 800b858:	b538      	push	{r3, r4, r5, lr}
 800b85a:	4d07      	ldr	r5, [pc, #28]	; (800b878 <_write_r+0x20>)
 800b85c:	4604      	mov	r4, r0
 800b85e:	4608      	mov	r0, r1
 800b860:	4611      	mov	r1, r2
 800b862:	2200      	movs	r2, #0
 800b864:	602a      	str	r2, [r5, #0]
 800b866:	461a      	mov	r2, r3
 800b868:	f7f6 f909 	bl	8001a7e <_write>
 800b86c:	1c43      	adds	r3, r0, #1
 800b86e:	d102      	bne.n	800b876 <_write_r+0x1e>
 800b870:	682b      	ldr	r3, [r5, #0]
 800b872:	b103      	cbz	r3, 800b876 <_write_r+0x1e>
 800b874:	6023      	str	r3, [r4, #0]
 800b876:	bd38      	pop	{r3, r4, r5, pc}
 800b878:	20000434 	.word	0x20000434

0800b87c <_close_r>:
 800b87c:	b538      	push	{r3, r4, r5, lr}
 800b87e:	4d06      	ldr	r5, [pc, #24]	; (800b898 <_close_r+0x1c>)
 800b880:	2300      	movs	r3, #0
 800b882:	4604      	mov	r4, r0
 800b884:	4608      	mov	r0, r1
 800b886:	602b      	str	r3, [r5, #0]
 800b888:	f7f6 f915 	bl	8001ab6 <_close>
 800b88c:	1c43      	adds	r3, r0, #1
 800b88e:	d102      	bne.n	800b896 <_close_r+0x1a>
 800b890:	682b      	ldr	r3, [r5, #0]
 800b892:	b103      	cbz	r3, 800b896 <_close_r+0x1a>
 800b894:	6023      	str	r3, [r4, #0]
 800b896:	bd38      	pop	{r3, r4, r5, pc}
 800b898:	20000434 	.word	0x20000434

0800b89c <_fstat_r>:
 800b89c:	b538      	push	{r3, r4, r5, lr}
 800b89e:	4d07      	ldr	r5, [pc, #28]	; (800b8bc <_fstat_r+0x20>)
 800b8a0:	2300      	movs	r3, #0
 800b8a2:	4604      	mov	r4, r0
 800b8a4:	4608      	mov	r0, r1
 800b8a6:	4611      	mov	r1, r2
 800b8a8:	602b      	str	r3, [r5, #0]
 800b8aa:	f7f6 f910 	bl	8001ace <_fstat>
 800b8ae:	1c43      	adds	r3, r0, #1
 800b8b0:	d102      	bne.n	800b8b8 <_fstat_r+0x1c>
 800b8b2:	682b      	ldr	r3, [r5, #0]
 800b8b4:	b103      	cbz	r3, 800b8b8 <_fstat_r+0x1c>
 800b8b6:	6023      	str	r3, [r4, #0]
 800b8b8:	bd38      	pop	{r3, r4, r5, pc}
 800b8ba:	bf00      	nop
 800b8bc:	20000434 	.word	0x20000434

0800b8c0 <_isatty_r>:
 800b8c0:	b538      	push	{r3, r4, r5, lr}
 800b8c2:	4d06      	ldr	r5, [pc, #24]	; (800b8dc <_isatty_r+0x1c>)
 800b8c4:	2300      	movs	r3, #0
 800b8c6:	4604      	mov	r4, r0
 800b8c8:	4608      	mov	r0, r1
 800b8ca:	602b      	str	r3, [r5, #0]
 800b8cc:	f7f6 f90f 	bl	8001aee <_isatty>
 800b8d0:	1c43      	adds	r3, r0, #1
 800b8d2:	d102      	bne.n	800b8da <_isatty_r+0x1a>
 800b8d4:	682b      	ldr	r3, [r5, #0]
 800b8d6:	b103      	cbz	r3, 800b8da <_isatty_r+0x1a>
 800b8d8:	6023      	str	r3, [r4, #0]
 800b8da:	bd38      	pop	{r3, r4, r5, pc}
 800b8dc:	20000434 	.word	0x20000434

0800b8e0 <_lseek_r>:
 800b8e0:	b538      	push	{r3, r4, r5, lr}
 800b8e2:	4d07      	ldr	r5, [pc, #28]	; (800b900 <_lseek_r+0x20>)
 800b8e4:	4604      	mov	r4, r0
 800b8e6:	4608      	mov	r0, r1
 800b8e8:	4611      	mov	r1, r2
 800b8ea:	2200      	movs	r2, #0
 800b8ec:	602a      	str	r2, [r5, #0]
 800b8ee:	461a      	mov	r2, r3
 800b8f0:	f7f6 f908 	bl	8001b04 <_lseek>
 800b8f4:	1c43      	adds	r3, r0, #1
 800b8f6:	d102      	bne.n	800b8fe <_lseek_r+0x1e>
 800b8f8:	682b      	ldr	r3, [r5, #0]
 800b8fa:	b103      	cbz	r3, 800b8fe <_lseek_r+0x1e>
 800b8fc:	6023      	str	r3, [r4, #0]
 800b8fe:	bd38      	pop	{r3, r4, r5, pc}
 800b900:	20000434 	.word	0x20000434

0800b904 <_read_r>:
 800b904:	b538      	push	{r3, r4, r5, lr}
 800b906:	4d07      	ldr	r5, [pc, #28]	; (800b924 <_read_r+0x20>)
 800b908:	4604      	mov	r4, r0
 800b90a:	4608      	mov	r0, r1
 800b90c:	4611      	mov	r1, r2
 800b90e:	2200      	movs	r2, #0
 800b910:	602a      	str	r2, [r5, #0]
 800b912:	461a      	mov	r2, r3
 800b914:	f7f6 f896 	bl	8001a44 <_read>
 800b918:	1c43      	adds	r3, r0, #1
 800b91a:	d102      	bne.n	800b922 <_read_r+0x1e>
 800b91c:	682b      	ldr	r3, [r5, #0]
 800b91e:	b103      	cbz	r3, 800b922 <_read_r+0x1e>
 800b920:	6023      	str	r3, [r4, #0]
 800b922:	bd38      	pop	{r3, r4, r5, pc}
 800b924:	20000434 	.word	0x20000434

0800b928 <_init>:
 800b928:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800b92a:	bf00      	nop
 800b92c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800b92e:	bc08      	pop	{r3}
 800b930:	469e      	mov	lr, r3
 800b932:	4770      	bx	lr

0800b934 <_fini>:
 800b934:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800b936:	bf00      	nop
 800b938:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800b93a:	bc08      	pop	{r3}
 800b93c:	469e      	mov	lr, r3
 800b93e:	4770      	bx	lr
